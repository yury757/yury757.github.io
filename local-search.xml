<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/database/redis/redis/"/>
    <url>/database/redis/redis/</url>
    
    <content type="html"><![CDATA[<h2 id="一、ACL"><a href="#一、ACL" class="headerlink" title="一、ACL"></a>一、ACL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">ACL &lt;subcommand&gt; [&lt;arg&gt; [value] [opt] ...].     # access control list，访问控制列表，可以结合subcommand子命令形成很多命令组合，主要用于权限访问相关命令。<br><br>如：<br>acl cat [&lt;category&gt;]     # 列举category目录下的所有命令，若未指定category，则列举所有category<br>acl users                                 # 展示所有用户<br>acl whoami                                # 展示当前用户<br>acl deluser &lt;username&gt; [&lt;username&gt; ...]   # 删除用户<br>acl getuser &lt;username&gt;                    # 获取用户详细信息<br>acl list                                  # 以配置文件格式展示所有用户详情<br>acl setuser &lt;username&gt; &lt;attribute&gt; [&lt;attribute&gt; ...]  # 新增或者修改用户属性<br>acl genpass [&lt;bits&gt;]                      # 生成一个指定位长度（默认256位）的伪随机密码，注意这个长度是位的长度而不是生成的密码的长度<br>acl load                                  # 从ACL文件中重新加载用户配置文件<br>acl save                                  # 将当前配置保存在ACL文件中<br>acl log [&lt;count&gt; | RESET]                 # 展示acl日志入口<br>acl help                                  # 显示acl命令帮助<br></code></pre></td></tr></table></figure><blockquote><p> 1、修改用户权限</p></blockquote><p><code>acl setuser &lt;username&gt; &lt;attribute&gt; [&lt;attribute&gt; ...]</code></p><p>该命令的attribute叫ACL RULE，ACL RULE分为两部分，一部分是命令访问权限相关（<code>Command rules</code>），另一部分是定义了用户状态（<code>User management rules</code>）</p><p>完整的使用方式参考：<code>[ACL SETUSER | Redis](https://redis.io/commands/acl-setuser/)</code></p><p>命令规则主要有：</p><ul><li><p><code>~&lt;pattern&gt;</code>：控制用户只能访问符合pattern模式的key</p></li><li><p><code>allkeys</code>：可以访问所有key，等于<code>~*</code></p></li><li><p><code>&amp;&lt;pattern&gt;</code>：控制用户只能访问符合pattern模式的发布/订阅channel</p></li><li><p><code>allchannels</code>：可以访问所有channel，，等于<code>&amp;*</code></p></li><li><p><code>+&lt;command&gt;</code>：为用户添加一个命令访问权限，即可以访问这个命令</p></li><li><p><code>-&lt;command&gt;</code>：为用户减少一个命令访问权限，即无法访问这个命令</p></li><li><p><code>allcommands</code>：用户可以访问所有命令</p></li><li><p><code>nocommands</code>：移除用户所有命令的访问权限，啥都干不了了</p></li><li><p><code>+@&lt;category&gt;</code>：为用户添加一个目录的访问权限，该目录下的所有命令都可以访问</p></li><li><p><code>-@&lt;category&gt;</code>：为用户减少一个目录的访问权限，该目录下的所有命令都无法访问</p></li></ul><p>用户状态规则主要有：</p><ul><li><code>on</code>：将用户设置为有效</li><li><code>off</code>：将用户设置为无效用户</li><li><code>&gt;mypassword</code>：为用户新增一个密码，输入方式为可读的明文。redis允许为一个用户设置多个密码</li><li><code>#hashedpassword</code>：为用户新增一个密码，输入方式为hash加密后的密文</li><li><code>&lt;mypassword</code>：为用户减少一个密码</li><li><code>!hashedpassword</code>：为用户减少一个密码，输入方式为hash加密后的密文</li><li><code>reset</code>：重置为空用户，即设置为off, without passwords，无法执行任何命令，也无法访问任何key</li></ul><p>开放权限用+，收回权限用-，对应的权限为<code>acl cat [&lt;category&gt;]</code>列举出来的目录或者命令</p><h2 id="二、常用配置"><a href="#二、常用配置" class="headerlink" title="二、常用配置"></a>二、常用配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs conf">daemonize yes<br>pidfile /var/run/redis.pid<br>port 6379<br>bind *<br>protected-mode no<br>loglevel notice<br>logfile /disk4/redis-stack-server-6.2.4-v1/data1/redis.log<br>databases 16<br>save 900 1<br>save 300 10<br>save 60 10000<br>rdbcompression yes <br>dbfilename dump.rdb<br>dir /disk4/redis-stack-server-6.2.4-v1/data1/<br># slaveof &lt;masterip&gt; &lt;masterport&gt;<br># masterauth &lt;master-password&gt;<br>requirepass root<br>maxclients 128<br>appendonly yes<br>appendfilename appendonly.aof<br>appendfsync everysec<br></code></pre></td></tr></table></figure><h2 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 数据库相关命令</span><br>select &lt;index&gt;   # 切换数据库<br>dbsize           # 查看当前数据库的key的数量，O(1)时间复杂度<br>flushdb &lt;async|sync&gt;   # 清空当前库。默认参数是同步，6.2版本后，可以通过设置lazyfree-lazy-user-flush配置参数为yes，将该命令的默认参数调整为异步。异步清空时，只会删除执行命令的时间点之前的key，在那个时间点之后写入的key不受影响<br>flushall &lt;async|sync&gt;  # 清空所有库。参数同上。<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> key相关命令</span><br>keys &lt;pattern&gt;    # 按照glob pattren，列举所有满足条件的key。<br><span class="hljs-meta">#</span><span class="bash"> 注意如果数据量很大，这个速度会很慢，O(N)时间复杂度，生产环境要尤其小心使用</span><br><span class="hljs-meta">#</span><span class="bash"> 在应用程序中应尽量避免使用keys，如果需要搜索key，应该考虑使用scan或者sets</span><br>exists &lt;key...&gt; [&lt;key&gt;...]   # 判断key...是否存在，返回值是存在的key的数量<br>type &lt;key&gt;                   # 查看key对应的value的类型<br>del &lt;key...&gt; [&lt;key&gt;...]      # 直接删除一个key，阻塞删除<br>unlink &lt;key...&gt; [&lt;key&gt;...]   # 从keyspace删除一个key，然后会在另一个线程异步删除实际内存中的key，非阻塞删除<br>expire &lt;key&gt; &lt;second&gt;        # 给key设置过期时间，单位秒<br>ttl &lt;key&gt;                    # 查看key的剩余过期时间，返回-1表示永不过期，返回-2表示已经过期了<br></code></pre></td></tr></table></figure><h2 id="四、常用数据类型"><a href="#四、常用数据类型" class="headerlink" title="四、常用数据类型"></a>四、常用数据类型</h2><h3 id="1、String"><a href="#1、String" class="headerlink" title="1、String"></a>1、String</h3><p><strong>（1）数据结构</strong></p><p>String底层是安全的二进制形式，这样String可以包含所有类型的数据。</p><p>String使用的数据结构叫<strong>简单动态字符串</strong>，相当于java的<code>List&lt;Character&gt;</code>。</p><p>String最大512兆个字节，对于ascii字符，一个字符占用一个字节，512兆就是也可以代表长度，但是对于中文，一个unicode中文字符占用3个字节，因此若包含非ascii字符，则最大长度小于512兆。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">set &lt;key&gt; &lt;value&gt;<br>get &lt;key&gt;<br>append &lt;key&gt; &lt;value&gt;<br>strlen &lt;key&gt;<br>setnx &lt;key&gt; &lt;value&gt;       # 重要！！只有在key不存在时，才设置成功，否则设置失败。多用于分布式锁<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 数值型字符串操作</span><br>incr &lt;key&gt;                # 使数字值增加1<br>decr &lt;key&gt;                # 使数字值减小1<br>incrby &lt;key&gt; &lt;increment&gt;  # 使数字值增加increment<br>decrby &lt;key&gt; &lt;increment&gt;  # 使数字值减小increment<br><span class="hljs-meta">#</span><span class="bash"> 由于redis是单线程存取，没有并发问题，因此这些命令本身就是原子性操作。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 批量操作，可以批量设置key以及获取key</span><br>mset &lt;key&gt; &lt;value&gt; [&lt;key&gt; &lt;value&gt; ...]<br>mget &lt;key&gt; [&lt;key&gt; ...]                        # 返回结果按照get的顺序展示<br>msetnx &lt;key&gt; &lt;value&gt; [&lt;key&gt; &lt;value&gt; ...]      # 注意！！该命令是原子操作，只要有一个key存在则全部失败。<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> range操作</span><br>getrange &lt;key&gt; &lt;start&gt; &lt;end&gt;                  # 获取字符串中[start, end]区间内的字符<br>setrange &lt;key&gt; &lt;offset&gt; &lt;value&gt;               # 从offset下标开始设置value<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 带货期时间的<span class="hljs-built_in">set</span></span><br>setex &lt;key&gt; &lt;second&gt; &lt;value&gt;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> get原值并<span class="hljs-built_in">set</span>新值</span><br>getset &lt;key&gt; &lt;value&gt;       # set新值，并返回原先的值<br></code></pre></td></tr></table></figure><h3 id="2、List"><a href="#2、List" class="headerlink" title="2、List"></a>2、List</h3><p><strong>（1）数据结构</strong></p><p>redis的List列表是<strong>双向链表</strong>，底层数据结构用<strong>压缩列表+链表</strong>实现，表现形式相当于java的<code>LinkedList&lt;String&gt;</code>。</p><p>两边存取的时间复杂度为O(1)，随机访问的时间复杂度为O(N)。</p><p>当list中没有任何元素时，key也会被移除。</p><p>List常用于获取最新数据、或者最近信息的业务场景，比如获取最近10条短信，获取最新资讯等等。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取长度，时间复杂度O(1)。若key不存在则返回0，若key不是list，则报错</span><br>llen &lt;key&gt;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> l表示从左边按顺序操作，r表示从右边按顺序操作</span><br>lpush/rpush &lt;key&gt; &lt;element&gt; [&lt;element&gt;...]    # 将元素push到列表中<br>lrange/rrange &lt;key&gt; &lt;start&gt; &lt;stop&gt;            # 获取列表中[start, stop]区间内的元素，stop若为-1表示所有<br>lpop/rpop &lt;key&gt; [count]                       # 移除count（默认值1）个数量的元素并按顺序返回这些元素<br>blpop/brpop &lt;key&gt; [&lt;key&gt;...] &lt;timeout&gt;        # 阻塞式地取出一个元素，直到超时或者元素出现。当timeout为0时，永久等待<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> rpoplpush，当需要将一个list按顺序移动到另外一个list上时，可以循环这么操作</span><br>rpoplpush &lt;source&gt; &lt;destination&gt;              # 对source执行rpop，并将取出来的元素对destination执行lpush<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 这里的l代表list，而不是left</span><br>lindex &lt;key&gt; &lt;index&gt;                          # 从左边根据下标index获取对应元素<br>lset &lt;key&gt; &lt;index&gt; &lt;value&gt;                    # 从左边将下标为index的元素替换成value<br>lrem &lt;key&gt; &lt;count&gt; &lt;element&gt;                  # 从左边移除count个element元素<br>ltrim &lt;key&gt; &lt;start&gt; &lt;stop&gt;                    # 从左到右，只保留[start, stop]区间内的元素<br>linsert &lt;key&gt; &lt;before/after&gt; &lt;pivot&gt; &lt;element&gt; # 从左边在扫描到的第一个pivot元素前面或后面插入element元素<br></code></pre></td></tr></table></figure><h3 id="3、Set"><a href="#3、Set" class="headerlink" title="3、Set"></a>3、Set</h3><p><strong>（1）数据结构</strong></p><p>redis的Set就是一个哈希表，底层数据结构叫<strong>字典</strong>，相当于java的<code>HashSet&lt;String&gt;</code>。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">sadd &lt;key&gt; &lt;member&gt; [&lt;member&gt;...]<br>smembers &lt;key&gt;                          # 获取set中的所有元素，返回顺序可能不是插入顺序<br>sismember &lt;key&gt; &lt;member&gt;                # 判断member是否存在于集合中<br>scard &lt;key&gt;                             # 获取集合中元素数量<br>srem &lt;key&gt; &lt;member&gt;  [&lt;member&gt;...]      # 删除指定元素<br><br>spop &lt;key&gt; [count]                      # 随机删除count个元素，并返回这些元素<br>srandmember &lt;key&gt; [count]               # 随机取出count个元素<br><br>smove &lt;key&gt; &lt;source&gt; &lt;destination&gt; &lt;member&gt; # 将元素member从source移动到destination集合中<br><br>sinter &lt;key&gt; [&lt;key&gt;...]                 # 取所有集合的交集，若只给定一个参数，则返回所有元素<br>sunion &lt;key&gt; [&lt;key&gt;...]                 # 取所有集合的并集，若只给定一个参数，则返回所有元素<br>sdiff &lt;key1&gt; [&lt;keyn&gt;...]                # 取key1中不存在于keyn里面的元素，若只给定一个参数，则返回所有元素<br></code></pre></td></tr></table></figure><h3 id="4、Hash"><a href="#4、Hash" class="headerlink" title="4、Hash"></a>4、Hash</h3><p><strong>（1）数据结构</strong></p><p>redis的Hash是一个哈希表，即value本身又是一个哈希表，相当于Java的<code>HashMap&lt;String, String&gt;</code>。数据结构为<strong>压缩列表</strong>和<strong>哈希表</strong>两种，当数量小时用压缩列表，当数量大时用哈希表。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">hset &lt;key&gt; &lt;field&gt; &lt;value&gt; [&lt;field&gt; &lt;value&gt;...]      # 等于hmset，hmset已经被弃用<br>hget &lt;key&gt; &lt;field&gt; [&lt;field&gt;...]                      # 等于hmget，hmget已经被弃用<br>hexists<br>hkeys<br>hvals<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重要操作</span><br>hincrby &lt;key&gt; &lt;field&gt; &lt;increment&gt;             # 给field增加increment<br>hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;                  # 只有field不存在时才set成功，否则set失败<br></code></pre></td></tr></table></figure><h3 id="5、Zset"><a href="#5、Zset" class="headerlink" title="5、Zset"></a>5、Zset</h3><p><strong>（1）数据结构</strong></p><p>Zset是指有序集合，即按照一定评分（score）排序后的Set，即Sorted Set。使用的数据结构是<strong>哈希表结合跳跃表</strong>，在哈希表中，field是对应的member，而value是对应的score，然后在此基础上建立一层跳跃表。</p><p>Zset常用于需要排序的业务场景，如获取热度前十的新闻等。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">zadd &lt;key&gt; &lt;score&gt; &lt;member&gt; [&lt;score&gt; &lt;member&gt;...]<br>zrange &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores]           # 获取排序在[min, max]区间内的元素<br>zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores]    # 获取score在[min, max]区间内的元素<br>zount &lt;key&gt; &lt;min&gt; &lt;max&gt;                         # 统计score在[min, max]区间内的元素数量<br>zrank &lt;key&gt; &lt;member&gt;                            # 获取member的排名，若score相同，则按照写入顺序获取排名<br><br>zrevrange &lt;key&gt; &lt;start&gt; &lt;stop&gt;                  # 反向，从大到小获取排序在[start, stop]区间内的元素<br>zrevrangebyscore &lt;key&gt; &lt;max&gt; &lt;min&gt; [withscores] # 反向，从大到小获取score在[min, max]区间内的元素<br><br>zincrby &lt;key&gt; &lt;increment&gt; &lt;member&gt;              # 给member的score加上increment，自动重新排序<br>zrem &lt;key&gt; &lt;member&gt; [&lt;member&gt;...]               # 删除member<br></code></pre></td></tr></table></figure><h3 id="6、Bitmaps"><a href="#6、Bitmaps" class="headerlink" title="6、Bitmaps"></a>6、Bitmaps</h3><p><strong>（1）数据结构</strong></p><p>Bitmaps位图，即只有0和1的一个数组，类似于java的<code>boolean[]</code>。c++的select底层就使用了bitmaps作为socket的存储结构。redis的bitmaps通过一个<strong>数字型字符串的位操作</strong>来实现，通过偏移量（偏移量从1开始）表示元素的位置。</p><p>之前说过String的最大大小为512MB，因此这里存储位时最多可以存储512MB*8个位。</p><p>bitmaps适用于只需要<strong>是/否</strong>两种值的业务场景，如用户是否是活跃用户，用户是否拥有某个功能的权限等。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">setbit &lt;key&gt; &lt;offset&gt; &lt;value&gt;<br>getbit &lt;key&gt; &lt;offset&gt;<br>bitcount &lt;key&gt; [&lt;start&gt; &lt;end&gt; &lt;bit/byte&gt;]      # 按位或按字节统计为1的位的数量<br><br>bitop &lt;operation&gt; &lt;destkey&gt; &lt;srckey&gt; [&lt;srckey&gt;...] # 按位操作，将结果写入destkey，因此这个destkey最好是不存在的新key<br><span class="hljs-meta">#</span><span class="bash"> 位操作：and按位与，or按位或，xor按位异或，not按位取反</span><br><span class="hljs-meta">#</span><span class="bash"> 其中当使用not时，srckey只能用一个</span><br></code></pre></td></tr></table></figure><h3 id="7、HyperLogLog"><a href="#7、HyperLogLog" class="headerlink" title="7、HyperLogLog"></a>7、HyperLogLog</h3><p><strong>（1）数据结构</strong></p><p>HyperLogLog是用于基数计数的一种数据类型。基数计数是指统计集合中不重复元素的数量。</p><p>HyperLogLog数据类型使用**HyperLogLog Counting(HLL)**实现，只做基数计算，不会保存元数据。采用稀疏矩阵存储，空间占用很小，仅仅在计数基数个数慢慢变大，稀疏矩阵占用空间渐渐超过了阈值时才会一次性转变成稠密矩阵，转变成稠密矩阵之后最高占用12K的内存空间。即每个HyperLogLog的key最高占用12K。</p><p>两个缺点：使用概率算法计算，存在标准误差；不保存原始数据，对需要使用原始数据的场景不友好。</p><p><strong>（2）命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pfadd &lt;key&gt; &lt;element&gt; [&lt;element&gt;...]<br>pfcount &lt;key&gt; [&lt;key&gt;...]                  # 统计基数计数<br>pfmerge &lt;destkey&gt; &lt;srckey&gt; [&lt;srckey&gt;...]  # 将srckey全部合并到新的destkey中<br></code></pre></td></tr></table></figure><h3 id="8、Geospecial-indexes"><a href="#8、Geospecial-indexes" class="headerlink" title="8、Geospecial indexes"></a>8、Geospecial indexes</h3><p><strong>（1）数据结构</strong></p><p>Geospecial是基于地理位置索引的一种数据类型。</p><p><strong>（2）命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">geoadd &lt;key&gt; &lt;longitude&gt; &lt;latitude&gt; &lt;member&gt;   # 添加一个元素的地理位置<br>geopos &lt;key&gt; &lt;member&gt;                          # 获取某个元素的地理位置<br>geodist &lt;key&gt; &lt;member1&gt; &lt;member2&gt; [m|km|ft|mi] # 获取两个元素之间地理位置的直线距离，后面那个参数表示单位，默认是米<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以longitude、latitude为中心，radius为半径，找出这个范围内的元素，并做一些其他统计操作</span><br>georadius &lt;key&gt; &lt;longitude&gt; &lt;latitude&gt; radius m|km|ft|mi [withcrood] [withdist] [withhash] [count count [any]] [asc|desc] [store key] [storedist key]<br></code></pre></td></tr></table></figure><h2 id="五、发布订阅"><a href="#五、发布订阅" class="headerlink" title="五、发布订阅"></a>五、发布订阅</h2><p>redis支持发布订阅（publish/subscribe）的消息通信模式。</p><p>类似于不支持历史消息、不能持久化的kafka，就像收音机，从打开的那一时刻开始接收后面的消息，前面的历史消息没有了。</p><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 发布者</span><br>publish &lt;channel&gt; &lt;message&gt;          # 向一个频道发布消息<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 订阅者</span><br>subscribe &lt;channel&gt; [&lt;channel&gt;...]   # 打开某个频道，接收后续消息<br></code></pre></td></tr></table></figure><h2 id="六、持久化"><a href="#六、持久化" class="headerlink" title="六、持久化"></a>六、持久化</h2><h3 id="1、RDB"><a href="#1、RDB" class="headerlink" title="1、RDB"></a>1、RDB</h3><p>RDB（Redis Database），在指定时间间隔将数据集快照存储到硬盘中，类似于MySQL的dump all操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">save              # 立即阻塞式执行持久化，会阻塞其他客户端的操作，不建议使用<br>bgsave            # 立即在后台执行持久化，生成子进程执行持久化最后向父进程返回消息<br></code></pre></td></tr></table></figure><p>触发后台进行持久化的redis.conf配置参数，若以下save配置被注释则不会自动持久化，只要有任意配置生效就会按规则自动持久化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">save 900 1       # 900秒（15分钟）内至少1个key值改变，则进行持久化<br>save 300 10      # 300秒（5分钟）内至少10个key值改变，则进行持久化<br>save 60 10000    # 60秒（1分钟）内至少10000个key值改变，则进行持久化<br><br>stop-writes-on-bgsave-error yes    # 后台持久化发生异常时则会拒绝执行写命令，这样做是为了让用户感知到这里发生了异常<br>rdbcompression yes                 # rdb文件是否进行压缩<br>rdbchecksum yes                    # 从第5个版本开始，rdb文件末尾放了一个CRC64的校验码，用于校验数据文件的完整性<br>dbfilename dump.rdb                # 备份的文件名，当redis启动时，会自动加载这个备份数据文件并加载到内存中。<br></code></pre></td></tr></table></figure><p>优点：</p><p>1、适合大规模的数据恢复。</p><p>2、如果业务对数据完整性和一致性要求不高，RDB是很好的选择。</p><p>缺点：</p><p>1、数据的完整性和一致性不高，因为RDB可能在最后一次备份时宕机了。</p><p>2、备份时占用内存，因为Redis 在备份时会独立创建一个子进程，将数据写入到一个临时文件（此时内存中的数据是原来的两倍哦），最后再将临时文件替换之前的备份文件。</p><h3 id="2、AOF"><a href="#2、AOF" class="headerlink" title="2、AOF"></a>2、AOF</h3><p>AOF（Append Only File），记录所有服务器接收到的写操作，并在服务器重新启动时重放这些操作，以重新构建数据集，类似于MySQL的binlog日志。</p><p>redis默认不开启AOF，需要手动开启。AOF相关配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">appendonly yes                     # 设置为yes开发AOF<br>appendfilename &quot;appendonly.aof&quot;    # aof日志文件名，redis启动时会自动加载该文件中的操作日志并在服务器中重放，生成数据。<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> appendfsync always        <span class="hljs-comment"># 记录时机，always表示每次写操作执行后都持久化，会损耗性能</span></span><br>appendfsync everysec        # everysec表示每秒进行一次持久化操作<br><span class="hljs-meta">#</span><span class="bash"> appendfsync no            <span class="hljs-comment"># no又操作系统决定什么时候进行持久化</span></span><br>                            # 使用everysec或always时，redis会启动一个子进程在后台进行磁盘IO操作。<br><br>no-appendfsync-on-rewrite no    # 自动重写aof文件机制。当aof文件增长一定大小的百分比时，就会调用BGREWRITEAOF重写日志文件<br>auto-aof-rewrite-percentage 100 # 需要达到的增长百分比<br>auto-aof-rewrite-min-size 64mb  # 增长百分比的基数<br></code></pre></td></tr></table></figure><h3 id="3、比较和建议"><a href="#3、比较和建议" class="headerlink" title="3、比较和建议"></a>3、比较和建议</h3><p>1、RDB适合用于冷备份，即每周、每月定时执行一次全量备份这种，可以不开启；而AOF类似于MySQL的binlog，最好开启并设置持久化时机为everysec，既能保证性能又可以保证较高的数据一致性，最多丢失1秒内的数据。</p><p>2、当dump.rdb文件和appendonly.aof文件同时存在时，redis启动时会加载aof文件</p><h2 id="七、java编程"><a href="#七、java编程" class="headerlink" title="七、java编程"></a>七、java编程</h2><h3 id="1、jedis"><a href="#1、jedis" class="headerlink" title="1、jedis"></a>1、jedis</h3><p>jedis基本是完全模拟redis-cli的命令实现的java端的redis客户端。其方法和redis-cli命令基本一致。jedis的使用略。</p><p>注意点：</p><p>1、jedis客户端是线程不安全的，意味着如果有多个线程通过同一个jedis客户端访问时，会出现socket和IO流方面的异常。因为在jedis底层一个jedis对象代表一个socket和一个IO流，多个线程使用同一个jedis代表多个线程使用同一个socket和同一个IO流，肯定会出现异常。因此应该使用<code>JedisPool</code>或<code>lettuce</code>。</p><h3 id="2、spring-data-redis"><a href="#2、spring-data-redis" class="headerlink" title="2、spring-data-redis"></a>2、spring-data-redis</h3><h4 id="（1）配置"><a href="#（1）配置" class="headerlink" title="（1）配置"></a>（1）配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- springboot --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- springboot redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- springboot集成redis pool需要这个依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.141.141</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.redis.database</span>=<span class="hljs-string">0</span><br><span class="hljs-meta">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">10</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">100ms</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-meta">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure><h4 id="（2）简单使用"><a href="#（2）简单使用" class="headerlink" title="（2）简单使用"></a>（2）简单使用</h4><p>redisTemplate对redis的几种数据类型分别封装了几种操作类型，如下：</p><table><thead><tr><th>redisTemplate方法</th><th>redis类型</th></tr></thead><tbody><tr><td>opsForValue</td><td>String</td></tr><tr><td>opsForHash</td><td>Hash</td></tr><tr><td>opsForCluster</td><td>对集群的操作</td></tr><tr><td>opsForList</td><td>List</td></tr><tr><td>opsForSet</td><td>Set</td></tr><tr><td>opsForGeo</td><td>Geo地理位置数据类型</td></tr><tr><td>opsForHyperLogLog</td><td>HyperLogLog</td></tr><tr><td>opsForStream</td><td>对流进行操作</td></tr><tr><td>opsForZSet</td><td>ZSet</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo4SpringBoot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CommandLineRunner</span> </span>&#123;<br><br>    <span class="hljs-meta">@Qualifier(&quot;redisTemplate&quot;)</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate template;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Demo4SpringBoot.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        template.opsForValue().set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>        String v1 = (String)template.opsForValue().get(<span class="hljs-string">&quot;k1&quot;</span>);<br>        System.out.println(v1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）序列化"><a href="#（3）序列化" class="headerlink" title="（3）序列化"></a>（3）序列化</h4><p>redisTemplate需要四个序列化器：</p><ul><li>keySerializer</li><li>valueSerializer</li><li>hashKeySerializer</li><li>hashValueSerializer</li></ul><p>若我们没指定序列化方式时，redisTemplate的四个序列化器都会使用默认的<code>JdkSerializationRedisSerializer</code>来进行序列化。</p><p><code>JdkSerializationRedisSerializer</code>的作用是将java对象序列化为二进制字节，基本无法在业务中使用，因此建议使用<code>StringRedisSerializer</code>，将所有key和value都手动序列化成string，然后由<code>StringRedisTemplate</code>写入redis。读取时，从redis读取到的所有value都是string，然后手动反序列化成自己想要的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo4SpringBoot2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CommandLineRunner</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource(name=&quot;stringRedisTemplate&quot;)</span><br>    <span class="hljs-keyword">private</span> RedisTemplate template;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Demo4SpringBoot.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>        <span class="hljs-keyword">int</span> v = <span class="hljs-number">12</span>;<br>        template.opsForValue().set(<span class="hljs-string">&quot;k1&quot;</span>, String.valueOf(v));<br>        String v1 = (String)template.opsForValue().get(<span class="hljs-string">&quot;k1&quot;</span>);<br>        System.out.println(v1);<br><br>        template.opsForValue().set(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>        String v2 = (String)template.opsForValue().get(<span class="hljs-string">&quot;k2&quot;</span>);<br>        System.out.println(v2);<br><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">20L</span>);<br>        template.opsForValue().set(<span class="hljs-string">&quot;k3&quot;</span>, mapper.writeValueAsString(user));<br>        String v3 = (String)template.opsForValue().get(<span class="hljs-string">&quot;k3&quot;</span>);<br>        User user2 = mapper.readValue(v3, User.class);<br>        System.out.println(user2);<br><br>        template.opsForHash().put(<span class="hljs-string">&quot;k4&quot;</span>, <span class="hljs-string">&quot;f1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>        template.opsForHash().put(<span class="hljs-string">&quot;k4&quot;</span>, <span class="hljs-string">&quot;f2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>        template.opsForHash().put(<span class="hljs-string">&quot;k4&quot;</span>, <span class="hljs-string">&quot;f3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>        Map&lt;Object, Object&gt; k4 = template.opsForHash().&lt;String, String&gt;entries(<span class="hljs-string">&quot;k4&quot;</span>);<br>        System.out.println(k4);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）lettuce"><a href="#（4）lettuce" class="headerlink" title="（4）lettuce"></a>（4）lettuce</h4><p>spring-data-redis 实际上是对 lettuce 的封装。lettuce 是一个高性能的 redis 客户端，通过 netty 实现同步和异步 api，通过 io.projectreactive 实现事件驱动的 api。此外 lettuce 的 connection 是线程安全的、可以自动重连的，因此大部分场景下只需要一个连接都可以实现大多数业务。</p><p>lettuce 使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.lettuce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lettuce-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 lettuce connection</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> StatefulRedisConnection&lt;String, String&gt; <span class="hljs-title">redisConnection</span><span class="hljs-params">()</span> </span>&#123;<br>    RedisURI redisURI = RedisURI.Builder.redis(redisHost, redisPort).withPassword(redisPassword).withDatabase(<span class="hljs-number">0</span>).build();<br>    RedisClient redisClient = RedisClient.create(redisURI);<br>    <span class="hljs-keyword">return</span> redisClient.connect();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLettuceConnection</span><span class="hljs-params">()</span></span>&#123;<br>    String ping = lettuceConnection.sync().ping();<br>    RedisFuture&lt;String&gt; ping1 = lettuceConnection.async().ping();<br>    Mono&lt;String&gt; ping2 = lettuceConnection.reactive().ping();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>lettuce 的 pipeline 的 flush 机制有坑，性能也不如 jedis 的 pipeline，因此在大批量读写 redis 的场景时，最好还是使用jedis pipeline</li><li>lettuce 6 版本不兼容 redis server 5 版本，要么使用和服务端相同版本的客户端连接，要么在使用 lettuce 6 连接 redis 5 时，设置<code>redisClient.setOptions(ClientOptions.builder().protocolVersion(ProtocolVersion.RESP2).build();</code></li></ul><h3 id="3、最佳实践"><a href="#3、最佳实践" class="headerlink" title="3、最佳实践"></a>3、最佳实践</h3><p>高并发场景使用 lettuce，低并发且大批量读写 redis 场景，使用 jedis pipeline。</p><h2 id="八、并发"><a href="#八、并发" class="headerlink" title="八、并发"></a>八、并发</h2><h3 id="1、事务介绍"><a href="#1、事务介绍" class="headerlink" title="1、事务介绍"></a>1、事务介绍</h3><p>redis的事务是一个单独的隔离操作：事务中的所有命令都会被序列化，按顺序地执行，在执行过程中不会被其他命令打断。主要用处是将多个命令串联在一起，防止被别的命令插队修改数据导致无法实现预期的操作。</p><p>类似于将多个命令按顺序打包成一个命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> redis-cli命令如下</span><br>multi      # 开启事务，相当于begin，开启后该客户端发送给服务器的命令会按顺序被打包起来，并不直接执行<br>exec       # 执行事务，先当与commit，将打包的命令依次执行，执行期间其他任何命令都会被阻塞<br>discard    # 抛弃事务，相当于rollback，主动抛弃所有打包的命令<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java代码如下</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        Jedis jedis = getJedis();<br>        Transaction multi = jedis.multi();<br>        <span class="hljs-keyword">try</span> &#123;<br>            multi.set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>            <span class="hljs-comment">// int a = 1 / 0;</span><br>            multi.set(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;all command queued&quot;</span>);<br>            multi.setnx(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;execute queued command&quot;</span>);<br>            List&lt;Object&gt; results = multi.exec();<br>            System.out.println(results);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            ex.printStackTrace();<br>            <span class="hljs-keyword">try</span> &#123;<br>                multi.discard();<br>            &#125;<span class="hljs-keyword">catch</span> (Exception ignored) &#123; &#125;<br>            System.out.println(<span class="hljs-string">&quot;all command discarded&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>出现异常时的几种情况：</p><p>1、multi后打包命令时出现异常（相当于编译时异常）：multi会自动结束，相当于手动调用了discard命令</p><p>2、exec执行中某个命令异常（相当于运行时异常）：<strong>出现异常的命令返回对应的异常值，不影响其他命令的执行</strong>。这一点和关系型数据库的事务差别很大，如在postgres中，在默认事务隔离级别下，事务在执行过程中若出现异常，后续语句都会被忽略，整个事务会自动回滚。</p><p>和关系型数据库的差异：</p><p>1、单独的隔离操作，所有命令依次执行，中间不会被别人打断。而关系型数据库的事务可以穿插执行，只是不同sql的锁机制不一样。</p><p>2、没有隔离级别的概念，redis事务执行exec之前不会实际执行，只有exec后才会真正执行。</p><p>3、不保证原子性，若一条命令运行失败，不影响其他被打包的命令。而关系型是数据库的事务是保证原子性的，要么全部成功，要么全部失败。</p><h3 id="2、并发冲突"><a href="#2、并发冲突" class="headerlink" title="2、并发冲突"></a>2、并发冲突</h3><p>redis中有一个key为10000元，一共有10000个消费线程，每个线程判断金额是否大于等于10元，若满足则消费10元，否则不消费。</p><p>如下，预期最后redis的key应该为0，但是若没有任何对redis进行加锁的机制，则这个程序运行的结果大概率是小于0的（也称“<strong>超卖问题</strong>”）。</p><p>解决方案：乐观锁或lua脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConsumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            Jedis jedis = getJedis();<br>            String a = jedis.get(<span class="hljs-string">&quot;a&quot;</span>);<br>            Integer v = Integer.valueOf(a);<br>            <span class="hljs-keyword">if</span> (v &gt;= <span class="hljs-number">10</span>) &#123;<br>                jedis.decrBy(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10L</span>);<br>            &#125;<br>            jedis.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> MyConsumer()).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、连接超时"><a href="#3、连接超时" class="headerlink" title="3、连接超时"></a>3、连接超时</h3><p>在高并发情况下，连接redis的客户端很多，但是redis有一个max_client，超过该数量时新客户端会进入等待状态，若等待超过一定时间就会超时。</p><p>解决方案：使用连接池。</p><h3 id="4、乐观锁和悲观锁"><a href="#4、乐观锁和悲观锁" class="headerlink" title="4、乐观锁和悲观锁"></a>4、乐观锁和悲观锁</h3><p>乐观锁是指：读加共享锁，对写进行CAS写。</p><p>悲观锁是指：读写都加排他锁，每次对这个key进行操作的只可能有一个客户端。</p><p>redis无法实现悲观锁，只能实现乐观锁，乐观锁是通过watch + multi组合实现的。</p><p><strong>乐观锁的实现</strong></p><p>watch命令：可以监控某些key，当事务在这些key上进行写操作时，若该key被其他命令修改，则该事务会被打断，事务执行exec时返回null或异常。</p><p>unwatch命令：取消对某些key的监控。</p><p>原理：watch命令会获取key的版本号，事务中对key进行的操作会对比watch时的版本号和现在的版本号，若不一样则事务会被打断。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">watch a<br>multi<br>decrby a 10<br>exec<br></code></pre></td></tr></table></figure><h3 id="5、秒杀案例实现"><a href="#5、秒杀案例实现" class="headerlink" title="5、秒杀案例实现"></a>5、秒杀案例实现</h3><h4 id="（1）通过乐观锁实现秒杀"><a href="#（1）通过乐观锁实现秒杀" class="headerlink" title="（1）通过乐观锁实现秒杀"></a>（1）通过乐观锁实现秒杀</h4><p>案例介绍：模拟2000个用户抢购1000个商品。java代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Transaction;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商品秒杀案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo6SecKill</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String redisHost = <span class="hljs-string">&quot;192.168.141.141&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> redisPort = <span class="hljs-number">6379</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String passWord = <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> JedisPool pool;<br>    <span class="hljs-keyword">static</span>&#123;<br>        JedisPoolConfig config = <span class="hljs-keyword">new</span> JedisPoolConfig();<br>        config.setMaxTotal(<span class="hljs-number">200</span>);                      <span class="hljs-comment">// 最大连接数量</span><br>        config.setBlockWhenExhausted(<span class="hljs-keyword">true</span>);           <span class="hljs-comment">// 当连接池没有连接可用时，是否等待</span><br>        config.setMaxWait(Duration.ofSeconds(<span class="hljs-number">10</span>));    <span class="hljs-comment">// 从连接池中获取连接时等待时间</span><br>        config.setMaxIdle(<span class="hljs-number">32</span>);                        <span class="hljs-comment">// 连接池中的连接最大空闲数量</span><br>        config.setTestOnBorrow(<span class="hljs-keyword">true</span>);                 <span class="hljs-comment">// 从连接池中获取连接时测试连接是否有效</span><br>        pool = <span class="hljs-keyword">new</span> JedisPool(<span class="hljs-keyword">new</span> JedisPoolConfig(), redisHost, redisPort, <span class="hljs-number">60000</span>, passWord);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> time1 = System.currentTimeMillis();<br>        doSecKill();<br>        System.out.println((System.currentTimeMillis() - time1) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSecKill</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 模拟2000个人来进行秒杀</span><br>        List&lt;Thread&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2000</span>; i++) &#123;<br>            list.add(<span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> SecKillThread(<span class="hljs-string">&quot;user&quot;</span> + i)));<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Thread thread : list) &#123;<br>            thread.start();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecKillThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SecKillThread</span><span class="hljs-params">(String userID)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.userID = userID;<br>        &#125;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String userID;    <span class="hljs-comment">// 用户id</span><br><br>        <span class="hljs-comment">// 执行秒杀的动作</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">final</span> Jedis jedis = pool.getResource();<br><br>            <span class="hljs-comment">// 1、监控库存</span><br>            jedis.watch(<span class="hljs-string">&quot;a&quot;</span>);<br><br>            <span class="hljs-comment">// 2、判断库存是否为null或小于等于0</span><br>            String total = jedis.get(<span class="hljs-string">&quot;a&quot;</span>);<br>            <span class="hljs-keyword">if</span> (total == <span class="hljs-keyword">null</span> || Integer.parseInt(total) &lt;= <span class="hljs-number">0</span>) &#123;<br>                pool.returnResource(jedis);<br>                System.out.println(userID + <span class="hljs-string">&quot; 秒杀已结束&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 3、判断用户是否重复秒杀，每个用户只能秒杀一次</span><br>            <span class="hljs-keyword">if</span> (jedis.sismember(<span class="hljs-string">&quot;exists&quot;</span>, userID)) &#123;<br>                pool.returnResource(jedis);<br>                System.out.println(userID + <span class="hljs-string">&quot; 已经秒杀过一次了，不能秒杀第二次了&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 4、秒杀过程</span><br>            Transaction multi = jedis.multi();<br>            multi.decrBy(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>            multi.sadd(<span class="hljs-string">&quot;exists&quot;</span>, userID);<br>            List&lt;Object&gt; results = multi.exec();<br>            <span class="hljs-keyword">if</span> (results == <span class="hljs-keyword">null</span> || results.size() == <span class="hljs-number">0</span>) &#123;<br>                pool.returnResource(jedis);<br>                System.out.println(userID + <span class="hljs-string">&quot; 秒杀失败&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀成功&quot;</span>);<br>            pool.returnResource(jedis);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>存在的问题：<strong>库存遗留问题</strong>。即一些用户第一次因为并发问题抢购失败，但是方法直接return了，当因为并发问题抢购失败的用户 &gt; 总商品数量 - 抢购成功的用户时，可能会存在部分商品没有卖掉的情况。</p><p>一种解决方案是，在外层套一个while循环，当没有抢购成功时，进行重试，代码如下。这种性能很差，不建议使用。</p><p>另一种解决方案就是使用lua脚本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecKillThread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SecKillThread2</span><span class="hljs-params">(String userID)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userID = userID;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String userID;    <span class="hljs-comment">// 用户id</span><br><br>    <span class="hljs-comment">// 执行秒杀的动作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">final</span> Jedis jedis = pool.getResource();<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 1、监控库存</span><br>            jedis.watch(<span class="hljs-string">&quot;a&quot;</span>);<br><br>            <span class="hljs-comment">// 2、判断库存是否为null或小于等于0</span><br>            String total = jedis.get(<span class="hljs-string">&quot;a&quot;</span>);<br>            <span class="hljs-keyword">if</span> (total == <span class="hljs-keyword">null</span> || Integer.parseInt(total) &lt;= <span class="hljs-number">0</span>) &#123;<br>                System.out.println(userID + <span class="hljs-string">&quot; 秒杀已结束&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 3、判断用户是否重复秒杀，每个用户只能秒杀一次</span><br>            <span class="hljs-keyword">if</span> (jedis.sismember(<span class="hljs-string">&quot;exists&quot;</span>, userID)) &#123;<br>                System.out.println(userID + <span class="hljs-string">&quot; 已经秒杀过一次了，不能秒杀第二次了&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 4、秒杀过程</span><br>            Transaction multi = jedis.multi();<br>            multi.decrBy(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>            multi.sadd(<span class="hljs-string">&quot;exists&quot;</span>, userID);<br>            List&lt;Object&gt; results = multi.exec();<br>            <span class="hljs-keyword">if</span> (results == <span class="hljs-keyword">null</span> || results.size() == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(userID + <span class="hljs-string">&quot; 秒杀失败，进行第&quot;</span> + ++n + <span class="hljs-string">&quot;次重试&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀成功&quot;</span>);<br>            pool.returnResource(jedis);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）通过lua脚本实现秒杀"><a href="#（2）通过lua脚本实现秒杀" class="headerlink" title="（2）通过lua脚本实现秒杀"></a>（2）通过lua脚本实现秒杀</h4><p>lua脚本其实就是另外一种事务的实现，lua脚本内的命令都是一组打包好的命令。</p><p>通过lua脚本实现秒杀代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecKillThread3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String secKillScripts = <span class="hljs-string">&quot;local function secKill(userID)\n&quot;</span> +<br>            <span class="hljs-string">&quot;    local exists = redis.call(\&quot;sismember\&quot;, \&quot;exists\&quot;, userID);\n&quot;</span> +<br>            <span class="hljs-string">&quot;    if tonumber(exists) == 1 then return 3 end;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    local current = redis.call(\&quot;get\&quot;, \&quot;a\&quot;);\n&quot;</span> +<br>            <span class="hljs-string">&quot;    if current == nil then return 2 end;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    if tonumber(current) &lt;= 0 then return 0 end;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    redis.call(\&quot;decr\&quot;, \&quot;a\&quot;);\n&quot;</span> +<br>            <span class="hljs-string">&quot;    redis.call(\&quot;sadd\&quot;, \&quot;exists\&quot;, userID);\n&quot;</span> +<br>            <span class="hljs-string">&quot;    return 1;\n&quot;</span> +<br>            <span class="hljs-string">&quot;end\n&quot;</span> +<br>            <span class="hljs-string">&quot;return secKill(KEYS[1]);&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SecKillThread3</span><span class="hljs-params">(String userID)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userID = userID;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String userID;    <span class="hljs-comment">// 用户id</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jedis jedis = pool.getResource();<br><br>        String sha1 = jedis.scriptLoad(secKillScripts);<br>        Object r = jedis.evalsha(sha1, <span class="hljs-number">1</span>, userID);<br>        String result = String.valueOf(r);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;0&quot;</span>.equals(result)) &#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀失败&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(result)) &#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;2&quot;</span>.equals(result)) &#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀已结束&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;3&quot;</span>.equals(result))&#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 已经秒杀过一次了，不能秒杀第二次&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀返回值异常&quot;</span>);<br>        &#125;<br>        pool.returnResource(jedis);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="九、缓存相关问题"><a href="#九、缓存相关问题" class="headerlink" title="九、缓存相关问题"></a>九、缓存相关问题</h2><h3 id="1、缓存穿透"><a href="#1、缓存穿透" class="headerlink" title="1、缓存穿透"></a>1、缓存穿透</h3><p>用户恶意访问一个不存在的key，redis中不存在，数据库也不存在，因此每次查询都会将请求穿透到数据库层，对数据库造成压力。</p><p>解决方案：</p><ul><li>为不存在的key也在redis中缓存一个null value，并设置TTL，表示不存在该key，防止请求穿透到数据库</li><li>在访问数据之前加一层布隆过滤器。我们将数据库key按照一定的hash算法计算对应的byte放入布隆过滤器中，这样布隆过滤器可以快速判断该key是否存在，当存在则放行，当不存在则拒绝请求。</li></ul><p>布隆过滤器是基于概率的判断，当它认为这个key存在时，其实是大概率存在，而不是一定存在，当它认为这个key不存在时，则一定不存在。</p><h3 id="2、缓存雪崩"><a href="#2、缓存雪崩" class="headerlink" title="2、缓存雪崩"></a>2、缓存雪崩</h3><p>redis服务在同一段时间大量key同时失效，或者redis宕机，导致所有请求都打到数据库层，对数据库造成压力。</p><p>解决方案：</p><ul><li>对不同的key的失效时间加一个随机值，让这些key在一段时间内慢慢失效，而不是同时失效。</li><li>使用redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多层缓存</li></ul><h3 id="3、缓存击穿"><a href="#3、缓存击穿" class="headerlink" title="3、缓存击穿"></a>3、缓存击穿</h3><p>客户端在访问一个热点key时，该key突然失效，导致这些处理线程都去数据库获取数据重建缓存，从而对数据库造成压力。</p><p>解决方案：</p><ul><li>互斥锁，即对重建缓存这个过程进行加锁，只能有一个线程来执行这个操作，其他线程必须等待那个线程完成。</li></ul><p>互斥锁工作流程：</p><ul><li>0ms，线程1，查询redis未命中，获取互斥锁成功</li><li>0ms，线程2，查询redis未命中，获取互斥锁失败，等待50ms</li><li>0ms，线程1，查询数据库，重建缓存。</li><li>50ms，线程2，等待结束，重试查询redis，仍然未命中，获取互斥锁依然失败，等待50ms</li><li>100ms，线程2，等待结束，重试查询redis，仍然未命中，获取互斥锁依然失败，等待50ms</li><li>150ms，线程2，等待结束，重试查询redis，仍然未命中，获取互斥锁依然失败，等待50ms</li><li>200ms，线程1，重建redis缓存成功，返回数据。耗时200ms</li><li>200ms，线程2，等待结束，重试查询redis，命中缓存，返回数据。</li></ul><p>互斥锁实现：使用setnx实现。</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java-文件IO常用操作对比</title>
    <link href="/java/java-%E6%96%87%E4%BB%B6IO%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%AF%B9%E6%AF%94/"/>
    <url>/java/java-%E6%96%87%E4%BB%B6IO%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>文件IO中，常用的方法如下方代码中的readMethod1~8方法所示。</p><p>测试了2.5M读100次、100M读3次、250M读1次三种情况，耗时（单位：毫秒）如下：</p><table><thead><tr><th></th><th>2.5M读100次</th><th>2.5M读100次</th><th>100M读3次</th><th>100M读3次</th><th>250M读1次</th><th>250M读1次</th></tr></thead><tbody><tr><td></td><td>普通</td><td>HDFS</td><td>普通</td><td>HDFS</td><td>普通</td><td>HDFS</td></tr><tr><td>method1，一次性全部读取</td><td>635</td><td>1604</td><td>976</td><td>965</td><td>1270</td><td>482</td></tr><tr><td>method2，ByteArrayOutputStream+byte[]</td><td>616</td><td>5759</td><td>669</td><td>5135</td><td>843</td><td>4375</td></tr><tr><td>method3，InputStreamReader+char[8192]+StringWriter</td><td>1236</td><td>5097</td><td>1454</td><td>4370</td><td>1167</td><td>3976</td></tr><tr><td>method4，InputStreamReader+BufferedReader(char[8192])</td><td>1565</td><td>4556</td><td>1986</td><td>4763</td><td>1608</td><td>3230</td></tr><tr><td>method5，bufferedReader+stream</td><td>1414</td><td>4167</td><td>62546</td><td>140485</td><td>-</td><td>-</td></tr><tr><td>method6，bufferedReader+stream+parallel</td><td>1941</td><td>4526</td><td>OOM</td><td>OOM</td><td>OOM</td><td>OOM</td></tr><tr><td>method7，Deque&lt;byte[8196]&gt;</td><td>628</td><td>5331</td><td>761</td><td>4456</td><td>669</td><td>3321</td></tr><tr><td>method8，ByteBuffer(2048)+LineBuffer</td><td>1910</td><td>5325</td><td>2310</td><td>4426</td><td>2300</td><td>3575</td></tr></tbody></table><p>个人思考：</p><p>1、普通文件系统，使用char[]作为中间缓冲（method3~6），速度都比较慢，因为java的string底层是byte[]，先转成char[]，又转回byte[]，会消耗多余的时间。</p><p>2、使用method6使用parallel并不能提升性能，因为底层InputStreamReader是加锁的，IO是不能并行的。</p><p>3、HDFS不会用，使用最朴素的连接方式，肯定是那里有问题，才会导致IO速度这么慢。但是好像一次性全部读取HDFS的速度，会随着文件的增大而相对更快。</p><p>4、最后method7是google guava库中的一种读取全部字符串的方法，脑洞大开，性能都还不错。</p><p>5、method3、4、5、6、8都是一行一行读取的模式，适用于需要对每一行进行后续处理的情况。</p><p>6、谨慎对读取全部字符串这种批作业使用流处理方式，速度很慢，parallel的甚至直接OOM。</p><p>7、总结下来，如果是读取文件中全部字符串，method2 和 method7都是比较不错的方式；如果是需要一行一行处理，则可能还是method4的BufferedReader性能更好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury;<br><br><span class="hljs-keyword">import</span> com.google.common.io.ByteStreams;<br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.file.tfile.ByteArray;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FileSystem fileSystem;<br>    <span class="hljs-keyword">static</span> &#123;<br>        Configuration configuration = <span class="hljs-keyword">new</span> Configuration();<br>        configuration.set(<span class="hljs-string">&quot;fs.defaultFS&quot;</span>, <span class="hljs-string">&quot;hdfs://myubuntu1:8020&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileSystem = FileSystem.get(configuration);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;测试普通文件系统：&quot;</span>);<br>        testReadMethod(<span class="hljs-keyword">new</span> InputStreamBuilder(<span class="hljs-string">&quot;NORMAL&quot;</span>, <span class="hljs-string">&quot;C:/Users/yury/Desktop/size100M.txt&quot;</span>), <span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;=====================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;测试HDFS文件系统：&quot;</span>);<br>        testReadMethod(<span class="hljs-keyword">new</span> InputStreamBuilder(<span class="hljs-string">&quot;HDFS&quot;</span>, <span class="hljs-string">&quot;/test1/size100M.txt&quot;</span>), <span class="hljs-number">3</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputStreamBuilder</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> String type;<br>        <span class="hljs-keyword">private</span> String fileName;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InputStreamBuilder</span><span class="hljs-params">(String type, String fileName)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.type = type;<br>            <span class="hljs-keyword">this</span>.fileName = fileName;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> InputStream <span class="hljs-title">getInputStream</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            <span class="hljs-keyword">switch</span> (type) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;NORMAL&quot;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FileInputStream(fileName);<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;HDFS&quot;</span>:<br>                    <span class="hljs-keyword">return</span> fileSystem.open(<span class="hljs-keyword">new</span> Path(fileName));<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;unkonw file system&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testReadMethod</span><span class="hljs-params">(InputStreamBuilder builder, <span class="hljs-keyword">int</span> n)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">long</span> time1 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod1(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time2 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method1，耗时：&quot;</span> + (time2 - time1) + <span class="hljs-string">&quot; 直接读取&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time3 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod2(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time4 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method2，耗时：&quot;</span> + (time4 - time3) + <span class="hljs-string">&quot; ByteArrayOutputStream+byte[]&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time5 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod3(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time6 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method3，耗时：&quot;</span> + (time6 - time5) + <span class="hljs-string">&quot; InputStreamReader+char[8192]+StringWriter&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time7 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod4(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time8 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method4，耗时：&quot;</span> + (time8 - time7) + <span class="hljs-string">&quot; InputStreamReader+BufferedReader(char[8192])&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time9 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            readMethod5(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time10 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method5，耗时：&quot;</span> + (time10 - time9) + <span class="hljs-string">&quot; bufferedReader+stream&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time11 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod6(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time12 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method6，耗时：&quot;</span> + (time12 - time11) + <span class="hljs-string">&quot; bufferedReader+stream+parallel&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time13 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod7(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time14 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method7，耗时：&quot;</span> + (time14 - time13) + <span class="hljs-string">&quot; Deque&lt;byte[8196]&gt;&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time15 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod8(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time16 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method8，耗时：&quot;</span> + (time16 - time15) + <span class="hljs-string">&quot; ByteBuffer(2048)+LineBuffer&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一次性全部读取</span><br><span class="hljs-comment">     * 不建议使用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod1</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[inputStream.available()];<br>        <span class="hljs-keyword">int</span> size = inputStream.read(bytes);<br>        String s = <span class="hljs-keyword">new</span> String(bytes, <span class="hljs-number">0</span>, size, StandardCharsets.UTF_8);<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用ByteArrayOutputStream+自定义缓冲区，缓冲区大小可以依据文件大小而定</span><br><span class="hljs-comment">     * 本质：ByteArrayOutputStream在write数据时，会检测容量是否满足需求，若不满足需求则会扩容，直到InputStream读取完毕</span><br><span class="hljs-comment">     * 最佳实践：可以使用new ByteArrayOutputStream(inputStream.available()); 这样可以避免扩容时产生的时间损耗；同时按照大小调整缓冲区大小。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod2</span><span class="hljs-params">(InputStream inputStream)</span><span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream(inputStream.available());<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="hljs-number">0</span>) &#123;<br>            byteArrayOutputStream.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        String s = byteArrayOutputStream.toString(StandardCharsets.UTF_8);<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        byteArrayOutputStream.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用StringWriter+org.apache.commons.io.IOUtils.copy</span><br><span class="hljs-comment">     * 本质：该copy方法使用的InputStreamReader，每次读取char[8192]作为缓冲区，然后while循环写入StringBuffer</span><br><span class="hljs-comment">     * InputStreamReader是将字节流按照编码转换为字符流，read方法是按编码来读取字符，而不是读取字节。</span><br><span class="hljs-comment">     * StringWriter底层是StringBuffer，StringBuffer底层还是byte[]，若超过初始设定的长度，则进行扩容</span><br><span class="hljs-comment">     * 关键代码：AbstractStringBuilder的683行append(char str[], int offset, int len)方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod3</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        StringWriter writer = <span class="hljs-keyword">new</span> StringWriter();<br>        IOUtils.copy(inputStream, writer, StandardCharsets.UTF_8);<br>        String s = writer.toString();<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        writer.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用BufferedReader+while</span><br><span class="hljs-comment">     * 本质：BufferedReader是建立再InputStreamReader之上，读取char[8192]作为缓冲区</span><br><span class="hljs-comment">     * readLine()方法则是将缓冲区上的字符按换行符处理成一行字符串后返回，若缓冲区读完了还没有换行符则继续读取下一批char[8192]</span><br><span class="hljs-comment">     * BufferedReader.readLine()适用于一行一行，并有后续操作的需求，而不是读取整个文件到字符串中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod4</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(reader);<br>        String s;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">while</span> ((s = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>            sb.append(s).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        s = sb.toString();<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        bufferedReader.close();<br>        reader.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用bufferedReader+stream</span><br><span class="hljs-comment">     * 本质：lines()方法返回一个Stream，该流的数据由迭代器生成，迭代器方法还是readList()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod5</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(reader);<br>        String s = bufferedReader.lines().collect(Collectors.joining(System.lineSeparator()));<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        bufferedReader.close();<br>        reader.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用bufferedReader+stream+parallel</span><br><span class="hljs-comment">     * 同上，只是使用parallel并行计算</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod6</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(reader);<br>        String s = bufferedReader.lines().parallel().collect(Collectors.joining(System.lineSeparator()));<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        bufferedReader.close();<br>        reader.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用google的guava</span><br><span class="hljs-comment">     * 本质：独树一帜，不使用缓冲区，而是使用Deque&lt;byte[8196]&gt;作为接收byte的数据区，等全部接收完毕后，再整合成一个完整的byte[]</span><br><span class="hljs-comment">     * 注意guava 27.0版本的该方法还是beta方法，可能会存在潜在风险</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod7</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String s = <span class="hljs-keyword">new</span> String(ByteStreams.toByteArray(inputStream), StandardCharsets.UTF_8);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用google的guava的CharStreams.readLines()方法</span><br><span class="hljs-comment">     * 本质：以ByteBuffer(2048)为缓冲区读取字符流，并使用LineBuffer作为行缓冲，底层是StringBuilder</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod8</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br>        List&lt;String&gt; stringList = CharStreams.readLines(reader);<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (String s : stringList) &#123;<br>            sb.append(s).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        String s = sb.toString();<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        reader.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Computer Networking Base</title>
    <link href="/computer-science/Computer-Networking/Computer-Networking/"/>
    <url>/computer-science/Computer-Networking/Computer-Networking/</url>
    
    <content type="html"><![CDATA[<h1 id="Computer-Networking"><a href="#Computer-Networking" class="headerlink" title="Computer Networking"></a>Computer Networking</h1><p>本文档内容主要来源于《计算机网络——自顶向下方法》一书和中科大计算机网络课程（<a href="https://www.bilibili.com/video/BV1JV411t7ow">中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>）。</p><p>C++太难了，本次学习中的代码都以java为示例。</p><h2 id="O、没用的东西"><a href="#O、没用的东西" class="headerlink" title="O、没用的东西"></a>O、没用的东西</h2><p>网线：四组双绞线</p><p><strong>1、双绞线为什么要缠绕？</strong></p><p>信号的传输方式是电流，电流会产生电磁场，对周围的的线路造成干扰，且干扰会随着线路的长度而增强。而在双绞线中，两根导线会传输幅值相同，极性相反的信号，这样一来，由于大小相等、极性相反，一条导线所产生的干扰就会与另一条导线所产生的干扰相互抵消，最后接收到的就是未被干扰的纯净信号。</p><p><strong>2、网线制作标准</strong></p><p>主要遵循EIA/TIA的568A、568B布线标准。</p><p><img src="/images/%E6%A0%87%E5%87%86568B%E7%BA%BF%E5%BA%8F.png"></p><p><strong>3、路由器工作原理</strong></p><p>主要接收两种报文：</p><p>（1）普通数据报文</p><p>（2）路由报文</p><p><img src="/images/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></p><p><strong>4、路由表的维护方式</strong></p><p>（1）静态路由</p><p>（2）动态路由：RIP、OSPF、BGP</p><p><strong>5、路由器控制</strong></p><p>可以使用网线连接路由器的CONSOLE端口到计算机上，就可以在计算机上控制路由器了。在计算机的超级终端控制路由器的命令：</p><p>（1）display current-configuration（dis cu）：显示当前配置</p><p>（2）？：帮助命令，类似于linux的–help</p><p><strong>6、网卡通常的缺省工作模式</strong></p><p>（1）广播模式：只能接收<strong>广播报文</strong></p><p>（2）直接模式：只能接受与自身硬件地址相匹配的<strong>单播报文</strong></p><p><strong>7、简单组网</strong></p><p>192.168.2.1/24：即前24位都是固定网段，只有最后面8位是局域网可以使用的ip，而1开头是网关，因此可用的ip为254个。</p><p><img src="/images/%E7%AE%80%E5%8D%95%E7%BB%84%E7%BD%91.png"></p><p><strong>8、专用网段</strong></p><p>RFC1918规定，10网段、172.16网段、192.168网段只能作为私网（Intranet，内联网）地址（即局域网内使用），不能作为公网（Internet，互联网）地址（互联网ip地址）。</p><p><strong>9、通过WireShark抓包</strong></p><p>下载WireShark软件，安装一个虚拟机安装一个linux，设置固定IP地址（192.168.141.141）和默认网关等，打开WireShark找到一个VMware Network Adapter VMnet8网卡，双击或者右键start capture。此时可能会有一些数据出来，也可能没有。在shell中ping我们的虚拟机ip，就可以看到四组粉色的数据。这八条数据都可以点进去看，就是Source ip机器向Desination ip机器传输了一组数据，然后Desination ip机器回应了一组数据。这就是数据包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping 192.168.141.141<br></code></pre></td></tr></table></figure><p><img src="/images/WireShark%E7%AE%80%E5%8D%95%E6%8A%93%E5%8C%85.png"></p><p><strong>10、地址转换</strong></p><p>一个企业只有5个可以访问互联网的ip地址，可以建一个局域网，在出口路由器上配置地址转换，让所有设备共享这五个ip，则所有设备都可以访问互联网。</p><p><img src="/images/%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2.png"></p><p><strong>原理：将不同设备的ip和端口映射到可以访问互联网的ip的不同端口号上。如一个转换表如下。</strong>报文发出去时从左到右转换，封装成公网ip，报文回来时从右往左转换，转换回本机局域网ip。</p><table><thead><tr><th>本地地址</th><th>本地端口</th><th>公网地址</th><th>公网端口</th></tr></thead><tbody><tr><td>10.0.1.10</td><td>1001</td><td>202.0.01</td><td>1044</td></tr><tr><td>10.0.1.20</td><td>1001</td><td>202.0.01</td><td>1045</td></tr></tbody></table><p>多级转换。即进行ip转换的层级有多层。</p><h2 id="一、概论"><a href="#一、概论" class="headerlink" title="一、概论"></a>一、概论</h2><h3 id="1、互联网通信的层次结构"><a href="#1、互联网通信的层次结构" class="headerlink" title="1、互联网通信的层次结构"></a>1、互联网通信的层次结构</h3><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%80%9A%E4%BF%A1%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png"></p><h3 id="2、什么是协议？"><a href="#2、什么是协议？" class="headerlink" title="2、什么是协议？"></a>2、什么是协议？</h3><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">协议 </span>=<span class="hljs-string"> 语法 + 语义 + 次序 + 动作</span><br></code></pre></td></tr></table></figure><p>即我们要遵循某一个协议，就是指我们在传输数据的过程中，传输的数据报文要遵循一定的语法，比如前几位数字用于表示某个属性，中间几位数字表示某个属性等；还要遵循一定的语义，即在某个属性中，1代表什么，0代表什么，10又代表什么；还要遵循次序，即我发送一个数据，不能想发就发，而是我收到一个请求之后再发；最后还要遵循动作，即我收到数据报文之后，内部要做什么处理的动作。</p><h3 id="3、TCP-IP协议簇各层的作用！！"><a href="#3、TCP-IP协议簇各层的作用！！" class="headerlink" title="3、TCP/IP协议簇各层的作用！！"></a>3、TCP/IP协议簇各层的作用！！</h3><table><thead><tr><th>层级</th><th>协议</th><th>协议数据单元</th><th>作用</th></tr></thead><tbody><tr><td>应用层</td><td>HTTP等</td><td>报文message</td><td>提供应用服务，<font color="Red">用于两个进程之间的逻辑通信</font></td></tr><tr><td>传输层</td><td>TCP，UDP</td><td>报文段segment</td><td>进程到进程之间的传输，可靠。</td></tr><tr><td>网络层（E2E，End to End）</td><td>IP</td><td>分组package</td><td>在链路层的基础上实现从源主机（Source）到目标主机（Destination）的传输。不可靠，尽力而为，可能会丢包。路由器工作在这一层</td></tr><tr><td>数据链路层（P2P，Point to Point）</td><td></td><td>帧frame</td><td>在一个局域网内相邻的两个结点之间传输以帧为单位的数据。交换机工作在这一层</td></tr><tr><td>物理层</td><td></td><td>位bit</td><td>将电信号、光信号等物理信号转换为数字信号（0、1）</td></tr><tr><td>Media</td><td></td><td></td><td>传输媒介，如网线、光纤等</td></tr></tbody></table><h3 id="4、封装和解封装"><a href="#4、封装和解封装" class="headerlink" title="4、封装和解封装"></a>4、封装和解封装</h3><p><img src="/images/%E5%B0%81%E8%A3%85%E5%92%8C%E8%A7%A3%E5%B0%81%E8%A3%85.png"></p><h3 id="5、多路复用和多路分解"><a href="#5、多路复用和多路分解" class="headerlink" title="5、多路复用和多路分解"></a>5、多路复用和多路分解</h3><p><img src="/images/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%92%8C%E5%A4%9A%E8%B7%AF%E5%88%86%E8%A7%A3.png"></p><h3 id="6、C-S模式和P2P模式"><a href="#6、C-S模式和P2P模式" class="headerlink" title="6、C/S模式和P2P模式"></a>6、C/S模式和P2P模式</h3><p>C/S模式是指<strong>客户/服务器模式</strong>，如web浏览器/服务器，email客户端/服务器。主要问题是可扩展性较差，请求增加时，性能下降。</p><p>P2P模式是指peer-peer模式（对等模式），每个客户端都可以作为服务器提供资源，当请求资源的主体增加时，该主体已经获取到的资源碎片可以给其他主机提供，即提供资源的主体也会相应增加，典型的比如迅雷、电驴等。</p><h3 id="7、TCP和UDP的特性"><a href="#7、TCP和UDP的特性" class="headerlink" title="7、TCP和UDP的特性"></a>7、TCP和UDP的特性</h3><ul><li>面向连接</li><li>可靠的、按顺序地传送数据</li><li>流量控制</li><li>拥塞控制</li></ul><p>UDP的特性和上面四个相反，具体内容后面讲。</p><h3 id="8、计算机数据单位"><a href="#8、计算机数据单位" class="headerlink" title="8、计算机数据单位"></a>8、计算机数据单位</h3><p>计算机是以二进制存储和发送接收数据的，二进制的一位（0或1），就是1bit，即一个比特。<strong>bit是计算机存储的最小单位。</strong>计算机cpu位数也是这个bit，如32位cpu计算机一次最多可以处理32个bit数据。网络传输中物理层的传输就是以bit为单位来传输的。</p><p>而Byte是指字节，是一种基本单位，但不是最小单位，一个Byte=8个bit。通常说的1KB就是指1024Byte，1MB就是指1024*1024Byte。</p><p>可以大概理解为，bit用于微观上的数据计量，而Byte用于宏观上的数据计量；bit在计算机或其他硬件层面上使用， 而Byte在实际生活和计算机软件应用层面更常见。</p><h3 id="9、电路交换和分组交换"><a href="#9、电路交换和分组交换" class="headerlink" title="9、电路交换和分组交换"></a>9、电路交换和分组交换</h3><p>电路交换：将传输链路的传输能力切分给不同主机使用。比如主机通过一跟光纤传输数据时，会约定好将光纤的传输能力（带宽）按一定的规则切分为30等分，每台主机只能使用其中一份传输能力。如：频分（FDM，按频段分，每台主机使用特定频段）、时分（TDM）、波分（WDM，按波长分，每台主机使用特定波长）</p><p><strong>分组交换：</strong>将传输的数据切分一个个的package发送，数据在传输链路上使用全部带宽传输，每个网络节点收到数据后会完全存储下来，再转发给下一个网络节点。</p><p>分组交换的缺点：分组丢失、处理延迟、传播延迟、传输延迟和排队延迟。</p><p><strong>分组丢失</strong>：当分组队列已满，新进来的分组会被丢弃，这就是分组丢失。</p><p><strong>处理延迟：</strong>路由器设备接收到数据包并决定如何处理它所需要的时间。一般是微妙数量级或更少，依赖于处理器。</p><p><strong>传播延迟</strong>：分组在物理介质中传播的时间；</p><p><strong>传输延迟</strong>：每个分组需要完整接收后，存储下来，才会发送给下一个节点，因此一份分组从刚开始接受到接收完毕，存在一个传输时间的延迟；</p><p><strong>排队延迟</strong>：有多个不同种类的数据要传给下一个节点时，需要排队，存在等待时间，取决于流量强度[0, 1)。</p><p>分组交换的优点：共享性高，按需使用。</p><p>分组交换中分组在每个网络节点之间的传输叫做“跳”。</p><p><img src="/images/%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2.png"></p><h3 id="10、虚电路网络和数据报网络"><a href="#10、虚电路网络和数据报网络" class="headerlink" title="10、虚电路网络和数据报网络"></a>10、虚电路网络和数据报网络</h3><p>虚电路网络，构建一张类似于路由表的虚电路表，根据虚电路表转发数据。（有连接，有连接和面向连接不是一个意思）</p><p>数据报网络，每个数据包都有源地址、目标地址等所有信息。（无连接）</p><p>数据报网络的特点：</p><ul><li>传输时无需建立一个连接，有数据就传</li><li>每一个分组都独立路由（路径不一样，可能会失序）</li><li>路由器根据分组的目标地址进行路由</li></ul><h3 id="11、ICMP协议"><a href="#11、ICMP协议" class="headerlink" title="11、ICMP协议"></a>11、ICMP协议</h3><p>ICMP（Internet Control Message Protocol，互联网控制消息协议），它用于 TCP/IP 网络中发送控制消息，通过这些消息以及反馈，网络管理者可以对网络中所发生的问题进行诊断。</p><p><a href="https://zhuanlan.zhihu.com/p/369623317">深入理解ICMP协议 - 知乎 (zhihu.com)</a></p><p>即这个协议常用于网络测试。常用的两个实现是ping和traceroute。</p><p>TTL：time to live，数据包允许存活的跳数，即数据包每经过一跳，则TTL减1，当TTL为0时，路由器会抛弃该数据包，并给源主机发送ICMP报文，说数据包因为TTL减为零，被干掉了。</p><p>RTT：round trip time，往返延迟，数据包发送出去后，收到回应的数据包的时间。</p><h3 id="12、其他术语"><a href="#12、其他术语" class="headerlink" title="12、其他术语"></a>12、其他术语</h3><p><strong>吞吐量</strong>：在源主机和目标主机之间传输的速率（数据量/单位时间）。</p><p>瓶颈链路：端到端路径上，限制吞吐的链路。</p><p>DU：data unit，数据单元，网络信息传输的基本单位。</p><p>SDU：service data unit，服务数据单元。</p><p>PDU：protocol data unit，协议数据单元。这两个数据单元大概意思可能是，SDU为服务层的业务数据，而PDU为对应层的协议数据。</p><h2 id="二、应用层"><a href="#二、应用层" class="headerlink" title="二、应用层"></a>二、应用层</h2><h3 id="1、分布式进程需要解决的问题"><a href="#1、分布式进程需要解决的问题" class="headerlink" title="1、分布式进程需要解决的问题"></a>1、分布式进程需要解决的问题</h3><h4 id="问题1：进程标识和寻址问题"><a href="#问题1：进程标识和寻址问题" class="headerlink" title="问题1：进程标识和寻址问题"></a>问题1：进程标识和寻址问题</h4><p>进程标识：ip + TCP或UDP端口号</p><p>如HTTP，采用TCP 80端口，Mail采用TCP 25端口，ftp采用TCP 2端口。</p><p>寻址：协议头指定源ip和目标ip</p><h4 id="问题2：传输层提供的服务-层间信息的代表"><a href="#问题2：传输层提供的服务-层间信息的代表" class="headerlink" title="问题2：传输层提供的服务-层间信息的代表"></a>问题2：传输层提供的服务-层间信息的代表</h4><p>如果Socket Api每次传输报文，都携带上面的这么多的信息，太繁琐易出错，不便于管理。</p><p>因此用一个代号标示通信的双方或单方，即为socket，注意<font color="Red">socket只用于本地标示</font>！</p><p>TCP socket：TCP建立稳定连接后，可以用一个整数标识两个应用实体之间的通信关系，本地标示。TCP socket包含源IP、源端口、目标IP、目标端口。发送消息时只需要带上这个socket，操作系统就可以查到这个socket对应的源IP、源端口、目标IP、目标端口，然后按照这些内容发送对应的消息。对于网络通信而言，socket对应一个网络会话关系的本地标示。</p><table><thead><tr><th>socket</th><th>源IP</th><th>源端口</th><th>目标IP</th><th>目标端口</th><th>状态…</th></tr></thead><tbody><tr><td>10</td><td>192.168.141.141</td><td>9000</td><td>192.168.141.142</td><td>9001</td><td></td></tr><tr><td>20</td><td>192.168.141.141</td><td>9000</td><td>192.168.141.143</td><td>9001</td><td></td></tr></tbody></table><p>UDP socket：通信之间不需要建立连接，其socket仅包含源IP和源端口，<strong>但是传输报文时，必须提供目标IP和目标端口</strong>。接收报文时，传输层必须上传对方IP和对方端口。</p><table><thead><tr><th>socket</th><th>源IP</th><th>源端口</th><th>状态…</th></tr></thead><tbody><tr><td>10</td><td>192.168.141.141</td><td>8000（用于发送）</td><td></td></tr><tr><td>20</td><td>192.168.141.141</td><td>8001（用于接收）</td><td></td></tr></tbody></table><h4 id="问题3：使用传输层提供的服务实现应用"><a href="#问题3：使用传输层提供的服务实现应用" class="headerlink" title="问题3：使用传输层提供的服务实现应用"></a>问题3：使用传输层提供的服务实现应用</h4><p>（1）规定应用层协议，公用协议（HTTP，ftp）和私有协议（Skype使用的通讯协议）</p><p>（2）考虑数据丢失率、吞吐、延迟、安全性</p><p>（3）应用层协议和传输层协议对应</p><p>（4）安全性，如：HTTP+SSL=HTTPS</p><h3 id="2、Web与HTTP"><a href="#2、Web与HTTP" class="headerlink" title="2、Web与HTTP"></a>2、Web与HTTP</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>HTTP：超文本传输协议。</p><p>url格式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">协议名:<span class="hljs-regexp">//</span>用户名:口令@主机:端口号/路径名<br>protocol:<span class="hljs-regexp">//u</span>ser:password@www.someschool.edu.cn:port<span class="hljs-regexp">/somedept/</span>pic.gif<br></code></pre></td></tr></table></figure><p>建立在TCP协议之上，HTTP是无状态的，即服务器不维护关于客户的任何信息，维护状态的TCP协议是很复杂的，需要考虑很多对状态有影响的情况。</p><p>HTTP1.0：非持久连接，HTTP请求步骤如下：建立TCP连接请求，确认TCP连接，发送请求数据包，解析处理，返回响应数据包，断开连接。</p><p>HTTP1.1：持久连接，HTTP请求步骤如下：建立TCP连接请求，确认TCP连接，发送请求数据包，解析处理，返回响应数据包，不断开连接，如果有其他请求可以继续使用这个连接。</p><p><img src="/images/%E6%8C%81%E4%B9%85%E8%BF%9E%E6%8E%A5%E5%92%8C%E9%9D%9E%E6%8C%81%E4%B9%85%E8%BF%9E%E6%8E%A5.png"></p><p><img src="/images/%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E6%A8%A1%E5%9E%8B.png"></p><h4 id="HTTP请求报文格式"><a href="#HTTP请求报文格式" class="headerlink" title="HTTP请求报文格式"></a>HTTP请求报文格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">get /somedir/page.html HTTP/1.1\r\n<br>Host: www.someschool.edu\r\n<br>User-agent: Mozilla/4.0\r\n<br>Connection: close\r\n<br>Accept-language: fr\r\n<br>\r\n<br></code></pre></td></tr></table></figure><p><img src="/images/HTTP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png"></p><p>HTTP/1.0支持的请求方法：GET、POST、HEAD</p><p>HTTP/1.1支持的请求方法：GET、POST、HEAD、PUT、DELETE</p><h4 id="HTTP响应报文格式"><a href="#HTTP响应报文格式" class="headerlink" title="HTTP响应报文格式"></a>HTTP响应报文格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">HTTP/1.1 200 OK\r\n<br>Connection: keep-alive\r\n<br>Date: Thu, 06 Aug 1998 12:00:15 GMT\r\n<br>Server: Apache/1.3.0 (Unix)\r\n<br>Last-Modified: Mon, 22 Jun 1998 ...\r\n<br>Content-Length: 6821\r\n<br>Content-Type: text/html\r\n<br>\r\n<br>\r\n<br>data ..data .. data ..<br></code></pre></td></tr></table></figure><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>之前提到HTTP是无状态的，而cookie可以维持一定的状态，如登陆状态等。</p><p>cookie的理解如下：</p><ul><li>客户端第一次访问服务器，服务器发现这个东西没有带cookie，是新来的</li><li>服务器给这个客户端分配一个cookie，存储在服务器，服务器响应时顺便把这个cookie带回去</li><li>客户端拿到响应html和cookie，将cookie存储在本地</li><li>客户端第二次访问服务器，就会带上这个cookie，服务器在自己这里也找到同样一个cookie，就知道这个东西之前来过我这里。</li></ul><p>cookie的携带也会写在报文中。</p><p>cookie如果和很多信息关联在一起，容易泄露隐私。</p><h4 id="web缓存（代理服务器）"><a href="#web缓存（代理服务器）" class="headerlink" title="web缓存（代理服务器）"></a>web缓存（代理服务器）</h4><p>即在客户端和原始服务器之间加了一个代理服务器，客户端访问时首先会经过这个代理服务器，如果代理服务器中有这个资源，则返回这个资源，如果代理服务器没有这个资源则发给原始服务器去访问。</p><p>好处：减少资源响应时间，减少原始服务器的负载。</p><p>问题：原始服务器更新了资源怎么办？缓存服务器可以原始服务器发GET，报文中带上一个特殊的参数如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">If-modified-since: &lt;date&gt;<br></code></pre></td></tr></table></figure><p>如果原始服务器的响应资源在这个时间点之后都没发生改变，则不发送这个资源，并通过响应一个特殊的状态码告诉缓存服务器，资源在这个时间点后没有发生改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HTTP/1.0 304 Not Modified<br></code></pre></td></tr></table></figure><h3 id="3、FTP"><a href="#3、FTP" class="headerlink" title="3、FTP"></a>3、FTP</h3><p>FTP协议是有状态的。</p><ul><li>客户端发出用户名、口令等，向服务器建立TCP连接-控制连接，服务器确认连接</li><li>服务器向客户端建立TCP连接-数据连接，在数据连接上进行发送数据。</li></ul><h3 id="4、EMail应用"><a href="#4、EMail应用" class="headerlink" title="4、EMail应用"></a>4、EMail应用</h3><p>EMail应用由三个组成部分：</p><p>（1）用户代理</p><p>（2）邮件服务器</p><p>（3）邮件传输协议，如SMTP</p><p><img src="/images/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8.png"></p><p>流程：</p><ul><li>用户代理通过SMTP协议，把邮件发送到发件人邮箱对应的邮件服务器中，并放到发件箱队列中</li><li>发件人邮箱对应的邮件服务器从发件箱队列中取出邮件，通过SMTP协议，发送给收件人邮箱对应的邮件服务器中，并放在一个待收取的收件箱中，发送成功。</li><li>收件人通过POP3协议，从收件人邮箱对应的邮件服务器中查询收件箱中是否有新邮件，并收取邮件。</li></ul><p><img src="/images/%E7%AE%80%E5%8D%95%E7%9A%84SMTP%E4%BA%A4%E4%BA%92.png"></p><p><strong>smtp协议报文格式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">To: xxx<br>From: xxx<br>Subject: xxx<br>MIME-Version: 1.0<br>Content-Transfer-Encoding: base64<br>Content-Type: image/jpeg<br><br>base64 encoded data ........................<br></code></pre></td></tr></table></figure><p>邮件访问协议，常见POP3、IMAP、HTTP</p><h3 id="5、DNS"><a href="#5、DNS" class="headerlink" title="5、DNS"></a>5、DNS</h3><p>DNS，Domain Name System，域名解析系统，即完成从域名到ip地址的解析工作的系统。</p><p>之前说过了进程之间的标示和寻址是通过ip和端口，但是ip很难记住，因此可以通过给ip设置一个比较容易记住的域名来表示这个主机的ip，而DNS服务器就是通过给定域名，查询出响应的ip地址的系统。</p><p>特点：</p><ul><li>域名通过分层的、基于域的形式命名</li><li>通过分布式数据库完成域名到ip地址的解析。</li><li>运行在UDP之上端口号为53的应用服务</li><li>是internet的核心功能，但以应用层协议实现，处于网络边缘。</li></ul><table><thead><tr><th>域名</th><th>ip</th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="6、P2P应用"><a href="#6、P2P应用" class="headerlink" title="6、P2P应用"></a>6、P2P应用</h3><h3 id="7、CDN"><a href="#7、CDN" class="headerlink" title="7、CDN"></a>7、CDN</h3><h3 id="8、TCP套接字编程"><a href="#8、TCP套接字编程" class="headerlink" title="8、TCP套接字编程"></a>8、TCP套接字编程</h3><p>应用层要实现网络通信，要把报文传给下一层传输层去传输，而应用层和传输层之间的接口就是socket；传输层把报文段传给下一层就是他们之间的工作，我们先不用管。因此socket就像分布式应用进程之间的门，通过socket就可以实现分布式应用进程之间的逻辑通信。socket服务提供的就是字节流服务。</p><h4 id="TCP套接字编程流程"><a href="#TCP套接字编程流程" class="headerlink" title="TCP套接字编程流程"></a>TCP套接字编程流程</h4><p>（1）启动服务器进程</p><ul><li>创建服务器的socket</li><li>和本地ip、端口绑定</li><li>在welcome socket上阻塞式等待接收用户的连接。</li></ul><p>（2）客户端主动和服务器建立连接</p><ul><li>创建客户端的socket，自动绑定本地端口</li><li>指定服务器ip和端口，调用连接api，向服务器端发送连接请求。</li></ul><p>（3）服务器接收到连接请求</p><ul><li>服务端接收到客户端的请求，解除阻塞时等待，<font color="Red">返回一个新的socket（和welcome socket不一样）来和客户端通信，原welcome socket重新回到阻塞式等待模式等待后面的用户连接。</font></li></ul><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>服务器socket类为ServerSocket，其初始化函数中有一个bind函数，即将IP地址、端口绑定到这个serversocket上。如果没有指定绑定的ip，则默认为InetAddress.anyLocalAddress()，即任意的本地地址<code>0.0.0.0</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ServerSocket</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-keyword">this</span>(port, <span class="hljs-number">50</span>, <span class="hljs-keyword">null</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ServerSocket</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port, <span class="hljs-keyword">int</span> backlog)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-keyword">this</span>(port, backlog, <span class="hljs-keyword">null</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ServerSocket</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port, <span class="hljs-keyword">int</span> backlog, InetAddress bindAddr)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    setImpl();<br>    <span class="hljs-keyword">if</span> (port &lt; <span class="hljs-number">0</span> || port &gt; <span class="hljs-number">0xFFFF</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>        <span class="hljs-string">&quot;Port value out of range: &quot;</span> + port);<br>    <span class="hljs-keyword">if</span> (backlog &lt; <span class="hljs-number">1</span>)<br>        backlog = <span class="hljs-number">50</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        bind(<span class="hljs-keyword">new</span> InetSocketAddress(bindAddr, port), backlog);<br>    &#125; <span class="hljs-keyword">catch</span>(SecurityException e) &#123;<br>        close();<br>        <span class="hljs-keyword">throw</span> e;<br>    &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;<br>        close();<br>        <span class="hljs-keyword">throw</span> e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 创建的serversocket即为课程中的welcome socket，accept函数会阻塞，直到接收到一个连接，连接成功后会返回一个新的socket，发送和接受数据都在这个新的socket上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerTest01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InetAddress serveraddr = InetAddress.getByName(<span class="hljs-string">&quot;192.168.0.101&quot;</span>);<br>        ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">8888</span>, <span class="hljs-number">50</span>, serveraddr); <span class="hljs-comment">// 这个socket为2222</span><br>        <span class="hljs-keyword">int</span> nums = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            Socket socket = serverSocket.accept();                                       <span class="hljs-comment">// 这个socket为新创建的</span><br>            nums++;<br>            System.out.println(<span class="hljs-string">&quot;收到第&quot;</span> + nums + <span class="hljs-string">&quot;个连接。目标ip地址为：&quot;</span> + socket.getInetAddress() + <span class="hljs-string">&quot;，目标端口为：&quot;</span> + socket.getPort() + <span class="hljs-string">&quot;。&quot;</span>);<br>            <span class="hljs-keyword">if</span> (nums &gt;= <span class="hljs-number">10</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            socket.close();<br>        &#125;<br>        serverSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器中的socket表，调用socket.close方法后对应的socket在表中的数据会被移除。</p><table><thead><tr><th>socket</th><th>源IP</th><th>源端口</th><th>目标IP</th><th>目标端口</th><th>状态</th></tr></thead><tbody><tr><td>2222（welcome socket）</td><td>192.168.0.101</td><td>8888</td><td></td><td></td><td></td></tr><tr><td>3333（每次新创建的socket）</td><td>192.168.0.101</td><td>8888</td><td>192.168.0.101</td><td>10266</td><td>连接成功</td></tr><tr><td>4444</td><td>192.168.0.101</td><td>8888</td><td>192.168.0.101</td><td>10496</td><td>连接成功</td></tr><tr><td>5555</td><td>192.168.0.101</td><td>8888</td><td>192.168.0.101</td><td>10503</td><td>连接成功</td></tr></tbody></table><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>客户端的socket类的初始化有很多重载方法，<font color="Red">不管那种方式创建，至少要给服务器地址和端口两个参数，如下。若不指定本机地址和端口，则本机操作系统会自动分配端口出去</font>，Socket类创建成功后即连接上了服务器，即不需要像C/C++那样显示调用connect。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientTest01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String serverHost = <span class="hljs-string">&quot;192.168.0.101&quot;</span>;<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">8888</span>;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(serverHost, port); <span class="hljs-comment">// 创建后即连接成功</span><br><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端的socket表</p><table><thead><tr><th>socket</th><th>源IP</th><th>源端口</th><th>目标IP</th><th>目标端口</th><th>状态</th></tr></thead><tbody><tr><td>333</td><td>192.168.0.101</td><td>10266</td><td>192.168.0.101</td><td>8888</td><td>连接成功</td></tr><tr><td>444</td><td>192.168.0.101</td><td>10496（自动分配）</td><td>192.168.0.101</td><td>8888</td><td>连接成功</td></tr><tr><td>555</td><td>192.168.0.101</td><td>10503</td><td>192.168.0.101</td><td>8888</td><td>连接成功</td></tr></tbody></table><p>客户端多次启动后，服务器打印的内容如下，可以发现客户端的端口是操作系统自己分配的。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">收到第<span class="hljs-number">1</span>个连接。目标<span class="hljs-built_in">ip</span>地址为：/<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">101</span>，目标端口为：<span class="hljs-number">10266</span>。<br>收到第<span class="hljs-number">2</span>个连接。目标<span class="hljs-built_in">ip</span>地址为：/<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">101</span>，目标端口为：<span class="hljs-number">10496</span>。<br>收到第<span class="hljs-number">3</span>个连接。目标<span class="hljs-built_in">ip</span>地址为：/<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">101</span>，目标端口为：<span class="hljs-number">10503</span>。<br></code></pre></td></tr></table></figure><h4 id="客户端服务端通信"><a href="#客户端服务端通信" class="headerlink" title="客户端服务端通信"></a>客户端服务端通信</h4><p>建立TCP连接后，<font color="Red">客户端和服务端之间的通信其实就是IO操作，注意每次输出完了之后都要调用socket.shutdownOutput()方法，表明其中一方输出结束，另外一方可以开始接收消息。</font>一个简单的通信的例子如下：</p><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerTest02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InetAddress serveraddr = InetAddress.getByName(<span class="hljs-string">&quot;192.168.0.101&quot;</span>);<br>        ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">8888</span>, <span class="hljs-number">50</span>, serveraddr);<br>        <span class="hljs-keyword">int</span> nums = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            Socket socket = serverSocket.accept();<br>            nums++;<br><br>            <span class="hljs-comment">// 读取客户端消息</span><br>            InputStream inputStream = socket.getInputStream();<br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="hljs-number">0</span>)&#123;<br>                sb.append(<span class="hljs-keyword">new</span> String(buffer, <span class="hljs-number">0</span>, len, StandardCharsets.UTF_8));<br>            &#125;<br>            System.out.println(sb.toString());<br><br>            <span class="hljs-comment">// 向客户端回复</span><br>            String reply = <span class="hljs-string">&quot;客户端，你好！—— reply from server(&quot;</span> + socket.getLocalPort() + <span class="hljs-string">&quot;) to client(&quot;</span> + socket.getPort() + <span class="hljs-string">&quot;)&quot;</span>;<br>            OutputStream outputStream = socket.getOutputStream();<br>            outputStream.write(reply.getBytes(StandardCharsets.UTF_8));<br>            outputStream.flush();<br>            socket.shutdownOutput();<br><br>            <span class="hljs-comment">// 关闭</span><br>            inputStream.close();<br>            outputStream.close();<br>            socket.close();<br>            <span class="hljs-keyword">if</span> (nums &gt;= <span class="hljs-number">10</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        serverSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientTest02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InetAddress serverAddr = InetAddress.getByName(<span class="hljs-string">&quot;192.168.0.101&quot;</span>);<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">8888</span>;<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(serverAddr, port);<br><br>        <span class="hljs-comment">// 向服务器发送消息</span><br>        OutputStream outputStream = socket.getOutputStream();<br>        String message = <span class="hljs-string">&quot;服务器，你好！—— message from client whose port is &quot;</span> + socket.getLocalPort();<br>        outputStream.write(message.getBytes(StandardCharsets.UTF_8));<br>        outputStream.flush();<br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">// 读取服务器回复的消息</span><br>        InputStream inputStream = socket.getInputStream();<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="hljs-number">0</span>)&#123;<br>            sb.append(<span class="hljs-keyword">new</span> String(buffer, <span class="hljs-number">0</span>, len, StandardCharsets.UTF_8));<br>        &#125;<br>        System.out.println(sb.toString());<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        outputStream.close();<br>        inputStream.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>socket入门学习</title>
    <link href="/computer-science/Computer-Networking/socket/"/>
    <url>/computer-science/Computer-Networking/socket/</url>
    
    <content type="html"><![CDATA[<p>本学习笔记基于ubuntu18+cpp14中socket代码，学习socket。</p><p>最权威的文档：man命令。</p><h2 id="1、socket是什么"><a href="#1、socket是什么" class="headerlink" title="1、socket是什么"></a>1、socket是什么</h2><p>socket是一个**<font color="Red">文件描述符（file descriptor）</font>**，可以通过设置DOMAIN、TYPE、PROTOCOL来创建不同类型的socket。</p><p>linux将网络IO抽象为对文件的IO，socket就是网络IO的一个通道或者接口。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// &lt;sys/socket.h&gt;</span><br><br><span class="hljs-comment">/* Create a new socket of type TYPE in domain DOMAIN, using</span><br><span class="hljs-comment">   protocol PROTOCOL.  If PROTOCOL is zero, one is chosen automatically.</span><br><span class="hljs-comment">   Returns a file descriptor for the new socket, or -1 for errors.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">socket</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __domain, <span class="hljs-keyword">int</span> __type, <span class="hljs-keyword">int</span> __protocol)</span> __THROW</span>;<br></code></pre></td></tr></table></figure><h3 id="（1）DOMAIN"><a href="#（1）DOMAIN" class="headerlink" title="（1）DOMAIN"></a>（1）DOMAIN</h3><p>DOMAIN是指地址簇，或者协议簇，表示不同类型的<strong>地址识别方式</strong>。如下所示有这么多种地址簇。</p><p>最常用的就是TCP/IP协议簇，即<code>PF_INET</code>，或<code>AF_INET</code>；以及IPV6协议簇，<code>PF_INET6</code>，或<code>AF_INET6</code>。</p><p>protocol family和address family本质上是同一种分类，只是为了适配不同的系统才形成两类宏名。在linux上我们一般用<code>AF</code>这一套。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Protocol families.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_UNSPEC0<span class="hljs-comment">/* Unspecified.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_LOCAL1<span class="hljs-comment">/* Local to host (pipes and file-domain).  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_UNIXPF_LOCAL <span class="hljs-comment">/* POSIX name for PF_LOCAL.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_FILEPF_LOCAL <span class="hljs-comment">/* Another non-standard name for PF_LOCAL.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_INET2<span class="hljs-comment">/* IP protocol family.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_AX253<span class="hljs-comment">/* Amateur Radio AX.25.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IPX4<span class="hljs-comment">/* Novell Internet Protocol.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_APPLETALK5<span class="hljs-comment">/* Appletalk DDP.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_NETROM6<span class="hljs-comment">/* Amateur radio NetROM.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_BRIDGE7<span class="hljs-comment">/* Multiprotocol bridge.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ATMPVC8<span class="hljs-comment">/* ATM PVCs.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_X259<span class="hljs-comment">/* Reserved for X.25 project.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_INET610<span class="hljs-comment">/* IP version 6.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ROSE11<span class="hljs-comment">/* Amateur Radio X.25 PLP.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_DECnet12<span class="hljs-comment">/* Reserved for DECnet project.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_NETBEUI13<span class="hljs-comment">/* Reserved for 802.2LLC project.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_SECURITY14<span class="hljs-comment">/* Security callback pseudo AF.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_KEY15<span class="hljs-comment">/* PF_KEY key management API.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_NETLINK16</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ROUTEPF_NETLINK <span class="hljs-comment">/* Alias to emulate 4.4BSD.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_PACKET17<span class="hljs-comment">/* Packet family.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ASH18<span class="hljs-comment">/* Ash.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ECONET19<span class="hljs-comment">/* Acorn Econet.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ATMSVC20<span class="hljs-comment">/* ATM SVCs.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_RDS21<span class="hljs-comment">/* RDS sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_SNA22<span class="hljs-comment">/* Linux SNA Project */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IRDA23<span class="hljs-comment">/* IRDA sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_PPPOX24<span class="hljs-comment">/* PPPoX sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_WANPIPE25<span class="hljs-comment">/* Wanpipe API sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_LLC26<span class="hljs-comment">/* Linux LLC.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IB27<span class="hljs-comment">/* Native InfiniBand address.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_MPLS28<span class="hljs-comment">/* MPLS.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_CAN29<span class="hljs-comment">/* Controller Area Network.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_TIPC30<span class="hljs-comment">/* TIPC sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_BLUETOOTH31<span class="hljs-comment">/* Bluetooth sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IUCV32<span class="hljs-comment">/* IUCV sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_RXRPC33<span class="hljs-comment">/* RxRPC sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ISDN34<span class="hljs-comment">/* mISDN sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_PHONET35<span class="hljs-comment">/* Phonet sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IEEE80215436<span class="hljs-comment">/* IEEE 802.15.4 sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_CAIF37<span class="hljs-comment">/* CAIF sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ALG38<span class="hljs-comment">/* Algorithm sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_NFC39<span class="hljs-comment">/* NFC sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_VSOCK40<span class="hljs-comment">/* vSockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_KCM41<span class="hljs-comment">/* Kernel Connection Multiplexor.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_QIPCRTR42<span class="hljs-comment">/* Qualcomm IPC Router.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_SMC43<span class="hljs-comment">/* SMC sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_MAX44<span class="hljs-comment">/* For now..  */</span></span><br><br><span class="hljs-comment">/* Address families.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_UNSPECPF_UNSPEC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_LOCALPF_LOCAL</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_UNIXPF_UNIX</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_FILEPF_FILE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_INETPF_INET</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_AX25PF_AX25</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IPXPF_IPX</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_APPLETALKPF_APPLETALK</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_NETROMPF_NETROM</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_BRIDGEPF_BRIDGE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ATMPVCPF_ATMPVC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_X25PF_X25</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_INET6PF_INET6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ROSEPF_ROSE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_DECnetPF_DECnet</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_NETBEUIPF_NETBEUI</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_SECURITYPF_SECURITY</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_KEYPF_KEY</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_NETLINKPF_NETLINK</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ROUTEPF_ROUTE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_PACKETPF_PACKET</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ASHPF_ASH</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ECONETPF_ECONET</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ATMSVCPF_ATMSVC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_RDSPF_RDS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_SNAPF_SNA</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IRDAPF_IRDA</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_PPPOXPF_PPPOX</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_WANPIPEPF_WANPIPE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_LLCPF_LLC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IBPF_IB</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_MPLSPF_MPLS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_CANPF_CAN</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_TIPCPF_TIPC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_BLUETOOTHPF_BLUETOOTH</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IUCVPF_IUCV</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_RXRPCPF_RXRPC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ISDNPF_ISDN</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_PHONETPF_PHONET</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IEEE802154PF_IEEE802154</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_CAIFPF_CAIF</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ALGPF_ALG</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_NFCPF_NFC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_VSOCKPF_VSOCK</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_KCMPF_KCM</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_QIPCRTRPF_QIPCRTR</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_SMCPF_SMC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_MAXPF_MAX</span><br></code></pre></td></tr></table></figure><h3 id="（2）TYPE"><a href="#（2）TYPE" class="headerlink" title="（2）TYPE"></a>（2）TYPE</h3><p>TYPE是指socket传输类型，表示不同的<strong>传输层类型</strong>，如下所示。</p><ul><li>SOCK_STREAM，即有序的、可靠的、基于连接的字节流。（TCP）</li><li>SOCK_DGRAM，面向无连接的，不可靠，固定最大长度数据包。（UDP）</li><li>SOCK_RAW，原始socket数据包，需要手动解析数据包格式并作出对应处理。可以理解为TCP/UDP一种封装好了的数据包格式，而RAW则需要自己封装或解析数据包。</li><li>SOCK_PACKET，直接从网络链路层获取数据并处理数据，如MySQL、postgresql数据库连接的各种驱动就是这种网络连接方式。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Types of sockets.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> __<span class="hljs-title">socket_type</span></span><br><span class="hljs-class">&#123;</span><br>  SOCK_STREAM = <span class="hljs-number">1</span>,<span class="hljs-comment">/* Sequenced, reliable, connection-based</span><br><span class="hljs-comment">   byte streams.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_STREAM SOCK_STREAM</span><br>  SOCK_DGRAM = <span class="hljs-number">2</span>,<span class="hljs-comment">/* Connectionless, unreliable datagrams</span><br><span class="hljs-comment">   of fixed maximum length.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_DGRAM SOCK_DGRAM</span><br>  SOCK_RAW = <span class="hljs-number">3</span>,<span class="hljs-comment">/* Raw protocol interface.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_RAW SOCK_RAW</span><br>  SOCK_RDM = <span class="hljs-number">4</span>,<span class="hljs-comment">/* Reliably-delivered messages.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_RDM SOCK_RDM</span><br>  SOCK_SEQPACKET = <span class="hljs-number">5</span>,<span class="hljs-comment">/* Sequenced, reliable, connection-based,</span><br><span class="hljs-comment">   datagrams of fixed maximum length.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_SEQPACKET SOCK_SEQPACKET</span><br>  SOCK_DCCP = <span class="hljs-number">6</span>,<span class="hljs-comment">/* Datagram Congestion Control Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_DCCP SOCK_DCCP</span><br>  SOCK_PACKET = <span class="hljs-number">10</span>,<span class="hljs-comment">/* Linux specific way of getting packets</span><br><span class="hljs-comment">   at the dev level.  For writing rarp and</span><br><span class="hljs-comment">   other similar things on the user level. */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_PACKET SOCK_PACKET</span><br><br>  <span class="hljs-comment">/* Flags to be ORed into the type parameter of socket and socketpair and</span><br><span class="hljs-comment">     used for the flags parameter of paccept.  */</span><br><br>  SOCK_CLOEXEC = <span class="hljs-number">02000000</span>,<span class="hljs-comment">/* Atomically set close-on-exec flag for the</span><br><span class="hljs-comment">   new descriptor(s).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_CLOEXEC SOCK_CLOEXEC</span><br>  SOCK_NONBLOCK = <span class="hljs-number">00004000</span><span class="hljs-comment">/* Atomically mark descriptor(s) as</span><br><span class="hljs-comment">   non-blocking.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_NONBLOCK SOCK_NONBLOCK</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="（3）PROTOCAL"><a href="#（3）PROTOCAL" class="headerlink" title="（3）PROTOCAL"></a>（3）PROTOCAL</h3><p>PROTOCAL表示最终socket通信协议类型（= 网络层协议 + 传输层协议）。基于IP协议簇包括的协议类型如下。</p><p>如果选择0，用于TCP的虚拟协议，则操作系统会自动根据前两个参数选择一种协议。若自己填，却填错了，则无法创建socket。所以一般填0即可。</p><ul><li>IPPROTO_TCP，网络层使用IP协议，传输层使用TCP协议。</li><li>IPPROTO_TCP，网络层使用IP协议，传输层使用TCP协议。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Standard well-defined IP protocols.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">  &#123;</span><br>    IPPROTO_IP = <span class="hljs-number">0</span>,   <span class="hljs-comment">/* Dummy protocol for TCP.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IPIPPROTO_IP</span><br>    IPPROTO_ICMP = <span class="hljs-number">1</span>,   <span class="hljs-comment">/* Internet Control Message Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_ICMPIPPROTO_ICMP</span><br>    IPPROTO_IGMP = <span class="hljs-number">2</span>,   <span class="hljs-comment">/* Internet Group Management Protocol. */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IGMPIPPROTO_IGMP</span><br>    IPPROTO_IPIP = <span class="hljs-number">4</span>,   <span class="hljs-comment">/* IPIP tunnels (older KA9Q tunnels use 94).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IPIPIPPROTO_IPIP</span><br>    IPPROTO_TCP = <span class="hljs-number">6</span>,   <span class="hljs-comment">/* Transmission Control Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_TCPIPPROTO_TCP</span><br>    IPPROTO_EGP = <span class="hljs-number">8</span>,   <span class="hljs-comment">/* Exterior Gateway Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_EGPIPPROTO_EGP</span><br>    IPPROTO_PUP = <span class="hljs-number">12</span>,   <span class="hljs-comment">/* PUP protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_PUPIPPROTO_PUP</span><br>    IPPROTO_UDP = <span class="hljs-number">17</span>,   <span class="hljs-comment">/* User Datagram Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_UDPIPPROTO_UDP</span><br>    IPPROTO_IDP = <span class="hljs-number">22</span>,   <span class="hljs-comment">/* XNS IDP protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IDPIPPROTO_IDP</span><br>    IPPROTO_TP = <span class="hljs-number">29</span>,   <span class="hljs-comment">/* SO Transport Protocol Class 4.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_TPIPPROTO_TP</span><br>    IPPROTO_DCCP = <span class="hljs-number">33</span>,   <span class="hljs-comment">/* Datagram Congestion Control Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_DCCPIPPROTO_DCCP</span><br>    IPPROTO_IPV6 = <span class="hljs-number">41</span>,     <span class="hljs-comment">/* IPv6 header.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IPV6IPPROTO_IPV6</span><br>    IPPROTO_RSVP = <span class="hljs-number">46</span>,   <span class="hljs-comment">/* Reservation Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_RSVPIPPROTO_RSVP</span><br>    IPPROTO_GRE = <span class="hljs-number">47</span>,   <span class="hljs-comment">/* General Routing Encapsulation.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_GREIPPROTO_GRE</span><br>    IPPROTO_ESP = <span class="hljs-number">50</span>,      <span class="hljs-comment">/* encapsulating security payload.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_ESPIPPROTO_ESP</span><br>    IPPROTO_AH = <span class="hljs-number">51</span>,       <span class="hljs-comment">/* authentication header.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_AHIPPROTO_AH</span><br>    IPPROTO_MTP = <span class="hljs-number">92</span>,   <span class="hljs-comment">/* Multicast Transport Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_MTPIPPROTO_MTP</span><br>    IPPROTO_BEETPH = <span class="hljs-number">94</span>,   <span class="hljs-comment">/* IP option pseudo header for BEET.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_BEETPHIPPROTO_BEETPH</span><br>    IPPROTO_ENCAP = <span class="hljs-number">98</span>,   <span class="hljs-comment">/* Encapsulation Header.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_ENCAPIPPROTO_ENCAP</span><br>    IPPROTO_PIM = <span class="hljs-number">103</span>,   <span class="hljs-comment">/* Protocol Independent Multicast.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_PIMIPPROTO_PIM</span><br>    IPPROTO_COMP = <span class="hljs-number">108</span>,   <span class="hljs-comment">/* Compression Header Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_COMPIPPROTO_COMP</span><br>    IPPROTO_SCTP = <span class="hljs-number">132</span>,   <span class="hljs-comment">/* Stream Control Transmission Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_SCTPIPPROTO_SCTP</span><br>    IPPROTO_UDPLITE = <span class="hljs-number">136</span>, <span class="hljs-comment">/* UDP-Lite protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_UDPLITEIPPROTO_UDPLITE</span><br>    IPPROTO_MPLS = <span class="hljs-number">137</span>,    <span class="hljs-comment">/* MPLS in IP.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_MPLSIPPROTO_MPLS</span><br>    IPPROTO_RAW = <span class="hljs-number">255</span>,   <span class="hljs-comment">/* Raw IP packets.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_RAWIPPROTO_RAW</span><br>    IPPROTO_MAX<br>  &#125;;<br></code></pre></td></tr></table></figure><h3 id="（4）创建socket"><a href="#（4）创建socket" class="headerlink" title="（4）创建socket"></a>（4）创建socket</h3><p>若成功创建socket，则返回大于0的数字。创建失败则返回-1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 基于ipv4的TCP连接</span><br><span class="hljs-keyword">int</span> socket1 = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br>cout &lt;&lt; socket1 &lt;&lt; endl;<br><br><span class="hljs-comment">// 基于ipv4的UDP连接</span><br><span class="hljs-keyword">int</span> socket2 = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, IPPROTO_UDP);<br>cout &lt;&lt; socket2 &lt;&lt; endl;<br><br><span class="hljs-comment">// 基于ipv4的原始数据包</span><br><span class="hljs-keyword">int</span> socket3 = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_RAW, <span class="hljs-number">0</span>);<br>cout &lt;&lt; socket3 &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="2、创建socket地址"><a href="#2、创建socket地址" class="headerlink" title="2、创建socket地址"></a>2、创建socket地址</h2><p>以ipv4地址为例。sockaddr_in结构体即为socket地址，三个变量分别为：</p><ul><li>SOCKADDR_COMMON (sin_)，地址簇，即创建socket的第一个参数</li><li>in_port_t sin_port，端口，是一个2字节无符号整数（unsigned short int）。<ul><li>htons方法用于将unsigned short int型主机字节序的端口数字转换成网络传输需要的字节序的端口数字。</li></ul></li><li>struct in_addr sin_addr，具体ip地址，是一个4字节无符号整数（unsigned int）。<ul><li>htonl方法用于将unsigned int型主机字节序的端口数字转换成网络传输需要的字节序的端口数字。</li></ul></li></ul><p>常用地址如下：</p><ul><li>INADDR_LOOPBACK，本机回环地址，127.0.0.0</li><li>INADDR_ANY，接收任意收到的消息，0.0.0.0</li><li>INADDR_BROADCASE，广播地址，发动消息到任意主机，255.255.255.255</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Structure describing an Internet socket address.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span></span><br><span class="hljs-class">  &#123;</span><br>    __SOCKADDR_COMMON (sin_);<br>    <span class="hljs-keyword">in_port_t</span> sin_port;<span class="hljs-comment">/* Port number.  */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">sin_addr</span>;</span><span class="hljs-comment">/* Internet address.  */</span><br><br>    <span class="hljs-comment">/* Pad to size of `struct sockaddr&#x27;.  */</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> sin_zero[<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (struct sockaddr) -<br>   __SOCKADDR_COMMON_SIZE -<br>   <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (<span class="hljs-keyword">in_port_t</span>) -<br>   <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (struct in_addr)];<br>  &#125;;<br><br><span class="hljs-comment">/* Internet address.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">uint32_t</span> <span class="hljs-keyword">in_addr_t</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-keyword">in_addr_t</span> s_addr;<br>  &#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__uint32_t</span> <span class="hljs-keyword">uint32_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">__uint32_t</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">uint32_t</span> <span class="hljs-title">htonl</span> <span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> __hostlong)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">uint16_t</span> <span class="hljs-title">htons</span> <span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> __hostshort)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span></span>;<br></code></pre></td></tr></table></figure><p>创建socket地址：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">sockaddr_in addr&#123;&#125;;<br>addr.sin_family = AF_INET;<br><span class="hljs-keyword">short</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">3000</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;转换前的端口为：&quot;</span> &lt;&lt; <span class="hljs-number">3000</span> &lt;&lt; <span class="hljs-string">&quot;，转换后的端口为：&quot;</span> &lt;&lt; port &lt;&lt; endl;<br>addr.sin_port = port;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> address = <span class="hljs-built_in">htonl</span>(INADDR_LOOPBACK);<br>cout &lt;&lt; <span class="hljs-string">&quot;转换前的地址为：&quot;</span> &lt;&lt; INADDR_LOOPBACK &lt;&lt; <span class="hljs-string">&quot;，转换后的地址为：&quot;</span> &lt;&lt; address &lt;&lt; endl;<br>addr.sin_addr.s_addr = address;<br></code></pre></td></tr></table></figure><h2 id="3、setsockopt"><a href="#3、setsockopt" class="headerlink" title="3、setsockopt"></a>3、setsockopt</h2><p>该方法用于设置socket选项，可选调用，也可以不调用该方法，使用默认选项。但通常来说启动其中的“复用端口号”选项可以开启，若不开启该选项，重启server端的socket程序时，会绑定端口错误，说端口正在被使用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Set socket FD&#x27;s option OPTNAME at protocol level LEVEL</span><br><span class="hljs-comment">   to *OPTVAL (which is OPTLEN bytes long).</span><br><span class="hljs-comment">   Returns 0 on success, -1 for errors.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setsockopt</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __level, <span class="hljs-keyword">int</span> __optname,</span></span><br><span class="hljs-params"><span class="hljs-function">             <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__optval, <span class="hljs-keyword">socklen_t</span> __optlen)</span> __THROW</span>;<br><br><span class="hljs-built_in">setsockopt</span>(welcome_socket, SOL_SOCKET, SO_REUSEADDR, &amp;enable, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br></code></pre></td></tr></table></figure><p>socket选项如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_DEBUG1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_REUSEADDR2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_TYPE3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_ERROR4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_DONTROUTE5</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_BROADCAST6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_SNDBUF7</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_RCVBUF8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_SNDBUFFORCE32</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_RCVBUFFORCE33</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_KEEPALIVE9</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_OOBINLINE10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_NO_CHECK11</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_PRIORITY12</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_LINGER13</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_BSDCOMPAT14</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_REUSEPORT15</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SO_PASSCRED <span class="hljs-comment">/* powerpc only differs in these */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_PASSCRED16</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_PEERCRED17</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_RCVLOWAT18</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_SNDLOWAT19</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_RCVTIMEO20  <span class="hljs-comment">// 接收消息的超时时间</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_SNDTIMEO21  <span class="hljs-comment">// 发送消息的超时时间</span></span><br></code></pre></td></tr></table></figure><h2 id="4、server-socket创建"><a href="#4、server-socket创建" class="headerlink" title="4、server socket创建"></a>4、server socket创建</h2><p>socket表示网络IO的通道，服务器和客户端通信都需要创建socket，服务端接收连接，客户端发起连接。</p><p>创建服务端的socket，有以下步骤：</p><ul><li>创建服务端welcome socket，该socket专门用于接收连接而不会从该socket读取数据。</li><li>创建服务端地址结构体sockaddr_in</li><li>绑定端口并监听</li><li>接收连接，获取connection socket，该socket代表一个连接会话，可以从该socket中读取数据。</li><li>读取字节流，处理，写入输出字节流</li></ul><h3 id="（1）绑定、监听"><a href="#（1）绑定、监听" class="headerlink" title="（1）绑定、监听"></a>（1）绑定、监听</h3><p>将创建的socket绑定到创建的ip地址上。</p><p>其中需要将sockaddr_in强制转换为sockaddr指针再绑定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Give the socket FD the local address ADDR (which is LEN bytes long).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bind</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, __CONST_SOCKADDR_ARG __addr, <span class="hljs-keyword">socklen_t</span> __len)</span></span><br><span class="hljs-function">     __THROW</span>;<br><br><span class="hljs-comment">/* Structure describing a generic socket address.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span></span><br><span class="hljs-class">  &#123;</span><br>    __SOCKADDR_COMMON (sa_);<span class="hljs-comment">/* Common data: address family and length.  */</span><br>    <span class="hljs-keyword">char</span> sa_data[<span class="hljs-number">14</span>];<span class="hljs-comment">/* Address data.  */</span><br>  &#125;;<br><br><span class="hljs-built_in">bind</span>(welcome_socket1, (struct sockaddr *) &amp;addr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr));<br></code></pre></td></tr></table></figure><p>开启对socket的监听，准备接受客户端连接。</p><p>N表示最大队列数，当程序已经接收到一个connection时，若还有其他客户端发起连接，则会进入队列中，当前连接处理结束后会直接从队列中取出下一个连接进行处理。超过该数字的连接将会被抛弃。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Prepare to accept connections on socket FD.</span><br><span class="hljs-comment">   N connection requests will be queued before further requests are refused.</span><br><span class="hljs-comment">   Returns 0 on success, -1 for errors.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">listen</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __n)</span> __THROW</span>;<br><br><span class="hljs-built_in">listen</span>(welcome_socket1, <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><h3 id="（2）接收连接"><a href="#（2）接收连接" class="headerlink" title="（2）接收连接"></a>（2）接收连接</h3><p>在已经创建好的服务端socket上阻塞等待客户端连接。</p><ul><li><p>addr指针表示连接对方的地址，可以用INADDR_ANY表示任意地址，或者填如nullptr，也表示任意地址。若指定了某个地址，则只有该地址可以访问。</p></li><li><p>addr_len指针表示addr的sizeof。</p></li></ul><p>当接收到一个客户端连接时，该方法就返回一个整数，代表本次会话的连接socket。</p><p>注意这个连接socket和服务端socket不一样。服务端socket只用于接收新的连接，而连接socket</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Await a connection on socket FD.</span><br><span class="hljs-comment">   When a connection arrives, open a new socket to communicate with it,</span><br><span class="hljs-comment">   set *ADDR (which is *ADDR_LEN bytes long) to the address of the connecting</span><br><span class="hljs-comment">   peer and *ADDR_LEN to the address&#x27;s actual length, and return the</span><br><span class="hljs-comment">   new socket&#x27;s descriptor, or -1 for errors.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">accept</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, __SOCKADDR_ARG __addr,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">socklen_t</span> *__restrict __addr_len)</span></span>;<br><br><span class="hljs-keyword">int</span> connection_socket = <span class="hljs-built_in">accept</span>(welcome_socket1, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br></code></pre></td></tr></table></figure><h3 id="（3）读取返回"><a href="#（3）读取返回" class="headerlink" title="（3）读取返回"></a>（3）读取返回</h3><p>从使用read方法可以从刚才得到的连接socket中读取字节流，可以用一个缓冲区接收该字节流。</p><p>经处理后，再将响应消息通过write方法，写入这个连接socket</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">read</span>(connection_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buffer);<br><span class="hljs-keyword">char</span>* response = <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-built_in">send</span>(connection_socket, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">close</span>(welcome_socket);<br><span class="hljs-built_in">close</span>(connection_socket);<br></code></pre></td></tr></table></figure><h3 id="（4）服务端完整代码"><a href="#（4）服务端完整代码" class="headerlink" title="（4）服务端完整代码"></a>（4）服务端完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-comment">// TCP连接</span><br>    <span class="hljs-keyword">int</span> welcome_socket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (welcome_socket &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;socket创建失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> enable = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">setsockopt</span>(welcome_socket, SOL_SOCKET, SO_REUSEADDR | SO_REUSEADDR, &amp;enable, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-comment">// 创建地址</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>&#123;</span>&#125;;<br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class="hljs-built_in">htons</span>(port);<br>    addr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr);<br><br>    <span class="hljs-comment">// 绑定并并监听</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(welcome_socket, (sockaddr*) &amp;addr, len) &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-comment">// listen的第二个参数n，表示最大队列数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(welcome_socket, <span class="hljs-number">10</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;监听失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">int</span> conn_socket = <span class="hljs-built_in">accept</span>(welcome_socket, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>        <span class="hljs-keyword">if</span> (conn_socket &lt; <span class="hljs-number">0</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;客户端连接失败&quot;</span>;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-built_in">read</span>(conn_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buffer);<br>        <span class="hljs-keyword">char</span>* response = <span class="hljs-string">&quot;OK&quot;</span>;<br>        <span class="hljs-built_in">send</span>(conn_socket, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">close</span>(conn_socket);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、client-socket创建"><a href="#5、client-socket创建" class="headerlink" title="5、client socket创建"></a>5、client socket创建</h2><p>创建client socket和server端的socket差异不大，只是没有welcome socket和client的区分，以及连接服务端的方法不是accept，而是connect。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_client</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* host, <span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> client_socket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (client_socket &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;客户端socket创建失败！&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">serverAddr</span>&#123;</span>&#125;;<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = <span class="hljs-built_in">htons</span>(port);<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-built_in">inet_pton</span>(AF_INET, host, &amp;serverAddr.sin_addr);<br>    <span class="hljs-keyword">if</span> (res &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;解析host失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    res = <span class="hljs-built_in">connect</span>(client_socket, (struct sockaddr *) &amp;serverAddr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(serverAddr));<br>    <span class="hljs-keyword">if</span> (res &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;连接服务器失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">char</span>* message = <span class="hljs-string">&quot;hello server, I&#x27;m client!&quot;</span>;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">send</span>(client_socket, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;消息发送失败&quot;</span> &lt;&lt; endl;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;消息已发送&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-built_in">read</span>(client_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buffer);<br>    <span class="hljs-built_in">close</span>(client_socket);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、fork-server"><a href="#6、fork-server" class="headerlink" title="6、fork server"></a>6、fork server</h2><p>以上说的tcp server只能处理一个连接，无法处理多个请求。想要处理多个请求，第一时间可以想到用多进程或多进线程，可以通过fork一个server进程来实现处理多请求。在以往的unix操作系统中，使用多线程的难度高于使用多进程，因此大多数c++程序员使用多进程而不是多线程来处理多任务。</p><p>代码如下。</p><ul><li><p><code>signal(SIGCHLD, SIG_IGN);</code>，忽略子进程的信号，子进程会交给操作系统内核来回收</p></li><li><p><code>fork()</code>，可以创建一个子进程，子进程使用的资源全部是从父进程复制的来。在子进程中该方法返回0，父进程中返回子进程的pid。</p></li></ul><p>这里不深入讨论fork和signal的细节。</p><p>题外话：postgres、linux上的oracle数据库的连接就是多进程的，而MySQL是多线程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fork_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-built_in">signal</span>(SIGCHLD, SIG_IGN); <span class="hljs-comment">// 忽略子进程的信号，子进程会交给操作系统内核来回收</span><br>    <span class="hljs-comment">// TCP连接</span><br>    <span class="hljs-keyword">int</span> welcome_socket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (welcome_socket &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;socket创建失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> enable = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">setsockopt</span>(welcome_socket, SOL_SOCKET, SO_REUSEADDR | SO_REUSEADDR, &amp;enable, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-comment">// 创建地址</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>&#123;</span>&#125;;<br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class="hljs-built_in">htons</span>(port);<br>    addr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr);<br><br>    <span class="hljs-comment">// 绑定并并监听</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(welcome_socket, (sockaddr*) &amp;addr, len) &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-comment">// listen的第二个参数n，表示最大队列数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(welcome_socket, <span class="hljs-number">10</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;监听失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">int</span> conn_socket = <span class="hljs-built_in">accept</span>(welcome_socket, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>        <span class="hljs-keyword">if</span> (conn_socket &lt; <span class="hljs-number">0</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;客户端连接失败&quot;</span>;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 如果该进程是父进程，收到一个connection，只需要fork一个子进程，将连接交给子进程来处理，自己可以回去继续接收连接</span><br>        <span class="hljs-keyword">if</span> (fork() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">// 以下是子进程操作</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-keyword">int</span> size = <span class="hljs-built_in">read</span>(conn_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>            <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, buffer, count++);<br>            <span class="hljs-keyword">char</span>* response = buffer;<br>            <span class="hljs-built_in">send</span>(conn_socket, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-built_in">close</span>(conn_socket);<br>        <span class="hljs-comment">// 子进程需要关闭welcome_socket，并结束进程</span><br>        <span class="hljs-built_in">close</span>(welcome_socket);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7、心跳"><a href="#7、心跳" class="headerlink" title="7、心跳"></a>7、心跳</h2><p>服务端对于一个已经建立好的连接，经常会设置接收消息的超时时间，即若超过这个时间没有消息到来时，就会断开该连接。</p><p>服务端设置超时时间只需要对connectin socket设置setsockopt即可，如下。</p><p>当服务端加上以下代码时，若客户端连接上后，超过10秒没有发送消息，服务端则会自动断开该连接。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 设置接收报文超时时间</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>&#123;</span>&#125;;<br>tv.tv_usec = <span class="hljs-number">0</span>;<br>tv.tv_sec = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">setsockopt</span>(conn_socket, SOL_SOCKET, SO_RCVTIMEO, &amp;tv, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(tv));<br></code></pre></td></tr></table></figure><p>而客户端为了保证一直保持连接状态，就需要定时向服务端发送心跳包。可以简单通过fork一个客户端进程来时间定时发送心跳包。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 若为子进程，则无限循环每过5秒发送发送心跳包。</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-built_in">send</span>(client_socket, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;&#125;;<br>        <span class="hljs-built_in">read</span>(client_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buffer);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">5</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时服务端也需要对收到的消息进行额外处理。若为心跳包，则不进行业务处理，而是直接返回一个success。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 简单设定心跳报文为一个字符0，则当服务端收到心跳报文，不进行业务处理，只返回可以只返回一个成功消息即可。</span><br><span class="hljs-keyword">if</span> (size == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">strcmp</span>(buffer, <span class="hljs-string">&quot;0&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;heart beat!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">char</span>* response = <span class="hljs-string">&quot;success&quot;</span>;<br>    <span class="hljs-built_in">send</span>(conn_socket, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">close</span>(conn_socket);<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8、select"><a href="#8、select" class="headerlink" title="8、select"></a>8、select</h2><h3 id="（1）介绍"><a href="#（1）介绍" class="headerlink" title="（1）介绍"></a>（1）介绍</h3><p>前面说的server socket每次只能处理一个客户端连接，当有多个客户端尝试请求服务器时，会以队列的形式一个一个处理。因此要处理多个客户端的连接，可以使用<strong>select</strong>命令。</p><p>select命令允许监控多个socket，当这些socket都没有事件发生时，select被阻塞，当任意一个socket变为活动状态时就会返回对应socket数字，当select的返回值为-1时，则表示产生异常。</p><p>select命令使用的结构体是<code>fd_set</code>，即socket要放在这个结构体中，才能被监控到。该默认大小是128个字节，结构体底层使用bitmap，128个字节对应1024位，每个位代表一个socket，因此最多可以记录1024个socket情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* fd_set for select and pselect.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-comment">/* XPG4.2 requires this member name.  Otherwise avoid the name</span><br><span class="hljs-comment">       from the global namespace.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN</span><br>    __fd_mask fds_bits[__FD_SETSIZE / __NFDBITS];<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __FDS_BITS(set) ((set)-&gt;fds_bits)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    __fd_mask __fds_bits[__FD_SETSIZE / __NFDBITS];<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __FDS_BITS(set) ((set)-&gt;__fds_bits)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>  &#125; fd_set;<br></code></pre></td></tr></table></figure><p>对<code>fd_set</code>数据结构的操作方法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">fd_set read_fd;<br><br><span class="hljs-comment">// 清空fd_set</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;read_fd);  <br><br><span class="hljs-comment">// 往fd_set中新增一个文件描述符，即将bitmap对应位置的值设置为1</span><br><span class="hljs-built_in">FD_SET</span>(master_sock, &amp;read_fd);   <br><br><span class="hljs-comment">// 从fd_set中移除一个文件描述符，即将bitmap对应位置的值设置为0</span><br><span class="hljs-built_in">FD_CLR</span>(master_sock, &amp;read_fd); <br><br><span class="hljs-comment">// 如果一个文件描述符中发生了一些事件，则返回1，否则返回0。该事件可以是新连接、可读事件、可写事件等等。</span><br><span class="hljs-built_in">FD_ISSET</span>(master_sock, &amp;readfds); <br></code></pre></td></tr></table></figure><p>select函数如下：</p><ul><li>返回值 &gt; 1，即活跃的socket</li><li>返回值 = 0，超时</li><li>返回值 = -1，出现异常</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Check the first NFDS descriptors each in READFDS (if not NULL) for read</span><br><span class="hljs-comment">   readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS</span><br><span class="hljs-comment">   (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out</span><br><span class="hljs-comment">   after waiting the interval specified therein.  Returns the number of ready</span><br><span class="hljs-comment">   descriptors, or -1 for errors.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">select</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __nfds, fd_set *__restrict __readfds,</span></span><br><span class="hljs-params"><span class="hljs-function">   fd_set *__restrict __writefds,</span></span><br><span class="hljs-params"><span class="hljs-function">   fd_set *__restrict __exceptfds,</span></span><br><span class="hljs-params"><span class="hljs-function">   struct timeval *__restrict __timeout)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="（2）流程"><a href="#（2）流程" class="headerlink" title="（2）流程"></a>（2）流程</h3><p>使用select常用轮询的方式：</p><p>1、先创建一个welcome_socket准备接收连接，创建一个数组<code>int client_socket[30]</code>用于存放收到的socket。</p><p>2、清空fd_set，将welcome_socket放入fd_set中监控，将client_socket中已有的连接放入fd_set中进行监控</p><p>3、先判断welcome是否有活动。若有活动，则创建新连接，并加入到client_socket数组中。</p><p>4、再循环client_socket依次判断这里面的所有socket是否有活动。若有活动则进行IO读写。若发现已经断开连接，则从client_socket中移除。</p><p>5、重复步骤2。</p><h3 id="（3）完整实现"><a href="#（3）完整实现" class="headerlink" title="（3）完整实现"></a>（3）完整实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">select_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> opt = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">int</span> welcome_socket , addrlen , new_socket , client_socket[<span class="hljs-number">30</span>] ,<br>            max_clients = <span class="hljs-number">30</span> , activity, i , valread , sd;<br>    <span class="hljs-keyword">int</span> max_sd, count = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">address</span> &#123;</span> &#125;;<br><br>    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1025</span>];  <span class="hljs-comment">//data buffer of 1K</span><br><br>    <span class="hljs-comment">//set of socket descriptors</span><br>    fd_set readfds;<br><br>    <span class="hljs-comment">//a message</span><br>    <span class="hljs-keyword">char</span> *message = <span class="hljs-string">&quot;ECHO Daemon v1.0 \r\n&quot;</span>;<br><br>    <span class="hljs-comment">//initialise all client_socket[] to 0 so not checked</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_clients; i++)<br>    &#123;<br>        client_socket[i] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//create a master socket</span><br>    <span class="hljs-keyword">if</span>( (welcome_socket = <span class="hljs-built_in">socket</span>(AF_INET , SOCK_STREAM , <span class="hljs-number">0</span>)) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;socket failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">//set master socket to allow multiple connections ,</span><br>    <span class="hljs-comment">//this is just a good habit, it will work without this</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-built_in">setsockopt</span>(welcome_socket, SOL_SOCKET, SO_REUSEADDR, (<span class="hljs-keyword">char</span> *)&amp;opt,<br>                   <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(opt)) &lt; <span class="hljs-number">0</span> )<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;setsockopt&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">//type of socket created</span><br>    address.sin_family = AF_INET;<br>    address.sin_addr.s_addr = INADDR_ANY;<br>    address.sin_port = <span class="hljs-built_in">htons</span>( port );<br><br>    <span class="hljs-comment">//bind the socket to localhost port 8888</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(welcome_socket, (struct sockaddr *)&amp;address, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(address))&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;bind failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Listener on port %d \n&quot;</span>, port);<br><br>    <span class="hljs-comment">//try to specify maximum of 3 pending connections for the master socket</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(welcome_socket, <span class="hljs-number">3</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;listen&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">//accept the incoming connection</span><br>    addrlen = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(address);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Waiting for connections ...&quot;</span>);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-comment">//clear the socket set</span><br>        <span class="hljs-built_in">FD_ZERO</span>(&amp;readfds);<br><br>        <span class="hljs-comment">//add master socket to set</span><br>        <span class="hljs-built_in">FD_SET</span>(welcome_socket, &amp;readfds);<br>        max_sd = welcome_socket;<br><br>        <span class="hljs-comment">//add child sockets to set</span><br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span> ; i &lt; max_clients ; i++)<br>        &#123;<br>            <span class="hljs-comment">//socket descriptor</span><br>            sd = client_socket[i];<br><br>            <span class="hljs-comment">//if valid socket descriptor then add to read list</span><br>            <span class="hljs-keyword">if</span>(sd &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">FD_SET</span>( sd , &amp;readfds);<br><br>            <span class="hljs-comment">//highest file descriptor number, need it for the select function</span><br>            <span class="hljs-keyword">if</span>(sd &gt; max_sd)<br>                max_sd = sd;<br>        &#125;<br><br>        <span class="hljs-comment">//wait for an activity on one of the sockets , timeout is NULL ,</span><br>        <span class="hljs-comment">//so wait indefinitely</span><br>        activity = <span class="hljs-built_in">select</span>( max_sd + <span class="hljs-number">1</span> , &amp;readfds , <span class="hljs-literal">nullptr</span> , <span class="hljs-literal">nullptr</span> , <span class="hljs-literal">nullptr</span>);<br><br>        <span class="hljs-keyword">if</span> ((activity &lt; <span class="hljs-number">0</span>) &amp;&amp; (errno!=EINTR))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select error&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//If something happened on the master socket ,</span><br>        <span class="hljs-comment">//then its an incoming connection</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(welcome_socket, &amp;readfds))<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((new_socket = <span class="hljs-built_in">accept</span>(welcome_socket,<br>                                     (struct sockaddr *)&amp;address, (<span class="hljs-keyword">socklen_t</span>*)&amp;addrlen))&lt;<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;accept&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>            &#125;<br><br>            <span class="hljs-comment">//inform user of socket number - used in send and receive commands</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;New connection , socket fd is %d , ip is : %s , port : %d\n&quot;</span>,<br>                   new_socket , <span class="hljs-built_in">inet_ntoa</span>(address.sin_addr) , <span class="hljs-built_in">ntohs</span>(address.sin_port));<br><br>            <span class="hljs-comment">//send new connection greeting message</span><br>            <span class="hljs-keyword">if</span>( <span class="hljs-built_in">send</span>(new_socket, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>) != <span class="hljs-built_in">strlen</span>(message) )<br>            &#123;<br>                <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;send&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome message sent successfully&quot;</span>);<br><br>            <span class="hljs-comment">//add new socket to array of sockets</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_clients; i++)<br>            &#123;<br>                <span class="hljs-comment">//if position is empty</span><br>                <span class="hljs-keyword">if</span>( client_socket[i] == <span class="hljs-number">0</span> )<br>                &#123;<br>                    client_socket[i] = new_socket;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Adding to list of sockets as %d\n&quot;</span> , i);<br><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//else its some IO operation on some other socket</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_clients; i++)<br>        &#123;<br>            sd = client_socket[i];<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>( sd , &amp;readfds))<br>            &#123;<br>                <span class="hljs-comment">//Check if it was for closing , and also read the</span><br>                <span class="hljs-comment">//incoming message</span><br>                <span class="hljs-keyword">if</span> ((valread = <span class="hljs-built_in">read</span>( sd , buffer, <span class="hljs-number">1024</span>)) == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-comment">//Somebody disconnected , get his details and print</span><br>                    <span class="hljs-built_in">getpeername</span>(sd , (struct sockaddr*)&amp;address , \<br>                        (<span class="hljs-keyword">socklen_t</span>*)&amp;addrlen);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Host disconnected , ip %s , port %d \n&quot;</span> ,<br>                           <span class="hljs-built_in">inet_ntoa</span>(address.sin_addr) , <span class="hljs-built_in">ntohs</span>(address.sin_port));<br><br>                    <span class="hljs-comment">//Close the socket and mark as 0 in list for reuse</span><br>                    <span class="hljs-built_in">close</span>( sd );<br>                    client_socket[i] = <span class="hljs-number">0</span>;<br>                &#125;<br><br>                <span class="hljs-comment">//Echo back the message that came in</span><br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">//set the string terminating NULL byte on the end</span><br>                    <span class="hljs-comment">//of the data read</span><br>                    buffer[valread] = <span class="hljs-string">&#x27;r&#x27;</span>;<br>                    buffer[valread + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, buffer, count++);<br>                    <span class="hljs-built_in">send</span>(sd , buffer , <span class="hljs-built_in">strlen</span>(buffer) , <span class="hljs-number">0</span> );<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（4）优缺点"><a href="#（4）优缺点" class="headerlink" title="（4）优缺点"></a>（4）优缺点</h3><p>优点：</p><ul><li><p>IO复用</p></li><li><p>适用于并发量小的场景，性能强</p></li></ul><p>缺点：</p><ul><li>支持的文件描述符只有1024。由于采用轮询的方式，因此调大该数值的意义不大。</li><li>只要连接没有关闭，即使没有活动，也会被遍历到，每次都要遍历所有socket，连接数越多性能越差。</li><li>每次循环之前需要拷贝socket</li></ul><h3 id="（5）pselect"><a href="#（5）pselect" class="headerlink" title="（5）pselect"></a>（5）pselect</h3><p>pselect和select基本一样，在select的基础上有两处变化：</p><ul><li>timeout结构体从timeval（秒+微秒）改成了timespec（秒+纳秒）</li><li>新增了一个__sigmask信号掩码参数</li></ul><p>嗯，不太懂。</p><h3 id="（6）注意点"><a href="#（6）注意点" class="headerlink" title="（6）注意点"></a>（6）注意点</h3><ul><li>select对于没有结束的事件，在下一次轮询中还会继续活跃。比如第一次read指定长度的buffer，但是客户端发送的数据包很大，一个buffer没有读完，因此在下一次循环中该socket依然是活跃的，可以继续从socket中读取数据。</li><li>select本质上是针对文件描述符的，因此也可以多个文件的读写进行IO复用，但很少这样用。</li></ul><h2 id="9、poll"><a href="#9、poll" class="headerlink" title="9、poll"></a>9、poll</h2><p>poll和select在本质上没有区别，也是管理多个socket然后进行轮询，根据socket的状态进行处理。</p><p>poll使用的数据结构是<code>pollfd</code>，一个封装了socket的机构体。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Data structure describing a polling request.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-comment">// socket</span><br>    <span class="hljs-keyword">int</span> fd;<span class="hljs-comment">/* File descriptor to poll.  */</span><br>    <span class="hljs-comment">// 用户注册的需要监听的事件</span><br>    <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> events;<span class="hljs-comment">/* Types of events poller cares about.  */</span><br>    <span class="hljs-comment">// 实际在socket上发生的事件</span><br>    <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> revents;<span class="hljs-comment">/* Types of events that actually occurred.  */</span><br>  &#125;;<br></code></pre></td></tr></table></figure><p>事件共有以下几种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 常用事件</span><br><span class="hljs-comment">/* Event types that can be polled for.  These bits may be set in `events&#x27;</span><br><span class="hljs-comment">   to indicate the interesting event types; they will appear in `revents&#x27;</span><br><span class="hljs-comment">   to indicate the status of the file descriptor.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLIN0x001<span class="hljs-comment">/* There is data to read.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLPRI0x002<span class="hljs-comment">/* There is urgent data to read.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLOUT0x004<span class="hljs-comment">/* Writing now will not block.  */</span></span><br><br><span class="hljs-comment">// revents事件如下，revents事件不能用于events，用于表示socket状态</span><br><span class="hljs-comment">/* Event types always implicitly polled for.  These bits need not be set in</span><br><span class="hljs-comment">   `events&#x27;, but they will appear in `revents&#x27; to indicate the status of</span><br><span class="hljs-comment">   the file descriptor.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLERR0x008<span class="hljs-comment">/* Error condition.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLHUP0x010<span class="hljs-comment">/* Hung up.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLNVAL0x020<span class="hljs-comment">/* Invalid polling request.  */</span></span><br></code></pre></td></tr></table></figure><p>poll方法从一个pollfd数组中，获取出和用户注册的事件一致的一个socket。poll方法如下：</p><ul><li>返回值 = 1，即活跃的socket</li><li>返回值 = 0，超时</li><li>返回值 = -1，出现异常</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Poll the file descriptors described by the NFDS structures starting at</span><br><span class="hljs-comment">   FDS.  If TIMEOUT is nonzero and not -1, allow TIMEOUT milliseconds for</span><br><span class="hljs-comment">   an event to occur; if TIMEOUT is -1, block until an event occurs.</span><br><span class="hljs-comment">   Returns the number of file descriptors with events, zero if timed out,</span><br><span class="hljs-comment">   or -1 for errors.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">poll</span> <span class="hljs-params">(struct pollfd *__fds, <span class="hljs-keyword">nfds_t</span> __nfds, <span class="hljs-keyword">int</span> __timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>poll代码和select也差不多，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">poll_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> MAX_CONNECTION = <span class="hljs-number">1024</span>;<br>    <span class="hljs-keyword">int</span> max_fd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>&#123;</span>&#125;;<br>    <span class="hljs-keyword">int</span> addr_len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr);<br>    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">char</span> response[<span class="hljs-number">1024</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">int</span> welcome_socket = <span class="hljs-built_in">create_welcome_socket</span>(port);<br>    cout &lt;&lt; <span class="hljs-string">&quot;welcome_socket:&quot;</span> &lt;&lt; welcome_socket &lt;&lt; endl;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span>[<span class="hljs-title">MAX_CONNECTION</span>];</span><br>    <span class="hljs-comment">// 初始化，将fd设置为-1</span><br>    <span class="hljs-comment">// 对于poll函数，若fd为-1，则会被忽略</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_CONNECTION; i++) fds[<span class="hljs-number">0</span>].fd = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">// 初始化welcome_socket</span><br>    fds[welcome_socket].fd = welcome_socket;<br>    <span class="hljs-comment">// 为welcome_socket注册可读事件</span><br>    fds[welcome_socket].events = POLLIN;<br>    max_fd = welcome_socket;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">int</span> activity = <span class="hljs-built_in">poll</span>(fds, max_fd + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span> (activity &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;poll error!\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= max_fd; ++i) &#123;<br>            pollfd f = fds[i];<br>            <span class="hljs-keyword">if</span> (f.fd == <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (f.revents != POLLIN) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (f.fd == welcome_socket) &#123;<br>                <span class="hljs-comment">// 处理welcome_socket</span><br>                <span class="hljs-comment">// (struct sockaddr *)&amp;addr, (socklen_t *)(sizeof(addr))</span><br>                <span class="hljs-keyword">int</span> new_connection = <span class="hljs-built_in">accept</span>(welcome_socket, (struct sockaddr *)&amp;addr, (<span class="hljs-keyword">socklen_t</span>*)&amp;addr_len);<br>                <span class="hljs-keyword">if</span> (new_connection &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;accept error!\n&quot;</span>);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                cout &lt;&lt; <span class="hljs-string">&quot;new socket:&quot;</span> &lt;&lt; new_connection &lt;&lt; endl;<br>                <span class="hljs-comment">//inform user of socket number - used in send and receive commands</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;New connection , socket:%d , ip:%s , port:%d\n&quot;</span>,<br>                       new_connection , <span class="hljs-built_in">inet_ntoa</span>(addr.sin_addr) , <span class="hljs-built_in">ntohs</span>(addr.sin_port));<br>                fds[new_connection].fd = new_connection;<br>                fds[new_connection].events = POLLIN;<br>                max_fd = <span class="hljs-built_in">max</span>(max_fd, new_connection);<br>                f.events = POLLIN;<br>                cout &lt;&lt; <span class="hljs-string">&quot;max_fd:&quot;</span> &lt;&lt; max_fd &lt;&lt; endl;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;fd:&quot;</span> &lt;&lt; f.fd &lt;&lt; endl;<br>                <span class="hljs-keyword">if</span> (f.revents == POLLIN) &#123;<br>                    <span class="hljs-comment">// 处理读事件</span><br>                    <span class="hljs-keyword">int</span> size = <span class="hljs-built_in">read</span>(f.fd, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>                    <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-built_in">getpeername</span>(f.fd, (struct sockaddr *)&amp;addr, (<span class="hljs-keyword">socklen_t</span>*)&amp;addr_len);<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;client disconnected, ip:%s, port:%d\n&quot;</span>,<br>                               <span class="hljs-built_in">inet_ntoa</span>(addr.sin_addr) , <span class="hljs-built_in">ntohs</span>(addr.sin_port));<br>                        <span class="hljs-keyword">if</span> (max_fd == f.fd) &#123;<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = max_fd - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">0</span>; --j) &#123;<br>                                <span class="hljs-keyword">if</span> (fds[j].fd != <span class="hljs-number">-1</span>) &#123;<br>                                    max_fd = fds[j].fd;<br>                                    <span class="hljs-keyword">break</span>;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;max_fd:&quot;</span> &lt;&lt; max_fd &lt;&lt; endl;<br>                        <span class="hljs-built_in">close</span>(f.fd);<br>                        f.fd = <span class="hljs-number">-1</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收消息%d:%s\n&quot;</span>, count++, buffer);<br>                        buffer[size] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>                        size = <span class="hljs-built_in">send</span>(f.fd, buffer, <span class="hljs-built_in">strlen</span>(buffer), <span class="hljs-number">0</span>);<br>                        <span class="hljs-keyword">if</span> (size &lt; <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write error!\n&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-comment">// 将该socket重新注册监听可读事件</span><br>                        f.events = POLLIN;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>poll的缺点：</p><ul><li>没有避免拷贝socket这个环节</li><li>依然采用轮询的方式，连接数越多性能越差</li></ul><h2 id="10、epoll"><a href="#10、epoll" class="headerlink" title="10、epoll"></a>10、epoll</h2><h3 id="（1）简介"><a href="#（1）简介" class="headerlink" title="（1）简介"></a>（1）简介</h3><p>为解决以上select和poll轮询的缺点，epoll出现了。</p><p>epoll的本质不是主动轮询找到活跃的fd，而是使用系统内核在每个fd上的回调函数实现的。即当有fd活跃时，会触发系统内核的一个callback函数，加入到Ready队列中，并通知应用程序来处理这个事件。因此应用程序只要无限循环处理这个Ready队列中的fd即可。</p><p>epoll的两种工作模式：</p><ul><li>level triggered：水平触发，即当一个fd就绪时，内核会通知你，并且直到该fd事件完全结束。假如你读取了一部分数据，还剩一部分数据没读取，内核会继续通知这个事件。select和poll都是这种工作模式。支持block和no-block socket。</li><li>edge triggered：边缘触发，即当一个fd就绪时，内核会通知你，直到你做了某些操作导致这个fd不再时就绪状态，比如读取了一半数据的fd，并不是就绪状态，后面内核就不再通知这个事件了。除非下一次IO又开始了。只支持non-block socket。这种方式会导致代码变得复杂，并且容易丢失数据。</li></ul><p>man文档是这样举例的：</p><p>当一个IO事件如下时，若该fd注册到epoll中使用的是edge triggered时，下面第5步不会是就绪状态，而是阻塞状态。尽管在fd中还有可用数据。同时客户端会一直等待服务器针对这次IO的响应消息。但如果注册到epoll中使用的是level triggered时，第5步则会是就绪状态，即内核还会继续通知应用程序该fd事件。</p><ul><li>1.将一个read fd注册到epoll实例上</li><li>2.read fd对应的客户端发送一个2kb的数据包给read fd</li><li>3.epoll_wait就绪（解除阻塞）并且返回对应的fd给应用程序</li><li>4.应用程序只读取了1kb的数据</li><li>5.由于事件未结束，因此下一次调用epoll_wait函数时也是就绪状态。</li></ul><h3 id="（2）epoll使用的结构体和系统调用"><a href="#（2）epoll使用的结构体和系统调用" class="headerlink" title="（2）epoll使用的结构体和系统调用"></a>（2）epoll使用的结构体和系统调用</h3><p>结构体：</p><ul><li>epoll_event：epoll适用的事件结构体，events属性表示具体事件类型，data又是一个结构体，fd就是该事件对应的socket</li></ul><p>函数：</p><ul><li><p>epoll_create：创建一个epoll实例，需要将其他socket与之关联在一起</p></li><li><p>epoll_create1：同epoll_create，去掉了size参数，加上了flags参数</p></li><li><p>epoll_ctl：对epoll_fd进行操作，op参数为操作类型，可以新增、删除、修改一个普通fd的绑定关系。</p></li><li><p>epoll_wait：等待与epoll_fd绑定的fd上的事件，当有事件发生时解除阻塞，并返回事件数量</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">uint32_t</span> events;<span class="hljs-comment">/* Epoll events */</span><br>  <span class="hljs-keyword">epoll_data_t</span> data;<span class="hljs-comment">/* User data variable */</span><br>&#125; __EPOLL_PACKED;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">epoll_data</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">void</span> *ptr;<br>  <span class="hljs-keyword">int</span> fd;<br>  <span class="hljs-keyword">uint32_t</span> u32;<br>  <span class="hljs-keyword">uint64_t</span> u64;<br>&#125; <span class="hljs-keyword">epoll_data_t</span>;<br><br><span class="hljs-comment">/* Creates an epoll instance.  Returns an fd for the new instance.</span><br><span class="hljs-comment">   The &quot;size&quot; parameter is a hint specifying the number of file</span><br><span class="hljs-comment">   descriptors to be associated with the new instance.  The fd</span><br><span class="hljs-comment">   returned by epoll_create() should be closed with close().  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">epoll_create</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __size)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Same as epoll_create but with an FLAGS parameter.  The unused SIZE</span><br><span class="hljs-comment">   parameter has been dropped.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">epoll_create1</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __flags)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Manipulate an epoll instance &quot;epfd&quot;. Returns 0 in case of success,</span><br><span class="hljs-comment">   -1 in case of error ( the &quot;errno&quot; variable will contain the</span><br><span class="hljs-comment">   specific error code ) The &quot;op&quot; parameter is one of the EPOLL_CTL_*</span><br><span class="hljs-comment">   constants defined above. The &quot;fd&quot; parameter is the target of the</span><br><span class="hljs-comment">   operation. The &quot;event&quot; parameter describes which events the caller</span><br><span class="hljs-comment">   is interested in and any associated user data.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">epoll_ctl</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __epfd, <span class="hljs-keyword">int</span> __op, <span class="hljs-keyword">int</span> __fd,</span></span><br><span class="hljs-params"><span class="hljs-function">      struct epoll_event *__event)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Valid opcodes ( &quot;op&quot; parameter ) to issue to epoll_ctl().  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EPOLL_CTL_ADD 1<span class="hljs-comment">/* Add a file descriptor to the interface.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EPOLL_CTL_DEL 2<span class="hljs-comment">/* Remove a file descriptor from the interface.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EPOLL_CTL_MOD 3<span class="hljs-comment">/* Change file descriptor epoll_event structure.  */</span></span><br><br><span class="hljs-comment">/* Wait for events on an epoll instance &quot;epfd&quot;. Returns the number of</span><br><span class="hljs-comment">   triggered events returned in &quot;events&quot; buffer. Or -1 in case of</span><br><span class="hljs-comment">   error with the &quot;errno&quot; variable set to the specific error code. The</span><br><span class="hljs-comment">   &quot;events&quot; parameter is a buffer that will contain triggered</span><br><span class="hljs-comment">   events. The &quot;maxevents&quot; is the maximum number of events to be</span><br><span class="hljs-comment">   returned ( usually size of &quot;events&quot; ). The &quot;timeout&quot; parameter</span><br><span class="hljs-comment">   specifies the maximum wait time in milliseconds (-1 == infinite).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">epoll_wait</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __epfd, struct epoll_event *__events,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">int</span> __maxevents, <span class="hljs-keyword">int</span> __timeout)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="（3）epoll代码流程"><a href="#（3）epoll代码流程" class="headerlink" title="（3）epoll代码流程"></a>（3）epoll代码流程</h3><p>1、创建welcome_socket，将welcome_socket设置为非阻塞</p><p>2、使用epoll_create1方法创建一个epoll_fd</p><p>3、将welcome_socket和epoll_fd绑定</p><p>4、调用epoll_wait方法，获取对应的时间数量nfds</p><p>5、0-nfds循环，对事件进行处理，若为welcome_socket则获取连接socket，设置为非阻塞，绑定epoll_fd；若为连接socket则执行IO</p><h3 id="（4）完整代码"><a href="#（4）完整代码" class="headerlink" title="（4）完整代码"></a>（4）完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">make_socket_non_blocking</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sfd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> flags, s;<br><br>    flags = <span class="hljs-built_in">fcntl</span> (sfd, F_GETFL, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (flags == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span> (<span class="hljs-string">&quot;fcntl&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    flags |= O_NONBLOCK;<br>    s = <span class="hljs-built_in">fcntl</span> (sfd, F_SETFL, flags);<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span> (<span class="hljs-string">&quot;fcntl&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">epoll_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> MAX_CONNECTION = <span class="hljs-number">10</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">ev</span>&#123;</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> *<span class="hljs-title">events</span>;</span><br>    <span class="hljs-keyword">int</span> conn_sock, nfds, epollfd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>&#123;</span>&#125;;<br>    <span class="hljs-keyword">int</span> addr_len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr);<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>    events = <span class="hljs-keyword">static_cast</span>&lt;epoll_event *&gt;(<span class="hljs-built_in">calloc</span>(MAX_CONNECTION, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ev)));<br>    <span class="hljs-keyword">int</span> welcome_socket = <span class="hljs-built_in">create_welcome_socket</span>(port);<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-built_in">make_socket_non_blocking</span>(welcome_socket);<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">abort</span>();<br><br>    epollfd = <span class="hljs-built_in">epoll_create1</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (epollfd == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_create1&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    ev.events = EPOLLIN;<br>    ev.data.fd = welcome_socket;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, welcome_socket, &amp;ev) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_ctl: listen_sock&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        nfds = <span class="hljs-built_in">epoll_wait</span>(epollfd, events, MAX_CONNECTION, <span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span> (nfds == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_wait&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nfds; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (events[i].data.fd == welcome_socket) &#123;<br>                conn_sock = <span class="hljs-built_in">accept</span>(welcome_socket, (struct sockaddr *) &amp;addr, (<span class="hljs-keyword">socklen_t</span> *)&amp;addr_len);<br>                <span class="hljs-keyword">if</span> (conn_sock == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;accept&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>                &#125;<br>                <span class="hljs-built_in">make_socket_non_blocking</span>(conn_sock);<br>                ev.events = EPOLLIN | EPOLLET;<br>                ev.data.fd = conn_sock;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, conn_sock, &amp;ev) == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_ctl: conn_sock&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">int</span> done = <span class="hljs-number">0</span>;<br><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>                &#123;<br>                    <span class="hljs-keyword">ssize_t</span> size;<br>                    <span class="hljs-keyword">char</span> *buffer[<span class="hljs-number">1024</span>];<br>                    <span class="hljs-built_in">getpeername</span>(events[i].data.fd, (struct sockaddr *)&amp;addr, (<span class="hljs-keyword">socklen_t</span>*)&amp;addr_len);<br>                    size = <span class="hljs-built_in">read</span> (events[i].data.fd, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>                    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">-1</span>)<br>                    &#123;<br>                        <span class="hljs-comment">/* If errno == EAGAIN, that means we have read all</span><br><span class="hljs-comment">                           data. So go back to the main loop. */</span><br>                        <span class="hljs-keyword">if</span> (errno != EAGAIN)<br>                        &#123;<br>                            <span class="hljs-built_in">perror</span> (<span class="hljs-string">&quot;read&quot;</span>);<br>                            done = <span class="hljs-number">1</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-comment">/* End of file. The remote has closed the</span><br><span class="hljs-comment">                           connection. */</span><br>                        done = <span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到消息[%d] [ip:%s] [port:%d] - %s\n&quot;</span>,<br>                           count++, <span class="hljs-built_in">inet_ntoa</span>(addr.sin_addr) , <span class="hljs-built_in">ntohs</span>(addr.sin_port), buffer);<br>                    <span class="hljs-comment">/* Write the buffer to standard output */</span><br>                    s = <span class="hljs-built_in">send</span>(events[i].data.fd, buffer, size, <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">if</span> (s == <span class="hljs-number">-1</span>)<br>                    &#123;<br>                        <span class="hljs-built_in">perror</span> (<span class="hljs-string">&quot;write&quot;</span>);<br>                        <span class="hljs-built_in">abort</span> ();<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (done)<br>                &#123;<br>                    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Closed connection on descriptor %d\n&quot;</span>,<br>                            events[i].data.fd);<br><br>                    <span class="hljs-comment">/* Closing the descriptor will make epoll remove it</span><br><span class="hljs-comment">                       from the set of descriptors which are monitored. */</span><br>                    <span class="hljs-built_in">close</span> (events[i].data.fd);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用组件端口号</title>
    <link href="/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
    <url>/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="常用组件端口号"><a href="#常用组件端口号" class="headerlink" title="常用组件端口号"></a>常用组件端口号</h1><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><p>2181：客户端连接</p><p>2888：follower与leader的rpc通信</p><p>3888：选举</p><h3 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h3><p>9870：web管理页面</p><p>8088：yarn的web管理页面</p><p>9000：hdfs客户端连接，<code>hdfs://myubuntu1:9000</code></p><h3 id="hbase"><a href="#hbase" class="headerlink" title="hbase"></a>hbase</h3><p>16010：web管理页面</p><p>8080：REST web服务</p><h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><p>9092：客户端连接</p><h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><p>8081：web管理页面</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>3306：客户端连接</p><h3 id="postgresql"><a href="#postgresql" class="headerlink" title="postgresql"></a>postgresql</h3><p>5432：客户端连接</p><h3 id="clickhouse"><a href="#clickhouse" class="headerlink" title="clickhouse"></a>clickhouse</h3><p>8123：http访问数据库端口，java程序、数据库IDE连接clickhouse时用这个</p><p>9003：tcp访问数据库端口，clickhouse-client客户端访问时使用的端口</p><p>9004：使用MySQL客户端连接clickhouse数据库时使用的端口</p><p>9009：replica之间通信使用的端口</p><p>9100：gRPC协议端口</p><h2 id="服务器运维"><a href="#服务器运维" class="headerlink" title="服务器运维"></a>服务器运维</h2><h3 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h3><p>3000：web页面访问</p><p>账户密码默认都是admin</p><h3 id="prometheus"><a href="#prometheus" class="headerlink" title="prometheus"></a>prometheus</h3><p>9090：web访问端口</p><p>9100：node_exporter的指标web访问端口，需要独立额外启动node_exporter</p>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java常用配置</title>
    <link href="/java/java%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/java/java%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1、pom"><a href="#1、pom" class="headerlink" title="1、pom"></a>1、pom</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.report.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.report.outputEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 将dependencies打包到jar包中 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- jar包插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span> <span class="hljs-comment">&lt;!-- 以下文件不打包 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.config<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span> <span class="hljs-comment">&lt;!-- 是否要把依赖jar包加入到manifest中 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span> <span class="hljs-comment">&lt;!-- 指定依赖jar包从classpath下指定路径查找 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>net.yury.Test<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span> <span class="hljs-comment">&lt;!-- 指定main方法所在类 --&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">Class-Path</span>&gt;</span>config/<span class="hljs-tag">&lt;/<span class="hljs-name">Class-Path</span>&gt;</span> <span class="hljs-comment">&lt;!-- 指定配置文件从classpath下的指定路径查找 --&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 下面两个插件配置，可以执行一次，将所有jar包和配置文件拿到，部署到服务器后，就可以删掉了 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 将依赖jar包从maven仓库复制到指定目录的插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-lib<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>target/lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">excludeTransitive</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">excludeTransitive</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">stripVersion</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">stripVersion</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">includeScope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">includeScope</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 将配置文件从类文件中复制到指定目录的插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-config-file<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>process-resources<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-resources<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/target/config/<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.config<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、springboot"><a href="#2、springboot" class="headerlink" title="2、springboot"></a>2、springboot</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8888</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">static-locations:</span> <span class="hljs-string">classpath:/static,classpath:/public,classpath:/resources,classpath:/META-INF/resources</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/resources/*.html</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># database</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/flinkcdc?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=GMT%2B8&amp;rewriteBatchedStatements=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-comment"># druid</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 最大等待时间，配置获取连接等待超时，时间单位都是毫秒ms</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 最大活跃连接</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 最小空闲连接</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 初始化大小</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 配置一个连接在池中最小生存的时间</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">300000</span> <span class="hljs-comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接</span><br>      <span class="hljs-attr">test-on-borrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">test-on-return:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">20</span> <span class="hljs-comment"># 最大PSCache连接</span><br>      <span class="hljs-attr">use-global-data-source-stat:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">connection-properties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span> <span class="hljs-comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br>      <span class="hljs-attr">filter:</span> <span class="hljs-comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计</span><br>        <span class="hljs-attr">stat:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">wall:</span> <span class="hljs-comment"># wall用于防火墙</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">log4j2:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">web-stat-filter:</span> <span class="hljs-comment"># 配置StatFilter</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 默认为false，设置为true启动</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class="hljs-attr">stat-view-servlet:</span> <span class="hljs-comment"># 配置StatViewServlet</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">&quot;/druid/*&quot;</span><br>        <span class="hljs-attr">allow:</span> <span class="hljs-string">localhost</span> <span class="hljs-comment"># ip白名单</span><br>        <span class="hljs-attr">deny:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span> <span class="hljs-comment"># ip黑名单</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">root</span> <span class="hljs-comment"># 账号密码</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否可以重置</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span><span class="hljs-string">:9092,192.168.141.142:9092,192.168.141.143:9092</span><br>    <span class="hljs-attr">producer:</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 发送失败时，重试的次数</span><br>      <span class="hljs-attr">batch-size:</span> <span class="hljs-number">16384</span> <span class="hljs-comment"># 批量发送时的大小，byte，默认16k</span><br>      <span class="hljs-attr">buffer-memory:</span> <span class="hljs-number">33554432</span> <span class="hljs-comment"># 缓冲区大小，byte，默认32M</span><br>      <span class="hljs-attr">acks:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 生产者确定服务器接收消息的策略</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">default-group</span> <span class="hljs-comment"># 组id</span><br>      <span class="hljs-attr">enable-auto-commit:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 自动提交</span><br>      <span class="hljs-attr">auto-offset-reset:</span> <span class="hljs-string">earliest</span><br>      <span class="hljs-attr">max-poll-records:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 批量提取提取时，一次性提取的大小</span><br><br><span class="hljs-comment"># mybatis</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">net.yury.pojo</span><br><br><span class="hljs-comment"># redis</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-comment"># 连接超时时间</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1m</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 开发环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-attr">mysql:</span><br>  <span class="hljs-attr">ipPort:</span> <span class="hljs-string">localhost:3306</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 测试环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">mysql:</span><br>  <span class="hljs-attr">ipPort:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span><span class="hljs-string">:3306</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 生产环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span><br><span class="hljs-attr">mysql:</span><br>  <span class="hljs-attr">ipPort:</span> <span class="hljs-string">xxxx:xxxx</span><br><span class="hljs-comment"># 启动时指定对应环境：java -jar test.jar --spring.profiles.active=test</span><br></code></pre></td></tr></table></figure><h2 id="2、spring-mybatis"><a href="#2、spring-mybatis" class="headerlink" title="2、spring-mybatis"></a>2、spring-mybatis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 1.关联数据库配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 2.配置数据库连接池 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库基本信息配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filters&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;filters&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最大并发连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;maxActive&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 初始化连接数量 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;initialSize&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;maxWait&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最小空闲连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;minIdle&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;timeBetweenEvictionRunsMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;minEvictableIdleTimeMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;validationQuery&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;validationQuery&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testWhileIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;testWhileIdle&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnBorrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;testOnBorrow&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnReturn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;testOnReturn&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxOpenPreparedStatements&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;maxOpenPreparedStatements&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 打开removeAbandoned功能 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;removeAbandoned&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;removeAbandoned&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 1800秒，也就是30分钟 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;removeAbandonedTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;removeAbandonedTimeout&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logAbandoned&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;logAbandoned&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 3.配置sqlSessionFactory --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 4.配置dao接口扫描，动态生成接口的实现类（动态代理自动生成，不用自己写实现类），并注入IOC容器中 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory，这里不能用ref，因为他要注入的是一个string，而不是一个sqlSessionFactory对象 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 要扫描的包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;net.yury.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 5.声明式事务管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 6.结合AOP实现事务织入 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置事务通知的的类：需要导入tx命名空间 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvisor&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- name：给哪些方法配置事务，propagation：配置事务的传播特性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;select*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 7.配置事务的切入点 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* net.yury.dao.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvisor&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointCut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、spring-mvc"><a href="#4、spring-mvc" class="headerlink" title="4、spring-mvc"></a>4、spring-mvc</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启映射器和适配器的注解支持 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 并添加Jackson支持，它可以自动把RestController方法返回的对象封装成json字符串，并解决json乱码问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 静态资源过滤 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 扫描包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;net.yury.controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;net.yury.service&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 登录拦截器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net.yury.interceptor.LoginInterceptor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 文件上传配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最大上传大小，单位为b（字节），10485760b = 10Mb --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5、log4j2"><a href="#5、log4j2" class="headerlink" title="5、log4j2"></a>5、log4j2</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RoutingTest&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logFilename&quot;</span>&gt;</span>D:/tmp/test.log<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filePattern&quot;</span>&gt;</span>D:/tmp/test-%d&#123;MM-dd-yy&#125;-%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logPattern&quot;</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%-5p] [%t] [%l] - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;logPattern&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Routing</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Routing&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$$&#123;sd:type&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Route</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Rolling-$&#123;sd:type&#125;&quot;</span></span><br><span class="hljs-tag">                                 <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;logFilename&#125;&quot;</span></span><br><span class="hljs-tag">                                 <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;filePattern&#125;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;logPattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">PatternLayout</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">policies</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;25 MB&quot;</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">policies</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Audit&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Routing</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Routing&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6、springboot-logback"><a href="#6、springboot-logback" class="headerlink" title="6、springboot-logback"></a>6、springboot-logback</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATH&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;BASE_DIR&#125;/logs&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_FILE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;LOG_PATH&#125;/project-name.log&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%-5p] [%t] [%l] - %m%n&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>20MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>1GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jetbrains系列IDE推荐设置</title>
    <link href="/jetbrains%E7%B3%BB%E5%88%97IDE%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE/"/>
    <url>/jetbrains%E7%B3%BB%E5%88%97IDE%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="jetbrains系列IDE推荐设置"><a href="#jetbrains系列IDE推荐设置" class="headerlink" title="jetbrains系列IDE推荐设置"></a>jetbrains系列IDE推荐设置</h2><p>1、Editor - Files Encoding，修改为utf-8</p><p>2、Editor - Code Style - 对应语言，设置tab size为4个空格</p><p>3、Editor - Code Style，设置Line Separator为\n</p><p>4、Appearance &amp; Behavior - System Settings，设置取消勾选Reopen projects on startup，并且设置在新窗口打开新项目。</p><p>5、Build, Execution, Deployment - Build Tools - Maven/Gradle，设置自定义的maven设置（仅限java）</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL迁移数据目录</title>
    <link href="/database/mysql/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/"/>
    <url>/database/mysql/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>Linux版本：Ubuntu18.04</p><p>MySQL版本：8.0.26</p><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>首先要搞清楚MySQL的配置文件在哪里。</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/option-files.html">MySQL :: MySQL 8.0 Reference Manual :: 4.2.2.2 Using Option Files</a></p><p>大概意思是，说明了windows和Linux下MySQL读取配置文件的顺序，我们只要找到几个常用配置文件即可。</p><p>windows下的配置文件在：<code>C:\%PROGRAMDIR%\MySQL\MySQL 8.0 Server\my.ini</code>这个文件中。</p><p><code>%PROGRAMDIR%</code>是指windows安装时的数据目录，在中文版本中的windows系统中，这个目录经常是<code>ProgramData</code>，而在英文版本的windows系统中，这个目录经常是<code>Program Files</code>。</p><p>Linux下的配置文件在：<code>/etc/mysql/my.cnf</code>或<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>（不同MySQL和Linux版本，配置文件不一样）</p><h2 id="2、数据迁移"><a href="#2、数据迁移" class="headerlink" title="2、数据迁移"></a>2、数据迁移</h2><p>找到配置文件后，配置文件中指定了数据目录<code>datadir</code>。</p><p>windows下只要将这个值修改为自己想要的新目录，然后将原数据目录复制过去即可。</p><p>Linux中，同样修改datadir的值，但是复制文件时<font color="Red">一定要注意权限</font>！一般要加上<code>-p</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -rp /var/lib/mysql/* /disk4/mysql/data/<br></code></pre></td></tr></table></figure><p>此外新目录的创建后也要将这个目录拥有者改成MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown -R mysql:mysql /disk4/mysql/<br></code></pre></td></tr></table></figure><p>最后，还要修改<font color="Red"><code>/etc/apparmor.d/usr.sbin.mysqld</code></font>这个文件（如果有的话），这个文件限制了Linux系统中某个程序可以访问的目录。如果没有修改这个东西，则会报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Can&#x27;t create test file /disk4/mysql/data/mysqld_tmp_file_case_insensitive_test.lower<br></code></pre></td></tr></table></figure><p>在原来的旧数据目录下加上自己修改的新目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/disk4/mysql/ r,<br>/disk4/mysql/** rwk,<br></code></pre></td></tr></table></figure><p>重启apparmor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/inid.d/apparmor restart<br></code></pre></td></tr></table></figure><p>其中还要一个问题会导致上面说的无法在新目录下创建新文件，即启用了<font color="Red">selinux</font>，将这个东西关闭即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 临时关闭selinux</span><br>setenforce 0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 永久关闭selinux</span><br>vi /etc/selinux/config<br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h2 id="3、重启"><a href="#3、重启" class="headerlink" title="3、重启"></a>3、重启</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> windows 管理员模式下</span><br>net restart mysql<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Linux</span><br>systemctl restart mysql<br></code></pre></td></tr></table></figure><p>Linux下如果重启失败，可以查看报错信息，上面说的配置文件中有一个<code>log-error</code>文件路径，报错信息就在这个文件中。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flinkcdc</title>
    <link href="/bigdata/flinkcdc/flinkcdc/"/>
    <url>/bigdata/flinkcdc/flinkcdc/</url>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>cdc，是指变动数据捕获（change data capture），即捕获数据库数据变动信息。</p><p>cdc 是一种数据集成方法，公司一般通过变动数据捕获来获取几乎实时的增量数据，并执行相应的 ETL 操作，实现低延迟的数据更新。cdc 一般也用于实时 ETL 的第一步数据抽取的过程。</p><p>flinkcdc 是指在 flink 的一组数据源连接器（data source connector），集成 cdc 并从不同数据库获取变更数据。flinkcdc 底层使用 debezium 组件作为引擎来捕获变更数据。flinkcdc 支持 MySQL、postgresql 等多个数据库以提供其变更数据的数据源。</p><p><strong>1、文档</strong></p><p><a href="https://ververica.github.io/flink-cdc-connectors/release-2.0/">Welcome to Flink CDC — Flink CDC 2.0.0 documentation (ververica.github.io)</a></p><p><strong>2、版本</strong></p><p>flink：1.13.6</p><p>scale：2.12</p><p>flink-cdc：2.0.1</p><p><strong>3、支持的数据库</strong></p><table><thead><tr><th>Database</th><th>Version</th></tr></thead><tbody><tr><td>MySQL</td><td>Database: 5.7, 8.0.x JDBC Driver: 8.0.16</td></tr><tr><td>PostgreSQL</td><td>Database: 9.6, 10, 11, 12 JDBC Driver: 42.2.12</td></tr></tbody></table><p><strong>4、flink 和 flinkcdc 的兼容性</strong></p><table><thead><tr><th>Flink CDC Connector Version</th><th>Flink Version</th></tr></thead><tbody><tr><td>1.0.0</td><td>1.11.*</td></tr><tr><td>1.1.0</td><td>1.11.*</td></tr><tr><td>1.2.0</td><td>1.12.*</td></tr><tr><td>1.3.0</td><td>1.12.*</td></tr><tr><td>1.4.0</td><td>1.13.*</td></tr><tr><td>2.0.*</td><td>1.13.*</td></tr></tbody></table><p><strong>5、一个较为通用的数据库的序列化器</strong></p><p>flink 序列化类，常用于 MySQL 和 postgresql。这里的数据类型映射可能并不完整，需要根据不同数据库做调整。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.serialize;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.JsonNode;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.NullNode;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.ObjectNode;<br><span class="hljs-keyword">import</span> com.ververica.cdc.debezium.DebeziumDeserializationSchema;<br><span class="hljs-keyword">import</span> io.debezium.data.Envelope;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> net.yury.utils.DateUtil;<br><span class="hljs-keyword">import</span> net.yury.utils.JsonUtil;<br><span class="hljs-keyword">import</span> org.apache.flink.api.common.typeinfo.TypeInformation;<br><span class="hljs-keyword">import</span> org.apache.flink.util.Collector;<br><span class="hljs-keyword">import</span> org.apache.kafka.connect.data.*;<br><span class="hljs-keyword">import</span> org.apache.kafka.connect.source.SourceRecord;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DBDeserialization</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DebeziumDeserializationSchema</span>&lt;<span class="hljs-title">ObjectNode</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DBDeserialization instance = <span class="hljs-keyword">new</span> DBDeserialization();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String READ = <span class="hljs-string">&quot;r&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String UPDATE = <span class="hljs-string">&quot;u&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String INSERT = <span class="hljs-string">&quot;c&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String DELETE = <span class="hljs-string">&quot;d&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String TRUNCATE = <span class="hljs-string">&quot;t&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String BEFORE = <span class="hljs-string">&quot;before&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String AFTER = <span class="hljs-string">&quot;after&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deserialize</span><span class="hljs-params">(SourceRecord sourceRecord, Collector&lt;ObjectNode&gt; collector)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ObjectNode node = JsonUtil.getMapper().createObjectNode();<br>        Struct value = (Struct)sourceRecord.value();<br>        Struct source = (Struct) value.get(<span class="hljs-string">&quot;source&quot;</span>);<br>        String database = source.getString(<span class="hljs-string">&quot;db&quot;</span>);<br>        String schemaName = source.getString(<span class="hljs-string">&quot;schema&quot;</span>);<br>        String tableName = source.getString(<span class="hljs-string">&quot;table&quot;</span>);<br>        Long modifyTime = source.getInt64(<span class="hljs-string">&quot;ts_ms&quot;</span>);<br>        Envelope.Operation operation = Envelope.operationFor(sourceRecord);<br>        node.put(<span class="hljs-string">&quot;mt&quot;</span>, modifyTime);          <span class="hljs-comment">// modify time</span><br>        node.put(<span class="hljs-string">&quot;db&quot;</span>, database);            <span class="hljs-comment">// database</span><br>        node.put(<span class="hljs-string">&quot;sm&quot;</span>, schemaName);          <span class="hljs-comment">// schemaName</span><br>        node.put(<span class="hljs-string">&quot;tb&quot;</span>, tableName);           <span class="hljs-comment">// table name</span><br>        node.put(<span class="hljs-string">&quot;op&quot;</span>, operation.code());    <span class="hljs-comment">// operation</span><br><br>        ObjectNode before = parseNode(value, BEFORE);<br>        ObjectNode after = parseNode(value, AFTER);<br>        ArrayNode diffField = parseDiff(before, after, operation.code());<br>        node.set(BEFORE, before);<br>        node.set(AFTER, after);<br>        node.set(<span class="hljs-string">&quot;diffField&quot;</span>, diffField);<br>        collector.collect(node);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TypeInformation&lt;ObjectNode&gt; <span class="hljs-title">getProducedType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> TypeInformation.of(ObjectNode.class);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ObjectNode <span class="hljs-title">parseNode</span><span class="hljs-params">(Struct struct, String field)</span> </span>&#123;<br>        Object o = struct.get(field);<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        Struct v = (Struct)o;<br>        ObjectNode node = JsonUtil.getMapper().createObjectNode();<br>        List&lt;Field&gt; fields = v.schema().fields();<br>        <span class="hljs-keyword">for</span> (Field f : fields) &#123;<br>            Schema.Type type = f.schema().type();<br>            String fName = f.name();<br>            <span class="hljs-keyword">switch</span> (type) &#123;<br>                <span class="hljs-keyword">case</span> INT8:<br>                    node.put(fName, v.getInt8(fName));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> INT16:<br>                    node.put(fName, v.getInt16(fName));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> INT32:<br>                    Integer int32 = v.getInt32(fName);<br>                    <span class="hljs-keyword">if</span> (int32 == <span class="hljs-keyword">null</span>) &#123;<br>                        node.set(fName, NullNode.instance);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (io.debezium.time.Date.SCHEMA_NAME.equals(f.schema().name())) &#123;<br>                        node.put(fName, DateUtil.formatToString(<span class="hljs-keyword">new</span> java.util.Date(int32 * DateUtil.ONE_DAY_SEC)));<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        node.put(fName, int32);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> INT64:<br>                    node.put(fName, v.getInt64(fName));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> FLOAT32:<br>                    node.put(fName, v.getFloat32(fName));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> FLOAT64:<br>                    node.put(fName, v.getFloat64(fName));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> STRING:<br>                    node.put(fName, v.getString(fName));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> BOOLEAN:<br>                    node.put(fName, v.getBoolean(fName));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> BYTES:<br>                    Object o1 = v.get(fName);<br>                    <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> BigDecimal) &#123;<br>                        node.put(fName, (BigDecimal)o1);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">byte</span>[]) &#123;<br>                        node.put(fName, (<span class="hljs-keyword">byte</span>[]) o1);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        log.error(<span class="hljs-string">&quot;unsupported type [&#123;&#125;], we parse them as string.&quot;</span>, f.schema().name());<br>                        node.put(fName, String.valueOf(o1));<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                <span class="hljs-keyword">default</span>:<br>                    log.error(<span class="hljs-string">&quot;unsupported type [&#123;&#125;], we parse them as string.&quot;</span>, type.getName());<br>                    node.put(fName, String.valueOf(v.get(fName)));<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayNode <span class="hljs-title">parseDiff</span><span class="hljs-params">(ObjectNode before, ObjectNode after, String operation)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (UPDATE.equals(operation)) &#123;<br>            ArrayNode diff = JsonUtil.getMapper().createArrayNode();<br>            Iterator&lt;Map.Entry&lt;String, JsonNode&gt;&gt; nodeEntries = before.fields();<br>            <span class="hljs-keyword">while</span> (nodeEntries.hasNext()) &#123;<br>                Map.Entry&lt;String, JsonNode&gt; next = nodeEntries.next();<br>                String f = next.getKey();<br>                JsonNode v1 = next.getValue();<br>                JsonNode v2 = after.get(f);<br>                <span class="hljs-keyword">if</span> ((v1 == <span class="hljs-keyword">null</span> &amp;&amp; v2 != <span class="hljs-keyword">null</span>) || (v1 != <span class="hljs-keyword">null</span> &amp;&amp; (!v1.equals(v2)))) &#123;<br>                    diff.add(f);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> diff;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、postgresql"><a href="#二、postgresql" class="headerlink" title="二、postgresql"></a>二、postgresql</h2><p><strong>1、文档</strong></p><p><a href="https://debezium.io/documentation/reference/1.5/connectors/postgresql.html">Debezium connector for PostgreSQL :: Debezium Documentation</a></p><p><strong>2、使用限制</strong></p><ul><li>pg 版本为 9.6 及以上版本</li><li>pg 设置 wal_level 为 logical</li><li>pg 安装了逻辑复制解码插件。最好使用 pgoutput 插件（10+ 版本默认安装，其他版本需要额外安装），低版本的 pg 若无法使用 pgoutput，则可以尝试使用 wal2json 插件（已被 debezium 新版本弃用）。</li><li>只能作用在 primary 服务器上，即无法捕获从服务器的变动</li><li>只支持 UTF-8 字符集的服务器</li></ul><p><strong>3、支持的事件</strong></p><p>DML（read、insert、update、delete、truncate），不支持捕获 DDL 事件。</p><p><strong>4、Replica identity</strong></p><p><a href="https://www.postgresql.org/docs/current/sql-altertable.html#SQL-CREATETABLE-REPLICA-IDENTITY">PostgreSQL: Documentation: 14: ALTER TABLE</a></p><p>Replica identity：即规定需要记录到 wal 日志中的信息，用于识别被更新或者被删除的行。有以下三种模式可选。</p><ul><li>DEFAULT，只记录主键的旧值</li><li>USING INDEX index_name，当变更数据字段包括在这个索引中，则记录旧值</li><li>FULL，记录这一行中所有字段的旧值</li><li>NOTHING，不记录任何值</li></ul><p>以上四种模式，常用 DEFAULT 和 FULL，这两种有各自的使用场景。</p><p>当不关心旧数据具体是哪个字段变化时，可以使用 DEFAULT，需要知道具体哪个字段变化时，需要使用 FULL。</p><p>修改该配置的方法如下， 且需要对每个表进行修改。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t1 REPLICA <span class="hljs-keyword">IDENTITY</span> <span class="hljs-keyword">FULL</span>;<br></code></pre></td></tr></table></figure><p><strong>5、stream api 使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.main;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.ObjectNode;<br><span class="hljs-keyword">import</span> com.ververica.cdc.connectors.postgres.PostgreSQLSource;<br><span class="hljs-keyword">import</span> net.yury.serialize.DBDeserialization;<br><span class="hljs-keyword">import</span> net.yury.sink.PrintSink;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.functions.source.SourceFunction;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo11PostgresCDC</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br>        SourceFunction&lt;ObjectNode&gt; pgSource = PostgreSQLSource.&lt;ObjectNode&gt;builder()<br>                .hostname(<span class="hljs-string">&quot;192.168.141.141&quot;</span>)<br>                .port(<span class="hljs-number">5432</span>)<br>                .database(<span class="hljs-string">&quot;postgres&quot;</span>)<br>                .schemaList(<span class="hljs-string">&quot;public&quot;</span>)<br>                .tableList(<span class="hljs-string">&quot;public.t1&quot;</span>)<br>                .username(<span class="hljs-string">&quot;postgres&quot;</span>)<br>                .password(<span class="hljs-string">&quot;postgres&quot;</span>)<br>                .deserializer(<span class="hljs-keyword">new</span> DBDeserialization())<br>                .decodingPluginName(<span class="hljs-string">&quot;pgoutput&quot;</span>)<br>                .build();<br><br>        env.addSource(pgSource)<br>                .addSink(<span class="hljs-keyword">new</span> PrintSink&lt;ObjectNode&gt;())<br>                .setParallelism(<span class="hljs-number">1</span>);<br>        env.execute(<span class="hljs-string">&quot;Print postgresql Snapshot + Binlog&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6、sql api 使用</strong></p><p><strong>7、复制槽</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> pg_catalog.pg_replication_slots;               # 复制槽状态<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> pg_catalog.pg_stat_replication;                # 逻辑复制状态<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> pg_catalog.pg_replication_origin_status;       # 逻辑复制数据源状态<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> pg_catalog.pg_replication_origin;              # 逻辑复制数据源<br><br><span class="hljs-keyword">select</span> pg_drop_replication_slot(<span class="hljs-string">&#x27;flink&#x27;</span>);   # 删除复制槽<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bigdata</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>clickhouse</title>
    <link href="/bigdata/clickhouse/clickhouse/"/>
    <url>/bigdata/clickhouse/clickhouse/</url>
    
    <content type="html"><![CDATA[<p>clickhouse版本：21.7.3.14</p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>基于<strong>列存储</strong>的数据库，使用C++编写，主要用于<strong>在线分析处理查询</strong>（OLAP），能够使用<strong>SQL查询</strong>实时生成分析报告。</p><p>列式存储的优点：</p><ul><li>对于列的聚合、计数等统计操作由于行式数据库</li><li>由于某一列的数据类型是一样的，在数据压缩上效率更高，压缩比更大，缓存cache也有更大的发挥空间</li></ul><p>列式存储的缺点：插入、更新速度比行式数据库更慢</p><h3 id="2、高吞吐写入能力"><a href="#2、高吞吐写入能力" class="headerlink" title="2、高吞吐写入能力"></a>2、高吞吐写入能力</h3><p>clickhouse采用类<strong>LSM Tree</strong>的结构，数据写入后定期在后台compation。clickhouse在导入数据时全部都是<strong>顺序append写入</strong>，写入后数据段不可更改，在后台compation时也是多个段merge sort后顺序写回磁盘。顺序写的特性，充分利用了磁盘的吞吐能力。</p><h3 id="3、数据分区和线程级并行"><a href="#3、数据分区和线程级并行" class="headerlink" title="3、数据分区和线程级并行"></a>3、数据分区和线程级并行</h3><p>clickhouse将数据划分为多个partition，每个partition再进一步划分为多个index granularity（索引粒度），然后通过多个线程分别处理其中一部分来实现并行数据处理。这种设计下，单条query就可以利用整机所有的CPU资源。对于大量数据的查询也能够化整为零的并行处理。</p><p><font color="Red">缺点：由于一条SQL就会占用所有cpu，因此对于qps高的业务并不适合。</font></p><h3 id="4、使用场景"><a href="#4、使用场景" class="headerlink" title="4、使用场景"></a>4、使用场景</h3><p>不适用于初始数据存储，而适用于最后的宽表存储，用来查询用。</p><p>适用于clickhouse的业务：具有复杂统计逻辑的查询sql，需要查询大量数据的sql，并发量低</p><p>适用于hbase的业务：业务很简单的查询，一般就是key-value一一对应的查询，并发量高</p><p>clickhouse还有一个特点就是，<font color="Red">单表查询速度及其快，但是多表join操作比较慢</font>，在了解join原理后，可以通过优化sql来优化join速度。</p><h2 id="二、安装部署"><a href="#二、安装部署" class="headerlink" title="二、安装部署"></a>二、安装部署</h2><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><h4 id="（1）ulimit"><a href="#（1）ulimit" class="headerlink" title="（1）ulimit"></a>（1）ulimit</h4><p>linux取消一些系统资源限制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看系统资源限制</span><br>ulimit -a<br><span class="hljs-meta">#</span><span class="bash"> open files                      (-n) 1024</span><br><span class="hljs-meta">#</span><span class="bash"> max user processes              (-u) 7625</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改系统资源限制</span><br>sudo vi /etc/security/limits.conf<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 加上以下配置</span><br>* soft nofile 65535<br>* hard nofile 65535<br>* soft nproc  131072<br>* hard nproc  131072<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 有些linux系统在/etc/security/limit.d目录下面还有20-npric.conf或90-npric.conf</span><br><span class="hljs-meta">#</span><span class="bash"> 这两个配置会把limits.conf配置覆盖了，所以如果有的话这两个也要加上以上配置</span><br>sudo vi /etc/security/limits.d/20-nproc.conf<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改之后不需要重启，重新登录该用户即可，再查看<span class="hljs-built_in">ulimit</span> -a是否修改成功</span><br></code></pre></td></tr></table></figure><h4 id="（2）SELINUX"><a href="#（2）SELINUX" class="headerlink" title="（2）SELINUX"></a>（2）SELINUX</h4><p>sentos取消SELINUX（linux的security enforce）</p><p>SELINUX并不是安装里所有linux都会有，没有SELINUX不需要执行以下修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看security enfore</span><br>getenforce<br><br>sudo vi /etc/selinux/config<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将SELINUX修改为disabled</span><br>SELINUX=disabled<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重启永久生效，输入以下命令临时生效</span><br>setenforce 0<br></code></pre></td></tr></table></figure><h4 id="（3）版本"><a href="#（3）版本" class="headerlink" title="（3）版本"></a>（3）版本</h4><p>clickhouse版本更新比较快</p><p>20.6.3 新增explain，类似于MySQL的explain</p><p>20.8 新增同步MySQL功能等</p><p>我们使用的版本是21.7.3.14</p><h3 id="2、下载安装"><a href="#2、下载安装" class="headerlink" title="2、下载安装"></a>2、下载安装</h3><p>下载地址：<a href="https://repo.clickhouse.com/deb/stable/main/">Index of /clickhouse/deb/stable/main/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/yury/clickhouse<br><br>wget https://repo.clickhouse.com/deb/stable/main/clickhouse-common-static_21.7.3.14_amd64.deb<br>wget https://repo.clickhouse.com/deb/stable/main/clickhouse-client_21.7.3.14_all.deb<br>wget https://repo.clickhouse.com/deb/stable/main/clickhouse-server_21.7.3.14_all.deb<br><span class="hljs-meta">#</span><span class="bash"> 下面这个包是带有调试信息的包，可以不装</span><br>wget https://repo.clickhouse.com/deb/stable/main/clickhouse-common-static-dbg_21.7.3.14_amd64.deb<br><br>sudo dpkg -i *.deb<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 一路yyy，最后要输入一个默认用户的密码，可以设置密码，也可以直接回车不设置密码</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装成功后，软件被安装到目录下，lib目录在/var/lib/clickhouse/</span><br></code></pre></td></tr></table></figure><h3 id="3、常用路径"><a href="#3、常用路径" class="headerlink" title="3、常用路径"></a>3、常用路径</h3><p>bin目录：<code>/usr/bin/</code></p><p>服务器安装目录：<code>/etc/clickhouse-server/</code></p><p>客户端安装目录：<code>/etc/clickhouse-client/</code></p><p>配置文件目录：<code>/etc/clickhouse-server/</code>，所有其他配置目录都可以在这个配置文件中设置</p><p>日志目录：<code>/var/log/clickhouse-server/clickhouse-server.log</code></p><p>报错日志目录：<code>/var/log/clickhouse-server/clickhouse-server.err.log</code></p><p>依赖目录：<code>/var/lib/clickhouse/</code></p><p>数据目录：<code>/var/lib/clickhouse/</code>，即config.xml配置文件中path标签下</p><p>临时文件目录：<code>/var/lib/clickhouse/tmp/</code>，即config.xml配置文件中tmp_path标签下</p><h3 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h3><p><font color="Red">config.xml中的配置是服务器配置，比如上面说的数据目录、日志目录都在这个配置中，而user.xml则是程序运行参数配置，如cpu、内存在这个里面配置。</font></p><p>config.xml配置文档：<a href="https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings/">Server Settings | ClickHouse Documentation</a></p><p>user.xml配置文档：<a href="https://clickhouse.com/docs/en/operations/settings/settings/">Settings | ClickHouse Documentation</a></p><p>修改一个配置，使得其他ip地址也可以访问clickhouse服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vi /etc/clickhouse-server/config.xml<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将下面这个配置取消注释</span><br>&lt;listen_host&gt;::&lt;/listen_host&gt;<br></code></pre></td></tr></table></figure><p><font color="Red">此外再把tcp_port端口改为9003，因为默认的9000端口很容易被其他应用使用，比如hadoop就使用了9000端口。此外用，clickhosue-client连接时用tcp连接，而使用其他连接，比如datagrip或java，都是用的http连接，注意端口的使用。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tcp_port</span>&gt;</span>9003<span class="hljs-tag">&lt;/<span class="hljs-name">tcp_port</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、简单使用"><a href="#5、简单使用" class="headerlink" title="5、简单使用"></a>5、简单使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动</span><br>sudo clickhouse start<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看服务器运行状态</span><br>sudo clickhouse status<br><span class="hljs-meta">#</span><span class="bash"> /var/run/clickhouse-server/clickhouse-server.pid file exists and contains pid = 7116.</span><br><span class="hljs-meta">#</span><span class="bash"> The process with pid = 7116 is running.</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭</span><br>sudo clickhouse stop<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重启</span><br>sudo clickhouse restart<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 常加-m参数，这样可以在sql语句中使用换行，否则要用分号分隔</span><br><span class="hljs-meta">#</span><span class="bash"> -h参数为服务器host，默认是localhost</span><br><span class="hljs-meta">#</span><span class="bash"> --port参数为tcp端口，默认是9000</span><br>clickhouse-client -m -h myubuntu1 --port 9003<br></code></pre></td></tr></table></figure><p>clickhouse-client还有一个快捷方式的参数query：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">clickhouse-client -m -h 192.168.141.141 --port 9003 --query &quot;show databases;&quot;<br>default<br>system<br></code></pre></td></tr></table></figure><p>clickhouse语法比较像MySQL，在某些语法上clickhouse区分大小写，比如数据类型UInt、String，以及表引擎MergeTree等等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br>use <span class="hljs-keyword">default</span>;<br><span class="hljs-keyword">show</span> tables;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test2(<br>    id UInt32,<br>    create_time Datetime <span class="hljs-keyword">default</span> now(),<br>    name String,<br>    age UInt8,<br>    money <span class="hljs-type">Decimal</span>(<span class="hljs-number">24</span>,<span class="hljs-number">6</span>) TTL create_time <span class="hljs-operator">+</span> <span class="hljs-type">interval</span> <span class="hljs-number">10</span> <span class="hljs-keyword">SECOND</span><br>)engine<span class="hljs-operator">=</span>MergeTree<br><span class="hljs-keyword">primary</span> key(id)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>(id, name);<br></code></pre></td></tr></table></figure><p>使用shell命令快速写一个批量插入100万条数据sql文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in &#123;1..1000&#125;; do<br>echo -n &quot;insert into default.test2(id, name, age, money) values (1, &#x27;小明&#x27;, 14, 2000)&quot; &gt;&gt; test.sql;<br>for j in &#123;1..1000&#125;; do echo -n &quot;,($&#123;i&#125;$&#123;j&#125;, &#x27;小明$&#123;i&#125;$&#123;j&#125;&#x27;, $&#123;i&#125;$&#123;j&#125;, $&#123;i&#125;$&#123;j&#125;2000)&quot; &gt;&gt; test.sql; done;<br>echo &quot;;&quot; &gt;&gt; test.sql;<br>done;<br></code></pre></td></tr></table></figure><p>执行sql文件（速度贼快）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clickhouse-client -m -h 192.168.141.141 --port 9003 --multiquery &lt; ./test.sql<br></code></pre></td></tr></table></figure><p>执行几个group查询（速度贼快）</p><p><font color="Red">注意，这里substring也是按照字节数来算长度的。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>), <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>), <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">select</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-keyword">as</span> flag, <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> (id <span class="hljs-operator">%</span> <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>文档：<a href="https://clickhouse.com/docs/en/sql-reference/data-types/">Introduction | ClickHouse Documentation</a></p><h3 id="1、整形"><a href="#1、整形" class="headerlink" title="1、整形"></a>1、整形</h3><p>（1）有符号整型</p><table><thead><tr><th>clickhouse类型</th><th>范围</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>Int8</td><td>-128 : 127 (2^7)</td><td>tinyint</td></tr><tr><td>Int16</td><td>-32768 : 32767(2^15)</td><td>smallint</td></tr><tr><td>Int32</td><td>-2147483648 : 2147483647 (2^31)</td><td>int</td></tr><tr><td>Int64</td><td>-9223372036854775808 : 9223372036854775807 (2^63)</td><td>bigint</td></tr><tr><td>Int128</td><td>-2^127 : 2^127-1</td><td>无</td></tr><tr><td>Int256</td><td>-2^255 : 2^255-1</td><td>无</td></tr></tbody></table><p>（2）无符号整形</p><p>UInt8、UInt16、UInt32、UInt64，UInt128、UInt256，范围分别是0 : (2^n)-1。</p><p>128位和256位的一般用不到。</p><p>clickhouse没有布尔类型，官方建议用UInt8来存储，0代表false，1代表true。</p><h3 id="2、浮点型"><a href="#2、浮点型" class="headerlink" title="2、浮点型"></a>2、浮点型</h3><table><thead><tr><th>clichouse类型</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>Float32</td><td>float</td></tr><tr><td>Float64</td><td>double</td></tr></tbody></table><h3 id="3、Decimal"><a href="#3、Decimal" class="headerlink" title="3、Decimal"></a>3、Decimal</h3><table><thead><tr><th>clickhouse类型</th><th>整数位+小数位</th><th>小数位</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>Decimal(P,S)</td><td>P</td><td>S</td><td>decimal(P,S)</td></tr><tr><td>Decimal32(S)</td><td>9</td><td>S</td><td>decimal(9,S)</td></tr><tr><td>Decimal64(S)</td><td>18</td><td>S</td><td>decimal(18,S)</td></tr><tr><td>Decimal128(S)</td><td>38</td><td>S</td><td>decimal(38,S)</td></tr><tr><td>Decimal128(S)</td><td>76</td><td>S</td><td>decimal(76,S)</td></tr></tbody></table><p>不同位数长度的Decimal进行运算时，最终结果的位数长度是最大的那个。</p><h3 id="4、字符串类型"><a href="#4、字符串类型" class="headerlink" title="4、字符串类型"></a>4、字符串类型</h3><table><thead><tr><th>clickhouse</th><th>字节长度</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>String</td><td>无限制</td><td>varchar、所有text、所有blob</td></tr><tr><td>FixedString(N)</td><td>N</td><td>char(N)</td></tr></tbody></table><p>FixedString(N)类型，<font color="Red">这个N是字节长度，而不是字符长度</font>。当存入字符的字节长度小于N时，会用空字节（<code>\0</code>）补齐。一般很少用FixedString(N)，就像MySQL很少使用char(N)一样。</p><p><font color="Red">clickhouse没有编码的概念，即它存储字符串时是以二进制的形式存储。clickhosue在计算长度时，length函数是计算编码后字节的长度，lengthUTF8函数才是计算字符的长度，且只有一个计算UTF8编码的函数，因此服务器一定要使用utf-8编码。</font></p><p>clickhouse还有一个专门的存储UUID的类型：<strong>UUID</strong>，以及生成UUID的函数<code>generateUUIDv4()</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_uuid (x UUID, y String) ENGINE<span class="hljs-operator">=</span>TinyLog<br></code></pre></td></tr></table></figure><h3 id="5、日期类型"><a href="#5、日期类型" class="headerlink" title="5、日期类型"></a>5、日期类型</h3><table><thead><tr><th>clickhouse类型</th><th>字节长度</th><th>时间范围</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>Date</td><td>2</td><td>1970-01-01至2148-12-31</td><td></td></tr><tr><td>Date32</td><td></td><td>1925-01-01至2283-11-11</td><td></td></tr><tr><td>DateTime([timezone])</td><td></td><td>1970-01-01 00:00:00至2105-12-31 23:59:59</td><td>timestamp</td></tr><tr><td>DateTime64(precision, [timezone])</td><td></td><td>1925-01-01 00:00:00至2283-11-11 23:59:59</td><td></td></tr><tr><td>Interval</td><td></td><td>无，是一个时间长度含义</td><td>interval</td></tr></tbody></table><p>timezone是指时区，默认使用配置文件中设置的时区，或者操作系统时区。</p><p>precision是指秒后面的时间精度。</p><p>Interval的使用和MySQL的interval类型一样使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> now() <span class="hljs-operator">+</span> <span class="hljs-type">interval</span> <span class="hljs-number">4</span> <span class="hljs-keyword">DAY</span> <span class="hljs-operator">+</span> <span class="hljs-type">interval</span> <span class="hljs-number">3</span> <span class="hljs-keyword">HOUR</span>;<br>┌─plus(plus(now(), toIntervalDay(<span class="hljs-number">4</span>)), toIntervalHour(<span class="hljs-number">3</span>))─┐<br>│                                    <span class="hljs-number">2021</span><span class="hljs-number">-11</span><span class="hljs-number">-26</span> <span class="hljs-number">01</span>:<span class="hljs-number">15</span>:<span class="hljs-number">52</span> │<br>└────────────────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><h3 id="6、枚举类型"><a href="#6、枚举类型" class="headerlink" title="6、枚举类型"></a>6、枚举类型</h3><table><thead><tr><th>clickhouse类型</th><th>枚举值个数</th><th>MySQL类型</th></tr></thead><tbody><tr><td>Enum8（别名：Enum）</td><td>256</td><td>enum</td></tr><tr><td>Enum16</td><td>65536</td><td>enum</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_enum<br>(<br>    x Enum(<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;world&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>)<br>)<br>ENGINE <span class="hljs-operator">=</span> TinyLog<br></code></pre></td></tr></table></figure><p>clickhouse和MySQL在存储枚举值时，都是存储的对应的数值，而clickhouse是手动设置枚举值对应的数字值，MySQL则是系统设定的。</p><h3 id="7、LowCardinality"><a href="#7、LowCardinality" class="headerlink" title="7、LowCardinality"></a>7、LowCardinality</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">LowCardinality</span><span class="hljs-params">(data_type)</span></span><br></code></pre></td></tr></table></figure><p>该数据类型，将存储的值，设置字典索引，实际存储则存储其索引数字即可。</p><p>比如LowCardinality(String)类型字段，在insert了“小明”，“小红”，“小光”三个字符时，首先会创建一个字典，将这三个字符写入字典，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-string">&quot;小红&quot;</span>,<br>    <span class="hljs-number">3</span>: <span class="hljs-string">&quot;小光&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>key为索引序号，value为实际值。而实际存储在数据文件中，则是存储的其索引。</p><p><font color="Red">当value有很多重复值时，这种方式不仅可以节省很多存储空间，还可以加快读取速度，以及对该字段进行过滤、分组和某些查询的速度。</font></p><p><strong>值得一提的是，微软office2007版本的xlsx类型文件底层的字符串格式的存储也是采用这种方式，专门使用一个sharedString.xml来存储所有字符串，作为一个字典，而在主体的存储文件中使用索引。</strong></p><p>但是这种类型，写入速度会比一般普通类型写入慢一些，因此<strong>特别不建议在重复度很低的字段上使用这个类型</strong>。</p><p>这种类型和Enum比较类似，但是LowCadinality更加灵活，不仅可以存储String，还可以存储Date、DateTime，只要重复度很高，则可以使用这种类型。</p><h3 id="8、Nullable-T"><a href="#8、Nullable-T" class="headerlink" title="8、Nullable(T)"></a>8、Nullable(T)</h3><p>Nullable(T)，可为空的类型，如Nullable(Int8)是可为空值的Int8</p><p><font color="Red">使用Nullable会对性能产生影响，业务中可以用一些特殊字符或无意义的值来填充null，从而避免使用Nullable类型。</font></p><p>原因：1、Nullable会单独存一个文件；2、null无法使用索引。</p><p><font color="Red">注意：每种数据类型都会有自带的默认值，且不是null，如Int8的默认值是0，String的默认值是空字符串，DateTime的默认值是1970-01-01 08:00:00。如果需要为null，则需要使用Nullable(T)类型，Nullable的默认值则是null。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">use <span class="hljs-keyword">default</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test1(a Int8, b String, c DateTime, d Nullable(Int8), e Nullable(String) , f Nullable(DateTime))engine<span class="hljs-operator">=</span>TinyLog;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test1 <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;nihao&#x27;</span>, <span class="hljs-string">&#x27;2020-12-31&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;nihao&#x27;</span>, <span class="hljs-string">&#x27;2020-12-31&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test1 <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test1;<br>┌─a─┬─b─────┬───────────────────c─┬────d─┬─e─────┬───────────────────f─┐<br>│ <span class="hljs-number">1</span> │ nihao │ <span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> │    <span class="hljs-number">1</span> │ nihao │ <span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> │<br>│ <span class="hljs-number">0</span> │       │ <span class="hljs-number">1970</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">08</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ  │                ᴺᵁᴸᴸ │<br>└───┴───────┴─────────────────────┴──────┴───────┴─────────────────────┘<br></code></pre></td></tr></table></figure><p>判断是否为null的格式如下，如果不是Nullable类型，则没有.null这个字段，会报错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test1 <span class="hljs-keyword">where</span> d.null <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>┌─a─┬─b─┬───────────────────c─┬────d─┬─e────┬────f─┐<br>│ <span class="hljs-number">0</span> │   │ <span class="hljs-number">1970</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">08</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ │<br>└───┴───┴─────────────────────┴──────┴──────┴──────┘<br></code></pre></td></tr></table></figure><h3 id="9、其他类型"><a href="#9、其他类型" class="headerlink" title="9、其他类型"></a>9、其他类型</h3><p>Array(T)，数组</p><p>AggregateFunction和SimpleAggregateFunction，比较重要，可以在表引擎那里再理解</p><p>Nested，类似于c++的struct</p><p>Tuple，即可以存不同数据类型的Array</p><p>Expression，存储了lamdba表达式</p><p>Set，集合，不可重复</p><p>Nothing，官方解释，此数据类型的唯一目的是表示不需要值的情况，好像没啥用</p><p>IPV4，ipv4专用类型，基于UInt32存储</p><p>IPV6，ipv6专用类型</p><p>GEO，坐标类型，包括Point、Ring、Polygon、MultiPolygon</p><p>Map(K, V)，映射表类型</p><h3 id="10、特殊值"><a href="#10、特殊值" class="headerlink" title="10、特殊值"></a>10、特殊值</h3><p>此外clickhouse还有一些特殊值，如<code>Inf</code>、<code>-Inf</code>和<code>NaN</code>，即<code>infinity</code>、<code>negative infinity</code>和非数字类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-operator">/</span> <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> a, <span class="hljs-number">-1</span> <span class="hljs-operator">/</span> <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> b, <span class="hljs-number">0</span> <span class="hljs-operator">/</span> <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> c;<br>┌───a─┬────b─┬───c─┐<br>│ inf │ <span class="hljs-operator">-</span>inf │ nan │<br>└─────┴──────┴─────┘<br></code></pre></td></tr></table></figure><h3 id="11、相关函数"><a href="#11、相关函数" class="headerlink" title="11、相关函数"></a>11、相关函数</h3><table><thead><tr><th>函数名</th><th>含义</th></tr></thead><tbody><tr><td>toTypeName(field)</td><td>获field字段的类型</td></tr><tr><td>cast(value, T) or cast(value as T)</td><td>将value强制转换为T类型</td></tr><tr><td>extract(part from date)</td><td>从日期中获取年、月、日</td></tr><tr><td>uniq(field)</td><td>取distinct</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">cast</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;Int8&#x27;</span>) <span class="hljs-keyword">as</span> x, toTypeName(x) <span class="hljs-keyword">as</span> type;<br>┌─x─┬─type─┐<br>│ <span class="hljs-number">1</span> │ Int8 │<br>└───┴──────┘<br><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">DAY</span> <span class="hljs-keyword">from</span> now());<br>┌─toDayOfMonth(now())─┐<br>│                  <span class="hljs-number">21</span> │<br>└─────────────────────┘<br></code></pre></td></tr></table></figure><h2 id="四、表引擎"><a href="#四、表引擎" class="headerlink" title="四、表引擎"></a>四、表引擎</h2><p>文档：<a href="https://clickhouse.com/docs/en/engines/table-engines/">Introduction | ClickHouse Documentation</a></p><p>表引擎决定了：</p><ul><li>数据存储的方式和位置，写到哪里以及从哪里读取数据</li><li>支持哪些查询，以及如何支持（有一些特殊的查询需要特殊的表引擎才能支持）</li><li>并发数据访问</li><li>索引的使用</li><li>是否可以使用多线程执行（有些引擎，在查询一条sql时会多线程执行）</li><li>数据复制参数</li></ul><p>表引擎有<strong>集成引擎、日志系列引擎、MergeTree系列引擎和一些特殊引擎</strong>。</p><h3 id="1、集成引擎"><a href="#1、集成引擎" class="headerlink" title="1、集成引擎"></a>1、集成引擎</h3><p>集成引擎主要是为了继承其他组件而使用的，比如集成MySQL、jdbc、kafka等。集成的本质就是，将MySQL等源数据和clickhouse表做<strong>一层映射</strong>，然后就可以直接用clickhouse查询源数据。</p><h3 id="2、日志系列引擎"><a href="#2、日志系列引擎" class="headerlink" title="2、日志系列引擎"></a>2、日志系列引擎</h3><p>日志引擎是为了需要快速写一些小表（小于100万）而使用的引擎，就像名字一样，多用于日志存储。</p><p>如TinyLog，以列文件的形式保存在磁盘上，<strong>不支持索引，没有并发控制</strong>。一般保存少量数据，生产环境很少使用。</p><h3 id="3、特殊引擎"><a href="#3、特殊引擎" class="headerlink" title="3、特殊引擎"></a>3、特殊引擎</h3><p>很多，具体见官方文档。</p><p>如Memory，内存引擎，将数据以未经压缩的形式直接存储在内存中，<strong>不支持索引，读写操作不会阻塞，简单查询性能非常高</strong>！</p><h3 id="4、MergeTree系列（重要！！）"><a href="#4、MergeTree系列（重要！！）" class="headerlink" title="4、MergeTree系列（重要！！）"></a>4、MergeTree系列（重要！！）</h3><p>文档：<a href="https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/">Introduction | ClickHouse Documentation</a></p><h4 id="（1）MergeTree合并树"><a href="#（1）MergeTree合并树" class="headerlink" title="（1）MergeTree合并树"></a>（1）MergeTree合并树</h4><p>这种表引擎在建表时，必须要加order by。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db.]table_name [<span class="hljs-keyword">ON</span> CLUSTER cluster]<br>(<br>    name1 [type1] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr1] [TTL expr1],<br>    name2 [type2] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr2] [TTL expr2],<br>    ...<br>    INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,<br>    INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2,<br>    ...<br>    PROJECTION projection_name_1 (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">COLUMN</span> LIST EXPR<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>] [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>]),<br>    PROJECTION projection_name_2 (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">COLUMN</span> LIST EXPR<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>] [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>])<br>) ENGINE <span class="hljs-operator">=</span> MergeTree()<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> expr<br>[<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> expr]<br>[<span class="hljs-keyword">PRIMARY</span> KEY expr]<br>[SAMPLE <span class="hljs-keyword">BY</span> expr]<br>[TTL expr<br>    [<span class="hljs-keyword">DELETE</span><span class="hljs-operator">|</span><span class="hljs-keyword">TO</span> DISK <span class="hljs-string">&#x27;xxx&#x27;</span><span class="hljs-operator">|</span><span class="hljs-keyword">TO</span> VOLUME <span class="hljs-string">&#x27;xxx&#x27;</span> [, ...] ]<br>    [<span class="hljs-keyword">WHERE</span> conditions]<br>    [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> key_expr [<span class="hljs-keyword">SET</span> v1 <span class="hljs-operator">=</span> aggr_func(v1) [, v2 <span class="hljs-operator">=</span> aggr_func(v2) ...]] ] ]<br>[SETTINGS name<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>, ...]<br></code></pre></td></tr></table></figure><p><strong>表底层存储文件夹和文件介绍：</strong></p><p><font color="Red">分区是按文件夹存储的，一个分区一个文件夹</font>，文件夹的名称为<code>分区id_最小分区块编号_最大分区块编号_合并层级</code></p><p>分区id生成规则：</p><ul><li>没有设置分区，则默认生成一个all目录作为数据分区</li><li>整形分区，以该整形值的字符串形式作为分区id</li><li>日期分区，分区id为日期的yyyymmdd形式</li><li>其他分区，如String、Float等，以其128位hash值为分区id</li></ul><p>最小分区块编号：分区的最小分区编号，适用于分区合并</p><p>最大分区块编号：分区的最大分区编号，适用于分区合并</p><p>合并层级：被合并的次数。<font color="Red">插入数据时，并不会直接将数据插入到对应分区中，而是会生成一个临时分区，等服务器空闲或者一段时间后，再将临时分区合并到原有的分区文件中。和hbase的regionserver类似</font></p><p><strong>通过手动执行<code>optimize table xxx final</code>可以手动进行数据合并。</strong></p><p><strong>目录文件内各文件介绍：</strong></p><ul><li>bin文件：数据文件</li><li>mrk文件：标记文件，标记文件在idx索引文件和bin文件之间起到了桥梁作用，一般记录列的offset，用于加速查询。以mrk2结尾的文件，表示该表启动了自适应索引间隔。</li><li>primary.idx文件：主键索引文件，用于加快查询效率</li><li>minmax_create_time.idx：分区键的最大值最小值</li><li>checksum.txt：校验文件，用于校验各个文件的正确性。存放各个文件的size和hash值。</li><li>count.txt：记录了该表的总数据量</li><li>columns.txt：记录了该表的列信息</li><li>default_compression_codec.txt：记录了数据文件中使用的压缩编码器</li><li>partition.dat：记录了分区信息</li></ul><p><strong>主键索引</strong></p><p>clickhouse的主键索引<strong>并不是唯一索引。主键索引是稀疏索引</strong>，即并不是将这一列的所有值建索引，而是一部分值，查找时通过类似于二分查找的方式确定数据所在区间，再扫描这个区间找到对应的值。</p><p>索引有一个index granularity，即索引稀疏粒度，即稀疏索引记录值时每次跳过的行数，默认值为8192。粒度越细，索引数据量存储的越大，查询效率越高；粒度越粗，索引数据量越小，查询效率越低。当很多重复值时，需要适当提高粒度。</p><p><strong>order by（MergeTree系列引擎最重要的字段）</strong></p><p>主键索引是稀疏索引，这种索引的查找方式需要排序，因此表必须有一个字段进行了排序，这就是为什么order by是MergeTree引擎的必选信息。<font color="Red">主键字段必须是order by的前缀字段</font>，原因和MySQL可以使用最左前缀字段作为索引原因一样。</p><p><strong>二级索引（数据跳跃索引）</strong></p><p>老版本需要设置<code>set allow_experimental_data_skipping_indices = 1</code>开启。</p><p>v20.1.2.4及以后，这个参数已经被删除了</p><p>二级索引的原理：以索引粒度为单位，记录每个区间的最大值和最小值，当以这个字段为条件查询时，只需要比较值是否落在这个区间就行（比较两次），若落在这个区间内，再做区间扫描，否则直接跳过。</p><p><strong>TTL</strong></p><p>数据过期时间，用于管理该数据的生命周期，到期删除。</p><p>有字段级别的TTL和表级别的TTL。字段级别只是删除这一个字段，表级别是删除整行数据。</p><h4 id="（2）ReplacingMergeTree"><a href="#（2）ReplacingMergeTree" class="headerlink" title="（2）ReplacingMergeTree"></a>（2）ReplacingMergeTree</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db.]table_name [<span class="hljs-keyword">ON</span> CLUSTER cluster]<br>(<br>    name1 [type1] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr1],<br>    name2 [type2] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr2],<br>    ...<br>) ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree([ver])<br>[<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> expr]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> expr]<br>[<span class="hljs-keyword">PRIMARY</span> KEY expr]<br>[SAMPLE <span class="hljs-keyword">BY</span> expr]<br>[SETTINGS name<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>, ...]<br></code></pre></td></tr></table></figure><p>完全继承了MergeTree，只是多了一个<strong>去重功能，根据order by字段进行去重</strong>。</p><p>去重要删除哪些数据：<font color="Red">建表语句中ReplacingMergeTree([ver])的ver字段值最大的那一条数据被保留，其他数据被删除。没指定这个字段，则按插入顺序来，保留最后的一条数据，类似于<code>upsert</code>。</font></p><p>去重时机：并不是实时去重，而是在合并分区时进行去重，即保证<strong>最终一致性</strong>。</p><p>去重范围：在同一分区内去重，并不是全表内去重。</p><p><strong>这个引擎在实际生产环境中最常用</strong>，通常ver字段都是业务中的插入时间字段，或者其他数据版本控制字段。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> default.test3<br>(<br>    `id` UInt32,<br>    `name` String,<br>    `money` <span class="hljs-type">Decimal</span>(<span class="hljs-number">18</span>, <span class="hljs-number">6</span>)<br>)<br>ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (id, name)<br>SETTINGS index_granularity <span class="hljs-operator">=</span> <span class="hljs-number">8192</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test3 <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test3 <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">2000</span>);<br>optimize <span class="hljs-keyword">table</span> test3;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test3;<br></code></pre></td></tr></table></figure><h4 id="（3）SummingMergeTree"><a href="#（3）SummingMergeTree" class="headerlink" title="（3）SummingMergeTree"></a>（3）SummingMergeTree</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db.]table_name [<span class="hljs-keyword">ON</span> CLUSTER cluster]<br>(<br>    name1 [type1] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr1],<br>    name2 [type2] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr2],<br>    ...<br>) ENGINE <span class="hljs-operator">=</span> SummingMergeTree([columns])<br>[<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> expr]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> expr]<br>[SAMPLE <span class="hljs-keyword">BY</span> expr]<br>[SETTINGS name<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>, ...]<br></code></pre></td></tr></table></figure><p>在MergeTree的基础上，提供了“<strong>预聚合</strong>”的功能，且<strong>根据order by字段进行sum聚合</strong>。</p><p>聚合后其他字段怎么办：对columns字段进行sum，其他字段保留最早的那一条，即最早插入的那一条。</p><p>聚合范围：在同一分区内进行聚合。</p><p>聚合时机：并不是实时聚合，而是在合并分区时进行聚合。</p><h3 id="5、ReplacatedMergeTree系列"><a href="#5、ReplacatedMergeTree系列" class="headerlink" title="5、ReplacatedMergeTree系列"></a>5、ReplacatedMergeTree系列</h3><p>该系列表引擎用于副本备份，MergeTree系列的所有子引擎都有对应的ReplacetedMergeTree引擎，如ReplacetedReplacingMergeTree等。</p><h2 id="五、SQL语法"><a href="#五、SQL语法" class="headerlink" title="五、SQL语法"></a>五、SQL语法</h2><p>只介绍和标准sql不一样的地方</p><h3 id="1、Update和Delete"><a href="#1、Update和Delete" class="headerlink" title="1、Update和Delete"></a>1、Update和Delete</h3><p>clickhosue提供update和delete的功能，但没有这两个关键字，即不能直接使用delete或update语句，而是提供了一类称为Mutation的查询，是Alter的一种。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除一条数据</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test2 <span class="hljs-keyword">delete</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br><br><span class="hljs-comment">-- 更新一条数据</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test2 update age <span class="hljs-operator">=</span> <span class="hljs-number">99</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>和普通的OLTP数据库不一样，Mutation语句是一种很重的操作，而且不支持事务。<font color="Red">原因在于每次操作都要放弃目标数据的原有分区，重新建分区，旧分区被打上逻辑上的失效标记，只有分区合并的时候，才会删除旧分区旧数据。因此要尽量做批量的变更，避免做频繁的小变更。</font></p><p>实现高性能的update和delete思路：</p><p>表结构额外新增两个字段：<code>isvalid</code>，0表示无效，1表示有效；<code>version</code>，表示数据版本号，最大为最新数据</p><p>更新：插入一条<code>version = max(version) + 1</code>的数据即可</p><p>删除：插入一条<code>isvalid = 0</code>的数据即可</p><p>查询：每次查询条件都要加上<code>version = max(version) and isvalid = 1</code></p><p>问题：数据膨胀，需要定期清理过期数据，并对数据分区做合并</p><h3 id="2、Join"><a href="#2、Join" class="headerlink" title="2、Join"></a>2、Join</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> test2.id, <span class="hljs-built_in">sum</span>(test3.money) <span class="hljs-keyword">from</span> test2, test3 <span class="hljs-keyword">where</span> test2.id <span class="hljs-operator">=</span> test3.id <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> test2.id;<br></code></pre></td></tr></table></figure><p>clickhouse的join原理：将右表（test3）加载到内存中，再和左表一条一条匹配。</p><p><font color="Red">因此这里最好不要将大表写到右边</font>，这一点和MySQL的“小表驱动大表”不一样。</p><h3 id="3、函数"><a href="#3、函数" class="headerlink" title="3、函数"></a>3、函数</h3><p>窗口函数，21.7.3.14版本还处于实验中，需要使用的话，要将一个设置打开：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> allow_experimental_window_functions <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>自定义函数，不支持。</p><p>multiif(cond_1, then_1, cond_2, then_2, …)，类似于case when。</p><h3 id="4、group"><a href="#4、group" class="headerlink" title="4、group"></a>4、group</h3><p>group增加了with rollup、with cube、with totals用于统计不同维度的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- rollup是从右至左依次减少一个维度进行统计</span><br><span class="hljs-keyword">group</span> A, B <span class="hljs-keyword">with</span> <span class="hljs-keyword">rollup</span> <span class="hljs-operator">=</span> <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, <span class="hljs-keyword">null</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span><br><br><span class="hljs-comment">-- cube是排列组合的维度统计</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B <span class="hljs-keyword">with</span> <span class="hljs-keyword">cube</span> <span class="hljs-operator">=</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, <span class="hljs-keyword">null</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> B, <span class="hljs-keyword">null</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span><br><br><span class="hljs-comment">-- total是额外加上统计总计值</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B <span class="hljs-keyword">with</span> totals <span class="hljs-operator">=</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-keyword">as</span> flag, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> flag2, <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span>, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">with</span> <span class="hljs-keyword">rollup</span>;<br><br><span class="hljs-keyword">select</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-keyword">as</span> flag, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> flag2, <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span>, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">with</span> <span class="hljs-keyword">cube</span>;<br><br><span class="hljs-keyword">select</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-keyword">as</span> flag, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> flag2, <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span>, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">with</span> totals;<br></code></pre></td></tr></table></figure><h2 id="六、副本写入（备份、高可用）"><a href="#六、副本写入（备份、高可用）" class="headerlink" title="六、副本写入（备份、高可用）"></a>六、副本写入（备份、高可用）</h2><p>clickhouse副本类似于MySQL的replicate，备份用。对应的表引擎为ReplicatedMergeTree。</p><p>依赖zookeeper，没有主次之分。</p><p><img src="/images/%E5%89%AF%E6%9C%AC%E5%86%99%E5%85%A5.png"></p><p>配置的两种方式：</p><p>1、修改<code>/etc/clickhouse/config.xml</code>配置文件中的zookeeper配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">zookeeper</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example1<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example2<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example3<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">zookeeper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、在<code>/etc/clickhouse-server/config.d/</code>目录下新增一个<code>metrika.xml</code>文件，按照<code>config.xml</code>中zookeeper的配置样式写入自己的配置，再添加一个<code>include_from</code>标签和一个带有<code>incl</code>属性的<code>zookeeper</code>标签，引入这个配置文件。该文件的配置会覆盖<code>config.xml</code>中zookeeper的配置。</p><p>以这种方式创建xml文件不要忘了<font color="Red">用户权限</font>，将文件owner设置为clickhouse:clickhouse</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown clickhouse:clickhouse metrika.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- metrika.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">zookeeper</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example1<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example2<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example3<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">zookeeper</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- config.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">zookeeper</span> <span class="hljs-attr">incl</span>=<span class="hljs-string">&quot;zookeeper-servers&quot;</span> <span class="hljs-attr">optional</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include_from</span>&gt;</span>/etc/clickhouse-server/config.d/metrika.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include_from</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、分片集群"><a href="#七、分片集群" class="headerlink" title="七、分片集群"></a>七、分片集群</h2><p>副本是指备份，每个服务器都有全量数据（就像复制了一个服务器一样，所以叫replicate）。</p><p>分片集群是指分布式，将一份数据切片，分布到不同服务器上，每次查询需要将任务分发到各个服务器中，最后汇总结果（类似于map-reduce）。</p><p>分片集群对应的表引擎为Distributed。</p><h3 id="1、集群写入"><a href="#1、集群写入" class="headerlink" title="1、集群写入"></a>1、集群写入</h3><p>以3分片，2副本为例。</p><p><img src="/images/%E9%9B%86%E7%BE%A4%E5%86%99%E5%85%A5.png"></p><p>distribute hdp1类似于一个master（以下为了方便，简称为master），并不实际存储数据，而是起一个控制器和数据分发的作用。下面的hdp1-hdp6类似于worker，存储数据。客户端发送写入命令，master将接收到的数据发送给下面的worker写入数据。</p><p>问题：每个副本都要由master亲自分发数据吗？</p><p>internal_replication参数，</p><ul><li>true，表示master只将数据分发给分片，每个副本的数据写入有对应的分片进行内部复制</li><li>false，表示每个副本的数据写入也由master亲自分发，而不是由分片内部复制</li></ul><p>一般来说都会把这个参数设置为true，原因：</p><ul><li>副本服务器也要master来分发的话，会对master造成压力，写入效率会降低</li><li>对副本的分发过程中如果出现异常，则可能造成分片和对应的副本数据不一致</li><li>每一层只负责自己的事，master是为分布式而产生了，并不是为副本而产生的，因此master不太应该管副本的备份工作。</li></ul><h3 id="2、集群读取"><a href="#2、集群读取" class="headerlink" title="2、集群读取"></a>2、集群读取</h3><p><img src="/images/%E9%9B%86%E7%BE%A4%E8%AF%BB%E5%8F%96.png"></p><p>errors_count，即读取时发生错误的次数，每次发生错误会记录在对应的服务器中，读取时会选择错误次数更小的副本读取。</p><h3 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h3><p>同样可以将这个配置写在默认配置文件config.xml中，也可以在外部文件中加配置再在config.xml中引入。</p><p>在<code>/etc/clickhouse-server/config.xml</code>中加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">include_from</span>&gt;</span>/etc/clickhouse-server/config.d/metrika-shard.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include_from</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>/etc/clickhouse-server/config.d/metrika-shard.xml</code>配置如下：</p><p>注意同样别忘了文件的用户权限。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">remote_servers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">perftest_1shards_3replicas</span>&gt;</span><span class="hljs-comment">&lt;!-- 集群名称，可以修改 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">internal_replication</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">internal_replication</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest01j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest02j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">internal_replication</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">internal_replication</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest03j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest04j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">internal_replication</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">internal_replication</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest05j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest06j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">perftest_1shards_3replicas</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">remote_servers</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">zookeeper</span>&gt;</span><span class="hljs-comment">&lt;!-- 有几台服务器就需要几台zookeeper，按照以上需求，要写六台，这里省略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>zoo01.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>zoo02.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>zoo03.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">zookeeper</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_1_1<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="Red">macros用于建表时识别分片和副本，shard为分片名称，replica为副本名称，这个配置每台服务器上都要单独配置。</font></p><p>可以自定义配置，这里配置的含义是：<code>rep_&#123;a&#125;_&#123;b&#125;</code>，a表示分片编号，b表示副本编号。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第1个分片，第1个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_1_1<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第1个分片，第2个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_1_2<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第2个分片，第1个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>02<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_2_1<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第2个分片，第2个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>02<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_2_2<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第3个分片，第1个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>03<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_3_1<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第3个分片，第2个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>03<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_3_2<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="Red">默认配置文件config.xml中官方也给我们配好了几个示例集群的配置，可以参考上面的配置以及配置说明。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">myubuntu1 :) <span class="hljs-keyword">show</span> clusters;<br><br><span class="hljs-keyword">SHOW</span> CLUSTERS<br><br>Query id: <span class="hljs-number">1</span>d87a0a9<span class="hljs-number">-9e49</span><span class="hljs-number">-498</span>d<span class="hljs-operator">-</span>b097<span class="hljs-operator">-</span>c22a23530d2e<br><br>┌─cluster──────────────────────────────────────┐<br>│ test_cluster_two_shards                      │<br>│ test_cluster_two_shards_internal_replication │<br>│ test_cluster_two_shards_localhost            │<br>│ test_shard_localhost                         │<br>│ test_shard_localhost_secure                  │<br>│ test_unavailable_shard                       │<br>└──────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><h3 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h3><h4 id="（1）建表"><a href="#（1）建表" class="headerlink" title="（1）建表"></a>（1）建表</h4><p><strong>先建本地表：</strong></p><p>即创建之前说的worker，存储数据用的本地表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_cluster_table <span class="hljs-keyword">on</span> cluster test_shard_localhost(<br>    id UInt8,<br>    name String,<br>    create_time Datetime <span class="hljs-keyword">default</span> now()<br>)<br>engine <span class="hljs-operator">=</span> ReplicatedMergeTree(<span class="hljs-string">&#x27;clickhouse/tables/&#123;shard&#125;/test_cluster_table&#x27;</span>, <span class="hljs-string">&#x27;&#123;replica&#125;&#x27;</span>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (id, name);<br><br>Query id: <span class="hljs-number">86</span>b73340<span class="hljs-number">-2</span>c9d<span class="hljs-number">-42</span>a1<span class="hljs-number">-97e2</span><span class="hljs-operator">-</span>f99d8d388f0e<br><br>┌─host────────────┬─port─┬─status─┬─error─┬─num_hosts_remaining─┬─num_hosts_active─┐<br>│ <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span> │ <span class="hljs-number">9003</span> │      <span class="hljs-number">0</span> │       │                   <span class="hljs-number">0</span> │                <span class="hljs-number">0</span> │<br>└─────────────────┴──────┴────────┴───────┴─────────────────────┴──────────────────┘<br><br><span class="hljs-number">1</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> set. Elapsed: <span class="hljs-number">0.111</span> sec.<br></code></pre></td></tr></table></figure><p>test_shard_localhost为集群名称</p><p>{shard}和{replica}都是配置文件中macros导入，不用自己填。</p><p><strong>再创建分布式表：</strong></p><p>即创建之前说的master</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_cluster_table_all <span class="hljs-keyword">on</span> cluster test_shard_localhost(<br>    id UInt8,<br>    name String,<br>    create_time Datetime <span class="hljs-keyword">default</span> now()<br>)<br>engine<span class="hljs-operator">=</span>Distributed(test_shard_localhost, <span class="hljs-keyword">default</span>, test_cluster_table, hiveHash(id));<br><br>Query id: <span class="hljs-number">69</span>a6f496<span class="hljs-operator">-</span>e916<span class="hljs-number">-47</span>ac<span class="hljs-operator">-</span>ae0b<span class="hljs-number">-636</span>c9244bc90<br><br>┌─host────────────┬─port─┬─status─┬─error─┬─num_hosts_remaining─┬─num_hosts_active─┐<br>│ <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span> │ <span class="hljs-number">9003</span> │      <span class="hljs-number">0</span> │       │                   <span class="hljs-number">0</span> │                <span class="hljs-number">0</span> │<br>└─────────────────┴──────┴────────┴───────┴─────────────────────┴──────────────────┘<br><br><span class="hljs-number">1</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> set. Elapsed: <span class="hljs-number">0.114</span> sec.<br></code></pre></td></tr></table></figure><p>test_shard_localhost为集群名称</p><p>default为数据库名</p><p>test_cluster_table为刚才创建的本地表名</p><p>hiveHash(id)，hiveHash表示采用什么算法分片，id表示用哪个字段分片。</p><h4 id="（2）使用"><a href="#（2）使用" class="headerlink" title="（2）使用"></a>（2）使用</h4><p>分布式表不存储数据，为每个本地表的逻辑汇总表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 从分布式表插入数据，本地表可以看到</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_cluster_table_all <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, now());<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_cluster_table;<br><br><span class="hljs-comment">-- 从本地表插入，从分布式表也可以看得到</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_cluster_table <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, now());<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_cluster_table_all;<br></code></pre></td></tr></table></figure><p>本地表只能看到本服务器上存储的数据分片，无法看到其他服务器上存储的数据分片，而分布式表可以看到所有数据。</p><p>因此一般不用将本地表暴露给用户写入，统一从分布式表做增删改查。</p><h2 id="八、进阶语法"><a href="#八、进阶语法" class="headerlink" title="八、进阶语法"></a>八、进阶语法</h2><h3 id="1、explain"><a href="#1、explain" class="headerlink" title="1、explain"></a>1、explain</h3><p>20.6.3.28及以后版本才有explain功能。</p><p>官方文档：<a href="https://clickhouse.com/docs/en/sql-reference/statements/explain/">EXPLAIN | ClickHouse Documentation</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN [AST <span class="hljs-operator">|</span> SYNTAX <span class="hljs-operator">|</span> PLAN <span class="hljs-operator">|</span> PIPELINE] [setting <span class="hljs-operator">=</span> <span class="hljs-keyword">value</span>, ...] <span class="hljs-keyword">SELECT</span> ... [FORMAT ...]<br></code></pre></td></tr></table></figure><p>EXPLAIN SYNTAX …可以看到系统给你优化后的语法。</p><p>比如上面那个join的sql，通过系统优化后的sql语句如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain syntax <span class="hljs-keyword">select</span> test2.id, <span class="hljs-built_in">sum</span>(test3.money) <span class="hljs-keyword">from</span> test3, test2 <span class="hljs-keyword">where</span> test2.id <span class="hljs-operator">=</span> test3.id <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> test2.id;<br><br>┌─explain─────────────────────┐<br>│ <span class="hljs-keyword">SELECT</span>                      │<br>│     id,                     │<br>│     <span class="hljs-built_in">sum</span>(test3.money)        │<br>│ <span class="hljs-keyword">FROM</span> test2                  │<br>│ <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>              │<br>│ (                           │<br>│     <span class="hljs-keyword">SELECT</span>                  │<br>│         id,                 │<br>│         money               │<br>│     <span class="hljs-keyword">FROM</span> test3              │<br>│ ) <span class="hljs-keyword">AS</span> test3 <span class="hljs-keyword">ON</span> id <span class="hljs-operator">=</span> test3.id │<br>│ <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> test3.id         │<br>│ <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> id                 │<br>└─────────────────────────────┘<br></code></pre></td></tr></table></figure><p>但这里优化后的结果不对，是因为id没有加上test2表名，并且where条件也是多余的，手动修改为如下sql，对比原始sql执行速度，优化后的sql性能确实提升了一些。</p><p><font color="Red">千万不要盲目相信explain syntax后的结果，可能会让你得不偿失。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    test2.id,<br>    <span class="hljs-built_in">sum</span>(test3.money)<br><span class="hljs-keyword">FROM</span> test2<br><span class="hljs-keyword">ALL</span> <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br>(<br>    <span class="hljs-keyword">SELECT</span><br>        id,<br>        money<br>    <span class="hljs-keyword">FROM</span> test3<br>) <span class="hljs-keyword">AS</span> test3 <span class="hljs-keyword">ON</span> test2.id <span class="hljs-operator">=</span> test3.id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> test2.id;<br></code></pre></td></tr></table></figure><p>老版本没有explain语法，要查看执行计划，可以在进入客户端时，加上<code>--send_logs_level=trade &lt;&lt;&lt; &quot;sql&quot;</code>，然后去看日志即可。</p><h3 id="2、optimize"><a href="#2、optimize" class="headerlink" title="2、optimize"></a>2、optimize</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">OPTIMIZE <span class="hljs-keyword">TABLE</span> [db.]name [<span class="hljs-keyword">ON</span> CLUSTER cluster] [<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">partition</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PARTITION</span> ID <span class="hljs-string">&#x27;partition_id&#x27;</span>] [<span class="hljs-keyword">FINAL</span>] [DEDUPLICATE [<span class="hljs-keyword">BY</span> expression]]<br></code></pre></td></tr></table></figure><p>optimize功能是触发一个表数据的合并。只能用于MergeTree系列表引擎、Buffer表引擎和MaterializedView表引擎。</p><p>触发数据合并的意思是，例如在一个ReplacingMergeTree表执行，则会执行一个任务，按order by指定的字段去重；又例如在SummingMergeTree表执行，则会执行一个任务，按照order by指定字段进行聚合，对SummingMergeTree指定字段进行sum计算，其他字段保留最新数据。<font color="Red">即将数据初始化，或重新整理分区数据。</font></p><p>如果指定了<code>FINAL</code>，则会强制执行数据合并，即使所有数据都在一个分区，或者已经有并发的合并正在进行。</p><h2 id="九、常用配置"><a href="#九、常用配置" class="headerlink" title="九、常用配置"></a>九、常用配置</h2><h3 id="1、CPU"><a href="#1、CPU" class="headerlink" title="1、CPU"></a>1、CPU</h3><table><thead><tr><th>位置</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>user.xml</td><td>background_pool_size</td><td>表引擎相关的后台线程池大小，常用于merge任务。默认值为16，允许的情况下可以调整称服务器的逻辑线程数据。</td></tr><tr><td>user.xml</td><td>background_schedule_pool_size</td><td>后台任务线程池大小，常用于副本数据备份、kafka流、DNS缓存更新。默认值128。</td></tr><tr><td>user.xml</td><td>background_distributed_schedule_pool_size</td><td>后台任务线程池大小，常用于分布式数据发送。默认值为16。</td></tr><tr><td>config.xml</td><td>max_concurrent_queries</td><td>最大并发请求数，默认设置为100，建议不超过300。</td></tr><tr><td>user.xml</td><td>max_threads</td><td>单个查询使用的最大线程数，默认值为cpu物理核心数。这个值越低，查询时占用的内存越低。</td></tr></tbody></table><h3 id="2、内存"><a href="#2、内存" class="headerlink" title="2、内存"></a>2、内存</h3><table><thead><tr><th>位置</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>user.xml</td><td>max_memory_usage</td><td>单次查询使用的最大内存。默认值为10G左右。</td></tr><tr><td>user.xml</td><td>max_bytes_before_external_groupby</td><td>当使用groupby时内存占用超过最大内存时，将数据写入磁盘做缓存进行groupby时大小。一般可以设置为max_memory_usage的一半。</td></tr><tr><td>user.xml</td><td>max_bytes_before_external_sort</td><td>当使用sort时内存占用超过最大内存时，将数据写入磁盘作为临时缓存进行sort时的大小。一般可以设置为max_memory_usage的一半。</td></tr><tr><td>config.xml</td><td>max_table_size_to_drop</td><td>drop table时，允许删除的表的最大大小，表大小超过这个值时删除表不被允许。设置为0时，认为没有限制。</td></tr></tbody></table><h2 id="十、查询优化"><a href="#十、查询优化" class="headerlink" title="十、查询优化"></a>十、查询优化</h2><h3 id="1、单表优化"><a href="#1、单表优化" class="headerlink" title="1、单表优化"></a>1、单表优化</h3><h4 id="（1）prewhere"><a href="#（1）prewhere" class="headerlink" title="（1）prewhere"></a>（1）prewhere</h4><p>只能用于MergeTree系列表引擎。</p><p>prewhere执行时，会直接扫描过滤条件中的列，将数据过滤后，再将需要的字段补全。</p><p>当查询列明显多于过滤列时，可以使用prewhere，降低IO。</p><p><code>optimize_move_to_prewhere</code>参数是在有需要的时候自动将where优化成prewhere，默认是打开的。即这个参数打开时，不需要手动写prewhere，系统会在有需要的时候自动优化成prewhere去查询。</p><p>部分情况下，不会自动优化成prewhere：</p><ul><li>使用常用表达式</li><li>使用默认值的alias类型的字段</li><li>包含了arrayJOIN，globalIn，globalNotIn，indexHint的查询</li><li>select字段和where字段相同</li><li>使用了主键字段</li></ul><p><font color="Red">有需要时，还是自己手动使用prewhere好，别太依赖系统的优化。</font></p><h4 id="（2）sample"><a href="#（2）sample" class="headerlink" title="（2）sample"></a>（2）sample</h4><p>只能用于MergeTree系列表引擎。</p><p>采样。不会对所有数据执行查询，而是对特定部分数据（样本）进行查询。</p><p>且这个样本并不是严格精确的数据量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 约10%样本查询</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> test<br>sample <span class="hljs-number">0.1</span>;<br><br><span class="hljs-comment">-- 当比例值远大于1时，这个含义便会转换为数据条数据，如这里采样至少10000条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> test<br>sample <span class="hljs-number">10000</span>;<br><br><span class="hljs-comment">-- 加上offset表示跳过前面部分数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> test<br>sample <span class="hljs-number">0.1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><p>和limit的区别在于，limit是严格精确的数据量，而sample并不是严格的数据量。同时sample可以用在where、group和orderby前面。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    Title,<br>    <span class="hljs-built_in">count</span>() <span class="hljs-operator">*</span> <span class="hljs-number">10</span> <span class="hljs-keyword">AS</span> PageViews<br><span class="hljs-keyword">FROM</span> hits_distributed<br>SAMPLE <span class="hljs-number">0.1</span><br><span class="hljs-keyword">WHERE</span><br>    CounterID <span class="hljs-operator">=</span> <span class="hljs-number">34</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Title<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> PageViews <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><p>在一些特殊情况下，可以使用sample：</p><ul><li>业务需要查询延迟很低，但无法通过优化来降低延迟，且对具体结果的精确性不太讲究，可以使用近似结果</li><li>只想大致查看数据的分布以及数据质量</li></ul><h4 id="（3）orderby"><a href="#（3）orderby" class="headerlink" title="（3）orderby"></a>（3）orderby</h4><p>order by不要单独使用，结合where和limit一起使用。</p><p>一般排序后很少需要完整排序的结果，因此可以加一个limit。加limit和不加limit的效率还是有些差距的。</p><h4 id="（4）虚拟列"><a href="#（4）虚拟列" class="headerlink" title="（4）虚拟列"></a>（4）虚拟列</h4><p>clickhouse中<font color="Red">尽量不要使用虚拟列</font>，很消耗性能。可以在服务端或者其他地方处理数据，不要在clickhouse中使用虚拟列来处理数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a<span class="hljs-operator">/</span>b <span class="hljs-keyword">from</span> test;<br><span class="hljs-keyword">select</span> a, b <span class="hljs-keyword">from</span> test;<br></code></pre></td></tr></table></figure><h3 id="2、多表关联"><a href="#2、多表关联" class="headerlink" title="2、多表关联"></a>2、多表关联</h3><p>数据集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -O https://datasets.clickhouse.com/hits/partitions/hits_v1.tar<br>tar xvf hits_v1.tar -C /var/lib/clickhouse # path to ClickHouse data directory<br><span class="hljs-meta">#</span><span class="bash"> check permissions on unpacked data, fix <span class="hljs-keyword">if</span> required</span><br><br>curl -O https://datasets.clickhouse.com/visits/partitions/visits_v1.tar<br>tar xvf visits_v1.tar -C /var/lib/clickhouse # path to ClickHouse data directory<br><span class="hljs-meta">#</span><span class="bash"> check permissions on unpacked data, fix <span class="hljs-keyword">if</span> required</span><br><br>sudo service clickhouse-server restart<br></code></pre></td></tr></table></figure><p>clickhouse建表时没有like语法，因此使用以下语法创建一个张和hits_v1一样表结构的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> hits_test<br>ENGINE <span class="hljs-operator">=</span> MergeTree<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> toYYYYMM(EventDate)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (CounterID, EventDate, intHash32(UserID))<br>SAMPLE <span class="hljs-keyword">BY</span> intHash32(UserID)<br>SETTINGS index_granularity <span class="hljs-operator">=</span> <span class="hljs-number">8192</span><br><span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="（1）用in代替join"><a href="#（1）用in代替join" class="headerlink" title="（1）用in代替join"></a>（1）用in代替join</h4><p>但是in的使用场景很有限，而且使用时要特别注意查询结果，因为join是笛卡尔积，右表有重复数据的话，结果集可能不止一条，而使用in的话，右表有重复数据对于左表来说是没关系的。</p><h4 id="（2）大表在左，小表在右"><a href="#（2）大表在左，小表在右" class="headerlink" title="（2）大表在左，小表在右"></a>（2）大表在左，小表在右</h4><p>和MySQL或其他行式数据库不一样，clickhouse在使用join时，需要将大表作为主表，小表作为被关联的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 内存不足，直接报错</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.visits_v1 b <span class="hljs-keyword">join</span> datasets.hits_v1 a <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID <span class="hljs-keyword">where</span> a.CounterID <span class="hljs-operator">&gt;</span> <span class="hljs-number">100000</span>;<br><br><span class="hljs-comment">-- 3.751秒，可以执行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 a <span class="hljs-keyword">join</span> datasets.visits_v1 b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID <span class="hljs-keyword">where</span> a.CounterID <span class="hljs-operator">&gt;</span> <span class="hljs-number">100000</span>;<br></code></pre></td></tr></table></figure><h4 id="（3）先过滤再关联"><a href="#（3）先过滤再关联" class="headerlink" title="（3）先过滤再关联"></a>（3）先过滤再关联</h4><p>对于查询大数据量的sql，先过滤再关联，可以减少扫描的数据量，提升一点效率。即先对某一个表写where条件，形成一个子查询，再用子查询来关联，效率会比直接关联然后统一写where条件来的高。</p><p>使用先过滤再关联还有一个好处在于，如果过滤条件是右表，则可以减少将数据加载到内存的量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1.999秒，效率低</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 a <span class="hljs-keyword">join</span> datasets.visits_v1 b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID <span class="hljs-keyword">where</span> a.EventDate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2014-03-17&#x27;</span>;<br><br><span class="hljs-comment">-- 1.772秒，效率高</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 <span class="hljs-keyword">where</span> EventDate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2014-03-17&#x27;</span>) a <span class="hljs-keyword">join</span> datasets.visits_v1 b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID;<br><br><span class="hljs-comment">-- 2.509秒，占用内存峰值1.91G</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 a <span class="hljs-keyword">join</span> datasets.visits_v1 b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID <span class="hljs-keyword">where</span> b.StartDate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2014-03-17&#x27;</span>;<br><br><span class="hljs-comment">-- 2.478秒，占用内存峰值1.7G</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> CounterID <span class="hljs-keyword">from</span> datasets.visits_v1 <span class="hljs-keyword">where</span> StartDate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2014-03-17&#x27;</span>) b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID;<br></code></pre></td></tr></table></figure><h4 id="（4）分布式表用GLOBAL"><a href="#（4）分布式表用GLOBAL" class="headerlink" title="（4）分布式表用GLOBAL"></a>（4）分布式表用GLOBAL</h4><p>以3分片为例，hits_v1表为分布式表，visits_v1为普通表，以下查询为例。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hits_v1 perwhere CounterID <span class="hljs-operator">&gt;</span> <span class="hljs-number">1000</span>) a <span class="hljs-keyword">join</span> visits_v1 b <span class="hljs-keyword">on</span> <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID;<br></code></pre></td></tr></table></figure><p>分布式表在join时，每台服务器都会将右表加载到各自服务器的内存中，然后进行匹配。不使用GLOBAL时，需要查3次右表；使用GLOBAL，可以只进行1次查询，并分发到其他节点。如果此时右表也是分布式表的话，不适用GLOBAL就会查9次；使用GLOBAL只需要查3次。这就是<code>查询放大</code>。</p><h4 id="（5）使用字典表"><a href="#（5）使用字典表" class="headerlink" title="（5）使用字典表"></a>（5）使用字典表</h4><p>Dictionary。</p><p><a href="https://clickhouse.com/docs/en/sql-reference/dictionaries/internal-dicts/">https://clickhouse.com/docs/en/sql-reference/dictionaries/internal-dicts/</a></p><h3 id="3、其他优化"><a href="#3、其他优化" class="headerlink" title="3、其他优化"></a>3、其他优化</h3><h4 id="（1）写入数据时先排序。"><a href="#（1）写入数据时先排序。" class="headerlink" title="（1）写入数据时先排序。"></a>（1）写入数据时先排序。</h4><p>因为写入数据时，数据不会直接分配到实际所在的那个分区，而是会先临时放在一个新的分区。无序的数据会产生大量的新分区，merge时会产生性能问题。</p><h4 id="（2）关注CPU"><a href="#（2）关注CPU" class="headerlink" title="（2）关注CPU"></a>（2）关注CPU</h4><p>cpu负载在50%时，会对查询性能会产生影响；cpu负载超过70%时，会出现大范围超时情况。因此不要以为在单次查询时性能很好就以为在实际生产环境中没有问题，放到生产环境中的查询sql要尽量优化好。</p><h2 id="十一、一致性"><a href="#十一、一致性" class="headerlink" title="十一、一致性"></a>十一、一致性</h2><p>clickhouse只能保证<font color="Red">最终一致性</font>！如ReplacingMergeTree的删除重复数据的功能，只会在进行数据合并时进行，即在不确定的时候后台进行。因此平时使用时，<font color="Red">不能保证没有重复数据</font>。问题：如何保证查询时数据的一致性。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_replacing_mt(<br>    user_id UInt64,<br>    score String,<br>    deleted UInt8 <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>,<br>    create_time DateTime <span class="hljs-keyword">default</span> toDateTime(<span class="hljs-number">0</span>)<br>)engine<span class="hljs-operator">=</span>ReplacingMergeTree(create_time)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> user_id;<br><br><span class="hljs-comment">-- 写入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_replacing_mt(user_id, score)<br><span class="hljs-keyword">with</span> (<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>]<br>) <span class="hljs-keyword">as</span> dict<br><span class="hljs-keyword">select</span> number <span class="hljs-keyword">as</span> user_id, dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">7</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> score<br><span class="hljs-keyword">from</span> numbers(<span class="hljs-number">10000000</span>);<br><br><span class="hljs-comment">-- 修改数据（其实还是写入数据）</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_replacing_mt(user_id, score, create_time)<br><span class="hljs-keyword">with</span> (<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;BB&#x27;</span>, <span class="hljs-string">&#x27;CC&#x27;</span>, <span class="hljs-string">&#x27;DD&#x27;</span>, <span class="hljs-string">&#x27;EE&#x27;</span>, <span class="hljs-string">&#x27;FF&#x27;</span>, <span class="hljs-string">&#x27;GG&#x27;</span>]<br>) <span class="hljs-keyword">as</span> dict<br><span class="hljs-keyword">select</span> number <span class="hljs-keyword">as</span> user_id, dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">7</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> score, now() <span class="hljs-keyword">as</span> create_time<br><span class="hljs-keyword">from</span> numbers(<span class="hljs-number">500000</span>);<br><br><span class="hljs-comment">-- 查询数据量，为10500000条，并没有立即去重</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> test_replacing_mt;<br></code></pre></td></tr></table></figure><h3 id="1、手动optimize（错误）"><a href="#1、手动optimize（错误）" class="headerlink" title="1、手动optimize（错误）"></a>1、手动optimize（错误）</h3><p>每次执行完insert都手动进行optimize。</p><p>绝对不可取！！手动optimize只能空闲时间进行。</p><h3 id="2、手动通过sql实现"><a href="#2、手动通过sql实现" class="headerlink" title="2、手动通过sql实现"></a>2、手动通过sql实现</h3><p>通过设置一些特殊字段，如<code>deleted</code>控制该条数据是否被删除掉了，<code>create_time</code>控制该条数据的创建时间。</p><p>然后查询<code>create_time</code>为最新的，且<code>deleted</code>为0的数据，即可实现手动去重。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>    user_id,<br>    argMax(score, create_time) <span class="hljs-keyword">as</span> score,<br>    argMax(deleted, create_time) <span class="hljs-keyword">as</span> deleted,<br>    <span class="hljs-built_in">max</span>(create_time) <span class="hljs-keyword">as</span> ctime<br><span class="hljs-keyword">from</span> test_replacing_mt<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id<br><span class="hljs-keyword">having</span> deleted <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>以上面sql做一个普通视图，并在这个视图上查询数据，则可以查询到最新的有效数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> test_replacing_mt_view <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span><br>    user_id,<br>    argMax(score, create_time) <span class="hljs-keyword">as</span> score,<br>    argMax(deleted, create_time) <span class="hljs-keyword">as</span> deleted,<br>    <span class="hljs-built_in">max</span>(create_time) <span class="hljs-keyword">as</span> ctime<br><span class="hljs-keyword">from</span> test_replacing_mt<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id<br><span class="hljs-keyword">having</span> deleted <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 在视图上进行查询</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> test_replacing_mt_view;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_replacing_mt_view <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>删除数据则通过插入一条<code>deleted = 0 and create_time = now()</code>的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_replacing_mt <span class="hljs-keyword">values</span>(<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-number">1</span>, now());<br><br><span class="hljs-comment">-- 再次查询test_replacing_mt_view，发现没有数据返回</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_replacing_mt_view <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 9999999条数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> test_replacing_mt_view;<br></code></pre></td></tr></table></figure><p>注：</p><ul><li>argMax(field1, field2)：按照field2的最大值取field1的值。</li></ul><h3 id="3、通过FINAL查询"><a href="#3、通过FINAL查询" class="headerlink" title="3、通过FINAL查询"></a>3、通过FINAL查询</h3><p>在sql语句中写final只支持ReplacingMergeTree和SummingMergeTree，因为这两个表引擎在合并数据时需要聚合，普通的MergeTree表引擎合merge时不需要聚合。</p><p>final的作用是根据order by指定的字段，查询版本号最新的一条数据。</p><p>20.5.2.7-stable版本之前是单线程进行，速度很慢，老版本不建议使用。后面新版本支持多线程，并且可以通过<code>max_final_threads</code>参数控制单个final查询的线程数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 当然deleted还是要加的</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_replacing_mt <span class="hljs-keyword">final</span> <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">100</span> <span class="hljs-keyword">and</span> deleted <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 如果不加deleted字段，可以看到最新版本的数据是那条deleted为1的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_replacing_mt <span class="hljs-keyword">final</span> <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>┌─user_id─┬─score─┬─deleted─┬─────────create_time─┐<br>│     <span class="hljs-number">100</span> │ AA    │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">13</span>:<span class="hljs-number">27</span>:<span class="hljs-number">54</span> │<br>└─────────┴───────┴─────────┴─────────────────────┘<br></code></pre></td></tr></table></figure><h3 id="4、结论"><a href="#4、结论" class="headerlink" title="4、结论"></a>4、结论</h3><p>由于clickhouse对update和delete的操作不友善，因此在实际生产环境中最好加上这么几个字段：</p><p><code>create_time</code>：数据创建时间</p><p><code>deleted</code>：该数据是否被删除了，1代表是，0代表没有删除</p><p>或者使用</p><p><code>isvalid</code>：该条数据是否有效，1代表有效数据，0代表无效数据，即和<code>deleted</code>作用相反。</p><p>如果是新版本，则可以在使用final查询和自定义视图的方式之间权衡，对比两种方式的效率以及对数据库造成的压力，选择最适合的方式。注意并不一定是所有表都要用一种方式，可能有些数据使用自定义视图合适，而有些数据使用final合适。</p><p>如果是旧版本，final无法设置多线程，导致效率很低，则还是选择自定义视图的方式来实现吧。</p><p>其次，每天在空闲时间定时进行数据合并。</p><p>最后，如果以上方式效率都很低，但是某个业务对于查询出来的数据的准确定并不讲究，则可以不进行去重。</p><h2 id="十二、物化视图（MaterializedView）"><a href="#十二、物化视图（MaterializedView）" class="headerlink" title="十二、物化视图（MaterializedView）"></a>十二、物化视图（MaterializedView）</h2><p>普通视图只保存查询逻辑，并不保存数据。而物化视图会保存数据，即<font color="Red">真正创建一张隐藏表来存储数据</font>，当原始表数据插入数据时，新数据会按照物化视图的逻辑生成最新的数据。</p><p><strong>优点</strong>：快！当需要查询一些聚合的操作时，使用原始数据进行聚合查询可能会比较慢，但是可以通过物化视图将聚合数据加载到一张表中，然后直接查物化视图中的数据，速度就可想而知很快了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> MATERIALIZED <span class="hljs-keyword">VIEW</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db.]table_name [<span class="hljs-keyword">ON</span> CLUSTER] [<span class="hljs-keyword">TO</span>[db.]name] [ENGINE <span class="hljs-operator">=</span> engine] [POPULATE] <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> ...<br></code></pre></td></tr></table></figure><ul><li><p>TO：隐藏表名，如果不加的话，默认为<code>.inner_id.xxxxxxxx</code></p></li><li><p>POPULATE：创建后会对数据进行初始化，即执行视图逻辑，并将所有数据写入隐藏表。生产环境不建议加，如果需要历史数据，可以手动insert。</p></li></ul><h3 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建原始数据表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_score(<br>    user_id UInt64,<br>    subject String,<br>    score String,<br>    isvalid UInt8 <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>,<br>    create_time DateTime <span class="hljs-keyword">default</span> toDateTime(<span class="hljs-number">0</span>)<br>)engine<span class="hljs-operator">=</span>ReplacingMergeTree(create_time)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (user_id, subject);<br><br><span class="hljs-comment">-- 写入初始化数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_score(user_id, subject, score, create_time)<br><span class="hljs-keyword">with</span><br>(<br>    <span class="hljs-keyword">select</span> <span class="hljs-keyword">range</span>(<span class="hljs-number">1000</span>)<br>) <span class="hljs-keyword">as</span> user_dict,<br>(<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>]<br>) <span class="hljs-keyword">as</span> score_dict,<br>(<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>]<br>) <span class="hljs-keyword">as</span> subject_dict,<br>(<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;2021-12-11 15:00:00&#x27;</span>, <span class="hljs-string">&#x27;2021-12-10 15:00:00&#x27;</span>, <span class="hljs-string">&#x27;2021-12-09 15:00:00&#x27;</span>]<br>) <span class="hljs-keyword">as</span> ctime_dict<br><span class="hljs-keyword">select</span><br>    user_dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">1000</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> user_id,<br>    subject_dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">3</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> subject,<br>    score_dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">7</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> score,<br>    ctime_dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">3</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> create_time<br><span class="hljs-keyword">from</span> numbers(<span class="hljs-number">100000</span>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> user_id, subject;<br><br><span class="hljs-comment">-- 创建物化视图，业务逻辑：将每个user_id的成绩记录成json格式，写入score_json字段</span><br><span class="hljs-keyword">create</span> materialized <span class="hljs-keyword">view</span> test_score_mv<br>engine<span class="hljs-operator">=</span>ReplacingMergeTree(create_time)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (user_id)<br><span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> user_id, score_json, isvalid, create_time<br><span class="hljs-keyword">from</span> (<br>    <span class="hljs-keyword">select</span><br>        user_id,<br>        <span class="hljs-string">&#x27;&#123;&#x27;</span> <span class="hljs-operator">||</span> arrayStringConcat(groupArray(<span class="hljs-string">&#x27;&quot;&#x27;</span> <span class="hljs-operator">||</span> subject <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;&quot;:&quot;&#x27;</span> <span class="hljs-operator">||</span> score <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;&quot;&#x27;</span>), <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">as</span> score_json,<br>        <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> isvalid,<br>        <span class="hljs-built_in">max</span>(ctime) <span class="hljs-keyword">as</span> create_time<br>    <span class="hljs-keyword">from</span> (<br>        <span class="hljs-keyword">select</span><br>            user_id,<br>            subject,<br>            argMax(score, create_time) <span class="hljs-keyword">as</span> score,<br>            argMax(isvalid, create_time) <span class="hljs-keyword">as</span> isvalid,<br>            <span class="hljs-built_in">max</span>(create_time) <span class="hljs-keyword">as</span> ctime<br>        <span class="hljs-keyword">from</span> test_score<br>        <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id, subject<br>        <span class="hljs-keyword">having</span> isvalid <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    ) <span class="hljs-keyword">as</span> tmp1<br>    <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id<br>) <span class="hljs-keyword">as</span> tmp2;<br></code></pre></td></tr></table></figure><p>记录这个创建时间，初始化数据时可以通过筛选小于这个创建时间来初始化。</p><p>由于内存限制，初始化时，可以一批一批来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">clickhouse-client -m -h 192.168.141.141 --port 9003 --query &quot;select user_id from test_score group by user_id order by user_id format CSV;&quot; &gt; test_score.csv<br><br>while read user_id; do echo &quot;$&#123;user_id&#125;&quot;; clickhouse-client -m -h 192.168.141.141 --port 9003 --query &quot;\<br>insert into test_score_mv \<br>select \<br>    user_id, \<br>    &#x27;&#123;&#x27; || arrayStringConcat(groupArray(&#x27;\&quot;&#x27; || subject || &#x27;\&quot;:\&quot;&#x27; || score || &#x27;\&quot;&#x27;), &#x27;,&#x27;) || &#x27;&#125;&#x27; as score_json, \<br>    1 as isvalid, \<br>    max(create_time) as create_time \<br>from test_score \<br>final \<br>where user_id = $&#123;user_id&#125; \<br>group by user_id \<br>&quot;; done &lt; test_score.csv;<br></code></pre></td></tr></table></figure><p>测试插入新数据到<code>hits_test</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 测试插入前，可以查询历史数据是否成功插入到物化视图中</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_score_mv <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> subject <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;语文&#x27;</span>;<br><br>┌─user_id─┬─score_json────────────────────────────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EE&quot;,&quot;语文&quot;:&quot;EEE&quot;,&quot;英语&quot;:&quot;F&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">17</span>:<span class="hljs-number">54</span>:<span class="hljs-number">16</span> │<br>└─────────┴───────────────────────────────────────┴─────────┴─────────────────────┘<br><br><span class="hljs-comment">-- 插入一条数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_score <span class="hljs-keyword">values</span> (<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;EEE&#x27;</span>, <span class="hljs-number">1</span>, now());<br><br><span class="hljs-comment">-- 再次查询物化视图，是有数据的，但是只有最新数据的group。</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_score_mv <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> subject <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;语文&#x27;</span>;<br>┌─user_id─┬─score_json─────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EEE&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">18</span>:<span class="hljs-number">31</span>:<span class="hljs-number">53</span> │<br>└─────────┴────────────────┴─────────┴─────────────────────┘<br>┌─user_id─┬─score_json────────────────────────────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EE&quot;,&quot;语文&quot;:&quot;EEE&quot;,&quot;英语&quot;:&quot;F&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">17</span>:<span class="hljs-number">54</span>:<span class="hljs-number">16</span> │<br>└─────────┴───────────────────────────────────────┴─────────┴─────────────────────┘<br></code></pre></td></tr></table></figure><p>测试更新数据（实际业务场景中不建议用update语句，这里只用作测试）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">optimize <span class="hljs-keyword">table</span> test_score;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test_score update score <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AAA&#x27;</span> <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 发现物化视图数据并没有修改</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_score_mv <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>┌─user_id─┬─score_json─────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EEE&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">18</span>:<span class="hljs-number">31</span>:<span class="hljs-number">53</span> │<br>└─────────┴────────────────┴─────────┴─────────────────────┘<br>┌─user_id─┬─score_json────────────────────────────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EE&quot;,&quot;语文&quot;:&quot;EEE&quot;,&quot;英语&quot;:&quot;F&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">17</span>:<span class="hljs-number">54</span>:<span class="hljs-number">16</span> │<br>└─────────┴───────────────────────────────────────┴─────────┴─────────────────────┘<br></code></pre></td></tr></table></figure><p>测试删除数据（实际业务场景中不建议用update语句，这里只用作测试）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test_score <span class="hljs-keyword">delete</span> <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 发现物化视图数据同样没有修改</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_score_mv <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>┌─user_id─┬─score_json─────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EEE&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">18</span>:<span class="hljs-number">31</span>:<span class="hljs-number">53</span> │<br>└─────────┴────────────────┴─────────┴─────────────────────┘<br>┌─user_id─┬─score_json────────────────────────────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EE&quot;,&quot;语文&quot;:&quot;EEE&quot;,&quot;英语&quot;:&quot;F&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">17</span>:<span class="hljs-number">54</span>:<span class="hljs-number">16</span> │<br>└─────────┴───────────────────────────────────────┴─────────┴─────────────────────┘<br></code></pre></td></tr></table></figure><p><font color="Red">clickhouse的物化视图更像是触发器，且只对新增的部分数据有效，对历史数据，或update操作或delete操作都是无效的。物化视图功能有限，对于上面这种业务逻辑，是不适用的。</font></p><h3 id="2、简单聚合业务"><a href="#2、简单聚合业务" class="headerlink" title="2、简单聚合业务"></a>2、简单聚合业务</h3><p>简单聚合，如sum、max、min、count等业务，可以使用物化视图来实现。</p><p>物化视图使用的隐藏表不使用默认的，而是我们自己定义的表，具体如下：</p><p>业务介绍：统计每个设备出现的次数和最大值、最小值、平均值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 基础数据表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> counter (<br>  <span class="hljs-keyword">when</span> DateTime <span class="hljs-keyword">DEFAULT</span> now(),<br>  device UInt32,<br>  <span class="hljs-keyword">value</span> Float32<br>) ENGINE<span class="hljs-operator">=</span>MergeTree<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> toYYYYMM(<span class="hljs-keyword">when</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (device, <span class="hljs-keyword">when</span>);<br><br><span class="hljs-comment">-- 物化视图物理表，以天为单位做预聚合</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> counter_daily (<br>  <span class="hljs-keyword">day</span> DateTime,<br>  device UInt32,<br>  count UInt64,<br>  max_value_state AggregateFunction(max, Float32),<br>  min_value_state AggregateFunction(min, Float32),<br>  avg_value_state AggregateFunction(avg, Float32)<br>)<br>ENGINE <span class="hljs-operator">=</span> SummingMergeTree()<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> tuple()<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (device, <span class="hljs-keyword">day</span>);<br><br><span class="hljs-comment">-- 物化视图</span><br><span class="hljs-keyword">CREATE</span> MATERIALIZED <span class="hljs-keyword">VIEW</span> counter_daily_mv<br><span class="hljs-keyword">TO</span> counter_daily<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span><br>    toStartOfDay(<span class="hljs-keyword">when</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">day</span>,<br>    device,<br>    <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> count,<br>    maxState(<span class="hljs-keyword">value</span>) <span class="hljs-keyword">AS</span> max_value_state,<br>    minState(<span class="hljs-keyword">value</span>) <span class="hljs-keyword">AS</span> min_value_state,<br>    avgState(<span class="hljs-keyword">value</span>) <span class="hljs-keyword">AS</span> avg_value_state<br><span class="hljs-keyword">FROM</span> counter<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">when</span> <span class="hljs-operator">&gt;=</span> toDate(<span class="hljs-string">&#x27;2019-01-01 00:00:00&#x27;</span>)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> device, <span class="hljs-keyword">day</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> device, <span class="hljs-keyword">day</span>;<br><br><span class="hljs-comment">-- 查询</span><br><span class="hljs-keyword">SELECT</span><br>  device,<br>  <span class="hljs-built_in">sum</span>(count) <span class="hljs-keyword">AS</span> count,<br>  maxMerge(max_value_state) <span class="hljs-keyword">AS</span> max,<br>  minMerge(min_value_state) <span class="hljs-keyword">AS</span> min,<br>  avgMerge(avg_value_state) <span class="hljs-keyword">AS</span> avg<br><span class="hljs-keyword">FROM</span> counter_daily_mv<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> device<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> device <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><p>物化视图的物理表使用的是SummingMergeTree表引擎，且定义三个状态函数。</p><p>物化视图则像一个触发器，将新插入的数据转换为以天为单位的状态写入物理表中。</p><p>最后查询时需要指定对应的聚合类型，获取对应的聚合值。</p><h3 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h3><ul><li>历史状态可用的业务，比如上面说的sum等聚合。但是对于历史状态不可用的聚合，比如中位数、方差等，无法通过简单使用物化视图或预聚合来实现。</li><li>数据过滤</li><li>当作触发器来用</li><li>流数据处理</li><li><font color="Red">重排序。</font>即基础数据表只能有一个排序字段，但是如果某个业务想要以其他字段排序或group查询效率很低，则可以新建一个以其他字段为order by的物化视图，再将基础数据表的指定数据插入到物化视图中。这种玩法本质是为了做两张表。且一张表是另外一个张表的子集，则可以通过一个sql往两张表写入数据。</li></ul><h2 id="十三、MaterializeMySQL引擎"><a href="#十三、MaterializeMySQL引擎" class="headerlink" title="十三、MaterializeMySQL引擎"></a>十三、MaterializeMySQL引擎</h2><p>MaterializeMySQL引擎是一个<strong>库引擎</strong>，作用是直接将MySQL的数据变化通过流的形式同步到clickhouse中，底层原理和flinkcdc、canal一样都是基于binlog实现的。</p><p>MySQL配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">default-authentication-plugin=mysql_native_password # 需要用这种密码验证方式<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 如果配置了主从，则要加上以下配置</span><br>gtid-mode=on # 主从切换时保证数据一致性<br>enforce-gtid-consistency=1 # 强一致性<br>log-slave-updates=1 # 从服务器日志记录<br></code></pre></td></tr></table></figure><p>clickhouse配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> allow_experimental_database_materialize_mysql<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-comment">-- 当前版本这个配置是关闭的</span><br></code></pre></td></tr></table></figure><p>创建对应的数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- MySQL中创建新数据库和表</span><br><span class="hljs-keyword">create</span> database testck;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> testck.test1(<br>    seq <span class="hljs-type">bigint</span> auto_increment <span class="hljs-keyword">primary</span> key<br>)<span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8mb4;<br><br><span class="hljs-comment">-- clickhouse创建以下数据库</span><br><span class="hljs-keyword">create</span> database testck engine<span class="hljs-operator">=</span>MaterializeMySQL(<span class="hljs-string">&#x27;192.168.141.141:3306&#x27;</span>, <span class="hljs-string">&#x27;testck&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意，通过MaterializeMySQL同步的数据库表必须要有主键，不然会报错。</p><p>如果你的的密码认证插件是从<code>caching_sha2_password</code>临时修改成<code>mysql_native_password</code>的话，你还<font color="Red">需要修改mysql.user表中的<code>plugin</code>字段修改为<code>mysql_native_password</code></font>。不然查询clickhouse的数据时会报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Code: 100. DB::Exception: Received from myubuntu1:9003. DB::Exception: Access denied for user root.<br></code></pre></td></tr></table></figure><p>同步后，会自动生成对应的clickhouse表，如下。</p><p>MySQL的主键 = clickhouse的order by，并且自动加上了<code>_sign</code>和<code>_version</code>字段。</p><p><code>_sign</code>字段：数据是否有效的标识，1代表有效数据，-1代表无效数据，即被删除了的数据。</p><p><code>_version</code>字段：数据版本号，每次执行MySQL的sql语句，转换为clickhouse的一条sql语句插入的数据版本号都是相同的。clickhouse内部应该维护了一个最大版本号，最新sql语句写入的数据会使用这个最大版本号，使用完之后再让这个最大版本号+1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">┌─statement──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐<br>│ <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> testck.test1<br>(<br>    `seq` Int64,<br>    `_sign` Int8 MATERIALIZED <span class="hljs-number">1</span>,<br>    `_version` UInt64 MATERIALIZED <span class="hljs-number">1</span>,<br>    INDEX _version _version TYPE minmax GRANULARITY <span class="hljs-number">1</span><br>)<br>ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree(_version)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> intDiv(seq, <span class="hljs-number">18446744073709551</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> tuple(seq)<br>SETTINGS index_granularity <span class="hljs-operator">=</span> <span class="hljs-number">8192</span> │<br>└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>MySQL的增删改操作都会通过一定的方式转换为clickhouse的insert操作。</p><ul><li>MySQL insert = clickhouse的<code>insert with _sign = 1</code>的语句。</li><li>MySQL update = clickhouse的<code>insert with _sign = -1</code>和<code>insert with _sign = 1</code>的两条语句。</li><li>MySQL delete = clickhouse的<code>insert with _sign = -1</code>的语句。</li></ul><h2 id="十四、常见问题"><a href="#十四、常见问题" class="headerlink" title="十四、常见问题"></a>十四、常见问题</h2><p><a href="https://help.aliyun.com/document_detail/162815.html">常见问题排查 (aliyun.com)</a></p><h2 id="十五、监控和备份"><a href="#十五、监控和备份" class="headerlink" title="十五、监控和备份"></a>十五、监控和备份</h2><h3 id="1、监控"><a href="#1、监控" class="headerlink" title="1、监控"></a>1、监控</h3><p>Promethseus + Grafana</p><p>Promethseus：<a href="http://promethseus.io/download">promethseus.io</a></p><p>Grafana：<a href="https://grafana.com/Grafana/download">Download Grafana | Grafana Labs</a></p><h3 id="2、备份"><a href="#2、备份" class="headerlink" title="2、备份"></a>2、备份</h3><p>手动：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 备份到freeze目录下</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name FREEZE [<span class="hljs-keyword">PARTITION</span> partition_expr] [<span class="hljs-keyword">WITH</span> NAME <span class="hljs-string">&#x27;backup_name&#x27;</span>]<br><br><span class="hljs-comment">-- 从detach目录下恢复</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name ATTACH <span class="hljs-keyword">PARTITION</span><span class="hljs-operator">|</span>PART partition_expr<br></code></pre></td></tr></table></figure><p>自动：</p><p><a href="https://github.com/AlexAkulov/clickhouse-backup">GitHub - AlexAkulov/clickhouse-backup: Tool for easy ClickHouse backup and restore with cloud storages support</a>（小心使用，可能有版本兼容问题。）</p><h2 id="N、一些不同寻常的点（坑）"><a href="#N、一些不同寻常的点（坑）" class="headerlink" title="N、一些不同寻常的点（坑）"></a>N、一些不同寻常的点（坑）</h2><p>（1）普通类型的默认值不为null，都有各自的默认值，具体见Nullable类型说明。</p><p>（2）clickhouse的primary key是可以重复的，有需要的话得手动将其设置为unique。</p><p>（3）ReplacingMergeTree的聚合并不是实时的，每次查询都需要手动聚合去重。</p>]]></content>
    
    
    <categories>
      
      <category>bigdata</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h2><ul><li>创建型模式：将对象的创建和使用分离<ul><li>单例、原型、工厂方法、抽象工厂、建造者</li></ul></li><li>结构性模式：用于描述如何将类和对象按某种布局组成更大的结构<ul><li>代理、适配器、桥接、装饰、外观、享元、组合</li></ul></li><li>行为型模式：用于描述类或对象之间怎样相互协调共同完成单个对象无法单独完成的操作<ul><li>模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器</li></ul></li></ul><h2 id="二、创建者模式"><a href="#二、创建者模式" class="headerlink" title="二、创建者模式"></a>二、创建者模式</h2><h3 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h3><h4 id="（1）饿汉式"><a href="#（1）饿汉式" class="headerlink" title="（1）饿汉式"></a>（1）饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton singleton = <span class="hljs-keyword">new</span> Singleton();<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）懒汉式-双重检查锁"><a href="#（2）懒汉式-双重检查锁" class="headerlink" title="（2）懒汉式-双重检查锁"></a>（2）懒汉式-双重检查锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (singleton != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;不能重复创建对象&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 创建对象的业务代码</span><br>        <span class="hljs-comment">// ... </span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>) &#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">readResolve</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）懒汉式-静态内部类"><a href="#（3）懒汉式-静态内部类" class="headerlink" title="（3）懒汉式-静态内部类"></a>（3）懒汉式-静态内部类</h4><p>原理：静态内部类只有在使用时才会被加载，不使用时不会加载该类的字节码，因此可用达到懒汉式的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> first = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!first) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;不能重复创建对象&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 创建对象的业务代码</span><br>        <span class="hljs-comment">// ... </span><br>        first = <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Holder.singleton;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Holder</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton singleton = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）枚举方式"><a href="#（4）枚举方式" class="headerlink" title="（4）枚举方式"></a>（4）枚举方式</h4><p>枚举方式属于饿汉式，JVM加载后就会加载该类的字节码文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h3><p>对象的创建不是直接创建，而是将你想创建的类型或属性交给工厂factory，由抽象工厂来创建对象并返回给你。这样你只和抽象工厂对象耦合，而和各种对象解耦。</p><p>常用场景：将需要创建的类型属性放入配置文件中，再在工厂类中加载对应指定配置文件中的属性，就可以完成对象的创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] ... args)</span> </span>&#123;<br>    AnimalPark park = <span class="hljs-keyword">new</span> AnimalPark();<br>    AnimalFactory factory = <span class="hljs-keyword">new</span> DogFactory();<br>    Animal animal = park.getAnimal(factory);<br>    System.out.println(animal.getName());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnimalPark</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">watchAnimal</span><span class="hljs-params">(AnimalFactory factory)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> factory.getAnimal();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AnimalFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">getAnimal</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dog&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DogFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AnimalFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getAnimal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Dog();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cat&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AnimalFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getAnimal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Cat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kafka</title>
    <link href="/bigdata/kafka/kafka/"/>
    <url>/bigdata/kafka/kafka/</url>
    
    <content type="html"><![CDATA[<p>kafka版本：2.12_2.8.1（2.12为scale版本，2.8.1为kafka版本，3.0以上的版本不需要依赖zookeeper）</p><p>zookeeper版本：3.6.3</p><h2 id="单机部署使用"><a href="#单机部署使用" class="headerlink" title="单机部署使用"></a>单机部署使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br>wget https://mirrors.tuna.tsinghua.edu.cn/apache/kafka/2.8.1/kafka_2.12-2.8.1.tgz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar -xvzf kafka_2.12-2.8.1.tgz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置环境变量 sudo vi /etc/profile</span><br>export KAFKA_HOME=/home/yury/kafka_2.12-2.8.1<br>export PATH=$&#123;PATH&#125;:$&#123;KAFKA_HOME&#125;/bin<br>source /etc/profile<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以 /kafka_2.12-2.8.1 为根目录</span><br><span class="hljs-meta">#</span><span class="bash"> 修改配置 vi server.properties 取下以下配置的注释，并修改称以下值</span><br>zookeeper.connect=192.168.141.141:2181<br>log.dirs=$&#123;KAFKA_HOME&#125;/tmp/kafka-logs<br>listeners=PLAINTEXT://192.168.141.141:9092<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动zookeeper</span><br>skServer.sh start<br>skServer.sh status # 查看状态：Mode: standalone<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 写一个快速启动命令放到bin目录下 vi bin/start-kafka.sh 并写入</span><br><span class="hljs-meta">$</span><span class="bash">&#123;KAFKA_HOME&#125;/bin/kafka-server-start.sh <span class="hljs-variable">$&#123;KAFKA_HOME&#125;</span>/config/server.properties --daemon</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动kafka</span><br>start-kafka.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> jps命令</span><br>3010 Jps<br>2578 Kafka<br>2046 QuorumPeerMain<br></code></pre></td></tr></table></figure><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 新增topic</span><br>bin/kafka-topics.sh --bootstrap-server 192.168.141.141:9092 --create --topic test_topic<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看topic</span><br>bin/kafka-topics.sh  --bootstrap-server 192.168.141.141:9092 --describe --topic test_topic<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除topic</span><br>bin/kafka-topics.sh --bootstrap-server 192.168.141.141:9092 --delete --topic test_topic<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 生产数据</span><br>bin/kafka-console-producer.sh --bootstrap-server 192.168.141.141:9092 --topic test_topic<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 消费数据</span><br>bin/kafka-console-consumer.sh --bootstrap-server 192.168.141.141:9092 --topic test_topic --from-beginning<br></code></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="1、broker"><a href="#1、broker" class="headerlink" title="1、broker"></a>1、broker</h3><p>一个broker即为一个kafka服务器。</p><h3 id="2、partition分区"><a href="#2、partition分区" class="headerlink" title="2、partition分区"></a>2、partition分区</h3><p>分区，即一个topic会分为多个区域存储数据。</p>]]></content>
    
    
    <categories>
      
      <category>bigdata</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令</title>
    <link href="/linux/linux%E5%91%BD%E4%BB%A4/"/>
    <url>/linux/linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、刚安装好后的root用户的密码是随机的，需要修改密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo passwd<br>[sudo] paasword for yury: # 然后输入当前用户yury的密码<br>New password: # 输入root用户的新密码<br>Retype new password: # 重新输入<br></code></pre></td></tr></table></figure><p>2、修改主机名（如需要的话）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vi /etc/hostname<br></code></pre></td></tr></table></figure><p>3、用户相关</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换到root用户</span><br>su<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 新增一个名为XXX的用户</span><br>useradd XXX<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 为XXX用户设置密码</span><br>passwd XXX<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 退出root用户</span><br>exit<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除用户xxx</span><br>sudo deluser xxx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除用户xxx及其home里面的文件夹</span><br>sudo deluser --remove-home xxx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改用户名的流程很复杂，且容易使系统奔溃，因此在不是精通linux的情况下最好别修改用户名</span><br><span class="hljs-meta">#</span><span class="bash"> 新增用户可以用命令adduser XXX，一套流程下来更方便</span><br></code></pre></td></tr></table></figure><p>4、关机重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 重启</span><br>reboot<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关机</span><br>poweroff<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭系统，不关闭电源</span><br>halt<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 或者使用</span><br>shutdown --[reboot | halt | poweroff] [now | 20:35 | 10]<br><span class="hljs-meta">#</span><span class="bash"> now是指立即操作，20:35是指在这个时间点操作，10是指10分钟后操作</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 取消定时关机</span><br>shutdown -c<br></code></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1、sudo表示用管理员模式执行</p><p>2、命令后面若带有参数，一般短参数前加“-”，长参数前加“–”，但有些例外，看语言风格。</p><p>3、apt软件包默认下载路径为：/var/cache/apt/archives。apt软件包默认安装路径为：/usr/share</p><p>4、常用命令：</p><ul><li>clear</li><li>sudo：允许本用户以其他用户（默认为超级管理员用户）的安全权限来运行某个命令或程序，即superuser do</li></ul><h2 id="shell语法"><a href="#shell语法" class="headerlink" title="shell语法"></a>shell语法</h2><p>1、读取文本文件，循环每一行数据，将数据作为参数执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 方法1</span><br>for a in `cat hello.txt`; do echo &quot;$&#123;a&#125; 123&quot;; done;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 方法2</span><br>while read a; do echo &quot;$&#123;a&#125; 123&quot;; done &lt; hello.txt;<br><br>while read user_id; do echo &quot;$&#123;user_id&#125;&quot;; clickhouse-client -m -h 192.168.141.141 --port 9003 --query &quot;insert into test_score_mv select user_id, subject, argMax(score, create_time) as score, argMax(isvalid, create_time) as isvalid, max(create_time) as ctime from test_score where user_id = $&#123;user_id&#125; and create_time &lt;= &#x27;2021-12-11 15:01:00&#x27; group by user_id, subject&quot;; done &lt; test_score.csv;<br></code></pre></td></tr></table></figure><h2 id="系统相关信息"><a href="#系统相关信息" class="headerlink" title="系统相关信息"></a>系统相关信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> cpu和内存使用情况</span><br>top<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看内存</span><br>free<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看系统时区</span><br>timedatectl status<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置系统时区</span><br>timedatectl set-timezone &quot;Asia/Shanghai&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看linux内核版本</span><br>cat /proc/version<br>uname -a<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看linux系统版本</span><br>lsb_release -a<br>cat /etc/issue<br></code></pre></td></tr></table></figure><h2 id="apt相关"><a href="#apt相关" class="headerlink" title="apt相关"></a>apt相关</h2><p>apt search XXX：搜索软件包</p><p>apt show XXX：显示软件包详情</p><p>apt install XXX：安装某个软件</p><p>apt depends XXX：查询该包使用的依赖包</p><p>apt rdepends XXX：查看该包被哪些包依赖</p><p>apt remove XXX：卸载某个软件（保留配置文件）</p><p>apt –purge remove XXX：卸载某个软件（删除配置文件）</p><p>apt autoremove XXX：自动清理不再使用的依赖和库文件</p><p>apt list –upgradeable：显示可升级的软件包</p><p>apt list –installed：显示已安装的软件包</p><p>apt update：<font color="Red">更新apt仓库包索引</font></p><p>apt upgrade：<font color="Red">更新已安装的软件到最新版本</font></p><p>apt dist-upgrade：升级系统到最新版本</p><h2 id="软件源镜像"><a href="#软件源镜像" class="headerlink" title="软件源镜像"></a>软件源镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 备份软件源配置</span><br>sudo cp -v /etc/apt/sources.list /etc/apt/sources.list.backup<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改权限使得这个文件可以编辑</span><br>sudo chmod 777 /etc/apt/sources.list<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改sources.list文件，可以把里面的内容删光，重新写入以下内容即可</span><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb http://archive.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse<br>deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb http://archive.ubuntu.com/ubuntu/ focal-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>注意不同的ubuntu版本，sources.list里面的内容不一样，如ubuntu 20是focal，18和16又是另外的。</p><p>最后更新一下软件源仓库即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br></code></pre></td></tr></table></figure><blockquote><p>安装openssh-server</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install openssh-server<br></code></pre></td></tr></table></figure><p>安装了这个后就可以通过其他主机使用ssh命令远程连接这个服务器。</p><h2 id="用户、主机相关"><a href="#用户、主机相关" class="headerlink" title="用户、主机相关"></a>用户、主机相关</h2><h2 id="恢复模式"><a href="#恢复模式" class="headerlink" title="恢复模式"></a>恢复模式</h2><p>重启服务器，进入系统的时候按住shift，即可进入一个选项界面，依次选择：</p><ol><li><p>Unbuntu高级选项</p></li><li><p>recovery mode</p></li></ol><p>进入恢复菜单后，可以根据需要选择。</p><blockquote><p> 修改root用户密码</p></blockquote><p>先选择<code>grub</code>，进入之后按enter，然后回到这个界面，再选择<code>root</code>，进入root的shell命令行后，使用<code>passwd root</code>命令即可修改root用户的密码。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>Ubuntu 17.10及以后的版本使用Netplan（<code>/etc/netplan</code>）作为网络管理工具。以前的版本使用ifconfig和<code>/etc/network/interfaces</code>这个配置文件配置网络。以下对Netplan进行配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入到配置文件夹</span><br>cd /etc/netplan<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入后可能有一个或多个yaml文件，文件名视系统版本不定，我这里只有一个文件，因此直接配置这一个文件即可，如下</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># this is the network written by &#x27;subiquity&#x27;</span><br><span class="hljs-attr">network:</span><br>  <span class="hljs-attr">ethernets:</span><br>    <span class="hljs-attr">ens33:</span><br>      <span class="hljs-attr">addresses:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.142</span><span class="hljs-string">/24</span><br>      <span class="hljs-attr">gateway4:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.1</span><br>      <span class="hljs-attr">nameservers:</span><br>        <span class="hljs-attr">addresses:</span> [<span class="hljs-number">223.5</span><span class="hljs-number">.5</span><span class="hljs-number">.5</span>, <span class="hljs-number">223.6</span><span class="hljs-number">.6</span><span class="hljs-number">.6</span>] <span class="hljs-comment"># 阿里域名服务器</span><br>        <span class="hljs-attr">search:</span> []<br>  <span class="hljs-attr">version:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><blockquote><p>属性解释</p></blockquote><ul><li>version：版本</li><li>renderer：设备类型（如networkd），以上我这里没有出现</li><li>ethernets：配置网络，在我这里只有一个网络<code>ens33</code>，这是默认的网络。每个网络可以设置以下属性：<ul><li>dhcp4：使用dhcp服务器自动分配ip和dns，可以填<code>yes</code>或<code>no</code>，使用dhcp服务器后这里再设置ip好像就没用了，没试过</li><li>addresses：静态局域网地址，可以配置多个</li><li>gateway4：默认网关</li><li>nameservers：域名服务器，可以在这个属性下面的addresses属性里面设置多个域名服务器。search属性shows your search domains，不是很明白，可以不用设置。</li></ul></li></ul><p>保存后，应用修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo netplan apply<br></code></pre></td></tr></table></figure><h2 id="环境变量相关"><a href="#环境变量相关" class="headerlink" title="环境变量相关"></a>环境变量相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 列出所有已设置的环境变量</span><br>env<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 引用变量名为XXX的变量值，最好加上大括号，好习惯</span><br><span class="hljs-meta">$</span><span class="bash">&#123;XXX&#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看变量XXX的值</span><br>echo $&#123;XXX&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置环境变量，在相应的profile文件中添加环境变量</span><br><span class="hljs-meta">#</span><span class="bash"> 1、设置用户环境变量，在对应的用户文件夹下的profile</span><br>vi /home/yury/.profile<br><span class="hljs-meta">#</span><span class="bash"> 在最下面增加以下代码，设置一个变量名为AAA1的环境变量，其值为BBB1</span><br>export AAA1=BBB1<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 2、设置系统环境变量，在/etc/profile下</span><br>vi /etc/profile<br>export AAA2=BBB2<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 在环境变量中使用引用，将这个路径添加到PATH环境变量末尾</span><br>export PATH=$&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 最后，重新加载用户或系统环境变量，即不需要重启就可以使环境变量生效</span><br>source /home/yury/.profile<br>source /etc/profile<br></code></pre></td></tr></table></figure><h2 id="文件与目录相关"><a href="#文件与目录相关" class="headerlink" title="文件与目录相关"></a>文件与目录相关</h2><p>cd /：跳转到根目录</p><p>cd /XXX：跳转到/XXX目录，父目录为root，而不是当前目录</p><p>cd XXX：跳转到当前目录下的XXX目录中</p><p>cd <del>：跳转到</del>目录，~为/home/AAA，AAA为你的用户名</p><p>ls：列出该目录下的所有文件夹和文件</p><p>touch AAA.TXT：创建AAA.TXT文件</p><p>mkdir AAA：在当前目录下继续创建/AAA目录，创建目录时不能写成/AAA，而可以写成AAA/；且只能创建一层目录，不能mkdir AAA/BBB这样创建多层目录</p><p>rm AAA.TXT：删除AAA.TXT文件</p><p>rmdir AAA：删除AAA文件夹</p><p>rm -rf AAA：强制删除AAA文件夹</p><h2 id="java相关（版本jdk8）"><a href="#java相关（版本jdk8）" class="headerlink" title="java相关（版本jdk8）"></a>java相关（版本jdk8）</h2><p>使用apt安装java后安装路径：/usr/lib/jvm/java-8-openjdk-amd64（8为你的java版本，该文件夹名根据你安装的java包名来定）。注：把java安装文件放到/usr/local下面并设置好环境变量，则所有用户都可以使用这个java环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 配置JAVA_HOME环境变量</span><br>export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 配置PATH环境变量</span><br>export PATH=$PATH:$JAVA_HOME/bin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使环境变量马上生效，不需要重启</span><br>source ~/.bashrc<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 切换java版本</span><br>update-alternatives --config java<br></code></pre></td></tr></table></figure><h2 id="下载、解压"><a href="#下载、解压" class="headerlink" title="下载、解压"></a>下载、解压</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> curl和wget都可以下载，可这样简单区分使用：curl用于较复杂的不仅仅是下载的web场景，而wget适用于快速且不用担心其他参数的下载</span><br>curl https://github.com/ziyaddin/xampp/archive/master.zip -L -o MyFilename.zip<br>wget https://github.com/ziyaddin/xampp/archive/master.zip<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar xzvf xxxxxxxxx.tar.gz<br></code></pre></td></tr></table></figure><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看所有服务</span><br>systemctl statuc<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看某个服务的状态</span><br>systemctl status mysql.service<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 禁止开机启动</span><br>d<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 停止已启动的服务</span><br>sudo systemctl stop mysql.service<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动服务</span><br>systemctl start mysql.service<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭防火墙</span><br>systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><h2 id="磁盘相关"><a href="#磁盘相关" class="headerlink" title="磁盘相关"></a>磁盘相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看磁盘情况</span><br>df -hT<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入磁盘分区情况</span><br>fdisk -l<br><br>Disk /dev/fd0: 1.4 MiB, 1474560 bytes, 2880 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: dos<br>Disk identifier: 0x90909090<br><br>Device     Boot      Start        End    Sectors  Size Id Type<br>/dev/fd0p1      2425393296 4850786591 2425393296  1.1T 90 unknown<br>/dev/fd0p2      2425393296 4850786591 2425393296  1.1T 90 unknown<br>/dev/fd0p3      2425393296 4850786591 2425393296  1.1T 90 unknown<br>/dev/fd0p4      2425393296 4850786591 2425393296  1.1T 90 unknown<br><br><br>Disk /dev/sda: 60 GiB, 64424509440 bytes, 125829120 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: gpt<br>Disk identifier: A006A120-A37D-4375-8C47-BF69799EA710<br><br>Device        Start       End  Sectors Size Type<br>/dev/sda1      2048      4095     2048   1M BIOS boot<br>/dev/sda2      4096   2101247  2097152   1G Linux filesystem<br>/dev/sda3   2101248  41940991 39839744  19G Linux filesystem<br>/dev/sda4  41940992 125829086 83888095  40G Linux filesystem<br><br><br>Disk /dev/mapper/ubuntu--vg-ubuntu--lv: 19 GiB, 20396900352 bytes, 39837696 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 对某个分区进行管理</span><br>fdisk /dev/sda4<br></code></pre></td></tr></table></figure><h3 id="1、磁盘管理下的常用命令"><a href="#1、磁盘管理下的常用命令" class="headerlink" title="1、磁盘管理下的常用命令"></a>1、磁盘管理下的常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">m # 显示帮助页面<br>p # 查看分区列表<br>d # 删除分区<br>n # 新建分区<br>q # 不保存直接退出<br>w # 保存并退出<br></code></pre></td></tr></table></figure><h3 id="2、磁盘基本知识"><a href="#2、磁盘基本知识" class="headerlink" title="2、磁盘基本知识"></a>2、磁盘基本知识</h3><p><img src="/images/%E7%A3%81%E7%9B%98%E7%BB%93%E6%9E%84.png"></p><p>platter：盘片，即图中一个个的盘，一个盘片有上下两个盘面</p><p>head：磁头，即图中在盘片上滑动的磁头，一个盘片有上下两个盘面，因此对应两个磁头</p><p>sector：扇区，相当于图中的一条一条的弧，<font color="Red">是磁盘存取的基本单位</font>，1个sector可以是512个byte或4096个byte。</p><p>track：磁道，相当于图中的一个圆</p><p>cylinder：磁柱，相当于图中的一个圆柱形（不同盘片同一磁道组成的圆柱形），磁柱数等于一个盘面上的磁道数。</p><p>block：数据块，<font color="Red">是文件系统存取的最小单位</font>，在Windows下如NTFS等文件系统中叫做簇；在Linux下如Ext4等文件系统中叫做块（block）。每个簇或者块可以包括2、4、8、16、32、64…2的n次方个扇区。</p><p>一个block最多仅能容纳一个文件（即不存在多个文件同一个block的情况）。如果一个文件比block小，他也会占用一个block，因而block中空余的空间会浪费掉。而一个大文件，可以占多个甚至数十个成百上千万的block。</p><p><font color="Red">磁盘容量 = 磁头数 * 磁柱（磁道）数 * 每个磁道的扇区数 * 每个扇区的字节数</font></p><h3 id="3、新建分区流程"><a href="#3、新建分区流程" class="headerlink" title="3、新建分区流程"></a>3、新建分区流程</h3><p>本流程适用于vmware station对服务器进行扩容。</p><ul><li>关闭服务器，在vmware station上的服务器设置中，将硬盘扩展到你需要的大小。</li><li>重新进入服务器，<code>fdisk -l</code>命令查看分区列表，找到磁盘<code>/dev/sda</code>，<code>fdisk /dev/sda</code>命令对该磁盘设备进行管理。</li><li>键入<code>n</code>命令新建分区，后面如果提示选择extended或者primary partition，则选择primary partition。</li><li>然后提示输入分区编号，一般使用提示的默认编号，或者直接回车。</li><li>然后提示输入First cylinder（或sector），即新建的分区的起始cylinder（或sector）编号为多少，一般使用默认（最小）即可。</li><li>最后提示输入Last cylinder（或sector），即新建的分区的截止cylinder（或sector）编号为多少，一般使用默认（最大）即可。</li><li>以上三步有需要可以按自己的需求来选择</li><li>键入<code>w</code>命令保存设置</li><li><code>fdisk -l</code>，查看新分区是否生成：</li><li><code>mkfs.ext4 /dev/sda4</code>，命令格式化（格式化会清除数据）分区，sda4为你之前输入的新分区编号，ext4为文件系统类型</li><li><code>mkdir disk4</code>，在根目录下创建一个空文件夹，<code>mount /dev/sda4 /disk4</code>，将新分区挂载到新建的文件夹下</li><li><code>echo &#39;/dev/sda4 /disk4 ext4 defaults 0 0&#39; &gt;&gt; /etc/fstab</code>，将这个挂载动作写入一个文件中，保证每次启动服务器时会自动将这个分区挂载到这个disk4目录。</li><li><code>reboot</code>，重启服务器，<code>df -hT</code>，查看磁盘情况</li></ul><h3 id="4、分区扩容流程"><a href="#4、分区扩容流程" class="headerlink" title="4、分区扩容流程"></a>4、分区扩容流程</h3><p>不建议在Linux系统盘所在分区进行扩容，小心丢失数据。且必须有未分区的磁盘用于扩容。</p><ul><li><code>df –hT</code>和<code>fdisk -l</code>命令查看磁盘情况和分区情况</li><li><code>umount /dev/sda4</code>，卸载需要扩容的磁盘挂载的分区</li><li><code>fdisk /dev/sda4</code>，对需要扩容的磁盘分区进行管理</li><li><code>d</code>，删除分区</li><li><code>n</code>，新建分区，然后按新建分区的流程设置分区大小</li><li><code>w</code>，保存设置</li><li><code>e2fsck -f /dev/sda4</code>，检查扩容的分区是否ok</li><li><code>resize2fs /dev/sda4</code>，扩容</li><li><code>mount /dev/sda4 /disk4</code>，挂载</li><li><code>df -hT</code>和<code>reboot</code>，查看磁盘情况并重启服务器</li></ul><h2 id="service、systemctl相关"><a href="#service、systemctl相关" class="headerlink" title="service、systemctl相关"></a>service、systemctl相关</h2><p>首先我们得搞清楚你的linux服务器的system manager是谁。一般有<code>SysVinit system manager</code>和<code>Systemd system manage</code>这两种。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pstree | head -n 5 # 运行这个命令，若输出`systemd`则说明是第二种，若输出`init`则说明是第一种。<br></code></pre></td></tr></table></figure><h3 id="1、systemd系统"><a href="#1、systemd系统" class="headerlink" title="1、systemd系统"></a>1、systemd系统</h3><h4 id="（1）列举所有service"><a href="#（1）列举所有service" class="headerlink" title="（1）列举所有service"></a>（1）列举所有service</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl list-units --type=service # 查看所有正在运行、或者失败了的units service<br><br>systemctl list-units --type=service --all # 查看所有untis service<br><br>systemctl list-unit-files --type=service # 查看已安装了的所有service<br></code></pre></td></tr></table></figure><p>list-units和list-unit-files的区别，linux中man命令对他们的解释如下：</p><blockquote><p>list-units：</p><p>List units that systemd <strong>currently has in memory</strong>. This includes units that are either referenced directly or through a dependency, units that are pinned by applications programmatically, or units that were active in the past and have failed. By default only units which are active, have pending jobs, or have failed are shown; this can be changed with option –all. If one or more PATTERNs are specified, only units matching one of them are shown. The units that are shown are additionally filtered by –type= and –state= if those options are specified.</p><p>list-unit-files：</p><p>List unit files <strong>installed on the system</strong>, in combination with their enablement state (as reported by is-enabled). If one or more PATTERNs are specified, only unit files whose name matches one of them are shown (patterns matching unit file system paths are not supported).</p></blockquote><p>即一个是当前已经加载在内存中的，要么被直接引用或者依赖或者，被其他应用程序固定了，或者曾经启用过但是失败了。另外一个是系统中安装了的。</p><p>linux系统在查找已安装了的service时，会按照以下路径加载service：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">System Unit Search Path:<br>/etc/systemd/system.control/*<br>/run/systemd/system.control/*<br>/run/systemd/transient/*<br>/run/systemd/generator.early/*<br>/etc/systemd/system/*<br>/etc/systemd/systemd.attached/*<br>/run/systemd/system/*<br>/run/systemd/systemd.attached/*<br>/run/systemd/generator/*<br>...<br>/lib/systemd/system/*<br>/run/systemd/generator.late/*<br><br>User Unit Search Path:<br>~/.config/systemd/user.control/*<br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/user.control/*</span><br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/transient/*</span><br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/generator.early/*</span><br>~/.config/systemd/user/*<br>/etc/systemd/user/*<br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/user/*</span><br>/run/systemd/user/*<br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/generator/*</span><br>~/.local/share/systemd/user/*<br>...<br>/usr/lib/systemd/user/*<br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/generator.late/*</span><br></code></pre></td></tr></table></figure><p>service的所有状态包括：active, inactive, activating, deactivating, failed, not-found, dead</p><h4 id="（2）注册service"><a href="#（2）注册service" class="headerlink" title="（2）注册service"></a>（2）注册service</h4><p>注册service即只要在对应的加载路径下放入<code>xxx.service</code>脚本即可，然后启动这个脚本即可。这个路径一般就用<code>/etc/systemd/system/</code>或者<code>/lib/systemd/system/</code>下面，比如MySQL的service脚本就是放在后者路径下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Grafana Server<br>After=network-online.target<br><br>[Service]<br>Type=simple  # 服务类型，如果执行程序是linux的可运行文件，则填入simple；如果执行命令是shell脚本方式，则填入forking。<br>User=yury    # 启动用户<br>Group=yury   # 启用的用户组<br><span class="hljs-meta">#</span><span class="bash"> Restart=on-failure <span class="hljs-comment"># 重启策略</span></span><br><span class="hljs-meta">#</span><span class="bash"> RestartSec=30      <span class="hljs-comment"># 重启时间</span></span><br>RuntimeDirectory=/disk4/grafana/grafana-8.4.5/<br><span class="hljs-meta">#</span><span class="bash"> ExecStart为启动命令</span><br>ExecStart=/disk4/grafana/grafana-8.4.5/bin/grafana-server --homepath=/disk4/grafana/grafana-8.4.5/<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后运行<code>systemctl enable grafana.service</code>就可以设置grafana开启服务器后自动启动。</p><p>再比如zookeeper的.service脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Zookeeper Server<br>After=network-online.target<br><br>[Service]<br>Type=forking<br>RuntimeDirectory=/disk4/zookeeper/zookeeper-3.6.3<br>ExecStart=/disk4/zookeeper/zookeeper-3.6.3/bin/zkServer.sh start<br>ExecStop=/disk4/zookeeper/zookeeper-3.6.3/bin/zkServer.sh stop<br>ExecReload=/disk4/zookeeper/zookeeper-3.6.3/bin/zkServer.sh restart<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>但是这样的话，启动后就是以root用户运行，增加User又无法启动。所以目前暂时没找到以普通用户启动的方法。</p><h3 id="2、SysVinit系统"><a href="#2、SysVinit系统" class="headerlink" title="2、SysVinit系统"></a>2、SysVinit系统</h3><h4 id="（1）列举所有service-1"><a href="#（1）列举所有service-1" class="headerlink" title="（1）列举所有service"></a>（1）列举所有service</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service --status-all # <br></code></pre></td></tr></table></figure><p>输出内容左侧的符号意思如下：</p><ul><li><strong>+</strong> : means that the service is <strong>running</strong>;</li><li><strong>–</strong> : means that the service is <strong>not running</strong> at all;</li><li><strong>?</strong> : means that Ubuntu <strong>was not able to tell</strong> if the service is running or not.</li></ul><p>还一种列举所有service的方法是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l /etc/init.d/*<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flink_data_warehouse</title>
    <link href="/bigdata/flink_data_warehouse/flink_data_warehouse/"/>
    <url>/bigdata/flink_data_warehouse/flink_data_warehouse/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flink：1.12.0</p><p>java：1.8</p><h2 id="一、实时数仓简介"><a href="#一、实时数仓简介" class="headerlink" title="一、实时数仓简介"></a>一、实时数仓简介</h2><h3 id="1、分层介绍"><a href="#1、分层介绍" class="headerlink" title="1、分层介绍"></a>1、分层介绍</h3><ul><li>ODS，数据采集层，采集原始数据、日志、业务数据等</li><li>DWD，对ODS层的数据进行初步处理，并根据业务逻辑进行分流</li><li>DIM，维度数据，存储一些<strong>元数据信息</strong>，放在hbase</li><li>DWM，对于DWD数据对象进行进一步加工，常常是DWD和DIM进行关联，形成宽表</li><li>DWS，对DWM数据根据某个主题进行轻度聚合，进行主题宽表，放在clickhouse</li><li>ADS，把DWS层数据根据可视化需求进行筛选聚合，不存储，而是直接查询，形成一个接口</li></ul><h3 id="2、实时计算和离线计算"><a href="#2、实时计算和离线计算" class="headerlink" title="2、实时计算和离线计算"></a>2、实时计算和离线计算</h3><p><strong>实时计算</strong>：输入数据可以以流的方式一个个输入并进行处理，即并不知道全部数据有多大，来一个处理一个。适合运算时间短、计算量级较小的业务。比如当前商品库存，当一个顾客下单后，需要实时对库存数据进行实时处理。</p><p><strong>离线计算</strong>：计算之前已经知道全部的输入数据，且输入数据并不会发生变化。这种业务一般运算时间长、计算量较大，需要放在后台离线计算。比如计算上个月的网站访问量、去年某商品的销售额。</p><p><strong>即席查询</strong>：临时的业务，可能是老板为了装逼临时分派给你的查询任务。</p><p>Presto：当场计算（基于内存速度块）</p><p>Kylin：预计算（提前算好），多维分析（各个维度组合的结果都帮你算好）</p><h3 id="3、需求"><a href="#3、需求" class="headerlink" title="3、需求"></a>3、需求</h3><ul><li>日常统计报表或分析图实时数据变化</li><li>实时数据展示</li><li>数据预警或提示</li><li>实时推荐系统</li></ul><h2 id="一、数据采集（ODS）"><a href="#一、数据采集（ODS）" class="headerlink" title="一、数据采集（ODS）"></a>一、数据采集（ODS）</h2><p>ODS：Operation Data Store，数据准备区。</p><p>功能：采集原始数据、日志和业务数据，写入kafka</p><p>kafka topic：ods_base_log</p><h2 id="二、初步处理及分流（DWD）"><a href="#二、初步处理及分流（DWD）" class="headerlink" title="二、初步处理及分流（DWD）"></a>二、初步处理及分流（DWD）</h2><p>DWD：data warehouse details，细节数据层。</p><p>功能：主要对ODS数据层做一些数据清洗、规范化以及分流的操作。</p><ul><li><p>数据清洗：剔除非法值、脏数据等</p></li><li><p>数据分流：按照不同的业务需求，将数据拆分，输出到下游的kafka的不同topic中。</p></li></ul><p><font color="Red">重点：需要分流的逻辑一般以某种形式写在配置中，而不能在代码中写死。</font></p><p><font color="Red">而在实际工作中，这一层一般会通过搭一个平台来实现动态增加或减少分流逻辑。</font></p><p><font color="Red">实现原理就是将分流逻辑配置在数据库中，再将数据库中这个配置表通过flinkcdc生成一个广播流，将这个广播流和ods流连接合并，就可以根据配置实现动态分流。</font></p><h2 id="三、维度数据（DIM）"><a href="#三、维度数据（DIM）" class="headerlink" title="三、维度数据（DIM）"></a>三、维度数据（DIM）</h2><p>DIM：Dimension，维度数据，一般就是一些业务基本信息的数据，包含：</p><p>高基数维度数据：用户资料、商品资料等业务相关的基本信息。</p><p>低基数维度数据：配置表、数据字典等，如业务相关枚举值及其含义等。</p><blockquote><p>问：维度数据为什么不放在redis，而放在hbsae？</p></blockquote><p>答：有些维度表会随时间扩大，比如用户信息，放redis太占内存，一些在可预见的未来不会膨胀的维度数据实际上是可以放redis的。（该问题一般不能从持久化的角度来回答，实际场景下，肯定会有数据库作为持久化存储）</p><blockquote><p>问：维度数据为什么不直接取数据库，而是取hbase？</p></blockquote><p>答：数据库一般是业务本身要用来做增删改查的，大数据处理和分析模块再请求数据库，会对数据库造成压力。</p><h2 id="四、数据中间层（DWM）"><a href="#四、数据中间层（DWM）" class="headerlink" title="四、数据中间层（DWM）"></a>四、数据中间层（DWM）</h2><p>DWM：Data WareHouse Middle，数据中间层，即从DWD到DWS中间，会有很多复用的部分，将这些可复用的部分的数据加工提出出来作为一层，避免重复劳动。</p>]]></content>
    
    
    <categories>
      
      <category>bigdata</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM-1.8-memory-and-garbage-collect</title>
    <link href="/java/JVM/jvm-1.8/"/>
    <url>/java/JVM/jvm-1.8/</url>
    
    <content type="html"><![CDATA[<p>JVM版本：HotSpot 1.8</p><p>推荐书籍：</p><ul><li>《The Java Virtual Machine Specification》（<a href="https://docs.oracle.com/javase/specs/jvms/se8/jvms8.pdf">The Java® Virtual Machine Specification (oracle.com)</a>）</li><li>《深入理解java虚拟机——JVM高级特性与最佳实践》</li></ul><h2 id="一、JVM简介"><a href="#一、JVM简介" class="headerlink" title="一、JVM简介"></a>一、JVM简介</h2><h3 id="1、JVM是什么"><a href="#1、JVM是什么" class="headerlink" title="1、JVM是什么"></a>1、JVM是什么</h3><p>狭义上来说，JVM是java运行的平台。</p><p>广义上来说，It is the component of the technology responsible for its hardware- and operating system independence, the small size of its compiled code, and its ability to protect users from malicious programs. 即JVM是一个操作系统或硬件与用户程序之间的一个接口或平台，这个接口可以使用户的程序与不同的操作系统或硬件独立开，只要程序运行在这个平台上，就可以对不同的操作系统或硬件进行相同的操作，就像一个虚拟的计算机，可以执行一系列的虚拟计算机指令。</p><p>虚拟机分为两类：</p><ul><li>系统虚拟机，虚拟一个操作系统的运行环境（模拟硬件），如VMWare，是操作系统的运行环境，可以安装window、Linux等。</li><li>程序虚拟机，虚拟一个普通应用程序的运行环境（模拟软件），如JVM，是二进制字节码的运行环境。</li></ul><p>java SE架构：<a href="https://docs.oracle.com/javase/8/docs/">Java Platform Standard Edition 8 Documentation (oracle.com)</a>，JVM处于最底层，即java的运行环境。</p><h3 id="2、JVM厂商"><a href="#2、JVM厂商" class="headerlink" title="2、JVM厂商"></a>2、JVM厂商</h3><p>JVM和JVM规范（JVM Specification）不一样，JVM规范是一套规范，并不是JVM本身，而JVM是基于这套规范的实现，java官网上的JVM只是Oracle（Sun）对JVM规范的一个实现版本，不过还有其他厂商实现的JVM，如：</p><ul><li><p>Oracle HotSpot（<a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a>）（里面有很多历史，可以了解一下）</p></li><li><p>Microsoft OpenJDK（<a href="https://www.microsoft.com/openjdk">Microsoft Build of OpenJDK</a>）</p></li><li><p>Alibaba Dragonwell（<a href="https://developer.aliyun.com/opensource/project/alibabadragonwell">开发者平台_开发者中心 (aliyun.com)</a>）</p></li><li><p>Azul OpenJDK（<a href="https://www.azul.com/downloads/azure-only/">Azure Only Downloads - Azul | Better Java Performance, Superior Java Support</a>）</p></li><li><p>Red Hat OpenJDK（<a href="https://developers.redhat.com/products/openjdk/download">OpenJDK Download | Red Hat Developer</a>）</p></li><li><p>Amazon Corretto（<a href="https://aws.amazon.com/cn/corretto/">Amazon Corretto-OpenJDK 的免费多平台发行版-AWS云服务</a>）</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Oracle</span><br>java version &quot;13.0.2&quot; 2020-01-14<br>Java(TM) SE Runtime Environment (build 13.0.2+8)<br>Java HotSpot(TM) 64-Bit Server VM (build 13.0.2+8, mixed mode, sharing)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Microsoft</span><br>openjdk version &quot;11.0.12&quot; 2021-07-20<br>OpenJDK Runtime Environment Microsoft-25199 (build 11.0.12+7)<br>OpenJDK 64-Bit Server VM Microsoft-25199 (build 11.0.12+7, mixed mode)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Alibaba</span><br>openjdk version &quot;1.8.0_302&quot;<br>OpenJDK Runtime Environment (Alibaba Dragonwell 8.8.8) (build 1.8.0_302-b01)<br>OpenJDK 64-Bit Server VM (Alibaba Dragonwell 8.8.8) (build 25.302-b01, mixed mode)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 不同的Linux发行版会提供OpenJDK或其变体作为系统默认的JVM实现</span><br>openjdk version &quot;1.8.0_292&quot;<br>OpenJDK Runtime Environment (build 1.8.0_292-8u292-b10-0ubuntu1~18.04-b10)<br>OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)<br></code></pre></td></tr></table></figure><h3 id="3、跨语言平台"><a href="#3、跨语言平台" class="headerlink" title="3、跨语言平台"></a>3、跨语言平台</h3><p>JVM是一个跨语言的平台，只要对应的编译器按照一定的规范（JSR-292）能生成JVM可以识别的字节码文件，就可以运行其他语言的程序，而不仅仅是java。</p><p>因此java的强大之处并不在于java语言本身，而更在于JVM的强大。</p><p><img src="/images/JVM%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%8F%B0.png"></p><h3 id="4、JVM整体结构"><a href="#4、JVM整体结构" class="headerlink" title="4、JVM整体结构"></a>4、JVM整体结构</h3><p>JVM主要分为三个区域：</p><ul><li>类加载子系统</li><li>运行时数据区</li><li>执行引擎</li></ul><p><img src="/images/JVM%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84.png"></p><h3 id="5、java代码执行流程"><a href="#5、java代码执行流程" class="headerlink" title="5、java代码执行流程"></a>5、java代码执行流程</h3><ul><li>java编译器（如javac）编译成.class字节码文件（前端编译器）<ul><li>词法分析</li><li>语法分析</li><li>语法/抽象语法树</li><li>语义分析</li><li>注解抽象语法树</li><li>字节码生成器</li></ul></li><li>JVM<ul><li>类加载</li><li>字节码校验</li><li>解释器，逐行将字节码翻译成机器指令，解析执行</li><li>JIT编译器（后端编译器），对字节码整体进行编译再执行，区别在于JIT会缓存一些热点代码等，优化执行效率</li></ul></li></ul><p><font color="Red">注意：解释器和JIT编译器属于JVM的执行引擎下，可以共存，但是不会同时运行，JIT编译器和解释器只能选其中一种来执行，但是并不是在JVM的整个生命周期内只能选一种运行，而是可以切换运行，根据当前要执行的代码的特征，JVM会选择其中一种来执行。</font></p><h3 id="6、class文件反编译"><a href="#6、class文件反编译" class="headerlink" title="6、class文件反编译"></a>6、class文件反编译</h3><p>通过javap命令可以对.class文件进行反编译，查看字节码指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs shell">javap -v Demo01.class<br><br>Classfile /D:/Adocument/Java/JVM/out/production/c1-memory-and-garbage-collect/net/yury/demo/Demo01.class<br>  Last modified 2021-9-20; size 580 bytes<br>  MD5 checksum fa60e763603ba1e3f645376ecc25e0ac<br>  Compiled from &quot;Demo01.java&quot;<br>public class net.yury.demo.Demo01<br>  minor version: 0<br>  major version: 52<br>  flags: ACC_PUBLIC, ACC_SUPER<br>Constant pool:<br><span class="hljs-meta">   #</span><span class="bash">1 = Methodref          <span class="hljs-comment">#5.#23         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">   #</span><span class="bash">2 = Fieldref           <span class="hljs-comment">#24.#25        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">   #</span><span class="bash">3 = Methodref          <span class="hljs-comment">#26.#27        // java/io/PrintStream.println:(I)V</span></span><br><span class="hljs-meta">   #</span><span class="bash">4 = Class              <span class="hljs-comment">#28            // net/yury/demo/Demo01</span></span><br><span class="hljs-meta">   #</span><span class="bash">5 = Class              <span class="hljs-comment">#29            // java/lang/Object</span></span><br><span class="hljs-meta">   #</span><span class="bash">6 = Utf8               &lt;init&gt;</span><br><span class="hljs-meta">   #</span><span class="bash">7 = Utf8               ()V</span><br><span class="hljs-meta">   #</span><span class="bash">8 = Utf8               Code</span><br><span class="hljs-meta">   #</span><span class="bash">9 = Utf8               LineNumberTable</span><br><span class="hljs-meta">  #</span><span class="bash">10 = Utf8               LocalVariableTable</span><br><span class="hljs-meta">  #</span><span class="bash">11 = Utf8               this</span><br><span class="hljs-meta">  #</span><span class="bash">12 = Utf8               Lnet/yury/demo/Demo01;</span><br><span class="hljs-meta">  #</span><span class="bash">13 = Utf8               main</span><br><span class="hljs-meta">  #</span><span class="bash">14 = Utf8               ([Ljava/lang/String;)V</span><br><span class="hljs-meta">  #</span><span class="bash">15 = Utf8               args</span><br><span class="hljs-meta">  #</span><span class="bash">16 = Utf8               [Ljava/lang/String;</span><br><span class="hljs-meta">  #</span><span class="bash">17 = Utf8               a</span><br><span class="hljs-meta">  #</span><span class="bash">18 = Utf8               I</span><br><span class="hljs-meta">  #</span><span class="bash">19 = Utf8               b</span><br><span class="hljs-meta">  #</span><span class="bash">20 = Utf8               c</span><br><span class="hljs-meta">  #</span><span class="bash">21 = Utf8               SourceFile</span><br><span class="hljs-meta">  #</span><span class="bash">22 = Utf8               Demo01.java</span><br><span class="hljs-meta">  #</span><span class="bash">23 = NameAndType        <span class="hljs-comment">#6:#7          // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">  #</span><span class="bash">24 = Class              <span class="hljs-comment">#30            // java/lang/System</span></span><br><span class="hljs-meta">  #</span><span class="bash">25 = NameAndType        <span class="hljs-comment">#31:#32        // out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">  #</span><span class="bash">26 = Class              <span class="hljs-comment">#33            // java/io/PrintStream</span></span><br><span class="hljs-meta">  #</span><span class="bash">27 = NameAndType        <span class="hljs-comment">#34:#35        // println:(I)V</span></span><br><span class="hljs-meta">  #</span><span class="bash">28 = Utf8               net/yury/demo/Demo01</span><br><span class="hljs-meta">  #</span><span class="bash">29 = Utf8               java/lang/Object</span><br><span class="hljs-meta">  #</span><span class="bash">30 = Utf8               java/lang/System</span><br><span class="hljs-meta">  #</span><span class="bash">31 = Utf8               out</span><br><span class="hljs-meta">  #</span><span class="bash">32 = Utf8               Ljava/io/PrintStream;</span><br><span class="hljs-meta">  #</span><span class="bash">33 = Utf8               java/io/PrintStream</span><br><span class="hljs-meta">  #</span><span class="bash">34 = Utf8               println</span><br><span class="hljs-meta">  #</span><span class="bash">35 = Utf8               (I)V</span><br>&#123;<br>  public net.yury.demo.Demo01();<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=1, locals=1, args_size=1<br>         0: aload_0<br>         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>         4: return<br>      LineNumberTable:<br>        line 3: 0<br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            0       5     0  this   Lnet/yury/demo/Demo01;<br><br>  public static void main(java.lang.String[]);<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=2, locals=4, args_size=1<br>         0: iconst_4<br>         1: istore_1<br>         2: iconst_3<br>         3: istore_2<br>         4: iload_1<br>         5: iload_2<br>         6: iadd<br>         7: istore_3<br>         8: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        11: iload_1<br>        12: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V<br>        15: return<br>      LineNumberTable:<br>        line 5: 0<br>        line 6: 2<br>        line 7: 4<br>        line 8: 8<br>        line 9: 15<br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            0      16     0  args   [Ljava/lang/String;<br>            2      14     1     a   I<br>            4      12     2     b   I<br>            8       8     3     c   I<br>&#125;<br>SourceFile: &quot;Demo01.java&quot;<br></code></pre></td></tr></table></figure><p>JVM是基于栈的架构，不同CPU架构不同，因此不能基于寄存器来设计。</p><h3 id="7、JVM生命周期"><a href="#7、JVM生命周期" class="headerlink" title="7、JVM生命周期"></a>7、JVM生命周期</h3><ul><li><strong>启动</strong>：Java虚拟机的启动是通过<strong>引导类加载器</strong>（bootstrap class loader）创建一个初始类（initial class）来完成的，这个初始类是由虚拟机的具体实现来指定的，不同实现版本的JVM的类可能不一样。</li><li><strong>执行</strong>：JVM执行的任务就是执行用户程序，即执行一个java程序，实际上是执行一个JVM进程，而用户程序只不过在这个进程上运行。</li><li><strong>退出</strong>：程序正常终止、异常或错误而终止、操作系统错误终止、某个线程调用Runtime类或System类的exit方法或其他方法手动终止程序等都会导致程序退出，程序终止则JVM也退出。</li></ul><h2 id="二、类加载子系统"><a href="#二、类加载子系统" class="headerlink" title="二、类加载子系统"></a>二、类加载子系统</h2><p>类加载子系统（class loader subsystem）负责加载.class字节码文件。</p><p>类加载过程分为一下几个步骤：加载、链接、初始化。</p><h3 id="1、加载"><a href="#1、加载" class="headerlink" title="1、加载"></a>1、加载</h3><ul><li>通过全限定类名获取定义此类的二进制流（本地文件，网络，<font color="Red">动态代理</font>，<font color="Red">JSP生成</font>）</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象（详见反射），作为方法区这个类的各种数据的访问入口</li></ul><h3 id="2、链接"><a href="#2、链接" class="headerlink" title="2、链接"></a>2、链接</h3><ul><li><strong>验证</strong>：验证class字节码文件是否符合当前JMV规范，保证类被正确地加载并不会危害JVM本身。主要有：文件格式验证、元数据验证、字节码验证、符号引用验证。</li><li><strong>准备</strong>：为变量分配内存，并设置该变量的默认值。用final static修饰的变量在编译成class文件时就会分配值，因而这种变量在这个阶段就会直接赋值。这里不会为示例变量分配初始化值，类变量会分配在方法区中，而实例变量是会随着对象一起分配到java堆中。</li><li><strong>解析</strong>：将内存池中的符号引用转换为直接引用。即比如我们引用了一个java.Lang.String类，会产生一个对这个类的符号引用，等其他类都准备好了之后，将符号引用转换为地址引用这样的直接引用。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。</li></ul><h3 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h3><p>这个初始化并不是初始化实例，而是类的初始化。</p><ul><li>执行类构造器方法&lt;clinit&gt;()的过程。此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。即执行所有static变量或static代码块相关的初始化操作，若没有这两类操作，则不会产生对应的&lt;clinit&gt;()方法。</li><li>初始化顺序是按照代码在源文件中的顺序执行</li><li>若该类具有父类，则必须先执行父类的&lt;clinit&gt;()方法，父类初始化完成后，才能初始化子类。</li><li>JVM必须保证一个类的&lt;clinit&gt;()方法在多线程中被同步加锁，保证只能被加载一次。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Runnable task = ()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;开始&quot;</span>);<br>            AnotherClass deadThread = <span class="hljs-keyword">new</span> AnotherClass();<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;结束&quot;</span>);<br>        &#125;;<br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(task, <span class="hljs-string">&quot;thread-1&quot;</span>);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(task, <span class="hljs-string">&quot;thread-2&quot;</span>);<br><br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnotherClass</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在初始化&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;初始化结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如以上代码执行时最多一个线程进入AnotherClass的static代码块去执行，要么是thread-1，要么是thread-2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">thread-<span class="hljs-number">1</span>开始<br>thread-<span class="hljs-number">2</span>开始<br>thread-<span class="hljs-number">1</span>正在初始化<br>thread-<span class="hljs-number">1</span>初始化结束<br>thread-<span class="hljs-number">1</span>结束<br>thread-<span class="hljs-number">2</span>结束<br></code></pre></td></tr></table></figure><h3 id="4、类加载器（重点）"><a href="#4、类加载器（重点）" class="headerlink" title="4、类加载器（重点）"></a>4、类加载器（重点）</h3><p>按被加载的被的类的类型划分，类加载分为一下几种：</p><ul><li>引导类加载器（Bootstrap ClassLoader）</li><li>扩展类加载器（Extension ClassLoader）</li><li>应用程序类加载器（Application ClassLoader）</li><li>用户自定义类加载器（意为用户自定义的<strong>类加载器</strong>，而不是<strong>用户自定义类</strong>的加载器，没有加载器这个东西，只有类加载器）</li></ul><p>而按照JVM的标准，后面三种都叫用户自定义类加载器。<font color="Red">所有直接或间接派生于ClassLoader的类加载器都是用户自定义类加载器</font>。如扩展类加载器（ExtClassLoader）间接继承了ClassLoader。</p><p>Launcher类是JVM的一个入口应用，后面可以看到扩展了加载器和应用程序类加载器都是Launcher类里面的内部类。</p><h4 id="（1）引导类加载器"><a href="#（1）引导类加载器" class="headerlink" title="（1）引导类加载器"></a>（1）引导类加载器</h4><p>引导类加载器为C/C++编写，用于引导java的核心类库（JAVA_HOME/jre/lib/rt.jar、resources.jar、sun.boot.class.path路径下的内容），用于提供JVM启动运行自身需要的类。</p><p><font color="Red">扩展类加载器和应用程序类加载器也是一个类，因此引导类加载器用于还用于加载这两个特殊的类。</font></p><p>出于安全考虑，Bootstrap类加载器只加载包含java、javax、sun等开头的类。</p><p>引导类加载器加载的类，调用getClassLoader()方法返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">import</span> com.sun.net.ssl.internal.ssl.Provider;<br><span class="hljs-keyword">import</span> sun.misc.Launcher;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03BootstrapClassLoader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;bootstrap引导类加载器加载的路径为：&quot;</span>);<br>        URL[] urLs = Launcher.getBootstrapClassPath().getURLs();<br>        <span class="hljs-keyword">for</span> (URL urL : urLs) &#123;<br>            System.out.println(urL.toString());<br>        &#125;<br>        ClassLoader classLoader = Provider.class.getClassLoader();<br>        System.out.println(classLoader);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">bootstrap引导类加载器加载的路径为：</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/resources.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/rt.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/sunrsasign.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/jsse.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/jce.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/charsets.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/jfr.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/classes</span><br><span class="hljs-comment">null</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="（2）扩展类加载器"><a href="#（2）扩展类加载器" class="headerlink" title="（2）扩展类加载器"></a>（2）扩展类加载器</h4><p>java语言编写，由sun.misc.Launcher$ExtClassLoader实现，继承于ClassLoader，该类由Bootstrap引导类加载器加载。</p><p>加载的类目录为指定的java.ext.dirs系统属性目录，若没指定则默认为JAVA_HOME/jre/lib/ext，当用户写了一个类放入这个目录下也会被加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">import</span> sun.security.ec.CurveDB;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04ExtClassLoader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String property = System.getProperty(<span class="hljs-string">&quot;java.ext.dirs&quot;</span>);<br>        System.out.println(property);<br><br>        ClassLoader classLoader = CurveDB.class.getClassLoader();<br>        System.out.println(classLoader);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">D:\Program Files (x86)\Java\jdk1.8.0_201\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext</span><br><span class="hljs-comment">sun.misc.Launcher$ExtClassLoader@4b67cf4d</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="（3）应用程序类加载器"><a href="#（3）应用程序类加载器" class="headerlink" title="（3）应用程序类加载器"></a>（3）应用程序类加载器</h4><p>应用程序类加载器也叫系统类加载器，java语言编写，由sun.misc.Launcher$AppClassLoader实现，继承于ClassLoader，该类由扩展类加载器加载。</p><p>加载的类的目录为指定的java.class.path系统属性目录。</p><p><font color="Red">该类加载器是java应用程序的默认类加载器，即java应用的类一般都是由这个类加载器加载的。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo05AppClassLoader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ClassLoader classLoader = Demo05AppClassLoader.class.getClassLoader();<br>        System.out.println(classLoader);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>总结如下：</p><p><img src="/images/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B.png"></p><h4 id="（4）用户自定义类加载器"><a href="#（4）用户自定义类加载器" class="headerlink" title="（4）用户自定义类加载器"></a>（4）用户自定义类加载器</h4><p>不适用以上三种类加载器，而是用户自定义一个类加载器，来加载需要加载的类。</p><p>为什么需要自定义类加载器？</p><ul><li>隔离加载类</li><li>修改类的加载方式</li><li>扩展加载源</li><li>防止源码泄露</li></ul><p>定义用户自定义类的两个方法：</p><ul><li>继承ClassLoader类，重写findClass方法，JDK1.2之前要重写loadClass方法</li><li>继承URLClassLoader类，按照需求重写部分方法</li><li>将URLClassLoader类作为一个参考模板，模仿重写一个适应自己需求的一个类</li></ul><h4 id="（5）获取类加载器的方式"><a href="#（5）获取类加载器的方式" class="headerlink" title="（5）获取类加载器的方式"></a>（5）获取类加载器的方式</h4><ul><li>Class.getClassLoader()</li><li>Thread.currentThread().getContextClassLoader()</li><li>ClassLoader.getSystemClassLoader()</li><li>DriverManager.getCallerCLassLoader()</li></ul><h3 id="5、双亲委派机制（重点）"><a href="#5、双亲委派机制（重点）" class="headerlink" title="5、双亲委派机制（重点）"></a>5、双亲委派机制（重点）</h3><p>JVM对class文件采用的是<font color="Red">按需加载</font>的方式加载，即在要用到这个类时才会将这个类加载进内存中生成class对象。而加载某个类时，JVM加载类时采用的是<font color="Red">双亲委派机制</font>，是一种任务委派模式。</p><p>双亲委派机制原理如下：</p><ul><li>当一个类加载器收到加载类的请求时，并不会自己去加载这个类，而是将这个请求委托给父类去加载</li><li>父类加载器收到加载请求后，会继续向上委托，最终到达Bootstrap ClassLoader</li><li>在这个递归的过程中，如果父类加载器完成了加载过程，则成功返回，否则才让子类加载器去完成类加载，知道这个类完成加载。</li></ul><p>注：“父类加载器“的断句为”<strong>父 类加载器</strong>“，还是一个类加载器，而不是父类的类加载器。类加载器可以通过调用getParent()方法获取其父类加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns the parent class loader for delegation. Some implementations may</span><br><span class="hljs-comment"> * use &lt;tt&gt;null&lt;/tt&gt; to represent the bootstrap class loader. This method</span><br><span class="hljs-comment"> * will return &lt;tt&gt;null&lt;/tt&gt; in such implementations if this class loader&#x27;s</span><br><span class="hljs-comment"> * parent is the bootstrap class loader.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ClassLoader <span class="hljs-title">getParent</span><span class="hljs-params">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">就像注释中说的，类加载器在任务委派方面是存在父子这种层次关系的，上面一节中讲到的不同类型的类加载器可以加载那些类，只是说明了它拥有加载这些类的能力，而不是说这些类一定由这个类加载器加载。而某个类最终由哪个类加载器加载，取决于可以加载这个类的最高级别的类加载器。</font></p><p>类加载器在任务委派方面的级别从高到低依次如下：</p><ul><li>Bootstrap ClassLoader</li><li>Extension ClassLoader</li><li>Application ClassLoader</li><li>UserDefined ClassLoader</li></ul><p>例如用户定义了一个java.lang.String类，而用户在使用这个类时，并不会找到用户定义的这个类，而是用了bootstrap classloader加载的rt.jar包下的java.lang.String类。因为通过双亲委派机制加载类时，加载任务不会直接进行，而是从最底层一直往上传递，最顶层的bootstrap classloader可以完成这个类的加载，于是直接完成了加载并返回class对象了，并不会将加载任务继续返还给子类加载器加载。代码略。</p><p>机制的优点：</p><ul><li>避免类被重复加载</li><li>保护程序安全，防止核心api被随意篡改</li></ul><h3 id="6、识别同一个类"><a href="#6、识别同一个类" class="headerlink" title="6、识别同一个类"></a>6、识别同一个类</h3><p>JVM中识别两个对象是否属于同一个类，包含以下两个校验：</p><ul><li>全限定类名是否相同</li><li>这两个对象的类是否由同一个类加载器加载的</li></ul><h3 id="7、类的主动使用和被动使用"><a href="#7、类的主动使用和被动使用" class="headerlink" title="7、类的主动使用和被动使用"></a>7、类的主动使用和被动使用</h3><p>主动使用包括：</p><ul><li>创建类实例</li><li>访问类或接口的静态变量，或对该静态变量进行赋值</li><li>调用类的静态方法</li><li>反射</li><li>初始化一个类的子类</li><li>JVM启动时被标明为启动类的类</li><li>JDK7开始提供的动态语言支持：java.lang.invoke.MethodHandler实例的解析结果</li></ul><p>除了以上几种情况为主动使用，其他均为被动使用。<font color="Red">类的被动使用不会导致类的初始化，即不会执行对应的&lt;clinit&gt;()方法</font>。</p><h2 id="三、运行时数据区"><a href="#三、运行时数据区" class="headerlink" title="三、运行时数据区"></a>三、运行时数据区</h2><h3 id="1、组成"><a href="#1、组成" class="headerlink" title="1、组成"></a>1、组成</h3><ul><li>方法区（JDK1.8叫元空间metaspace，或堆外内存）</li><li>JVM堆</li><li>程序计数器</li><li>本地方法栈</li><li>JVM栈</li></ul><p><font color="Red">其中方法区和JVM堆的生命周期和JVM进程的生命周期一样，而程序计数器、本地方法栈、JVM栈的生命周期和程序线程的生命周期一样，每有一个线程， 就会有一个自身的程序计数器、本地方法栈、JVM栈。</font></p><p><img src="/images/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png"></p><h3 id="2、线程"><a href="#2、线程" class="headerlink" title="2、线程"></a>2、线程</h3><p><font color="Red">在HotSpot JVM中，每个线程都与操作系统中的本地线程直接映射。java线程准备好时，操作系统中对应的本地线程也同时创建；java线程终止时，本地线程也会回收。</font></p><p><strong>普通线程</strong>：用户应用程序需要执行一定的工作而创建的工作线程。JVM虚拟机在所有普通线程终止时自动终止。</p><p><strong>守护线程</strong>：驻立在后台的线程，用于服务普通线程的线程，当JVM虚拟机准备终止时，守护线程才会终止。</p><p>HotSpot JVM中的守护线程主要有：</p><ul><li>JVM线程</li><li>周期任务线程</li><li>GC线程</li><li>编译线程</li><li>信号调度线程</li></ul><h3 id="3、程序计数器（PC寄存器）"><a href="#3、程序计数器（PC寄存器）" class="headerlink" title="3、程序计数器（PC寄存器）"></a>3、程序计数器（PC寄存器）</h3><p>英文全称：Program Counter Register。它是对CPU的寄存器的一种抽象模拟。</p><p>PC寄存器用来<font color="Red">存储指向下一条指令的地址</font>，也即将要执行的指令代码。由执行引擎读取下一条指令。它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。可以理解为数据库中的游标，或集合的迭代器。</p><p>线程私有，和线程的生命周期一致。</p><p><font color="Red">没有GC，且是唯一一个在JVM规范中没有规定任何OOM情况的区域。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo06PCRegister</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">int</span> k = i + j;<br>        String s = <span class="hljs-string">&quot;yury&quot;</span>;<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于上面这段代码反编译后的指令如下：</p><p><img src="/images/pc%E5%AF%84%E5%AD%98%E5%99%A8.png"></p><p><strong>问题1：为什么要用PC寄存器？</strong></p><p>因为CPU需要不断地在各个线程之间切换运行，需要有一个东西记录CPU需要运行的下一条指令的位置，不然CPU从其他线程切换回来不知道从哪里开始。</p><p><strong>问题2：PC寄存器为什么是线程私有的？</strong></p><p>因为PC寄存器是记录每个线程的下一条指令的位置，和线程相关，因此要每个线程独享一份PC寄存器。如果设计成公用的，则需要将对应线程的id也记录进去（即一种key-value形式的数据结构存储），而在创建线程和销毁线程时还要对这个数据结构进行操作，又涉及并发问题，稍显麻烦。而PC寄存器的占用内存及其小，因此设计成和线程绑定，随着线程生命周期创建或销毁，使用起来更方便。</p><h3 id="4、JVM栈"><a href="#4、JVM栈" class="headerlink" title="4、JVM栈"></a>4、JVM栈</h3><p>英文全称：Java Virtual Machine Stacks。</p><p><font color="Red">栈是运行时的单位，而堆是存储的单位。栈解决程序运行的问题，即程序如何运行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放，放在那里。</font></p><p><font color="Red">JVM栈内部存储的是一个个的栈帧，对应着一次次的方法调用，当前线程每调用一个方法，则将该方法入栈，栈顶元素即为正在运行的方法，当前方法运行结束后则栈顶元素出栈</font>。主管java程序的运行，每个栈帧中保存方法的局部变量、部分结果，并参与方法的调用和返回。</p><p>线程私有，和线程的生命周期一致。</p><p>不存在GC，但是存在OOM。</p><p>JVM允许JVM栈的大小是动态的或者固定不变的。若栈大小是固定的，则可能存在<strong>StackOverflowError</strong>异常；若栈大小是动态的，则可能存在<strong>OutOfMemoryError</strong>异常。</p><p><font color="Red">设置栈的大小</font>：在JVM参数设置里面加上<code>-Xss1024</code>即可设置栈空间的大小；默认单位是bytes，加上<code>k</code>则以kb为单位，同样加上<code>m</code>则以mb为单位。</p><h4 id="（1）栈帧"><a href="#（1）栈帧" class="headerlink" title="（1）栈帧"></a>（1）栈帧</h4><p>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据集。</p><p>在一个活动线程中，一个时间点上只可能有一个活动的栈帧，即栈顶栈帧，对应着当前正在运行的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo07JVMStackTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Demo07JVMStackTest demo = <span class="hljs-keyword">new</span> Demo07JVMStackTest();<br>        demo.test1();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        test2();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        test3();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如在运行以上代码时，通过debug手动控制程序的运行时，会发现每当进入一个方法时，下图的顶端方法就会变成当前方法。每执行完一个方法时，顶端方法就会移除。</p><p><img src="/images/stack%E6%B5%8B%E8%AF%95.png"></p><p>注意：不同线程中的所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另外一个线程的栈帧。即不同栈之间的栈帧时隔离的。</p><blockquote><p>返回类型</p></blockquote><p>函数有两种返回方式，一是正常返回，而是异常返回。这两种返回方式都会导致栈帧被弹出。</p><p>正常返回时，使用return指令，返回值会被传给下一个栈帧，接着当前栈帧就被JVM丢弃。返回值为void其实也有一个return。</p><p>异常返回时，抛出的异常会传给下一个栈帧去处理，如果下一个栈帧没有处理该异常，则继续往前抛，直到有一个函数可以处理这个异常。</p><blockquote><p>栈帧内部结构</p></blockquote><ul><li><p><font color="Red">局部变量表</font></p></li><li><p><font color="Red">操作数栈（或表达式栈）</font></p></li><li><p>动态链接（或指向运行时常量池的方法引用）</p></li><li><p>方法返回地址（或方法正常退出或异常退出的定义）</p></li><li><p>其他附加信息</p></li></ul><p><img src="/images/%E6%A0%88%E5%B8%A7.png"></p><h4 id="（2）局部变量表"><a href="#（2）局部变量表" class="headerlink" title="（2）局部变量表"></a>（2）局部变量表</h4><p>局部变量表（local variables），<font color="Red">定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，如字节码指令中的store、load等指令都会对局部变量表的操作</font>，这些数据类型包括基本数据类型、对象引用（reference），以及returnAddress类型。</p><p><font color="Red">局部变量表中最基本的存储单元是slot（变量槽）</font>。32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot。</p><ul><li>boolean、byte、short、char在存储之前都会被转换成int，占用一个slot</li><li>float为占用一个字节，故占用一个slot</li><li>long和double则占用两个slot</li><li>引用类型占用一个slot</li></ul><p>局部变量表是和线程绑定的，不存在线程安全的问题。</p><p><strong>局部变量表所需的容量大小是在编译器就确定下来了</strong>，并保存在方法的Code属性的locals数据项中，在方法运行期间是不会改变局部变量表的大小的。</p><p><font color="Red">局部变量表中的变量是重要的垃圾回收的根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。</font></p><p>如下这段代码，在javap命令下展示的局部变量表如下所示。locals即为局部变量表的容量（数字数组的长度），L开头表示引用类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo08Slot</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String res = test(args);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">test</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">long</span> a = <span class="hljs-number">1L</span>;<br>        <span class="hljs-keyword">double</span> b = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">float</span> c = <span class="hljs-number">3F</span>;<br>        <span class="hljs-keyword">int</span> d = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">short</span> e = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">byte</span> f = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">boolean</span> g = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">char</span> h = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        String i = <span class="hljs-string">&quot;123&quot;</span>;<br>        <span class="hljs-keyword">return</span> i + <span class="hljs-string">&quot;456&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public static java.lang.String test(java.lang.String[]);</span><br><span class="hljs-comment">    descriptor: ([Ljava/lang/String;)Ljava/lang/String;</span><br><span class="hljs-comment">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="hljs-comment">    Code:</span><br><span class="hljs-comment">      stack=2, locals=12, args_size=1</span><br><span class="hljs-comment">         0: lconst_1</span><br><span class="hljs-comment">         1: lstore_1</span><br><span class="hljs-comment">         2: ldc2_w        #3                  // double 2.0d</span><br><span class="hljs-comment">         5: dstore_3</span><br><span class="hljs-comment">         6: ldc           #5                  // float 3.0f</span><br><span class="hljs-comment">         8: fstore        5</span><br><span class="hljs-comment">        10: iconst_3</span><br><span class="hljs-comment">        11: istore        6</span><br><span class="hljs-comment">        13: iconst_4</span><br><span class="hljs-comment">        14: istore        7</span><br><span class="hljs-comment">        16: iconst_5</span><br><span class="hljs-comment">        17: istore        8</span><br><span class="hljs-comment">        19: iconst_1</span><br><span class="hljs-comment">        20: istore        9</span><br><span class="hljs-comment">        22: bipush        97</span><br><span class="hljs-comment">        24: istore        10</span><br><span class="hljs-comment">        26: ldc           #6                  // String 123</span><br><span class="hljs-comment">        28: astore        11</span><br><span class="hljs-comment">        30: new           #7                  // class java/lang/StringBuilder</span><br><span class="hljs-comment">        33: dup</span><br><span class="hljs-comment">        34: invokespecial #8                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="hljs-comment">        37: aload         11</span><br><span class="hljs-comment">        39: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="hljs-comment">        42: ldc           #10                 // String 456</span><br><span class="hljs-comment">        44: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="hljs-comment">        47: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="hljs-comment">        50: areturn</span><br><span class="hljs-comment">      LineNumberTable:</span><br><span class="hljs-comment">        line 8: 0</span><br><span class="hljs-comment">        line 9: 2</span><br><span class="hljs-comment">        line 10: 6</span><br><span class="hljs-comment">        line 11: 10</span><br><span class="hljs-comment">        line 12: 13</span><br><span class="hljs-comment">        line 13: 16</span><br><span class="hljs-comment">        line 14: 19</span><br><span class="hljs-comment">        line 15: 22</span><br><span class="hljs-comment">        line 16: 26</span><br><span class="hljs-comment">        line 17: 30</span><br><span class="hljs-comment">      LocalVariableTable:</span><br><span class="hljs-comment">        Start  Length  Slot  Name   Signature</span><br><span class="hljs-comment">            0      51     0  args   [Ljava/lang/String;</span><br><span class="hljs-comment">            2      49     1     a   J</span><br><span class="hljs-comment">            6      45     3     b   D</span><br><span class="hljs-comment">           10      41     5     c   F</span><br><span class="hljs-comment">           13      38     6     d   I</span><br><span class="hljs-comment">           16      35     7     e   S</span><br><span class="hljs-comment">           19      32     8     f   B</span><br><span class="hljs-comment">           22      29     9     g   Z</span><br><span class="hljs-comment">           26      25    10     h   C</span><br><span class="hljs-comment">           30      21    11     i   Ljava/lang/String;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>局部变量表在LocalVariableTable下，</p><ul><li>start：该局部变量开始生效的字节码行号</li><li>length：该局部变量开始生效的字节码行的数量，start + length一定等于该方法的总字节码行数</li><li>slot：占据的槽位的编号</li><li>name：局部变量名</li><li>signature：局部变量类型缩写</li></ul><p>最上面<code>Code：</code>下面的<code>locals</code>即为局部变量表的大小，而<code>stack</code>为操作数栈的长度。</p><p>LineNumberTable这个表指的是<strong>源代码中行号（冒号左边）</strong>和<strong>字节码行号（冒号右边）</strong>的对应关系</p><p><img src="/images/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8.png"></p><p><font color="Red">注意：非静态方法，会把对自身对象的引用this放在第0个位置的slot处作为“局部变量”，甚至方法的参数都要放在这个“局部变量”后面。而静态方法中，不会将自身对象的应用放到局部变量表中，因此在静态方法中使用this会报错。如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(<span class="hljs-keyword">long</span> i)</span> <span class="hljs-keyword">throws</span> FileNotFoundException </span>&#123;<br>    FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">this</span>.test2();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public java.lang.String test1(long) throws java.io.FileNotFoundException;</span><br><span class="hljs-comment">    descriptor: (J)Ljava/lang/String;</span><br><span class="hljs-comment">    flags: ACC_PUBLIC</span><br><span class="hljs-comment">    Code:</span><br><span class="hljs-comment">      stack=3, locals=4, args_size=2</span><br><span class="hljs-comment">         0: new           #12                 // class java/io/FileInputStream</span><br><span class="hljs-comment">         3: dup</span><br><span class="hljs-comment">         4: ldc           #13                 // String</span><br><span class="hljs-comment">         6: invokespecial #14                 // Method java/io/FileInputStream.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class="hljs-comment">         9: astore_3</span><br><span class="hljs-comment">        10: aload_0</span><br><span class="hljs-comment">        11: invokevirtual #15                 // Method test2:()V</span><br><span class="hljs-comment">        14: aload_0</span><br><span class="hljs-comment">        15: getfield      #16                 // Field name:Ljava/lang/String;</span><br><span class="hljs-comment">        18: areturn</span><br><span class="hljs-comment">      LineNumberTable:</span><br><span class="hljs-comment">        line 21: 0</span><br><span class="hljs-comment">        line 22: 10</span><br><span class="hljs-comment">        line 23: 14</span><br><span class="hljs-comment">      LocalVariableTable:</span><br><span class="hljs-comment">        Start  Length  Slot  Name   Signature</span><br><span class="hljs-comment">            0      19     0  this   Lnet/yury/demo/Demo09Method;</span><br><span class="hljs-comment">            0      19     1     i   J</span><br><span class="hljs-comment">           10       9     3 fileInputStream   Ljava/io/FileInputStream;</span><br><span class="hljs-comment">    Exceptions:</span><br><span class="hljs-comment">      throws java.io.FileNotFoundException</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p>slot的重复利用</p></blockquote><p>局部变量表中的slot槽位是可以重复利用的。当一个局部变量过了其作用域时，那么后面申明的局部变量可以利用前面过期的局部变量的slot槽位，以达到节省资源的作用。</p><p>如下，c和d利用了过期了的b的slot槽位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>    &#123;<br>        <span class="hljs-keyword">long</span> b = <span class="hljs-number">100L</span>;<br>        b = a;<br>    &#125;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> d = <span class="hljs-string">&#x27;a&#x27;</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public void test3();</span><br><span class="hljs-comment">    descriptor: ()V</span><br><span class="hljs-comment">    flags: ACC_PUBLIC</span><br><span class="hljs-comment">    Code:</span><br><span class="hljs-comment">      stack=2, locals=4, args_size=1</span><br><span class="hljs-comment">         0: iconst_0</span><br><span class="hljs-comment">         1: istore_1</span><br><span class="hljs-comment">         2: ldc2_w        #4                  // long 100l</span><br><span class="hljs-comment">         5: lstore_2</span><br><span class="hljs-comment">         6: iload_1</span><br><span class="hljs-comment">         7: i2l</span><br><span class="hljs-comment">         8: lstore_2</span><br><span class="hljs-comment">         9: iconst_0</span><br><span class="hljs-comment">        10: istore_2</span><br><span class="hljs-comment">        11: bipush        97</span><br><span class="hljs-comment">        13: istore_3</span><br><span class="hljs-comment">        14: return</span><br><span class="hljs-comment">      LineNumberTable:</span><br><span class="hljs-comment">        line 31: 0</span><br><span class="hljs-comment">        line 33: 2</span><br><span class="hljs-comment">        line 34: 6</span><br><span class="hljs-comment">        line 36: 9</span><br><span class="hljs-comment">        line 37: 11</span><br><span class="hljs-comment">        line 38: 14</span><br><span class="hljs-comment">      LocalVariableTable:</span><br><span class="hljs-comment">        Start  Length  Slot  Name   Signature</span><br><span class="hljs-comment">            6       3     2     b   J</span><br><span class="hljs-comment">            0      15     0  this   Lnet/yury/demo/Demo09Method;</span><br><span class="hljs-comment">            2      13     1     a   I</span><br><span class="hljs-comment">           11       4     2     c   I</span><br><span class="hljs-comment">           14       1     3     d   C</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="（3）操作数栈"><a href="#（3）操作数栈" class="headerlink" title="（3）操作数栈"></a>（3）操作数栈</h4><p><font color="Red">操作数栈（operand stack），即在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据的一个临时存储空间，主要用于保存一些指令需要用的临时数据。</font>如指令中的push、store、load等指令，都会对操作数栈进行操作。</p><p>JVM的执行引擎是基于栈的执行引擎，其中这里说的栈，就是操作数栈。</p><p>JVM操作数栈用数组来实现，操作数栈的大小在编译时即确定了，对操作数栈的操作只有入栈和出栈。</p><p>操作数栈中的任何一个元素的都可以是任意类型的java数据类型，只是占用的栈单位不一样：</p><ul><li>32位及以下的类型占用一个栈单位深度，以int类型存放</li><li>64位类型占用两个栈单位深度</li></ul><blockquote><p>指令分析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo10OperandStack</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span> m = <span class="hljs-number">15</span>;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">int</span> k = m + n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: bipush        <span class="hljs-number">15</span><br>         <span class="hljs-number">2</span>: istore_1<br>         <span class="hljs-number">3</span>: bipush        <span class="hljs-number">8</span><br>         <span class="hljs-number">5</span>: istore_2<br>         <span class="hljs-number">6</span>: iload_1<br>         <span class="hljs-number">7</span>: iload_2<br>         <span class="hljs-number">8</span>: iadd<br>         <span class="hljs-number">9</span>: istore_3<br>        <span class="hljs-number">10</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">5</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">6</span>: <span class="hljs-number">3</span><br>        line <span class="hljs-number">7</span>: <span class="hljs-number">6</span><br>        line <span class="hljs-number">8</span>: <span class="hljs-number">10</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">11</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo10OperandStack;<br>            <span class="hljs-number">3</span>       <span class="hljs-number">8</span>     <span class="hljs-number">1</span>     m   B<br>            <span class="hljs-number">6</span>       <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     n   I<br>           <span class="hljs-number">10</span>       <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     k   I<br></code></pre></td></tr></table></figure><p>以上指令是如何一步一步进行的，如下图所示：</p><p><img src="/images/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90.png"></p><p><font color="Red">注意：对于<code>int n = 8;</code>这段代码，虽然指定的是int型，但是数值不超过byte的范围，所以编译后的类型是byte。即并不是我们指定什么类型，它就是什么类型，前端编译器会对我们的代码做优化。</font></p><p>对于有返回值的函数，调用这个函数时，会将函数结果压入栈顶，如下所示。sum方法和上面的method方法的指令，除了ireturn有区别外，其他均无区别。getSum方法的指令中，<font color="Red"><code>aload_0</code>是将this自身对应的引用从局部变量表中复制出来，放入操作数栈中；<code>invokevirtual</code>指令则是取出栈顶元素，以该元素为对象，调用对象中的一个方法，返回的结果会被重新压入栈顶；<code>istore_1</code>则是将栈顶元素出栈，即取出刚才的函数返回值，放入局部变量表中的1号slot槽位。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSum</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = sum();<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">10000</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">byte</span> m = <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">int</span> k = m + n;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSum</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: invokevirtual #<span class="hljs-number">2</span>                  <span class="hljs-comment">// Method sum:()I</span><br>         <span class="hljs-number">4</span>: istore_1<br>         <span class="hljs-number">5</span>: sipush        <span class="hljs-number">10000</span><br>         <span class="hljs-number">8</span>: istore_2<br>         <span class="hljs-number">9</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">11</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">12</span>: <span class="hljs-number">5</span><br>        line <span class="hljs-number">13</span>: <span class="hljs-number">9</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">10</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo10OperandStack;<br>            <span class="hljs-number">5</span>       <span class="hljs-number">5</span>     <span class="hljs-number">1</span>     a   I<br>            <span class="hljs-number">9</span>       <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-function">b   I</span><br><span class="hljs-function"></span><br><span class="hljs-function">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()I<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: bipush        <span class="hljs-number">15</span><br>         <span class="hljs-number">2</span>: istore_1<br>         <span class="hljs-number">3</span>: bipush        <span class="hljs-number">8</span><br>         <span class="hljs-number">5</span>: istore_2<br>         <span class="hljs-number">6</span>: iload_1<br>         <span class="hljs-number">7</span>: iload_2<br>         <span class="hljs-number">8</span>: iadd<br>         <span class="hljs-number">9</span>: istore_3<br>        <span class="hljs-number">10</span>: iload_3<br>        <span class="hljs-number">11</span>: ireturn<br>      LineNumberTable:<br>        line <span class="hljs-number">16</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">17</span>: <span class="hljs-number">3</span><br>        line <span class="hljs-number">18</span>: <span class="hljs-number">6</span><br>        line <span class="hljs-number">19</span>: <span class="hljs-number">10</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">12</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo10OperandStack;<br>            <span class="hljs-number">3</span>       <span class="hljs-number">9</span>     <span class="hljs-number">1</span>     m   B<br>            <span class="hljs-number">6</span>       <span class="hljs-number">6</span>     <span class="hljs-number">2</span>     n   I<br>           <span class="hljs-number">10</span>       <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     k   I<br></code></pre></td></tr></table></figure><blockquote><p>i++与++i的区别</p></blockquote><p>先通过字节码分析，可以发现，<code>n++</code>是先将数据从局部变量表中复制到操作数栈中，再对局部变量表中slot为1的变量的值进行++操作，最后将操作数栈中栈顶元素store到新的局部变量中，而<code>++n</code>是先在局部变量表中slot为1的变量的值进行++操作，再load到操作数栈中，最后store到新的局部变量中。即load和++操作的执行顺序不一样，这就导致n++返回的是n，而++n返回的是(n+1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">int</span> m = n++;<br>    <span class="hljs-keyword">int</span> k = ++n;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: sipush        <span class="hljs-number">1000</span><br>         <span class="hljs-number">3</span>: istore_1<br>         <span class="hljs-number">4</span>: iload_1<br>         <span class="hljs-number">5</span>: iinc          <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>         <span class="hljs-number">8</span>: istore_2<br>         <span class="hljs-number">9</span>: iinc          <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-number">12</span>: iload_1<br>        <span class="hljs-number">13</span>: istore_3<br>        <span class="hljs-number">14</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">23</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">24</span>: <span class="hljs-number">4</span><br>        line <span class="hljs-number">25</span>: <span class="hljs-number">9</span><br>        line <span class="hljs-number">26</span>: <span class="hljs-number">14</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">15</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo10OperandStack;<br>            <span class="hljs-number">4</span>      <span class="hljs-number">11</span>     <span class="hljs-number">1</span>     n   I<br>            <span class="hljs-number">9</span>       <span class="hljs-number">6</span>     <span class="hljs-number">2</span>     m   I<br>           <span class="hljs-number">14</span>       <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     k   I<br></code></pre></td></tr></table></figure><blockquote><p>栈顶缓存技术（top-of-stack caching）</p></blockquote><p>由于JVM是基于栈设计的，因此在不断的执行指令过程中，经常会有入栈出栈的操作，这就意味着存在多次的内存读写操作，会对整体运行速度有所影响。因此HotSpot JVM对此处做了一个缓存，即<font color="Red">将所有栈顶元素缓存到物理CPU寄存器中，依次降低对内存的读写，提高执行效率。</font></p><p>CPU还有一个东西叫高速缓存（一级、二级、三级），这个东西是集成到CPU内和CPU完全独立的一个器件，作为CPU的临时数据缓存区。而CPU寄存器是属于CPU本身的，因此CPU对寄存器的读写速度比对高速缓存的读写速度快得多。这一块是硬件相关的东西，不同架构的硬件设计不一样，可以去学习学习。</p><h4 id="（4）动态链接"><a href="#（4）动态链接" class="headerlink" title="（4）动态链接"></a>（4）动态链接</h4><p>之前说过，每个栈帧都对应一个方法的执行，那么JVM怎么知道这个栈帧是对应的哪个方法呢，这就是通过动态链接来实现的。</p><p>每个栈帧中都包含了一个指向运行时常量池中的该栈帧对应的方法类型的引用，这样字节码文件中的指令就可以支持使用动态链接。</p><p><font color="Red">动态链接（Dynamic Linking），将符号方法引用转换为直接方法引用，加载符号引用对应的类，将对变量的访问转换为这些变量在对应的存储结构中的对应的偏移量。</font></p><p>java代码被编译成字节码指令后，所有的类、变量和方法都保存在运行时常量池中，并都指定了一个通过#开头的独一无二的符号引用作为这个变量或方法的引用。<font color="Red">动态链接就是将这个符号引用转换为直接引用，从而实现方法的调用、类的加载和变量的使用。</font></p><p>比如下面这个类的运行时常量池和test()方法的字节码。运行时常量池中记录了这个类所需要的字节码对象，左边的#加数字即为对应的符号引用，test()方法中的指令需要用到某个对象时，则使用这个引用即可。</p><p>JVM的运行时常量池可以把其他字节码文件中的对象在本字节码文件中设置引用，但动态链接只能链接本字节码文件中运行时常量池中包含的对象，无法直接链接到外部字节码文件的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo11DynamicLinking</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Demo11DynamicLinking().test();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        String test = Demo08Slot.test(<span class="hljs-keyword">null</span>);<br>        Demo10OperandStack demo = <span class="hljs-keyword">new</span> Demo10OperandStack();<br>        demo.test();<br>        test(<span class="hljs-number">10</span>);<br>        System.out.println(test);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java">Constant pool:<br>   #<span class="hljs-number">1</span> = Methodref          #<span class="hljs-number">14.</span>#<span class="hljs-number">36</span>        <span class="hljs-comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   #<span class="hljs-number">2</span> = Class              #<span class="hljs-number">37</span>            <span class="hljs-comment">// net/yury/demo/Demo11DynamicLinking</span><br>   #<span class="hljs-number">3</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">36</span>         <span class="hljs-comment">// net/yury/demo/Demo11DynamicLinking.&quot;&lt;init&gt;&quot;:()V</span><br>   #<span class="hljs-number">4</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">38</span>         <span class="hljs-comment">// net/yury/demo/Demo11DynamicLinking.test:()V</span><br>   #<span class="hljs-number">5</span> = Class              #<span class="hljs-number">39</span>            <span class="hljs-comment">// java/lang/String</span><br>   #<span class="hljs-number">6</span> = String             #<span class="hljs-number">40</span>            <span class="hljs-comment">// 123456</span><br>   #<span class="hljs-number">7</span> = Methodref          #<span class="hljs-number">41.</span>#<span class="hljs-number">42</span>        <span class="hljs-comment">// net/yury/demo/Demo08Slot.test:([Ljava/lang/String;)Ljava/lang/String;</span><br>   #<span class="hljs-number">8</span> = Class              #<span class="hljs-number">43</span>            <span class="hljs-comment">// net/yury/demo/Demo10OperandStack</span><br>   #<span class="hljs-number">9</span> = Methodref          #<span class="hljs-number">8.</span>#<span class="hljs-number">36</span>         <span class="hljs-comment">// net/yury/demo/Demo10OperandStack.&quot;&lt;init&gt;&quot;:()V</span><br>  #<span class="hljs-number">10</span> = Methodref          #<span class="hljs-number">8.</span>#<span class="hljs-number">38</span>         <span class="hljs-comment">// net/yury/demo/Demo10OperandStack.test:()V</span><br>  #<span class="hljs-number">11</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">44</span>         <span class="hljs-comment">// net/yury/demo/Demo11DynamicLinking.test:(I)V</span><br>  #<span class="hljs-number">12</span> = Fieldref           #<span class="hljs-number">45.</span>#<span class="hljs-number">46</span>        <span class="hljs-comment">// java/lang/System.out:Ljava/io/PrintStream;</span><br>  #<span class="hljs-number">13</span> = Methodref          #<span class="hljs-number">47.</span>#<span class="hljs-number">48</span>        <span class="hljs-comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>  #<span class="hljs-number">14</span> = Class              #<span class="hljs-number">49</span>            <span class="hljs-comment">// java/lang/Object</span><br>  #<span class="hljs-number">15</span> = Utf8               &lt;init&gt;<br>  #<span class="hljs-number">16</span> = Utf8               ()V<br>  #<span class="hljs-number">17</span> = Utf8               Code<br>  #<span class="hljs-number">18</span> = Utf8               LineNumberTable<br>  #<span class="hljs-number">19</span> = Utf8               LocalVariableTable<br>  #<span class="hljs-number">20</span> = Utf8               <span class="hljs-keyword">this</span><br>  #<span class="hljs-number">21</span> = Utf8               Lnet/yury/demo/Demo11DynamicLinking;<br>  #<span class="hljs-number">22</span> = Utf8               main<br>  #<span class="hljs-number">23</span> = Utf8               ([Ljava/lang/String;)V<br>  #<span class="hljs-number">24</span> = Utf8               args<br>  #<span class="hljs-number">25</span> = Utf8               [Ljava/lang/String;<br>  #<span class="hljs-number">26</span> = Utf8               test<br>  #<span class="hljs-number">27</span> = Utf8               (I)V<br>  #<span class="hljs-number">28</span> = Utf8               i<br>  #<span class="hljs-number">29</span> = Utf8               I<br>  #<span class="hljs-number">30</span> = Utf8               testString<br>  #<span class="hljs-number">31</span> = Utf8               Ljava/lang/String;<br>  #<span class="hljs-number">32</span> = Utf8               demo<br>  #<span class="hljs-number">33</span> = Utf8               Lnet/yury/demo/Demo10OperandStack;<br>  #<span class="hljs-number">34</span> = Utf8               SourceFile<br>  #<span class="hljs-number">35</span> = Utf8               Demo11DynamicLinking.java<br>  #<span class="hljs-number">36</span> = NameAndType        #<span class="hljs-number">15</span>:#<span class="hljs-number">16</span>        <span class="hljs-comment">// &quot;&lt;init&gt;&quot;:()V</span><br>  #<span class="hljs-number">37</span> = Utf8               net/yury/demo/Demo11DynamicLinking<br>  #<span class="hljs-number">38</span> = NameAndType        #<span class="hljs-number">26</span>:#<span class="hljs-number">16</span>        <span class="hljs-comment">// test:()V</span><br>  #<span class="hljs-number">39</span> = Utf8               java/lang/String<br>  #<span class="hljs-number">40</span> = Utf8               <span class="hljs-number">123456</span><br>  #<span class="hljs-number">41</span> = Class              #<span class="hljs-number">50</span>            <span class="hljs-comment">// net/yury/demo/Demo08Slot</span><br>  #<span class="hljs-number">42</span> = NameAndType        #<span class="hljs-number">26</span>:#<span class="hljs-number">51</span>        <span class="hljs-comment">// test:([Ljava/lang/String;)Ljava/lang/String;</span><br>  #<span class="hljs-number">43</span> = Utf8               net/yury/demo/Demo10OperandStack<br>  #<span class="hljs-number">44</span> = NameAndType        #<span class="hljs-number">26</span>:#<span class="hljs-number">27</span>        <span class="hljs-comment">// test:(I)V</span><br>  #<span class="hljs-number">45</span> = Class              #<span class="hljs-number">52</span>            <span class="hljs-comment">// java/lang/System</span><br>  #<span class="hljs-number">46</span> = NameAndType        #<span class="hljs-number">53</span>:#<span class="hljs-number">54</span>        <span class="hljs-comment">// out:Ljava/io/PrintStream;</span><br>  #<span class="hljs-number">47</span> = Class              #<span class="hljs-number">55</span>            <span class="hljs-comment">// java/io/PrintStream</span><br>  #<span class="hljs-number">48</span> = NameAndType        #<span class="hljs-number">56</span>:#<span class="hljs-number">57</span>        <span class="hljs-comment">// println:(Ljava/lang/String;)V</span><br>  #<span class="hljs-number">49</span> = Utf8               java/lang/Object<br>  #<span class="hljs-number">50</span> = Utf8               net/yury/demo/Demo08Slot<br>  #<span class="hljs-number">51</span> = Utf8               ([Ljava/lang/String;)Ljava/lang/String;<br>  #<span class="hljs-number">52</span> = Utf8               java/lang/System<br>  #<span class="hljs-number">53</span> = Utf8               out<br>  #<span class="hljs-number">54</span> = Utf8               Ljava/io/PrintStream;<br>  #<span class="hljs-number">55</span> = Utf8               java/io/PrintStream<br>  #<span class="hljs-number">56</span> = Utf8               println<br>  #<span class="hljs-number">57</span> = Utf8               (Ljava/lang/String;)<span class="hljs-function">V</span><br><span class="hljs-function"></span><br><span class="hljs-function">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">4</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: iconst_1<br>         <span class="hljs-number">1</span>: anewarray     #<span class="hljs-number">5</span>                  <span class="hljs-comment">// class java/lang/String</span><br>         <span class="hljs-number">4</span>: dup<br>         <span class="hljs-number">5</span>: iconst_0<br>         <span class="hljs-number">6</span>: ldc           #<span class="hljs-number">6</span>                  <span class="hljs-comment">// String 123456</span><br>         <span class="hljs-number">8</span>: aastore<br>         <span class="hljs-number">9</span>: astore_1<br>        <span class="hljs-number">10</span>: aload_1<br>        <span class="hljs-number">11</span>: invokestatic  #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method net/yury/demo/Demo08Slot.test:([Ljava/lang/String;)Ljava/lang/String;</span><br>        <span class="hljs-number">14</span>: astore_2<br>        <span class="hljs-number">15</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">8</span>                  <span class="hljs-comment">// class net/yury/demo/Demo10OperandStack</span><br>        <span class="hljs-number">18</span>: dup<br>        <span class="hljs-number">19</span>: invokespecial #<span class="hljs-number">9</span>                  <span class="hljs-comment">// Method net/yury/demo/Demo10OperandStack.&quot;&lt;init&gt;&quot;:()V</span><br>        <span class="hljs-number">22</span>: astore_3<br>        <span class="hljs-number">23</span>: aload_3<br>        <span class="hljs-number">24</span>: invokevirtual #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method net/yury/demo/Demo10OperandStack.test:()V</span><br>        <span class="hljs-number">27</span>: aload_0<br>        <span class="hljs-number">28</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-number">30</span>: invokevirtual #<span class="hljs-number">11</span>                 <span class="hljs-comment">// Method test:(I)V</span><br>        <span class="hljs-number">33</span>: getstatic     #<span class="hljs-number">12</span>                 <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-number">36</span>: aload_2<br>        <span class="hljs-number">37</span>: invokevirtual #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class="hljs-number">40</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">16</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">17</span>: <span class="hljs-number">10</span><br>        line <span class="hljs-number">18</span>: <span class="hljs-number">15</span><br>        line <span class="hljs-number">19</span>: <span class="hljs-number">23</span><br>        line <span class="hljs-number">20</span>: <span class="hljs-number">27</span><br>        line <span class="hljs-number">21</span>: <span class="hljs-number">33</span><br>        line <span class="hljs-number">22</span>: <span class="hljs-number">40</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">41</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo11DynamicLinking;<br>           <span class="hljs-number">10</span>      <span class="hljs-number">31</span>     <span class="hljs-number">1</span> testString   [Ljava/lang/String;<br>           <span class="hljs-number">15</span>      <span class="hljs-number">26</span>     <span class="hljs-number">2</span>  test   Ljava/lang/String;<br>           <span class="hljs-number">23</span>      <span class="hljs-number">18</span>     <span class="hljs-number">3</span>  demo   Lnet/yury/demo/Demo10OperandStack;<br></code></pre></td></tr></table></figure><blockquote><p>早期绑定和晚期绑定</p></blockquote><p><strong>绑定</strong>是一个字段、方法或类在符号引用被转换成直接引用的过程。</p><p><strong>早期绑定</strong>：如果被调用的目标的类型在编译期间就是确定的，且运行期间保持不变，则这个目标的绑定过程叫早期绑定。</p><p><strong>晚期绑定</strong>：如果被调用的目标的类型在编译期间无法确定，只能在运行期间确定，则这个目标的绑定过程叫晚期绑定。</p><p>对于方法而言，有早期绑定和晚期绑定又叫静态链接和动态链接。</p><p><strong>静态链接</strong>：如果被调用的方法类型在编译期间就是确定下来的，并且运行期间保持不变，这种情况下将调用的方法的符号引用转换为直接引用的过程叫静态链接。</p><p><strong>动态链接</strong>：如果被调用的方法类型在编译期间无法确定，只能在运行期间将调用的方法的符号引用转换为直接引用，这个过程叫动态链接。</p><blockquote><p>虚方法和非虚方法</p></blockquote><p><strong>虚方法</strong>：编译期间无法确定的方法叫虚方法；</p><p><strong>非虚方法</strong>：编译期间就可以确定，且运行期间无法修改的方法，叫非需方法。</p><p>虚方法的调用使用在字节码层面会使用invokevirtual和invokeinterface两个指令；而非虚方法的调用在字节码层面使用invokestatic和invokespecial指令。final方法外除外，final方法的调用仍然使用invokevirtual指令。</p><ul><li>invokestatic：调用静态方法</li><li>invokespecial：调用父类方法、私有方法、构造器方法</li><li>invokevirtual：调用其他普通方法或final方法</li><li>invokeinterface：调用接口方法</li><li>invokedynamic：使用函数式接口或lamdba表达式生成一个对象时使用的指令</li></ul><p>不同方法的调用使用的字节码指令如下。值得注意的是，下面这段代码中，Function接口通过lamdba表达式和new的方式使用的底层指令不一样，lamdba使用invokedynamic，而new实际上是生成了一个匿名内部类<code>Demo12DynamicLinking2$1</code>，并初始化这个匿名内部类，因此使用了invokespecial。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo12DynamicLinking2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interface</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123; System.out.println(<span class="hljs-string">&quot;child&quot;</span>); &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span></span>&#123; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">(Interface demo)</span></span>&#123;<br>        test1();<br>        test2();<br>        test3();<br>        test4();<br>        test5();<br>        test6();<br>        <span class="hljs-keyword">super</span>.test6();<br>        test7();<br>        test8();<br>        demo.test8();<br>        Function&lt;String, String&gt; function1 = s -&gt; &#123; <span class="hljs-keyword">return</span> s; &#125;;<br>        Function&lt;String, String&gt; function2 = <span class="hljs-keyword">new</span> Function&lt;String, String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">apply</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> s;<br>            &#125;<br>        &#125;;<br>        String s1 = function1.apply(<span class="hljs-string">&quot;123&quot;</span>);<br>        String s2 = function2.apply(<span class="hljs-string">&quot;456&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interface</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;parent&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">stack=<span class="hljs-number">3</span>, locals=<span class="hljs-number">6</span>, args_size=<span class="hljs-number">2</span><br>   <span class="hljs-number">0</span>: invokestatic  #<span class="hljs-number">5</span>                  <span class="hljs-comment">// Method test1:()V</span><br>   <span class="hljs-number">3</span>: aload_0<br>   <span class="hljs-number">4</span>: invokespecial #<span class="hljs-number">6</span>                  <span class="hljs-comment">// Method test2:()V</span><br>   <span class="hljs-number">7</span>: aload_0<br>   <span class="hljs-number">8</span>: invokevirtual #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method test3:()V</span><br>  <span class="hljs-number">11</span>: aload_0<br>  <span class="hljs-number">12</span>: invokevirtual #<span class="hljs-number">8</span>                  <span class="hljs-comment">// Method test4:()V</span><br>  <span class="hljs-number">15</span>: aload_0<br>  <span class="hljs-number">16</span>: invokevirtual #<span class="hljs-number">9</span>                  <span class="hljs-comment">// Method test5:()V</span><br>  <span class="hljs-number">19</span>: aload_0<br>  <span class="hljs-number">20</span>: invokevirtual #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method test6:()V</span><br>  <span class="hljs-number">23</span>: aload_0<br>  <span class="hljs-number">24</span>: invokespecial #<span class="hljs-number">11</span>                 <span class="hljs-comment">// Method net/yury/demo/Parent.test6:()V</span><br>  <span class="hljs-number">27</span>: aload_0<br>  <span class="hljs-number">28</span>: invokevirtual #<span class="hljs-number">12</span>                 <span class="hljs-comment">// Method test7:()V</span><br>  <span class="hljs-number">31</span>: aload_0<br>  <span class="hljs-number">32</span>: invokevirtual #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Method test8:()V</span><br>  <span class="hljs-number">35</span>: aload_1<br>  <span class="hljs-number">36</span>: invokeinterface #<span class="hljs-number">14</span>,  <span class="hljs-number">1</span>           <span class="hljs-comment">// InterfaceMethod net/yury/demo/Interface.test8:()V</span><br>  <span class="hljs-number">41</span>: invokedynamic #<span class="hljs-number">15</span>,  <span class="hljs-number">0</span>             <span class="hljs-comment">// InvokeDynamic #0:apply:()Ljava/util/function/Function;</span><br>  <span class="hljs-number">46</span>: astore_2<br>  <span class="hljs-number">47</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">16</span>                 <span class="hljs-comment">// class net/yury/demo/Demo12DynamicLinking2$1</span><br>  <span class="hljs-number">50</span>: dup<br>  <span class="hljs-number">51</span>: aload_0<br>  <span class="hljs-number">52</span>: invokespecial #<span class="hljs-number">17</span>                 <span class="hljs-comment">// Method net/yury/demo/Demo12DynamicLinking2$1.&quot;&lt;init&gt;&quot;:(Lnet/yury/demo/Demo12DynamicLinking2;)V</span><br>  <span class="hljs-number">55</span>: astore_3<br>  <span class="hljs-number">56</span>: aload_2<br>  <span class="hljs-number">57</span>: ldc           #<span class="hljs-number">18</span>                 <span class="hljs-comment">// String 123</span><br>  <span class="hljs-number">59</span>: invokeinterface #<span class="hljs-number">19</span>,  <span class="hljs-number">2</span>           <span class="hljs-comment">// InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;</span><br>  <span class="hljs-number">64</span>: checkcast     #<span class="hljs-number">20</span>                 <span class="hljs-comment">// class java/lang/String</span><br>  <span class="hljs-number">67</span>: astore        <span class="hljs-number">4</span><br>  <span class="hljs-number">69</span>: aload_3<br>  <span class="hljs-number">70</span>: ldc           #<span class="hljs-number">21</span>                 <span class="hljs-comment">// String 456</span><br>  <span class="hljs-number">72</span>: invokeinterface #<span class="hljs-number">19</span>,  <span class="hljs-number">2</span>           <span class="hljs-comment">// InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;</span><br>  <span class="hljs-number">77</span>: checkcast     #<span class="hljs-number">20</span>                 <span class="hljs-comment">// class java/lang/String</span><br>  <span class="hljs-number">80</span>: astore        <span class="hljs-number">5</span><br>  <span class="hljs-number">82</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><blockquote><p>继承和方法重写的本质</p></blockquote><p>java的类可能会有继承关系，而调用一个子类的方法时，JVM怎么知道这个方法是子类重写的方法，还是父类的方法呢。JVM会在编译期做以下操作。</p><ol><li>将该方法所属的对象引用加载到操作数栈（如果调用静态方法则省略这一步）</li><li>找到操作数栈栈顶的第一个元素所执行的对象的实际类型，记作 C</li><li>如果在运行时常量池的类型C中找到参数和返回值类型都和调用的方法相同的方法，则再进行权限校验，如果通过则返回这个方法的直接引用，如果权限校验不通过，则返回java.lang.IllegalAccessError异常；</li><li>如果没找到类型C中没找到这种方法，则按照类继承关系依次往父类执行第3步查找和权限校验。</li><li>如果最终无法正常返回一个方法的直接引用，则抛出异常。</li></ol><p>因此如果子类有这个方法则调用的是子类的方法，如果没有，则调用的是第一个有该方法的父类方法。</p><h4 id="（5）方法返回地址"><a href="#（5）方法返回地址" class="headerlink" title="（5）方法返回地址"></a>（5）方法返回地址</h4><p>正常返回：<font color="Red">方法返回地址存放调用该方法的pc寄存器的值，即返回下一条将要执行的指令的地址。</font></p><p>异常返回：通过异常表来确定，栈帧中一般不保存这部分信息。</p><p>方法返回的本质：</p><ul><li>当前栈帧出栈</li><li>返回到上层方法的局部变量表、操作数栈，将当前方法的返回值压入操作数栈（如果上层方法要使用的话）</li><li>设置pc寄存器的值</li></ul><p>return指令根据返回值类型的不同分为以下几种：</p><ul><li>return：返回void</li><li>ireturn：返回32位的类型，如boolean、byte、short、char、int</li><li>dreturn：返回double</li><li>freturn：返回float</li><li>lreturn：返回long</li><li>areturn：返回引用类型，如所有的类</li></ul><p>异常处理表：</p><p>从<code>from</code>这一行字节码开始，到<code>to</code>这一行字节码，如果出现了<code>type</code>类型，则从<code>target</code>行指令继续执行。如下Exception table所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo09Method</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Demo09Method demo = <span class="hljs-keyword">new</span> Demo09Method();<br>        String s;<br>        <span class="hljs-keyword">try</span>&#123;<br>            s = demo.test1(<span class="hljs-number">100L</span>);<br>            System.out.println(s);<br>        &#125;<span class="hljs-keyword">catch</span> (FileNotFoundException ex)&#123;<br>            System.out.println(Arrays.toString(ex.getStackTrace()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(java.lang.String[])</span></span>;<br>  descriptor: ([Ljava/lang/String;)V<br>  flags: ACC_PUBLIC, ACC_STATIC<br>  Code:<br>    stack=<span class="hljs-number">3</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>       <span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// class net/yury/demo/Demo09Method</span><br>       <span class="hljs-number">3</span>: dup<br>       <span class="hljs-number">4</span>: invokespecial #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method &quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-number">7</span>: astore_1<br>       <span class="hljs-number">8</span>: aload_1<br>       <span class="hljs-number">9</span>: ldc2_w        #<span class="hljs-number">4</span>                  <span class="hljs-comment">// long 100l</span><br>      <span class="hljs-number">12</span>: invokevirtual #<span class="hljs-number">6</span>                  <span class="hljs-comment">// Method test1:(J)Ljava/lang/String;</span><br>      <span class="hljs-number">15</span>: astore_2<br>      <span class="hljs-number">16</span>: getstatic     #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>      <span class="hljs-number">19</span>: aload_2<br>      <span class="hljs-number">20</span>: invokevirtual #<span class="hljs-number">8</span>                  <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>      <span class="hljs-number">23</span>: goto          <span class="hljs-number">40</span><br>      <span class="hljs-number">26</span>: astore_3<br>      <span class="hljs-number">27</span>: getstatic     #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>      <span class="hljs-number">30</span>: aload_3<br>      <span class="hljs-number">31</span>: invokevirtual #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method java/io/FileNotFoundException.getStackTrace:()[Ljava/lang/StackTraceElement;</span><br>      <span class="hljs-number">34</span>: invokestatic  #<span class="hljs-number">11</span>                 <span class="hljs-comment">// Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;</span><br>      <span class="hljs-number">37</span>: invokevirtual #<span class="hljs-number">8</span>                  <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>      <span class="hljs-number">40</span>: <span class="hljs-keyword">return</span><br>    Exception table:<br>       from    to  target type<br>           <span class="hljs-number">8</span>    <span class="hljs-number">23</span>    <span class="hljs-number">26</span>   Class java/io/FileNotFoundException<br>    LineNumberTable:<br>      line <span class="hljs-number">10</span>: <span class="hljs-number">0</span><br>      line <span class="hljs-number">13</span>: <span class="hljs-number">8</span><br>      line <span class="hljs-number">14</span>: <span class="hljs-number">16</span><br>      line <span class="hljs-number">17</span>: <span class="hljs-number">23</span><br>      line <span class="hljs-number">15</span>: <span class="hljs-number">26</span><br>      line <span class="hljs-number">16</span>: <span class="hljs-number">27</span><br>      line <span class="hljs-number">18</span>: <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><h4 id="（6）一些附加信息"><a href="#（6）一些附加信息" class="headerlink" title="（6）一些附加信息"></a>（6）一些附加信息</h4><p>略。</p><h4 id="（7）问题"><a href="#（7）问题" class="headerlink" title="（7）问题"></a>（7）问题</h4><blockquote><p>栈相关的报错有哪些？</p></blockquote><p>stackoverflow，栈溢出，方法调用的次数太多以致于栈耗费的空间超过了我们设置的栈大小，可以通过修改-Xss设置栈大小。</p><p>outofmemory，内存不足，栈空间设置足够大，但是方法调用过多，导致整体内存不足。（OOM很少出现在栈空间发生）</p><blockquote><p>调整栈空间大小，可以保证不出现溢出吗？</p></blockquote><p>不能。若使用固定大小的栈，即使调整了栈空间大小，他也是确定的；而程序方法的调用如在出现递归的情况下，调用次数是不确定的，有可能会出现栈溢出的情况。</p><blockquote><p>分配栈空间内存越大越好吗？</p></blockquote><p>服务器资源是有效的，栈空间内存分配越大，则其他资源（如堆）分配到的空间就受限。应根据服务器和应用程序的实际情况分配。</p><blockquote><p>垃圾回收会设计到栈空间吗？</p></blockquote><p>不会，栈没有垃圾回收。</p><blockquote><p>java对象一定都是在对空间上创建的吗？</p></blockquote><p>不一定，栈也可以创建对象。堆那边再聊。</p><blockquote><p><font color="Red">局部变量是线程安全的吗？</font></p></blockquote><p>若该局部变量是方法内部产生，且方法内部销毁的，则这个局部变量是线程安全的。</p><p>若该局部变量以参数形式传入方法，或者作为返回值返回出去的，则这个局部变量是线程不安全的。</p><p><strong>即只要这个局部变量的生命周期完全在这个方法内，则是线程安全的；否则是线程不安全的。</strong></p><p>一个对象的指针或引用被多个方法或线程使用，即称这个对象出现了<strong>逃逸</strong>（Escape）。全局变量如类属性和私有属性可能会被多个方法或线程使用，这种线程安全问题很常见；而局部变量如果其作用域不仅限于该方法，还被其他方法或线程使用了，即出现了逃逸，则也可能会存在线程安全问题。具体见后面的<strong>逃逸分析</strong>。</p><p>最稳妥的方式是，避免局部变量逃逸到其他方法或线程中，如</p><ul><li>方法参数尽量使用线程安全的对象，或者不可变对象（如String），或者使用私有属性的方式代替传入参数的形式来定义方法。</li><li>避免将局部变量作为方法返回值，或者以一个线程安全的或不可变的对象的形式返回（如返回<code>StringBuilder.ToString()</code>）。</li><li>坚守一个原则：对象的作用域尽量维持在使用它的最小作用域</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo13ThreadSafe</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        method2();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>                sb.append(<span class="hljs-string">&#x27;a&#x27;</span>);<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; add(sb)).start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(sb.toString());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(StringBuilder sb)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">10000</span>; i++) &#123;<br>            sb.append(<span class="hljs-string">&#x27;b&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        StringBuilder sb = add2();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>                sb.append(<span class="hljs-string">&#x27;1&#x27;</span>);<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>                sb.append(<span class="hljs-string">&#x27;2&#x27;</span>);<br>            &#125;<br>        &#125;).start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(sb.toString());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StringBuilder <span class="hljs-title">add2</span><span class="hljs-params">()</span></span>&#123;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        sb.append(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-keyword">return</span> sb;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、本地方法栈"><a href="#5、本地方法栈" class="headerlink" title="5、本地方法栈"></a>5、本地方法栈</h3><p><font color="Red">本地方法栈（Nativa Method Stack）用于管理本地方法的调用，本地方法栈也是线程私有的。</font></p><p>本地方法：使用native关键字修饰的方法，由C/C++实现。</p><p>本地方法栈的大小和异常种类和普通的JVM栈是相同的，允许被实现成固定大小或者动态扩展的，溢出和OOM都有可能存在。</p><p>本地方法栈的具体做法就是执行本地方法时，在本地方法栈中压入本地方法，然后让执行引擎从本地方法库中加载这个本地方法，再让本地方法执行，最后本地方法栈栈顶元素出栈。</p><p><strong>本地方法接口</strong>就是本地方法运行时和JVM沟通的接口，<strong>本地方法库</strong>就是java所有本地方法的集合。</p><p><font color="Red">当某个线程调用本地方法时，本地方法执行的权限和JVM有着相同的权限。</font></p><ul><li>本地方法可以通过本地方法接口来访问JMV内部的运行时数据区。</li><li>本地方法可以直接使用本地处理器中的寄存器</li><li>本地方法可以直接从本地内存堆中分配任意数量的内存。</li></ul><p>并不是所有的JVM都支持本地方法，因为JVM规范中并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等，如果JVM产品不打算支持本地方法，那么无需实现本地方法栈也是可以的。</p><p>在HotSpot JVM中，直接将JVM栈和本地方法栈合二为一。</p><h3 id="6、JVM堆"><a href="#6、JVM堆" class="headerlink" title="6、JVM堆"></a>6、JVM堆</h3><ul><li><p>堆是JVM进程私有的，一个JVM进程只有一个堆内存，堆也是JVM内存管理的核心区域。</p></li><li><p>堆内存的大小是可以调节的。</p></li><li><p>JVM规范规定，堆可以处于物理上不连续的内存空间中，但在逻辑上他应该被视为连续的。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>postgresql</title>
    <link href="/database/postgresql/postgresql/"/>
    <url>/database/postgresql/postgresql/</url>
    
    <content type="html"><![CDATA[<h2 id="一、postgresql安装部署"><a href="#一、postgresql安装部署" class="headerlink" title="一、postgresql安装部署"></a>一、postgresql安装部署</h2><p>postgresql版本：11.13</p><p>源码下载路径（最好下载源码，自己编译）：<a href="https://www.postgresql.org/ftp/source/v11.13/">PostgreSQL: File Browser</a></p><p>安装过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br>wget https://ftp.postgresql.org/pub/source/v11.13/postgresql-11.13.tar.gz<br>tar -xzf postgresql-11.13.tar.gz<br>cd postgresql-11.13.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>./configure<br><span class="hljs-meta">#</span><span class="bash"> 上面一步可能会出现library not found问题，安装对应的lib即可，经常碰到需要安装以下两个lib：</span><br><span class="hljs-meta">#</span><span class="bash"> sudo apt install libreadline-dev</span><br><span class="hljs-meta">#</span><span class="bash"> sudo apt install zlib1g-dev</span><br>make<br><span class="hljs-meta">#</span><span class="bash"> 上面这一步如果成功后会显示：All of PostgreSQL successfully made. Ready to install.</span><br>sudo make install<br><span class="hljs-meta">#</span><span class="bash"> 上面这一步成功后会显示：Postgresql installation complete，默认安装在/usr/<span class="hljs-built_in">local</span>/pgsql目录下</span><br></code></pre></td></tr></table></figure><p>配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/pgsql<br>sudo mkdir data<br>sudo chown yury /usr/local/pgsql/data # 修改data目录的所有者为yury，或者你自己新建的postgresql用户<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建环境变量，将以下两行写入/etc/profile文件中</span><br>export PGHOME=/usr/local/pgsql<br>export PGDATA=/usr/local/pgsql/data<br>export PATH=$&#123;PATH&#125;:$&#123;PG_HOME&#125;/bin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重新加载环境变量</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><p>初始化数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/pgsql<br>bin/initdb<br><span class="hljs-meta">#</span><span class="bash"> 出现以下输出时，说明初始化成功</span><br><span class="hljs-meta">#</span><span class="bash"> Success. You can now start the database server using:</span><br><span class="hljs-meta">#</span><span class="bash">     bin/pg_ctl -D /usr/<span class="hljs-built_in">local</span>/pgsql/data -l logfile start</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动数据库</span><br>bin/pg_ctl start<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建一个postgres用户</span><br>bin/createuser postgres<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以postgres用户登录</span><br>bin/psql postgres<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改当前用户（postgres）的密码</span><br>\password<br></code></pre></td></tr></table></figure><p>配置网络以便其他客户端可以连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi bin/pg_hba.conf<br><span class="hljs-meta">#</span><span class="bash"> 修改下面这一行为第二行的值</span><br><span class="hljs-meta">#</span><span class="bash"> host    all    127.0.0.1/32    trust</span><br><span class="hljs-meta">#</span><span class="bash"> host    all    0.0.0.0/0       trust</span><br><br>vi bin/postgresql.conf<br><span class="hljs-meta">#</span><span class="bash"> 修改下面这一行为第二行的值，并且取消注释这个配置</span><br><span class="hljs-meta">#</span><span class="bash"> listen_addresses = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span></span><br><span class="hljs-meta">#</span><span class="bash"> listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span></span><br><br>bin/pg_ctl restart # 重启服务<br></code></pre></td></tr></table></figure><h2 id="二、MySQL安装部署"><a href="#二、MySQL安装部署" class="headerlink" title="二、MySQL安装部署"></a>二、MySQL安装部署</h2><p>MySQL版本：8.0.25</p><p>使用apt安装</p><p>数据库目录：/var/lib/mysql/</p><p>配置文件：/usr/share/mysql-8.0（命令及配置文件），/etc/mysql（如my.cnf）</p><p>相关命令：/usr/bin（mysqladmin、mysqldump等命令）和/usr/sbin</p><p>启动脚本：/etc/init.d/mysql（启动脚本文件mysql的目录）</p>]]></content>
    
    
    <categories>
      
      <category>postgresql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flink</title>
    <link href="/bigdata/flink/flink-study/"/>
    <url>/bigdata/flink/flink-study/</url>
    
    <content type="html"><![CDATA[<p>java版本：1.8</p><p>Flink版本：1.13.6</p><h2 id="一、Flink介绍"><a href="#一、Flink介绍" class="headerlink" title="一、Flink介绍"></a>一、Flink介绍</h2><h3 id="1、Flink是什么"><a href="#1、Flink是什么" class="headerlink" title="1、Flink是什么"></a>1、Flink是什么</h3><p>Apache Flink is a framework and distributed processing engine for stateful computations over <em>unbounded and bounded</em> data streams. Flink has been designed to run in <em>all common cluster environments</em>, perform computations at <em>in-memory speed</em> and at <em>any scale</em>.</p><p>Apache Flink是一个<font color="Red">框架</font>和<font color="Red">分布式</font>处理引擎，用于对<font color="Red">无界和有界数据流</font>进行<font color="Red">状态计算</font>。</p><p><font color="Red"><strong>注意</strong></font>：flink应用的计算对象是数据流，即一个一个的源源不断的在连续时间内发过来的数据，并且在接收到数据时做实时计算。</p><h3 id="2、哪些行业需要处理流数据"><a href="#2、哪些行业需要处理流数据" class="headerlink" title="2、哪些行业需要处理流数据"></a>2、哪些行业需要处理流数据</h3><ul><li>电商和市场营销：数据报表、广告投放、业务流程需要</li><li>物联网（IOT）：传感器实时数据采集和显示、实时警报、交通运输业</li><li>电信业：基站流量调配</li><li>银行和金融业：实时计算和通知推送，实时监测异常行为</li></ul><h3 id="3、Flink的特点"><a href="#3、Flink的特点" class="headerlink" title="3、Flink的特点"></a>3、Flink的特点</h3><ul><li>事件驱动。Flink的运行是由数据的到来而触发的，并且作出实时处理。</li><li>基于流的世界观。在Flink中，一切都是基于流组成的，离线数据可以视为有界的流；实时数据可以视为无界的流。</li><li>分层API。最顶层是SQL/table API（daynamic tabls），其次是DataStream API（streams），最底层是Process Function（events、state、time）</li></ul><p><img src="/images/Flink%E7%9A%84%E4%BC%98%E7%82%B9.png"></p><h3 id="4、Flink对比Spark-Streaming"><a href="#4、Flink对比Spark-Streaming" class="headerlink" title="4、Flink对比Spark Streaming"></a>4、Flink对比Spark Streaming</h3><ul><li>Spark Streaming的流处理其实是转换成<strong>微批</strong>，再做处理。而Flink是完全的流处理。因此Flink的延迟更低。</li><li>数据模型上，Spark采用的RDD模型，Spark Stream的DStream实际上也是一组组小批数据集RDD的集合。而Flink的基本数据模型是流数据，以及<font color="Red">事件（Event）序列</font>。</li><li>运行时架构，Spark是批计算，而Flink是标准的流计算，一个时间在一个节点处理完后可以直接发给下一个节点处理。</li></ul><p>5、java版本依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">flink.version</span>&gt;</span>1.13.6<span class="hljs-tag">&lt;/<span class="hljs-name">flink.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- flink java依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- flink java的另外一个依赖，依赖版本号还是和上面那个一致，而2.12是指scale版本，因为底层有一部分是用scala写的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1.10以上版本的flink必须要有这个依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-clients_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、简单使用"><a href="#二、简单使用" class="headerlink" title="二、简单使用"></a>二、简单使用</h2><h3 id="1、文件数据批处理"><a href="#1、文件数据批处理" class="headerlink" title="1、文件数据批处理"></a>1、文件数据批处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury;<br><br><span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;<br><span class="hljs-keyword">import</span> org.apache.flink.api.java.DataSet;<br><span class="hljs-keyword">import</span> org.apache.flink.api.java.ExecutionEnvironment;<br><span class="hljs-keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;<br><span class="hljs-keyword">import</span> org.apache.flink.util.Collector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批处理word count</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1WordCount</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 创建执行环境</span><br>        ExecutionEnvironment executionEnvironment = ExecutionEnvironment.getExecutionEnvironment();<br><br>        <span class="hljs-comment">// 从文件中读取数据</span><br>        String path = <span class="hljs-string">&quot;D:\\Adocument\\bigdata\\Flink\\flink-study\\src\\main\\resources\\demo1.txt&quot;</span>;<br>        DataSet&lt;String&gt; stringDataSource = executionEnvironment.readTextFile(path);<br><br>        <span class="hljs-comment">// 对数据集进行处理，按空格分词展开</span><br>        DataSet&lt;Tuple2&lt;String, Integer&gt;&gt; res = stringDataSource.flatMap(<span class="hljs-keyword">new</span> MyFlatMapper())<br>                .groupBy(<span class="hljs-number">0</span>) <span class="hljs-comment">// 按照第0个位置的值group by</span><br>                .sum(<span class="hljs-number">1</span>); <span class="hljs-comment">// group后分组统计第1个位置的值的sum</span><br>        res.print();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFlatMapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FlatMapFunction</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Tuple2</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Integer</span>&gt;&gt;</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flatMap</span><span class="hljs-params">(String value, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            <span class="hljs-comment">// 按空格分词</span><br>            String[] words = value.split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">for</span> (String word: words) &#123;<br>                collector.collect(<span class="hljs-keyword">new</span> Tuple2&lt;&gt;(word, <span class="hljs-number">1</span>));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、文件数据流处理"><a href="#2、文件数据流处理" class="headerlink" title="2、文件数据流处理"></a>2、文件数据流处理</h3><p>一个数据集，可以看作一个有界的数据流，因此也可以用数据流处理数据集。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury;<br><br><span class="hljs-keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 流处理word count</span><br><span class="hljs-comment"> * 同样，先创建执行环境，再读取数据，再基于数据流进行数据处理，最后打印输出</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo2WordCount</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br>        env.setParallelism(<span class="hljs-number">16</span>); <span class="hljs-comment">// 设置并行的操作的线程数</span><br><br>        String path = <span class="hljs-string">&quot;D:\\Adocument\\bigdata\\Flink\\flink-study\\src\\main\\resources\\demo1.txt&quot;</span>;<br>        DataStreamSource&lt;String&gt; stringDataSource = env.readTextFile(path);<br><br>        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; res = stringDataSource.flatMap(<span class="hljs-keyword">new</span> Demo1WordCount.MyFlatMapper())<br>                .keyBy(<span class="hljs-number">0</span>)<br>                .sum(<span class="hljs-number">1</span>);<br>        res.print();<br>        env.execute();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、数据流流处理"><a href="#3、数据流流处理" class="headerlink" title="3、数据流流处理"></a>3、数据流流处理</h3><p>生产环境中，大部分数据应该来源于<font color="Red">网络和kafka推送</font>，而这两种实际上是无界的数据流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury;<br><br><span class="hljs-keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;<br><span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从socket中读取流数据，并对单词进行计数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo3SocketStream</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br>        env.setParallelism(<span class="hljs-number">4</span>); <span class="hljs-comment">// 设置并行的操作的线程数</span><br><br>        <span class="hljs-comment">// 在linux中使用nc -lk 7777命令，nc即netcat，是一个基于网络连接发送纯文本数据的功能。</span><br>        DataStream&lt;String&gt; inputDataStream = env.socketTextStream(<span class="hljs-string">&quot;192.168.141.141&quot;</span>, <span class="hljs-number">7777</span>);<br><br>        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; res = inputDataStream.flatMap(<span class="hljs-keyword">new</span> Demo1WordCount.MyFlatMapper())<br>                .keyBy(<span class="hljs-number">0</span>)<br>                .sum(<span class="hljs-number">1</span>);<br>        res.print();<br>        env.execute();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">值得注意的是，当我们的断开我们的nc进程后，flink程序也自动结束了，可能是因为socket连接断开了。</font></p><h2 id="三、安装配置"><a href="#三、安装配置" class="headerlink" title="三、安装配置"></a>三、安装配置</h2><h3 id="1、下载启动"><a href="#1、下载启动" class="headerlink" title="1、下载启动"></a>1、下载启动</h3><p>国内镜像下载地址如下：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/flink/">Index of /apache/flink (tsinghua.edu.cn)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.13.6/flink-1.13.6-bin-scala_2.12.tgz<br></code></pre></td></tr></table></figure><p>启动standalone模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd flink-1.13.6/<br>bin/start-cluster.sh # 启动<br>bin/stop-cluster.sh # 停止<br>bin/sql-client.sh embedded # 启动sql客户端<br></code></pre></td></tr></table></figure><p>web管理界面：<a href="http://192.168.141.141:8081/">http://192.168.141.141:8081/</a></p><h3 id="2、配置（重要！）"><a href="#2、配置（重要！）" class="headerlink" title="2、配置（重要！）"></a>2、配置（重要！）</h3><table><thead><tr><th>配置</th><th>默认值</th><th>解释</th></tr></thead><tbody><tr><td>jobmanager.execution.failover-strategy</td><td>region</td><td></td></tr><tr><td>jobmanager.memory.heap.size</td><td>1073741824b</td><td>JVM堆内存</td></tr><tr><td>jobmanager.memory.jvm-metaspace.size</td><td>268435456b</td><td>jvm-metaspace内存</td></tr><tr><td>jobmanager.memory.jvm-overhead.max</td><td>201326592b</td><td>jvm-overhead最大内存</td></tr><tr><td>jobmanager.memory.jvm-overhead.min</td><td>201326592b</td><td>jvm-overhead最小内存</td></tr><tr><td>jobmanager.memory.off-heap.size</td><td>134217728b</td><td>JVM堆外内存</td></tr><tr><td>jobmanager.memory.process.size</td><td>1600m</td><td>job管理器的总内存</td></tr><tr><td>jobmanager.rpc.address</td><td>localhost</td><td>rpc通信host</td></tr><tr><td>jobmanager.rpc.port</td><td>6123</td><td>rpc通信port</td></tr><tr><td>parallelism.default</td><td>8</td><td>每个task默认的并行线程数</td></tr><tr><td>taskmanager.memory.process.size</td><td>1728m</td><td>task管理器的总内存</td></tr><tr><td>taskmanager.numberOfTaskSlots</td><td>8</td><td>每个taskmanager中的slot数量</td></tr><tr><td>web.tmpdir</td><td>/tmp/flink-web-xxxx</td><td>web界面临时数据存储目录</td></tr></tbody></table><h3 id="3、命令大全（todo-持续完善）"><a href="#3、命令大全（todo-持续完善）" class="headerlink" title="3、命令大全（todo 持续完善）"></a>3、命令大全（todo 持续完善）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 提交一个job，-c参数为main方法，-p为提交jon时设置的parallelism，jar文件为job任务程序包，后面跟着的参数都是该job程序的参数，还是其他很多参数，可以具体使用bin/flink run --helo查看</span><br>bin/flink run -c net.yury.Demo3SocketStream -p 3 /home/yury/flink-1.13.6/job/flink-study-1.0-SNAPSHOT.jar 192.168.141.141 7777<br><br>bin/flink run -c net.yury.Demo1WordCount -p 3 /home/yury/flink-1.13.6/job/flink-study-1.0-SNAPSHOT.jar &quot;/disk4/flink-1.13.6/README.txt&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看正在运行的job</span><br>bin/flink list<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 停止一个正在运行的job</span><br>bin/flink cancel c433217551957f31979492ff1f8ed5f5<br></code></pre></td></tr></table></figure><h3 id="4、提交job"><a href="#4、提交job" class="headerlink" title="4、提交job"></a>4、提交job</h3><h4 id="（1）web界面提交"><a href="#（1）web界面提交" class="headerlink" title="（1）web界面提交"></a>（1）web界面提交</h4><p>在web界面中的submit new job界面可以提交命令。</p><h4 id="（2）命令行提交"><a href="#（2）命令行提交" class="headerlink" title="（2）命令行提交"></a>（2）命令行提交</h4><p>具体见提交job的命令。</p><h2 id="四、部署"><a href="#四、部署" class="headerlink" title="四、部署"></a>四、部署</h2><p>根据依赖的外部资源管理平台，可以有以下几种部署模式：</p><ul><li><p>standalone：即独立部署，不依赖外部资源管理平台。standalone模式支持session-cluster模式和Application模式部署。</p></li><li><p>yarn：依赖yarn作为资源管理平台的部署模式。yarn模式支持session-cluster模式、per-job-cluster模式和Application模式部署。</p></li><li><p>k8s：略</p></li></ul><p>分布式部署，配置修改：</p><ul><li>将<code>conf/flink-conf.yaml</code>中的<code>jobmanager.rpc.address</code>修改为jobmanager节点的host</li><li>将<code>conf/workers</code>中的host修改成taskmanager节点的host</li></ul><p>以下介绍yarn模式下的几种部署模式</p><h3 id="1、session-cluster模式"><a href="#1、session-cluster模式" class="headerlink" title="1、session-cluster模式"></a>1、session-cluster模式</h3><p>先启动一个共享的yarn session集群，然后提交job，接着job会向yarn session申请资源。如果资源不足了，则要等待资源释放。所有资源共享Dispatcher和ResourceManager。即资源共享。<font color="Red">适合小规模部署，任务运行时间通常较短。</font></p><p><img src="/images/session-cluster%E6%A8%A1%E5%BC%8F.png"></p><p><strong>部署：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动hadoop集群，hadoop根目录下</span><br>sbin/start-dfs.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动yarn集群，flink根目录下，其中的参数参见hadoop的yarn配置</span><br>bin/yarn-session.sh -n 2 -s 2 -jm 1024 -tm 1024 -nm test -d<br></code></pre></td></tr></table></figure><p><font color="Red">当flink部署了这种模式时，提交job的命令格式不变，但是会使用这种模式运行，否则默认使用standalone模式。</font></p><p>job管理还是在flink的web界面管理，而yarn-session的管理要在hadoop的yarn web界面上管理。</p><h3 id="2、per-job-cluster模式"><a href="#2、per-job-cluster模式" class="headerlink" title="2、per-job-cluster模式"></a>2、per-job-cluster模式</h3><p>每个job都对应一个集群，每提交一个job，都会根据自身情况向yarn申请资源，只要yarn容器有资源，就可以运行。独享Dispatcher和ResourceManager。<font color="Red">适合大规模部署，长时间运行。</font></p><p><img src="/images/per-job-cluster%E6%A8%A1%E5%BC%8F.png"></p><p>这种模式的部署只要启动hadoop集群即可，然后直接提交job。</p><p><font color="Red">但是提交job的命令要加上<code>-m yarn-cluster</code>参数。</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/flink run -d -t yarn-per-job -c net.yury.Demo3SocketStream -p 3 /home/yury/flink-1.13.6/job/flink-study-1.0-SNAPSHOT.jar 192.168.141.141 7777<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 或者</span><br>bin/flink run -m yarn-cluster -c net.yury.Demo3SocketStream -p 3 /home/yury/flink-1.13.6/job/flink-study-1.0-SNAPSHOT.jar 192.168.141.141 7777<br></code></pre></td></tr></table></figure><h3 id="3、Application模式"><a href="#3、Application模式" class="headerlink" title="3、Application模式"></a>3、Application模式</h3><p>application模式就是一个应用程序对应一个集群。</p><h2 id="五、Flink架构"><a href="#五、Flink架构" class="headerlink" title="五、Flink架构"></a>五、Flink架构</h2><h3 id="1、四大组件"><a href="#1、四大组件" class="headerlink" title="1、四大组件"></a>1、四大组件</h3><h4 id="JobManager"><a href="#JobManager" class="headerlink" title="JobManager"></a>JobManager</h4><ul><li>控制应用程序的主进程，每提交一个job都会分配一个JobManager，这个JobManager只用来管理这个Job</li><li>JobManager接收要执行的应用程序，包括作业图（JobGraph）、逻辑数据图（logical dataflow graph）和打包了所有类、库和其他资源的jar包</li><li>把JobGraph转换为一个物理层面的数据流图，即执行图（ExecutionGraph），即web界面展示的Task执行图</li><li>向ResourceManager申请资源（slot），把执行图分发给TaskManager</li><li>运行时，JobManager还会负责所有需要中央协调的操作，比如检查点（checkpoints）的协调等</li></ul><h4 id="TaskManager"><a href="#TaskManager" class="headerlink" title="TaskManager"></a>TaskManager</h4><ul><li>Flink工作进程中，通常有多个TaskManager管理Task，TaskManager包含了一定数量的slot，slot的数量限制了TaskManager能够执行的任务数</li><li>启动后，TaskManager会向ResourceManager注册他的slot，注册成功后，TaskManager会将一个或多个slot提供给JobManager调用，JobManager就可以向slot分配Task去执行</li><li>运行中，TaskManager之间可以交换数据</li></ul><h4 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a>ResourceManager</h4><ul><li>主要负责管理TaskManager的slot，slot是Flink定义的处理资源单元</li><li>Flink为不同的环境提供了不同的ResourceManager，如yarn、k8s和standalone等</li><li>当JobManager申请资源时，ResourceManager会将有空闲slot的TaskManager分配给JobManager。如果ResourceManager没有足够的slot时，它还可以向资源平台发起会话，以提供启动TaskManager进程的容器。</li></ul><h4 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h4><ul><li>可以跨作业运行，它为应用提供了rest接口</li><li>提交job后，Dispatcher分发器就会启动并将job移交给一个JobManager</li><li>Dispatcher也会启动一个web ui，用来实时展示和监控执行的信息</li><li>Dispatcher在应用中不是必须的，取决于job的提交运行方式</li></ul><h3 id="2、job提交流程"><a href="#2、job提交流程" class="headerlink" title="2、job提交流程"></a>2、job提交流程</h3><h4 id="standalone模式"><a href="#standalone模式" class="headerlink" title="standalone模式"></a>standalone模式</h4><p><img src="/images/job%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B-standalone.png"></p><h4 id="per-jon-cluster模式"><a href="#per-jon-cluster模式" class="headerlink" title="per-jon-cluster模式"></a>per-jon-cluster模式</h4><p><img src="/images/job%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B-yarn.png"></p><h3 id="3、任务调度原理"><a href="#3、任务调度原理" class="headerlink" title="3、任务调度原理"></a>3、任务调度原理</h3><p><img src="/images/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%8E%9F%E7%90%86.png"></p><h3 id="4、parallelism"><a href="#4、parallelism" class="headerlink" title="4、parallelism"></a>4、parallelism</h3><p>parallelism是指并行执行的子任务个数，即一个任务会被拆分成几个子任务去并行执行。这很像在处理器处理多线程任务一样，当cpu只有一核时，多线程实际上时切换运行的，当cpu有多核时，多线程之间就可以实现并行运行。因此<font color="Red">parallelism最大最好设置为服务器cpu的核心数</font>。</p><p>一共有四处可以配置parallelism参数：</p><table><thead><tr><th>配置</th><th>优先级（从小到大，优先级递减）</th></tr></thead><tbody><tr><td>代码中每一个task的parallelism值</td><td>1</td></tr><tr><td>代码中environment设置的全局parallelism值</td><td>2</td></tr><tr><td>提交任务时给定的parallelism值（web界面和命令行都可以设置该参数）</td><td>3</td></tr><tr><td>配置文件中的parallelism值</td><td>4</td></tr></tbody></table><h3 id="5、parallelism和slot"><a href="#5、parallelism和slot" class="headerlink" title="5、parallelism和slot"></a>5、parallelism和slot</h3><p>Flink中每个TaskManager都是一个JVM进程，它可能会在独立的线程上执行一个或多个子任务。而TaskManager管理的slot的数量则是该进程的parallelism可以设置的最大数量，当parallelism大于slot时，就会有部分子任务没有slot来运行，就会一直等待。</p><p><font color="Red">和上面所说的，TaskManager对应进程，parallelism对应该进程启动的线程数，slot对应服务器的cpu核心数。在操作系统中，当线程数大于cpu核心数时，有部分线程会切换运行。而在Flink中，当parallelism大于slot数量时，Flink会一致等待。</font></p><p>由于parallelism的存在，一个TaskManager要分配并行子任务。那么在分配slot时，传统方式是把每一个子任务和一个slot绑定在一起，如下图所示。但是实际上TaskManager存在多个，因此需要的总slot数量为每个TaskManager下的parallelism加总，需要的slot量多。</p><p><img src="/images/TaskManager%E5%92%8CSlot.png"></p><p>而Flink允许不同类型的子任务共享slot，这样可以做到让其中某一个slot保存这个作业的整个pipeline，而且还可以减少slot的占用。如下图所示。</p><p><img src="/images/TaskManager%E5%92%8CSlot2.png"></p><p>然而上上图也并不是不能实现的，可以在代码中设置不同任务的slot共享组，当设置的slot共享组名称不同时，即他们应该分配在不同的slot中运行。<font color="Red">当一个任务没设置共享组名称时，它和前一个步骤的任务的slot共享组名称相同，第一个任务的默认的名称为default。如下这段代码需要的slot数量为5。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">DataStream&lt;String&gt; inputDataStream = env.socketTextStream(host, port);<br><br>SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; res = inputDataStream.flatMap(<span class="hljs-keyword">new</span> Demo1WordCount.MyFlatMapper()) <span class="hljs-comment">// 默认slot共享组名称为default</span><br>        .keyBy(<span class="hljs-number">0</span>)<br>        .sum(<span class="hljs-number">1</span>).setParallelism(<span class="hljs-number">3</span>).slotSharingGroup(<span class="hljs-string">&quot;red&quot;</span>); <span class="hljs-comment">// 设置slot共享组名称为red</span><br>res.print().setParallelism(<span class="hljs-number">1</span>).slotSharingGroup(<span class="hljs-string">&quot;green&quot;</span>); <span class="hljs-comment">// 设置slot共享组名称为green</span><br>env.execute();<br></code></pre></td></tr></table></figure><p><font color="Red">一个job需要的slot数量为：先将slot按slot名称分组，取每个组里面的最大parallelism，最后对这些parallelism加总，即是这个job需要的slot的数量。</font></p><h3 id="6、程序与数据流"><a href="#6、程序与数据流" class="headerlink" title="6、程序与数据流"></a>6、程序与数据流</h3><p>在程序运行时，Flink上运行的程序会被映射成”逻辑数据流“（dataflow），它包含了三部分：</p><ul><li>每个dataflow以一个或多个sources开始</li><li>中间的转换运算（transformation）和dataflow中的operator是一一对应的关系</li><li>最后以一个或多个sink输出结束</li></ul><p>因此，整个数据流就是一个有向无环的数据流图。</p><p>而这个数据流图转换为具体的执行流图，由以下四步组成：</p><ul><li>StreamGraph：根据用户写的stream api生成的最初的图</li><li>JobGraph：StreamGraph经slot组合等等优化的来的，提交给JobManager</li><li>ExecutionGraph：这个是JobGraph的并行版本，调度最核心的数据结构</li><li>物理执行图：部署在TaskManager上的具体的执行”图“，并不是一个具体的数据结构</li></ul><p><img src="/images/%E6%89%A7%E8%A1%8C%E5%9B%BE%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B.png"></p><h3 id="7、数据传输形式"><a href="#7、数据传输形式" class="headerlink" title="7、数据传输形式"></a>7、数据传输形式</h3><h4 id="one-to-one"><a href="#one-to-one" class="headerlink" title="one-to-one"></a>one-to-one</h4><p>stream维护着分区以及元素的顺序。一般简单的操作可以做到，如map、filter、flatmap等</p><h4 id="Reditributing"><a href="#Reditributing" class="headerlink" title="Reditributing"></a>Reditributing</h4><p>stream的的分区会发生改变，如keyBy操作会根据hashcode进行重分区，而broadcast和rebalance会随机重新分区，这些操作都将打乱stream的顺序。</p><h3 id="8、任务链"><a href="#8、任务链" class="headerlink" title="8、任务链"></a>8、任务链</h3><p>Flink采用了一种称为任务链的优化技术，当两个算子之间满足以下三个条件时，这两个算子会组合成一个task，这样可以在特定条件下减少本地通信的开销。为了满足任务链的要求，必须满足以下三个条件：</p><ul><li>都是one-to-one模式</li><li>parallelism相同</li><li>处于同一个slot组下</li></ul><h2 id="六、StreamAPI"><a href="#六、StreamAPI" class="headerlink" title="六、StreamAPI"></a>六、StreamAPI</h2><h2 id="七、WindowAPI"><a href="#七、WindowAPI" class="headerlink" title="七、WindowAPI"></a>七、WindowAPI</h2><p>StreamAPI是来一个处理一个，而window是将到来的数据划分到某个window中，然后对window中的这一批数据进行处理。</p><p>窗口类型：</p><ul><li>时间窗口（TimeWindow）：时间间隔左闭右开<ul><li>滚动时间窗口（TumblingTimeWindow），参数：窗口大小（window size）</li><li>滑动时间窗口（SlidingTimeWindow），参数：窗口大小（window size）、滑动距离（slide size）</li><li>会话窗口（SessionWindow），相邻数据之间到来的时间差小于设定的会话间隙参数，则认为这两个数据同属于一个窗口。超过这个绘画间隙参数的时间没有收到新数据时，下一个新数据就会归属于下一个新的窗口。参数：会话间隙（session gap）</li></ul></li><li>计数窗口（CountWindow）<ul><li>滚动计数窗口（TumblingCountWindow）</li><li>滑动计数窗口（SlidingCountWindow）</li></ul></li></ul><h3 id="1、window-aggsiner"><a href="#1、window-aggsiner" class="headerlink" title="1、window aggsiner"></a>1、window aggsiner</h3><h4 id="（1）window"><a href="#（1）window" class="headerlink" title="（1）window()"></a>（1）window()</h4><p>window()方法，窗口分配器方法，是将一个stream流转换为一个window流。window()方法必须在keyby()方法后面使用。因为只有该方法是KeyedStream对象才能调用的方法。</p><p>参数：WindowAssigner（窗口分配器），即数据流要按照什么样的分配规则来分配窗口。</p><ul><li>常用的如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// 滚动时间窗口</span><br>        TumblingProcessingTimeWindows tumblingTimeWindows = TumblingProcessingTimeWindows.of(Time.seconds(<span class="hljs-number">5</span>));<br>        <span class="hljs-comment">// 滑动时间窗口</span><br>        SlidingProcessingTimeWindows slidingTimeWindows = SlidingProcessingTimeWindows.of(Time.seconds(<span class="hljs-number">5</span>), Time.seconds(<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">// session窗口</span><br>        EventTimeSessionWindows sessionWindows = EventTimeSessionWindows.withGap(Time.seconds(<span class="hljs-number">5</span>));<br><br>        inputDataStream<br>                .keyBy(i -&gt; i)<br>                .window(tumblingTimeWindows) <span class="hljs-comment">// 滚动时间窗口</span><br><span class="hljs-comment">//                .window(slidingTimeWindows) // 滑动时间窗口</span><br><span class="hljs-comment">//                .countWindow(10) // 滚动计数窗口</span><br><span class="hljs-comment">//                .countWindow(10, 2) // 滚动滑动窗口</span><br><span class="hljs-comment">//                .window(sessionWindows) // session窗口</span><br><span class="hljs-comment">//                .timeWindow(Time.seconds(5)) // v1.13.6 时间滚动窗口，该方法已经被废弃</span><br>        ;<br></code></pre></td></tr></table></figure><h4 id="（2）windowAll"><a href="#（2）windowAll" class="headerlink" title="（2）windowAll()"></a>（2）windowAll()</h4><p>对一个未经过keyby的数据流进行开窗，将整个数据流视为一个window数据流，是一个非并行操作。</p><p>其他操作和window()方法一致。</p><h3 id="2、window-function"><a href="#2、window-function" class="headerlink" title="2、window function"></a>2、window function</h3><p>窗口函数，即要对窗口里面的数据做何种操作的函数。类型：</p><ul><li>增量聚合函数（Incremental Aggregation function）：每条数据进入这个窗口，就做一次计算，得到一个当前状态。如ReduceFunction、AggregateFunction。只能适合简单的计算操作，即历史计算得到的状态对于新数据是有效的。</li><li>全窗口函数（Full Window Function）：等该窗口的数据到齐之后再进行处理。如：ProcessWindowFunction、WindowFunction。历史计算状态对于新数据的计算是没有意义的，则应该使用全窗口函数，如计算1/4分位数等。</li></ul><h4 id="（1）AggregateFunction"><a href="#（1）AggregateFunction" class="headerlink" title="（1）AggregateFunction"></a>（1）AggregateFunction</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">AggregateFunction&lt;Tuple2&lt;String, Integer&gt;, Integer, Integer&gt; aggregateFunction = <span class="hljs-keyword">new</span> AggregateFunction&lt;Tuple2&lt;String, Integer&gt;, Integer, Integer&gt;() &#123;<br>    <span class="hljs-comment">// 创建初始状态</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">createAccumulator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 新数据处理逻辑</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">add</span><span class="hljs-params">(Tuple2&lt;String, Integer&gt; value, Integer accumulator)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> accumulator + value.f1;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取结果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getResult</span><span class="hljs-params">(Integer accumulator)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> accumulator;<br>    &#125;<br><br>    <span class="hljs-comment">// 对两个历史状态进行合并的逻辑</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">merge</span><span class="hljs-params">(Integer a, Integer b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;;<br><br>SingleOutputStreamOperator&lt;Integer&gt; aggregate = inputDataStream<br>        .flatMap(<span class="hljs-keyword">new</span> Demo1WordCount.MyFlatMapper())<br>        .keyBy(tuple -&gt; tuple.f0)<br>        .window(tumblingTimeWindows) <span class="hljs-comment">// 滚动时间窗口</span><br>        .aggregate(aggregateFunction);<br></code></pre></td></tr></table></figure><h4 id="（2）WindowFunction"><a href="#（2）WindowFunction" class="headerlink" title="（2）WindowFunction"></a>（2）WindowFunction</h4><p>ProcessWindowFunction是WindowFunction的增强版。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">SingleOutputStreamOperator&lt;Tuple3&lt;String, Long, Integer&gt;&gt; apply = inputDataStream<br>        .flatMap(<span class="hljs-keyword">new</span> Demo1WordCount.MyFlatMapper())<br>        .keyBy(tuple -&gt; tuple.f0)<br>        .window(tumblingTimeWindows) <span class="hljs-comment">// 滚动时间窗口</span><br>        .apply(<span class="hljs-keyword">new</span> WindowFunction&lt;Tuple2&lt;String, Integer&gt;, Tuple3&lt;String, Long, Integer&gt;, String, TimeWindow&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(String s, TimeWindow window, Iterable&lt;Tuple2&lt;String, Integer&gt;&gt; input, Collector&lt;Tuple3&lt;String, Long, Integer&gt;&gt; out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (Tuple2&lt;String, Integer&gt; tuple : input) &#123;<br>                    count++;<br>                &#125;<br>                Tuple3&lt;String, Long, Integer&gt; res = <span class="hljs-keyword">new</span> Tuple3&lt;&gt;();<br>                res.f0 = s;<br>                res.f1 = window.getEnd();<br>                res.f2 = count;<br>                out.collect(res);<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><h3 id="3、其他API"><a href="#3、其他API" class="headerlink" title="3、其他API"></a>3、其他API</h3><ul><li>trigger()：可以定义window什么时候计算结果，什么时候关系</li><li>evictor()：定义将某些数据从window中移除的逻辑</li><li>allowedLateness()：允许迟到的数据</li><li>sideOutputLateDate()：将迟到的数据放入侧输出流</li><li>getSideOutput()：获取侧输出流</li></ul><p>基于这些底层API，可以按照自己的需求实现一个自定义的窗口处理逻辑。</p>]]></content>
    
    
    <categories>
      
      <category>bigdata</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>zookeeper-study</title>
    <link href="/bigdata/zookeeper/zookeeper-study/"/>
    <url>/bigdata/zookeeper/zookeeper-study/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Zookeeper介绍"><a href="#一、Zookeeper介绍" class="headerlink" title="一、Zookeeper介绍"></a>一、Zookeeper介绍</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>zookeeper是一个分布式数据一致性解决方案，致力于为分布式应用提供一个高性能、高可能，且具有严格顺序访问控制能力的分布式<strong>协调</strong>存储服务。提供的功能包括：<strong>配置维护、域名服务、分布式同步、组服务</strong>等。</p><p>zookeeper是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。</p><h2 id="二、下载安装"><a href="#二、下载安装" class="headerlink" title="二、下载安装"></a>二、下载安装</h2><p>地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/">Index of /apache/zookeeper (tsinghua.edu.cn)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/yury<br>wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar xzvf apache-zookeeper-3.6.3-bin.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将文件夹重命名为zookeeper-3.6.3-bin方便使用</span><br>mkdir zookeeper-3.6.3-bin/<br>mv -f apache-zookeeper-3.6.3-bin/* zookeeper-3.6.3-bin/<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用这个目录作为根目录</span><br>cd zookeeper-3.6.3-bin<br></code></pre></td></tr></table></figure><p>将以下配置写入一个新建的文件：<code>vi /conf/zoo.cfg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ZooKeeper使用的基本时间单位（毫秒）。 它用于做心跳，并且最小会话超时将是tickTime的两倍。</span><br>tickTime=2000<br><span class="hljs-meta">#</span><span class="bash"> 除非另有说明，否则存储内存中数据库快照的位置以及数据库更新的事务日志</span><br>dataDir=/home/yury/zookeeper-3.6.3-bin/zookeeper-data<br><span class="hljs-meta">#</span><span class="bash"> 客户端访问的端口</span><br>clientPort=2181<br></code></pre></td></tr></table></figure><h2 id="三、单机模式"><a href="#三、单机模式" class="headerlink" title="三、单机模式"></a>三、单机模式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动</span><br>bin/zkServer.sh start<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看运行状态</span><br>bin/zkServer.sh status<br><span class="hljs-meta">#</span><span class="bash"> ZooKeeper JMX enabled by default</span><br><span class="hljs-meta">#</span><span class="bash"> Using config: /home/yury/zookeeper-3.6.3-bin/bin/../conf/zoo.cfg</span><br><span class="hljs-meta">#</span><span class="bash"> Client port found: 2181. Client address: localhost. Client SSL: <span class="hljs-literal">false</span>.</span><br><span class="hljs-meta">#</span><span class="bash"> Mode: standalone</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用命令行连接到服务器</span><br>bin/zkCli.sh -server localhost:2181<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> jps命令，需要手动安装jps</span><br>16722 Jps<br>16365 QuorumPeerMain<br></code></pre></td></tr></table></figure><h2 id="四、分布式模式"><a href="#四、分布式模式" class="headerlink" title="四、分布式模式"></a>四、分布式模式</h2><p>官方文档建议使用奇数个服务器。 如果只有两台服务器，那么您将处于一种情况，如果其中一台服务器发生故障，则没有足够的计算机构成多数仲裁。由于存在两个单点故障，因此两个服务器本来就不如单个服务器稳定。因此我们创建3台服务器。</p><p>修改之前创建的那个配置文件，新增以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> initLimit is timeouts ZooKeeper uses to <span class="hljs-built_in">limit</span> the length of time the ZooKeeper servers <span class="hljs-keyword">in</span> quorum have to connect to a leader.</span><br>initLimit=5<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> syncLimit limits how far out of date a server can be from a leader</span><br><span class="hljs-meta">#</span><span class="bash"> 这几个时间都是以上面那个tickTime为单位时间</span><br>syncLimit=2<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> server.N是指第N台服务器</span><br><span class="hljs-meta">#</span><span class="bash"> A=B:C:D，其中B位置是ip，或者ip的别名，在hosts中可以为ip设置别名解析</span><br><span class="hljs-meta">#</span><span class="bash"> 服务器使用前一个端口连接到其他服务器。ZooKeeper服务器使用此端口将follower连接到leader。当出现新的leader时，follower使用此端口打开与leader的TCP连接。由于leader选举时默认使用TCP，因此我们当前需要另一个端口来进行leader选举。这是配置中的第二个端口。</span><br>server.1=192.168.0.201:2888:3888<br>server.2=192.168.0.202:2888:3888<br>server.3=192.168.0.203:2888:3888<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将配置文件拷贝到其他服务器</span><br>scp ./conf/* yury@192.168.141.142:/home/yury/zookeeper-3.6.3-bin/conf/<br>scp ./conf/* yury@192.168.141.143:/home/yury/zookeeper-3.6.3-bin/conf/<br></code></pre></td></tr></table></figure><p><font color="Red">注意：最后还要在上面的<code>dataDir</code>目录下新建一个<code>myid</code>的文件，写入本台服务器的数字id，如第2台服务器，只需要放一个数字2进去即可。</font></p><p>启动之后查看服务器状态，结果如下，其中141和142服务器的mode为follower，而143服务器的mode为leader，这是由分布式系统投票决定的，不是我们定义的。    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZooKeeper JMX enabled by default<br>Using config: /home/yury/zookeeper-3.6.3-bin/bin/../conf/zoo.cfg<br>Client port found: 2181. Client address: localhost. Client SSL: false.<br>Mode: follower<br></code></pre></td></tr></table></figure><p>搭好了之后，像上面一样用zkCli.sh命令连接随意连接一台服务器，创建节点，修改节点，会发现，三台服务器均会做相应修改。</p><h2 id="五、使用"><a href="#五、使用" class="headerlink" title="五、使用"></a>五、使用</h2><p>zkServer.sh脚本的功能如下</p><p>Usage: bin/zkServer.sh [–config &lt;conf-dir&gt;] {start|start-foreground|stop|version|restart|status|print-cmd}</p><h3 id="1、zkCli-sh命令"><a href="#1、zkCli-sh命令" class="headerlink" title="1、zkCli.sh命令"></a>1、zkCli.sh命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>help</td><td>帮助</td></tr><tr><td>ls /path</td><td>/path为节点路径，如：ls /zookeeper<br>-w 注册监听子节点路径变化，如果其他客户端修改该节点的值，或删除该节点，则可以收到通知。<font color="Red">但是有一个缺陷，这个监听只能监控到一次变化， 如果还需要继续监控，需要继续注册。</font></td></tr><tr><td>create /path [value]</td><td>创建节点，如：create /zktest mydata</td></tr><tr><td>get /path</td><td>获取节点的值，如：get /zktest<br>-w 注册监听节点的变化，监听效果同上<br>-s 获取节点信息</td></tr><tr><td>set /path value</td><td>设置节点的值，如：set /zktest junk</td></tr><tr><td>delete /path</td><td>删除节点（如果该节点下面非空，即有子节点，则无法删除），如：delete /zktest</td></tr><tr><td>deleteall /path</td><td>递归删除节点（会删除所有子节点）</td></tr><tr><td>quit</td><td>退出</td></tr></tbody></table><h3 id="2、节点类型"><a href="#2、节点类型" class="headerlink" title="2、节点类型"></a>2、节点类型</h3><p>持久、短暂、有序号、无序号</p><p>待完善。</p><h3 id="3、API使用"><a href="#3、API使用" class="headerlink" title="3、API使用"></a>3、API使用</h3><h2 id="六、分布式理论"><a href="#六、分布式理论" class="headerlink" title="六、分布式理论"></a>六、分布式理论</h2><h3 id="1、CAP理论"><a href="#1、CAP理论" class="headerlink" title="1、CAP理论"></a>1、CAP理论</h3><p>CAP 理论指出对于一个分布式计算系统来说，不可能同时满足以下三点：</p><ul><li><p><strong>一致性（Consistency）</strong>：在分布式环境中，一致性是指数据在多个副本之间是否能够保持一致的特性，等同于所有节点访问同一份最新的数据副本。在一致性的需求下，当一个系统在数据一致的状态下执行更新操作后，应该保证系统的数据仍然处于一致的状态。</p></li><li><p><strong>可用性（Availability）</strong>：每次请求都能获取到正确的响应，但是不保证获取的数据为最新数据。</p></li><li><p><strong>分区容错性（Partition Tolerance）</strong>：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。</p></li></ul><p><img src="/images/CAP%E7%90%86%E8%AE%BA.png"></p><p>一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p><p>在这三个基本需求中，最多只能同时满足其中的两项，P 是必须的，因此只能在 CP 和 AP 中选择，zookeeper 保证的是 CP，对比 spring cloud 系统中的注册中心 eruka 实现的是 AP。</p><h3 id="2、BASE理论"><a href="#2、BASE理论" class="headerlink" title="2、BASE理论"></a>2、BASE理论</h3><p>BASE是Basically Available（基本可用）、Soft-state（软状态）和Eventually Consistent（最终一致性）三个短语的缩写。</p><ul><li><strong>基本可用：</strong>在分布式系统出现故障，允许损失部分可用性（服务降级、页面降级）。</li><li><strong>软状态：</strong>允许分布式系统出现中间状态。而且中间状态不影响系统的可用性。这里的中间状态是指不同的 data replication（数据备份节点）之间的数据更新可以出现延时的最终一致性。</li><li><strong>最终一致性：</strong>data replications 经过一段时间达到一致性。</li></ul><p>BASE 理论是对 CAP 中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。</p><p>五、分布式一致性</p><p><img src="/images/%E4%B8%80%E8%87%B4%E6%80%A7.png"></p><p>1、强一致性：用户更新了value后，服务器先把数据同步到其他服务器，再将“更新成功”的消息返回给用户，即这两个操作是同步的，也可以说<strong>服务器的主从复制是同步的</strong>，则用户不管读那台服务器都是更新后的值。</p><p>2、弱一致性：用户更新了value后，服务器把数据同步到其他服务器和将“更新成功”的消息返回给用户这两个操作是异步的，也可以说<strong>服务器的主从复制是异步的</strong>，因此用户读取时可能会读到旧的数据。</p><p>3、半同步：保证一台从服务器是同步的，其他从服务器则是异步的，如果同步的从服务器出现问题，则让另外一台异步服务器来做同步。即始终保证有两个节点拥有完整数据。</p><p>3、最终一致性，最终一致性其实还是弱一致性，只不过用户看到的旧数据只是一个暂时的状态，如果等待一段时间，从服务器最终会和主服务器数据一致，这就是最终一致性。数据同步的速度受很多因素影响，一般都比较快，即这个等待延迟一般很短。</p><h2 id="七、选举机制"><a href="#七、选举机制" class="headerlink" title="七、选举机制"></a>七、选举机制</h2><p>1、半数机制。集群中半数以上机器存活，集群可用。所以zookeeper适合安装奇数台服务器。</p><p>2、zookeeper虽然在配置文件中没有指定leader和follower，但是在集群启动后，zookeeper会通过内部选举产生临时的leader和follower。</p><h2 id="八、监听器"><a href="#八、监听器" class="headerlink" title="八、监听器"></a>八、监听器</h2>]]></content>
    
    
    <categories>
      
      <category>bigdata</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSM-Build</title>
    <link href="/java/SSM-Build/SSM-Build/"/>
    <url>/java/SSM-Build/SSM-Build/</url>
    
    <content type="html"><![CDATA[<h2 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h2><p>1、web.xml中配置DispatcherServlet时的初始化参数要连接所有的spring配置文件。先当与配置文件从web.xml是一个顶点，然后依次往下细分。</p><p>2、排错方法：</p><ul><li>使用IDEA查看bean和MVC的细节</li><li>Junit单元测试</li></ul><p>3、即使类上面加了<code>@RestController</code>，springmvc不会自动帮你把对象转字符串再返回给前端，这时若方法返回的是对象或List接口或其他则会报错<code>No converter found for return value of type: class java.util.ArrayList</code>。若导入了<code>jackson-databind</code>包，则会自动帮你把对象或列表转字符串，就可以直接返回一个对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">a2</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;yury757&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;name2&quot;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&quot;女&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;name3&quot;</span>, <span class="hljs-number">48</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>    <span class="hljs-keyword">return</span> userList;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java_NIO-study</title>
    <link href="/java/java_NIO/Java_NIO-study/"/>
    <url>/java/java_NIO/Java_NIO-study/</url>
    
    <content type="html"><![CDATA[<h2 id="一、NIO和IO的区别"><a href="#一、NIO和IO的区别" class="headerlink" title="一、NIO和IO的区别"></a>一、NIO和IO的区别</h2><ul><li><p>传统IO面向流，而NIO面向管道（channel）和缓冲区（buffer）。传统IO只能单向传输数据，而NIO可以双向传输数据。传统IO就像单向水管，而NIO中channel像列车轨道，buffer就像火车，可以双向传输数据。</p></li><li><p>传统IO是阻塞（blocking）的，而NIO就是非阻塞（Non blocking）的。</p></li><li><p>NIO多了一个选择器（Selector），是针对网络编程用的。</p></li></ul><h2 id="二、缓冲区（Buffer）"><a href="#二、缓冲区（Buffer）" class="headerlink" title="二、缓冲区（Buffer）"></a>二、缓冲区（Buffer）</h2><p>缓冲区（Buffer）是基于数组来做管理的，负责存取数据。java NIO有七种xxxBuffer类，都继承了Buffer类，即八种基本数据类型中，除了boolean以外都提供了对应的xxxBuffer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ByteBuffer<br>CharBuffer<br>ShortBuffer<br>IntBuffer<br>LongBuffer<br>FloatBuffer<br>DoubleBuffer<br></code></pre></td></tr></table></figure><p>每种xxxBuffer类还不是最终实现类，最终的实现类有两种，以下以ByteBuffer为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 属于下面说的直接缓冲区，不懂操作系统的人最好不要使用，有风险</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DirectByteBufferR</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DirectByteBuffer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DirectBuffer</span></span>&#123;&#125;<br><br><span class="hljs-comment">// 常用这个实现类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeapByteBuffer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ByteBuffer</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="1、四个核心属性"><a href="#1、四个核心属性" class="headerlink" title="1、四个核心属性"></a>1、四个核心属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 容量，缓冲区总的最大容量</span><br><span class="hljs-keyword">int</span> capacity;<br><br><span class="hljs-comment">// 最大可读写的容量</span><br><span class="hljs-keyword">int</span> limit;<br><br><span class="hljs-comment">// 位置，表示缓冲区中正在操作的数据的下标。当position&lt;limit，可以做写入操作，当position=limit时，写入操作会报错。</span><br><span class="hljs-keyword">int</span> position;<br><br><span class="hljs-comment">// 标记位置，默认为-1</span><br><span class="hljs-keyword">int</span> mark = -<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// mark &lt; position &lt; limit &lt; capacity</span><br></code></pre></td></tr></table></figure><h3 id="2、主要方法"><a href="#2、主要方法" class="headerlink" title="2、主要方法"></a>2、主要方法</h3><p>下面以ByteBuffer为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分配缓冲区</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteBuffer <span class="hljs-title">allocate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span></span>;<br><br><span class="hljs-comment">// 存入数据到缓冲区中</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> ByteBuffer <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">byte</span> b)</span></span>;<br><br><span class="hljs-comment">// 读取数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">byte</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>;<br><br><span class="hljs-comment">// 将缓冲区的数据读取到另外一个数组中</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ByteBuffer <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] dst, <span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> length)</span></span>;<br><br><span class="hljs-comment">// 切换到读取数据的模式。将limit的值置为当前position的值，再把position归0</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Buffer <span class="hljs-title">flip</span><span class="hljs-params">()</span> </span>&#123;<br>        limit = position;<br>        position = <span class="hljs-number">0</span>;<br>        mark = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// 恢复到初始状态，注意数据还在，只是被遗忘了</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Buffer <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        position = <span class="hljs-number">0</span>;<br>        limit = capacity;<br>        mark = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// 将position恢复到上一次mark标记的位置</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Buffer <span class="hljs-title">reset</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = mark;<br>        <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidMarkException();<br>        position = m;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">注意：<code>public ByteBufferget(byte[] dst, int offset, int length)</code>方法参数中的offset和length不是针对源buffer，而是针对新数组dst的！！</font></p><h3 id="3、非直接缓冲区"><a href="#3、非直接缓冲区" class="headerlink" title="3、非直接缓冲区"></a>3、非直接缓冲区</h3><p><img src="/images/%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png"></p><h3 id="4、直接缓冲区"><a href="#4、直接缓冲区" class="headerlink" title="4、直接缓冲区"></a>4、直接缓冲区</h3><p><img src="/images/%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png"></p><p><strong>优点</strong>：效率更高！</p><p><strong>缺点：</strong>消耗资源大，数据写入到物理内存中后不受java控制，垃圾回收也有一定的问题。</p><p><img src="/images/%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA%E5%92%8C%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png"></p><h2 id="三、通道（Channel）"><a href="#三、通道（Channel）" class="headerlink" title="三、通道（Channel）"></a>三、通道（Channel）</h2><p>之前进行IO操作，是通过CPU授权给DMA（Direct Memory Access）总线，然后在DMA总线的管理下进行IO操作。而Channel则是一种独立的专门处理IO操作的特殊的（协）处理器，具有自己的IO指令，进行IO操作时不需要CPU授权。</p><p><img src="/images/%E9%80%9A%E9%81%93.png"></p><h3 id="1、接口和实现类"><a href="#1、接口和实现类" class="headerlink" title="1、接口和实现类"></a>1、接口和实现类</h3><p>接口：</p><p>java.nio.Channels.Channel</p><p>实现类：</p><ul><li>FileChannel：本地数据IO</li><li>SocketChannel：TCP连接用</li><li>ServerSocketChannel：TCP连接用</li><li>DatagramChannel：UDP连接用</li></ul><h3 id="2、获取通道的三种方式"><a href="#2、获取通道的三种方式" class="headerlink" title="2、获取通道的三种方式"></a>2、获取通道的三种方式</h3><h4 id="（1）各个支持通道的IO类提供了相应的getChannel方法"><a href="#（1）各个支持通道的IO类提供了相应的getChannel方法" class="headerlink" title="（1）各个支持通道的IO类提供了相应的getChannel方法"></a>（1）各个支持通道的IO类提供了相应的getChannel方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span>(<span class="hljs-comment">// 获取流</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(filename1);<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(filename2);<br><br>        <span class="hljs-comment">// 获取对应的通道</span><br>        FileChannel fisChannel = fis.getChannel();<br>        FileChannel fosChannel = fos.getChannel();)<br>    &#123;<br>        <span class="hljs-comment">// 通过非直接缓冲区方式</span><br>        ByteBuffer buffer = ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br><br>        <span class="hljs-comment">// 将源数据通道的数据写入缓冲区</span><br>        <span class="hljs-keyword">while</span> (fisChannel.read(buffer) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 切换成读取模式</span><br>            buffer.flip();<br><br>            <span class="hljs-comment">// 读取缓冲区中的数据，写入目标数据通道</span><br>            fosChannel.write(buffer);<br><br>            <span class="hljs-comment">// 清空缓冲区</span><br>            buffer.clear();<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>        ex.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-comment">// 使用try()&#123;&#125;的方式就可以不用关闭，否则就要关闭所有的流和通道</span><br>    <span class="hljs-comment">//        fosChannel.close();</span><br>    <span class="hljs-comment">//        fisChannel.close();</span><br>    <span class="hljs-comment">//        fis.close();</span><br>    <span class="hljs-comment">//        fos.close();</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）使用open函数"><a href="#（2）使用open函数" class="headerlink" title="（2）使用open函数"></a>（2）使用open函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span> </span>&#123;<br>    Date startTime = <span class="hljs-keyword">new</span> Date();<br>    <span class="hljs-comment">// 通过open的方式获取通道</span><br>    <span class="hljs-comment">// CREATE_NEW：当文件存在时会报错</span><br>    <span class="hljs-comment">// CREATE：当文件存在时，会在原文件上从头开始覆盖写入。</span><br>    <span class="hljs-comment">// 但是很奇怪，当使用CREATE和直接缓冲区结合的方式时，当source文件的字节数小于destination文件的字节数时，并不会发生写入操作。</span><br>    <span class="hljs-comment">// 即一般使用CREATE_NEW就行</span><br>    <span class="hljs-keyword">try</span>(FileChannel fisChannel = FileChannel.open(Paths.get(filename1), StandardOpenOption.READ);<br>        FileChannel fosChannel = FileChannel.open(Paths.get(filename2), StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.CREATE_NEW))<br>    &#123;<br><br>        <span class="hljs-comment">// 使用非直接缓冲区</span><br>        ByteBuffer buffer = ByteBuffer.allocate(<span class="hljs-number">8</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>        <span class="hljs-keyword">while</span> (fisChannel.read(buffer) != -<span class="hljs-number">1</span>)&#123;<br>            buffer.flip();<br>            fosChannel.write(buffer);<br>            buffer.clear();<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            // 通过直接缓冲区方式</span><br><span class="hljs-comment">            MappedByteBuffer inMappedBuffer = fisChannel.map(FileChannel.MapMode.READ_ONLY, 0, fisChannel.size());</span><br><span class="hljs-comment">            MappedByteBuffer outMappedBuffer = fosChannel.map(FileChannel.MapMode.READ_WRITE, 0, fisChannel.size());</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            // 对直接缓冲区中的数据进行读写，因此省略了从OS地址空间到JVM地址空间的copy操作</span><br><span class="hljs-comment">            // 使用内存映射文件时，就是将一个硬盘上的文件通过通道映射到物理内存的缓冲区中，当缓冲区有put操作，则会直接将对应的数据写入硬盘</span><br><span class="hljs-comment">            byte[] dst = new byte[inMappedBuffer.limit()];</span><br><span class="hljs-comment">            inMappedBuffer.get(dst);</span><br><span class="hljs-comment">            outMappedBuffer.put(dst);</span><br><span class="hljs-comment"> */</span><br><br>        <span class="hljs-comment">// 关闭通道，同样如果使用了try()&#123;&#125;则不用关闭</span><br>        <span class="hljs-comment">//            fisChannel.close();</span><br>        <span class="hljs-comment">//            fosChannel.close();</span><br><br>    &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>        ex.printStackTrace();<br>    &#125;<br>    Date endTime = <span class="hljs-keyword">new</span> Date();<br>    System.out.println(<span class="hljs-string">&quot;time: &quot;</span> + (endTime.getTime() - startTime.getTime()) / <span class="hljs-number">1000</span> + <span class="hljs-string">&quot;秒&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">注意！！使用Channel.transferTo方法时，一次传输最大传输支持2G，如果文件超过2G，则要断点传输！如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test04</span><span class="hljs-params">()</span></span>&#123;<br>    Date startTime = <span class="hljs-keyword">new</span> Date();<br>    <span class="hljs-keyword">try</span>(FileChannel fisChannel = FileChannel.open(Paths.get(filename1), StandardOpenOption.READ);<br>        FileChannel fosChannel = FileChannel.open(Paths.get(filename2), StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.CREATE_NEW))<br>    &#123;<br>        <span class="hljs-comment">// 通过transferTo，也是通过直接缓冲区的方式</span><br>        <span class="hljs-comment">// transferTo一次传输最大2G，因此无论文件大小的化，最好使用以下方式</span><br>        <span class="hljs-keyword">long</span> position = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">long</span> len = fisChannel.size();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">0</span> &lt; len)&#123;<br>            <span class="hljs-keyword">long</span> l = fisChannel.transferTo(position, len, fosChannel);<br>            <span class="hljs-keyword">if</span> (l &gt; <span class="hljs-number">0</span>)&#123;<br>                position = l;<br>                len -= l;<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>        ex.printStackTrace();<br>    &#125;<br>    Date endTime = <span class="hljs-keyword">new</span> Date();<br>    System.out.println(<span class="hljs-string">&quot;time: &quot;</span> + (endTime.getTime() - startTime.getTime()) / <span class="hljs-number">1000</span> + <span class="hljs-string">&quot;秒&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）通过Files创建"><a href="#（3）通过Files创建" class="headerlink" title="（3）通过Files创建"></a>（3）通过Files创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Files.newByteChannel();<br></code></pre></td></tr></table></figure><h3 id="3、聚集和分散"><a href="#3、聚集和分散" class="headerlink" title="3、聚集和分散"></a>3、聚集和分散</h3><p>分散读取（Scattering Reads）：读取文件时按顺序填入多个缓冲区中，前面的缓冲区填满了，再填后面的缓冲区</p><p>聚集写入（Gathering Writes）：将多个缓冲区中的数据按顺序写入到通道中</p><p>即就是将channel写入一个bytebuffer数组中，或者从一个bytebuffer数组中读取数据到channel。</p><p><img src="/images/%E8%81%9A%E9%9B%86%E5%92%8C%E5%88%86%E6%95%A3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test05</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">try</span>(RandomAccessFile raf = <span class="hljs-keyword">new</span> RandomAccessFile(filename1, <span class="hljs-string">&quot;r&quot;</span>);<br>        FileChannel channel = raf.getChannel();<br>        RandomAccessFile raf2 = <span class="hljs-keyword">new</span> RandomAccessFile(filename2, <span class="hljs-string">&quot;rw&quot;</span>);<br>        FileChannel channel2 = raf2.getChannel();<br>        )<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;=======分散读取======&quot;</span>);<br>        ByteBuffer buffer1 = ByteBuffer.allocate(<span class="hljs-number">10</span>);<br>        ByteBuffer buffer2 = ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br>        <span class="hljs-comment">// 写入缓冲区</span><br>        ByteBuffer[] buffers = &#123;buffer1, buffer2&#125;;<br>        channel.read(buffers);<br>        <span class="hljs-comment">// 将缓冲区切换成读取模式</span><br>        <span class="hljs-keyword">for</span> (ByteBuffer buffer : buffers) &#123;<br>            buffer.flip();<br>        &#125;<br>        <span class="hljs-comment">// 将缓冲区中的内容打印出来</span><br>        System.out.println(<span class="hljs-keyword">new</span> String(buffers[<span class="hljs-number">0</span>].array(), <span class="hljs-number">0</span>, buffers[<span class="hljs-number">0</span>].limit()));<br>        System.out.println(<span class="hljs-string">&quot;=============&quot;</span>);<br>        System.out.println(<span class="hljs-keyword">new</span> String(buffers[<span class="hljs-number">1</span>].array(), <span class="hljs-number">0</span>, buffers[<span class="hljs-number">1</span>].limit()));<br><br>        System.out.println(<span class="hljs-string">&quot;=======聚集写入======&quot;</span>);<br>        channel2.write(buffers);<br>    &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>        ex.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、字符集（Charset）"><a href="#四、字符集（Charset）" class="headerlink" title="四、字符集（Charset）"></a>四、字符集（Charset）</h2><p>编码：字符串 =&gt; 字节数组</p><p>解码：字节数组 =&gt; 字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">final</span> SortedMap&lt;String, Charset&gt; stringCharsetSortedMap = Charset.availableCharsets();<br>    stringCharsetSortedMap.forEach((key, value) -&gt; &#123;<br>        System.out.println(key.getClass().getName());<br>        System.out.println(value.getClass().getName());<br>        System.out.println(key + <span class="hljs-string">&quot;: &quot;</span> + value);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>获取一个字符集的类，并得到他们的编码器和解码器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Charset gbk = Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>);<br>CharsetEncoder charsetEncoder = gbk.newEncoder();<br>CharsetDecoder charsetDecoder = gbk.newDecoder();<br></code></pre></td></tr></table></figure><p>encode方法得到一个ByteBuffer，而decode方法得到一个CharBuffer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-keyword">final</span> Charset gbk = Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>);<br>    <span class="hljs-keyword">final</span> CharsetEncoder charsetEncoder = gbk.newEncoder();<br>    <span class="hljs-keyword">final</span> CharsetDecoder charsetDecoder = gbk.newDecoder();<br><br>    CharBuffer charBuffer = CharBuffer.allocate(<span class="hljs-number">1024</span>);<br>    charBuffer.put(<span class="hljs-string">&quot;你好，世界！hello, world!!&quot;</span>);<br>    charBuffer.flip();<br><br>    ByteBuffer byteBuffer = charsetEncoder.encode(charBuffer);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; byteBuffer.limit(); i++) &#123;<br>        System.out.print(byteBuffer.get() + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>    byteBuffer.flip();<br><br>    CharBuffer charBuffer2 = charsetDecoder.decode(byteBuffer);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; charBuffer2.limit(); i++) &#123;<br>        System.out.print(charBuffer2.get() + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>    charBuffer2.flip();<br><br>    System.out.println(charBuffer2.toString());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、阻塞和非阻塞（重点！！）"><a href="#五、阻塞和非阻塞（重点！！）" class="headerlink" title="五、阻塞和非阻塞（重点！！）"></a>五、阻塞和非阻塞（重点！！）</h2><p>这里所说的阻塞和非阻塞主要针对网络编程。在客户端连接服务器时，客户端要向服务器发送数据包请求，双方都会打开一个通道，但是当服务器读取一段数据后，不清楚客户端通道中的数据是否读取完，则这个线程会被阻塞。</p><p>而非阻塞网络IO就是在客户端和服务器之间加一个选择器（Selector），所有客户端发送过来的数据包都先通过选择器，由选择器来判断该数据包是否准备完毕，将准备完毕的数据包发送给服务器去处理，而没准备完毕的数据包留在这里。</p><p><img src="/images/%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F.png"></p><p>因此，使用NIO完成网络通信的三个核心：</p><ul><li>Channel，负责连接</li><li>Buffer，负责传输数据</li><li>Selector，是SelectableChannel的多路复用器，用于监控SelectableChannel的IO状况。</li></ul><p>这部分笔者还不是很清楚。</p><h2 id="六、NIO实战项目"><a href="#六、NIO实战项目" class="headerlink" title="六、NIO实战项目"></a>六、NIO实战项目</h2><p>用NIO写一个非阻塞式http服务器：<a href="https://github.com/yury757/httpserver">yury757/httpserver (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hbase-study</title>
    <link href="/bigdata/hbase/HBase-study/"/>
    <url>/bigdata/hbase/HBase-study/</url>
    
    <content type="html"><![CDATA[<p>Linux：ubuntu18.04.5</p><p>hbase：2.3.5</p><p>官方文档：<a href="http://hbase.apache.org/book.html">Apache HBase ™ Reference Guide</a></p><h2 id="一、HBase介绍"><a href="#一、HBase介绍" class="headerlink" title="一、HBase介绍"></a>一、HBase介绍</h2><h3 id="1、Hadoop的局限性"><a href="#1、Hadoop的局限性" class="headerlink" title="1、Hadoop的局限性"></a>1、Hadoop的局限性</h3><ul><li>hadoop主要是实现批量数据的处理，并通过顺序方式访问数据。比如批量处理一天的数据。</li><li>要查找数据必须搜索整个数据集，即不具备随即读取数据的能力。</li></ul><h3 id="2、HBase简介"><a href="#2、HBase简介" class="headerlink" title="2、HBase简介"></a>2、HBase简介</h3><ul><li>HBase是一个分布式的、<strong>面向列</strong>的开源数据库，该技术来源于Fay Chang所撰写的Google论文《Bigtable：一个结构化数据的分布式存储系统》。</li><li>HBase一开始是Hadoop下的一个子项目，因为也是基于HDFS文件系统的，后成为Apache的顶级项目。</li><li>HBase是Google Bigtable的开源实现，类似Google Bigtable利用GFS作为其文件存储系统，HBase利用<strong>Hadoop HDFS</strong>作为其文件存储系统；Google运行MapReduce来处理Bigtable中的海量数据，HBase同样利用Hadoop MapReduce来处理HBase中的海量数据；Google Bigtable利用 Chubby作为协同服务，HBase利用Zookeeper作为对应。</li><li>HBase是一种NoSQL数据库，仅能通过主键（row key）和主键的range来检索数据，对事务的支持较弱。</li><li><strong>HBase只支持一种数据类型：byte[]</strong></li><li>HBase是稀疏存储的，即为空的字段不占用空间，而比如MySQL的null实际上也会占空间的。</li><li><font color="Red">应用场景：需要存储海量数据，又要快速的写入和查询数据的场景。</font></li></ul><h3 id="3、关系型数据库（RDBMS）和HBase的比较"><a href="#3、关系型数据库（RDBMS）和HBase的比较" class="headerlink" title="3、关系型数据库（RDBMS）和HBase的比较"></a>3、关系型数据库（RDBMS）和HBase的比较</h3><table><thead><tr><th></th><th>关系型数据库（以MySQL为例）</th><th>HBase</th></tr></thead><tbody><tr><td>是否以表的形式存在</td><td>是</td><td>是</td></tr><tr><td>支持的文件系统</td><td>FAT（windows旧）、NTFS（windows新）、EXT（Linux）</td><td>HDFS文件系统</td></tr><tr><td>物理上的存储方式</td><td>以行的形式存储，每个字段之间用分隔符隔开</td><td>以每个单元格为一行的形式存储，即每一个单元格数据都会存储其row key、列簇名、列名和时间戳等。HBase会对行进行分割，一片行和一个列簇即形成一个region。具体见后面详解。</td></tr><tr><td>索引</td><td>支持主键（primary key）和二级索引</td><td>仅支持主键（row key）</td></tr><tr><td>事务</td><td>最常用的InnoDB引擎的事务处理满足ACID原则</td><td>对事务的支持较弱，不支持ACID</td></tr><tr><td>是否能使用sql查询</td><td>能</td><td>不能，NoSQL数据库</td></tr><tr><td>是否支持join</td><td>支持</td><td>不支持</td></tr><tr><td>适合存储的数据</td><td>适合存储少量的、结构化的数据</td><td>适合存储大量数据，结构化和非结构话都适合，但是如果使用HBase来存储少量数据，效率和内存消耗上都不如关系型数据库</td></tr></tbody></table><h3 id="4、HBase的逻辑结构"><a href="#4、HBase的逻辑结构" class="headerlink" title="4、HBase的逻辑结构"></a>4、HBase的逻辑结构</h3><p><img src="/images/HBase%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png"></p><h3 id="5、HBase的物理结构"><a href="#5、HBase的物理结构" class="headerlink" title="5、HBase的物理结构"></a>5、HBase的物理结构</h3><p>HBase的物理结构，实际上是每一个单元都对应了一行或多行数据，每行存储了其元数据信息和值。</p><p><font color="Red">而实际上删除操作的第一时间并不会真正删除数据，而是插入了一条type为delete的数据，timestamp则是版本控制（这就是为什么需要校正服务器时间），查数据get命令其实就是获取timestamp最大的那条数据，如果这条数据的type是delete，则不反悔数据，否则返回那条数据。而scan命令可以通过设置VERSION参数来查看之前版本的数据。</font></p><p><img src="/images/HBase%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84.png"></p><h3 id="6、Hive和HBase的区别"><a href="#6、Hive和HBase的区别" class="headerlink" title="6、Hive和HBase的区别"></a>6、Hive和HBase的区别</h3><table><thead><tr><th></th><th>Hive</th><th>HBase</th></tr></thead><tbody><tr><td>定位</td><td>Hive是一个数据仓库工具，本质相当于把HDFS中已存在的数据文件在MySQL中做一个映射关系，以方便用HQL去管理查询。</td><td>定位是一个NoSQL数据库</td></tr><tr><td>功能</td><td>用于数据分析和清洗</td><td>高效地存储和查询数据</td></tr><tr><td>使用场景</td><td>离线数据分析和清晰，因为需要时间较长，延迟较高</td><td>实时查询和存储海量数据</td></tr><tr><td>底层</td><td>基于HDFS，编写的HQL最终是转换为MapReduce代码执行</td><td>基于HDFS，但是在HDFS上做了进一步的处理和优化</td></tr></tbody></table><p>如下面是一种数据仓库架构。</p><p><img src="/images/%E5%A4%A7%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%9A%84%E4%B8%80%E7%A7%8D%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%9E%B6%E6%9E%84.png"></p><h2 id="二、下载、安装和配置"><a href="#二、下载、安装和配置" class="headerlink" title="二、下载、安装和配置"></a>二、下载、安装和配置</h2><p>下载链接：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/">HBase的清华大学镜像包</a></p><p>选择一个稳定版本，点进去后下载其中的二进制的压缩包，不用下载源码的压缩包，源码的压缩包可以用来看源码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br>wget https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/stable/hbase-2.3.5-bin.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar xzvf hbase-2.3.5-bin.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以这个目录为工作目录</span><br>cd hbase-2.3.5<br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><span class="hljs-meta">#</span><span class="bash"> 在最下面添加</span><br>export HBASE_HOME=/home/yury/hbase-2.3.5<br>export PATH=$&#123;PATH&#125;:$&#123;HBASE_HOME&#125;/bin:$&#123;HBASE_HOME&#125;/sbin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 加载环境变量</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><p>修改配置文件<code>./conf/hbase-env.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 修改压缩包根目录下的这个文件</span><br>vi ./conf/hbase-env.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加JAVA_HOME配置</span><br>export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/<br><span class="hljs-meta">#</span><span class="bash"> 为<span class="hljs-literal">false</span>时使用自己的ZOOKEEPER，即需要自己启动zookeeper服务。为<span class="hljs-literal">true</span>时使用hbase内置的zookeeper，如果是单机版建议为<span class="hljs-literal">true</span>，或者不配置</span><br>export HBASE_MANAGES_ZK=false<br></code></pre></td></tr></table></figure><p>将一个包复制到lib目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp lib/client-facing-thirdparty/htrace-core4-4.2.0-incubating.jar ./lib/<br></code></pre></td></tr></table></figure><p>移除一个日志jar包，这个版本和hadoop的3.3.0版本的日志包会有冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm lib/client-facing-thirdparty/slf4j-log4j12-1.7.30.jar<br></code></pre></td></tr></table></figure><h2 id="三、单机版"><a href="#三、单机版" class="headerlink" title="三、单机版"></a>三、单机版</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 配置完了以上操作后，直接启动即可</span><br>./bin/start-hbase.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 返回结果如下</span><br><span class="hljs-meta">#</span><span class="bash"> running master, logging to /home/yury/hbase-2.3.5/bin/../logs/hbase-yury-master-myubuntu1.out</span><br><span class="hljs-meta">#</span><span class="bash"> 可以在http://192.168.141.141:16010这个页面中HBase的web管理页面</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> jps命令可以看到有一个HMaster进程</span><br>jps<br><span class="hljs-meta">#</span><span class="bash"> 2032 Jps</span><br><span class="hljs-meta">#</span><span class="bash"> 1539 HMaster</span><br></code></pre></td></tr></table></figure><h2 id="四、初步使用HBase的shell"><a href="#四、初步使用HBase的shell" class="headerlink" title="四、初步使用HBase的shell"></a>四、初步使用HBase的shell</h2><p>hbase的数据库结构主要以下层次：</p><ul><li>namespace（命名空间，相当于MySQL的schema）</li><li>table</li><li>column family（列簇）</li><li>column qualifier（列名）</li></ul><p>hbase的namespace默认有两个：default和namespace，默认使用default，即在创建表时如果没有加命名空间前缀，则默认往default命名空间里面建表。</p><p>而namespace这个命名空间存储着数据库的元数据信息，这个命名空间向相当于MySQL的information这个schema。</p><p><font color="Red">hbase shell里面没有分号，如果敲了分号并回车了，可以通过敲一个单引号，再回车，再敲一个单引号来取消之前的命令。</font></p><p><font color="Red">对于哪个命令不熟悉，可以<code>help &#39;create&#39;</code>，就有这个命令的使用方法，下面只是简单介绍。</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动hbase的shell命令，需要配置hbase环境变量，以下都是hbase的shell命令</span><br>hbase shell<br></code></pre></td></tr></table></figure><h3 id="1、命名空间操作"><a href="#1、命名空间操作" class="headerlink" title="1、命名空间操作"></a>1、命名空间操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">list_namespace                # 展示所有命名空间<br>create_namespace &#x27;myns&#x27;       # 创建命名空间，相当于MySQL的创建一个schema<br>drop_namespace &#x27;myns&#x27;         # 删除命名空间<br>describe_namespace &#x27;myns&#x27;     # 查看指定命名空间的详细信息<br>list_namespace_tables &#x27;myns&#x27;  # 查看指定命名空间下的所有表<br></code></pre></td></tr></table></figure><h3 id="2、表操作"><a href="#2、表操作" class="headerlink" title="2、表操作"></a>2、表操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 对于表的操作默认是指default命名空间，要想对其他命名空间操作表，需加命名空间的前缀，如下</span><br><span class="hljs-meta">#</span><span class="bash"> 在myns命名空间下创建一个表</span><br>create &#x27;myns:myns_test&#x27;, &#x27;myns_cf&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以下不加前缀则都是在default命名空间下操作</span><br>create &#x27;test&#x27;, &#x27;cf&#x27;                              # 一个列簇cf<br>create &#x27;test2&#x27;, &#x27;cf1&#x27;, &#x27;cf2&#x27;                     # 两个列簇cf1和cf2<br>list &#x27;test&#x27;                                      # 确认表是否存在<br>describe &#x27;test&#x27;                                  # 查看表结构<br>disable &#x27;test&#x27;                                   # 使表失效<br>enable &#x27;test&#x27;                                    # 使表生效<br>alter &#x27;test&#x27;, &#123;NAME=&gt;&#x27;cf1&#x27;, VERSION=&gt;3&#125;          # 修改表的元数据信息<br>drop &#x27;test&#x27;                                      # 删除表，删除之前要disable这个表<br>scan &#x27;test&#x27;, &#123;STARTROW=&gt;&#x27;1001&#x27;, STOPROW=&gt;&#x27;1003&#x27;&#125; # 扫描查看&#x27;test&#x27;表的所有数据<br></code></pre></td></tr></table></figure><h3 id="3、数据操作"><a href="#3、数据操作" class="headerlink" title="3、数据操作"></a>3、数据操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 插入数据</span><br><span class="hljs-meta">#</span><span class="bash"> 参数1：命名空间+表名</span><br><span class="hljs-meta">#</span><span class="bash"> 参数2：行号，row key</span><br><span class="hljs-meta">#</span><span class="bash"> 参数3：列名全限定名，即列簇名+列名</span><br><span class="hljs-meta">#</span><span class="bash"> 参数4：值</span><br>put &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;, &#x27;&#123;row key&#125;&#x27;, &#x27;&#123;column family&#125;:&#123;column qualifier&#125;&#x27;, &#x27;&#123;value&#125;&#x27;, &#x27;&#123;timestamp&#125;&#x27;, &#x27;&#123;其他属性&#125;&#x27;<br>put &#x27;test&#x27;, &#x27;row1&#x27;, &#x27;cf:a&#x27;, &#x27;value1&#x27;<br>put &#x27;test&#x27;, &#x27;row2&#x27;, &#x27;cf:b&#x27;, &#x27;value2&#x27;<br>put &#x27;test&#x27;, &#x27;row3&#x27;, &#x27;cf:c&#x27;, &#x27;value3&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 根据表名和row key获取值</span><br>get &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;, &#x27;&#123;row key&#125;&#x27;, &#x27;&#123;column family&#125;:&#123;column qualifier&#125;&#x27;<br>get &#x27;test&#x27;, &#x27;row1&#x27;<br><span class="hljs-meta">#</span><span class="bash"> 结果如下</span><br><span class="hljs-meta">#</span><span class="bash"> COLUMN            CELL</span><br><span class="hljs-meta">#</span><span class="bash">  cf:a             timestamp=2021-05-01T17:46:15.064, value=value1</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 根据表名、row key和列删除数据，一个单元格</span><br>delete &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;, &#x27;&#123;row key&#125;&#x27;, &#x27;&#123;column family&#125;:&#123;column qualifier&#125;&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 根据表名、row key删除数据，row key对应的一整行</span><br>deleteall &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;, &#x27;&#123;row key&#125;&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 清空表</span><br>truncate &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;<br></code></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><font color="Red">注意：</font></h3><ul><li><p>row key为字符串类型，其排序是按照字符串的大小排序，如’10010’ &gt; ‘1001’。</p></li><li><p>get命令的列参数哪里如果没有冒号，则这个参数是指column family而不是column qualifier。</p></li><li><p>scan命令如果有STARTROW和STOPROW参数，则筛选范围为左闭右开！</p></li><li><p>数据的改操作没有update命令，其实直接put进去一个值，就会自动完成改操作，有点类似于hashmap直接put后会覆盖原来的值这种。</p></li><li><p>创建表和列簇时的VERSION属性表示这个这个列簇最终将会存几个版本的数据，如VERSION=2，则取数据时设置VERSION=3也只能拿到两条数据，并且在hbase空间时，除最新的两个版本的数据会被保留外，其余版本数据都会从磁盘中删除。</p></li></ul><h2 id="五、分布式部署"><a href="#五、分布式部署" class="headerlink" title="五、分布式部署"></a>五、分布式部署</h2><h3 id="1、伪分布式"><a href="#1、伪分布式" class="headerlink" title="1、伪分布式"></a>1、伪分布式</h3><p><strong>伪分布式：在同一个服务器中部署，但是HMaster，HRegionServer和ZooKeeper服务在不同的JVM进程中。</strong></p><p>前提：先启动zookeeper服务（可以单机模式），再启动hadoop服务（至少伪分布式），最后才能启动hbase</p><p>配置/conf/hbase-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /conf/hbase-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 为true则是分布式的，为false则是单机版 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这个是指数据的根目录在哪里，可以指定hdfs文件系统，即在hadoop的etc/hadoop/core-site.xml中配置的fs.defaultFS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://localhost:9000/hbase<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 官网文档说还要删除hbase.tmp.dir配置和hbase.unsafe.stream.capability.enforce配置 --&gt;</span><br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动hbase</span><br>bin/start-hbase.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 在hadoop中校验是否在hdfs文件系统中创建了一个hbase的文件夹</span><br>bin/hadoop fs -ls /hbase<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> zookeeper、hadoop和hbase全部启动成功后，运行jps命令结果应该是这样的。如果没有jps命令，linux会提示你安装一个jdk的东西</span><br>jps<br>6976 DataNode           # hadoop<br>6787 NameNode           # hadoop<br>6531 QuorumPeerMain     # zookeeper<br>7237 SecondaryNameNode  # hadoop<br>7941 Jps                # jps<br>7592 HMaster            # hbase<br>7786 HRegionServer      # hbase<br></code></pre></td></tr></table></figure><h3 id="2、完全分布式"><a href="#2、完全分布式" class="headerlink" title="2、完全分布式"></a>2、完全分布式</h3><p><code>hbase-site.xml</code>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>./tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://192.168.0.201:9000/hbase<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>192.168.0.201,192.168.0.202,192.168.0.203<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/home/yury/zookeeper-3.6.3/zookeeper-data/hbase<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、注意点"><a href="#3、注意点" class="headerlink" title="3、注意点"></a>3、注意点</h3><p>1、各个服务器之间的时间必须要同步，不然会出现不可预知的错误</p><h2 id="六、HBase进阶"><a href="#六、HBase进阶" class="headerlink" title="六、HBase进阶"></a>六、HBase进阶</h2><h3 id="1、HBase架构"><a href="#1、HBase架构" class="headerlink" title="1、HBase架构"></a>1、HBase架构</h3><p>HMaster负责DDL操作，而HRegionServer负责DML操作，而实际操作中都会有zookeeper，zookeeper则是负责调度HRegionServer，因此当HMaster挂了，并不影响DML操作，只是不能进行DDL操作。</p><p>HLog类似于MySQL的Binlog，防止数据库奔溃时数据丢失。</p><p><img src="/images/HBase%E6%9E%B6%E6%9E%84.png"></p><h3 id="2、写数据流程"><a href="#2、写数据流程" class="headerlink" title="2、写数据流程"></a>2、写数据流程</h3><ul><li>收到put请求：put table/rowkey/cf/column value</li><li>前往meta-region-server这个服务器，请求查询该表的meta表所在RegioinServer</li><li>前往meta表所在服务器，请求查询该表和列簇所在的RegioinServer</li><li>将该put请求发送给对应的服务器</li></ul><p><img src="/images/HBase%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png"></p><h3 id="3、MemStore-Flush"><a href="#3、MemStore-Flush" class="headerlink" title="3、MemStore Flush"></a>3、MemStore Flush</h3><p>即把内存中的数据刷新到HDFS中。</p><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>hbase.regionserver.global.memstore.size</td><td>全局配置，一个regionserver中所有memstore之和的最大值，默认为堆内存的40%，当memstore超过这个值时，就会阻塞写数据操作</td></tr><tr><td>hbase.regionserver.global.memstore.size.lower.limit</td><td>全局配置，一个regionserver中所有memstore之和的最大值，默认为堆内存的40%*0.95=38%，当memstore超过这个值时，就会开始flush操作，此时还不会阻塞写数据操作</td></tr><tr><td>hbase.regionserver.optionalcacheflushinterval</td><td>内存中的最后一次编辑的数据文件在自动刷新前能够存活的最长时间，默认1小时，当某些数据超过这个时间时，即使memstore内存没达到flush阈值，也会进行flush</td></tr><tr><td>hbase.hregion.memstore.flush.size</td><td>单个region中memstore的缓存最大值，超过这个值时这个region就会进行flush，默认值为128M</td></tr></tbody></table><h3 id="4、读数据流程"><a href="#4、读数据流程" class="headerlink" title="4、读数据流程"></a>4、读数据流程</h3><ul><li>收到get请求</li><li>前往meta-region-server查询meta表所在的RegionServer</li><li>前往meta表所在服务器，请求查询该表和列簇所在的RegioinServer</li><li>同时读memstore（内存）和storefile（磁盘），将两份数据读进block cache，取时间戳最大的那条数据。</li></ul><p><img src="/images/HBase%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png"></p><h3 id="5、StoreFile-Compaction"><a href="#5、StoreFile-Compaction" class="headerlink" title="5、StoreFile Compaction"></a>5、StoreFile Compaction</h3><p>hdfs中的hfile文件的合并，<font color="Red">compaction操作是先全部读出来，再重新合并在一起。</font>有以下两种：</p><ul><li>Minor compaction：只选取一些小的文件进行合并，不会删除delete类型或时间戳更小的数据</li><li>Major compaction：将一个store下的所有hfile合并成一个大文件，对于相同rowkey且时间戳更小的数据会执行物理删除操作</li></ul><p>配置：</p><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>hbase.hregion.majorcompaction</td><td>一个region进行自动major compaction的周期，默认为7天，即7天自动进行一次大合并。生产环境不建议开启（设置为0），因为很耗资源，而是手动进行major compaction</td></tr><tr><td>hbase.hregion.majorcompaction.jitter</td><td>抖动比例，不管，反正都会被关掉</td></tr><tr><td>hbase.hstore.compactionThreshold</td><td>一个store中允许存的hfile的最大值，超过或等于这个值，就会被合并到一个新的hfile中，默认值为3</td></tr></tbody></table><h3 id="6、真正删数据发生在什么时候"><a href="#6、真正删数据发生在什么时候" class="headerlink" title="6、真正删数据发生在什么时候"></a>6、真正删数据发生在什么时候</h3><ul><li>进行flush时，内存中版本更老的数据会被删除，即老版本数据不会被写入hfile中</li><li>进行major compaction时会将老版本数据删除</li></ul><h3 id="7、Region-Split"><a href="#7、Region-Split" class="headerlink" title="7、Region Split"></a>7、Region Split</h3><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>hbase.hregion.max.filesize</td><td>一个region的最大大小。默认值为10G。</td></tr></tbody></table><p>当一个region中的某个store下的所有storefile总大小超过<code>Min(&quot;count of region&quot;^2*&quot;hbase.hregion.memstore.flush.size&quot;, &quot;hbase.hregion.max.filesize&quot;)</code>时，该region就会进行拆分。</p><p><strong>数据热点问题：</strong></p><p>第一个region的拆分的阈值为128M，拆分为两个，分别为64M</p><p>rowkey是自增的，在第二个region后面新增数据</p><p>第二个region的拆分的阈值为512M（2^2*128），拆分为两个，分别为256M</p><p>rowkey继续自增，在第三个region后面新增数据</p><p>第三个region的拆分阈值为1152M（3^2*128），拆分为两个，分别为576M</p><p>rowkey继续自增……</p><p>因此，这样的话第n个region的大小为：Min(n^2*64M, 5G)，即region在到达5G之前，各个regino的大小差异会比较大，即数据会集中在某几个region中，导致这几个region服务器压力很大。</p><p><strong>官方建议，使用更少的列簇，将更多的列放进同一个列簇中，而不是创建更多的列簇，因为多个列簇flush后容易形成多个小文件</strong></p><h2 id="七、优化"><a href="#七、优化" class="headerlink" title="七、优化"></a>七、优化</h2><h3 id="1、高可用"><a href="#1、高可用" class="headerlink" title="1、高可用"></a>1、高可用</h3><p>在创建conf/backup-master这个文件，在里面写入备份的master结点的服务器，当主节点挂了之后，会选举一个备份主节点来顶替主节点的位置</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.141.142</span><br><span class="hljs-number">192.168.141.143</span><br></code></pre></td></tr></table></figure><h3 id="2、预分区"><a href="#2、预分区" class="headerlink" title="2、预分区"></a>2、预分区</h3><p>（1）手动设置预分区（更常用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">create &quot;staff&quot;, &quot;info&quot;, &quot;partition&quot;, SPLITS =&gt; [&#x27;1000&#x27;, &#x27;2000&#x27;, &#x27;3000&#x27;, &#x27;4000&#x27;]<br></code></pre></td></tr></table></figure><p>（2）手动生成16进制预分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">create &quot;staff2&quot;, &quot;info&quot;, &quot;partition2&quot;, &#123;NUMREGIONS =&gt; 15, SPLITALGO =&gt; &#x27;HexStringSplit&#x27;&#125;<br></code></pre></td></tr></table></figure><p>（3）按照文件中设置的分区规则预分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在hbase根目录下</span><br>touch splits.txt<br>aaaa<br>bbbb<br>cccc<br>dddd<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">create &quot;staff3&quot;, &quot;info&quot;, &quot;partition3&quot;, SPLITS_FILE =&gt; &#x27;splits.txt&#x27;<br><span class="hljs-meta">#</span><span class="bash"> 系统会给splits.txt这个文件进行排序</span><br></code></pre></td></tr></table></figure><p>（4）使用javaAPI创建分区</p><p>略</p><h3 id="3、rowkey的设计"><a href="#3、rowkey的设计" class="headerlink" title="3、rowkey的设计"></a>3、rowkey的设计</h3><p><font color="Red">rowkey要保持散列性（随机性，使其可以随机落在不同的region中）、唯一性、长度足够长等原则，最好是70-100位字母或数字。</font></p><p>如生成随机数、hash、散列值、字符串拼接。</p><h4 id="（1）案例1"><a href="#（1）案例1" class="headerlink" title="（1）案例1"></a>（1）案例1</h4><p>存储通话记录以及通话详情的rowkey设计。需存储的数据如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phone_from</span>   phone_to     time_start           duration<br><span class="hljs-attribute">13112345678</span>  <span class="hljs-number">13187654321</span>  <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span> <span class="hljs-number">12</span>:<span class="hljs-number">12</span>:<span class="hljs-number">12</span>  <span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><p>首先根据业务对未来十年的数据的预期，需要设置300个分区，分区键分别是：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">000</span><span class="hljs-string">|</span><br><span class="hljs-number">001</span><span class="hljs-string">|</span><br><span class="hljs-number">002</span><span class="hljs-string">|</span><br>...<br><span class="hljs-number">156</span><span class="hljs-string">|</span><br><span class="hljs-number">157</span><span class="hljs-string">|</span><br>...<br><span class="hljs-number">298</span><span class="hljs-string">|</span><br></code></pre></td></tr></table></figure><p>我们将rowkey前三位作为分区号，那么为了保证随机性，我们如何将数据散列分布在这300个分区内呢？即我们如何设计rowkey以保证数据会随机分布在300个分区中？</p><p>此外根据业务需求，我们最好将同一拨出号码的同一个月份的通话记录放在一个分区内，以便以后做计算更快。</p><p>我们设计这样一个算法：</p><p>因此有300个分区，因此我们将rowkey的前三位作为分区号，从第4位开始，我们将拨出号码作为字符串拼接进去，再将通话开始时间拼接进去，以下划线分割，如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">xxx_13112345678_2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span> <span class="hljs-number">12</span>:<span class="hljs-number">12</span>:<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>那么如何将这个rowkey随机分布到300个分区中且同一拨出号码同一月份的通话记录在同一分区呢？即rowkey前面的xxx要根据后面的13112345678_2021-01-01 12:12:12来区分。</p><ul><li>首先，不同的手机号可以随机区分开，因此可以用手机号进行hash，这样不同手机号的hashcode是随机分布的</li><li>其次，同一拨出号码的同一月份要放一起，因此可以将手机号+年月进行hash，这样同一手机号同一月份的hashcode是相同的</li><li>最后，我们只需要三位数字来存储分区号，因此我们可以通过获取hashcode除以299的余来获取分区号</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">分区号=<span class="hljs-comment">(hash(13112345678_202101)</span>)<span class="hljs-meta">%</span><span class="hljs-number">299</span><br></code></pre></td></tr></table></figure><p><font color="Red">技巧：我们对分区键的设计可以用一个常用符号中ascii序号最大的符号为结尾，如<code>|</code>，而rowkey中以一个ascii序号小点的符号为分隔符，如<code>_</code>。这样<code>000|</code>就会大于任意以<code>000_</code>开始的值。且我们在扫描表时，是左闭右开的原则，这样做对于rowkey的比较起来更方便，如下。</font></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 扫描001分区的数据</span><br>STARTKEY =&gt; &#x27;001&#x27;, STOPKEY =&gt; &#x27;001|&#x27;<br><br><span class="hljs-meta"># 扫描某拨出号码在4月份的数据</span><br>STARTKEY =&gt; &#x27;XXX_<span class="hljs-number">1311234567</span>8_<span class="hljs-number">202103</span>&#x27;, STOPKEY =&gt; &#x27;XXX_<span class="hljs-number">1311234567</span>8_<span class="hljs-number">202103</span>|&#x27;<br><span class="hljs-meta"># 其中xxx=(hash(13112345678_202103))%299</span><br></code></pre></td></tr></table></figure><h3 id="4、基础优化"><a href="#4、基础优化" class="headerlink" title="4、基础优化"></a>4、基础优化</h3><p>（1）允许在HDFS的文件中追加内容</p><p>hdfs-site.xml、hbase-site.xml</p><p>属性：dfs.support.append</p><p>解释：开启HDFS追加同步，可以优秀地配合HBase的数据同步和持久化。默认值为true。</p><p>（2）优化DataNode允许的最大文件打开数</p><p>hdfs-site.xml</p><p>属性：dfs.datanode.max.transfer.threads</p><p>解释：</p>]]></content>
    
    
    <categories>
      
      <category>bigdata</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis-study</title>
    <link href="/java/mybatis/mybatis-study/"/>
    <url>/java/mybatis/mybatis-study/</url>
    
    <content type="html"><![CDATA[<p>练习用代码：<a href="https://github.com/yury757/Mybatis-Study">yury757/Mybatis-Study (github.com)</a></p><h2 id="一、Mybatis问题"><a href="#一、Mybatis问题" class="headerlink" title="一、Mybatis问题"></a>一、Mybatis问题</h2><p>Mybatis遇到的问题大部分有以下五类：</p><p>1、配置文件没有注册</p><p>2、绑定接口错误</p><p>3、方法名不对</p><p>4、返回类型不对</p><p>5、Maven导出资源问题</p><h2 id="二、Mybatis实现方式"><a href="#二、Mybatis实现方式" class="headerlink" title="二、Mybatis实现方式"></a>二、Mybatis实现方式</h2><ul><li>写一个实体类和对应的查询接口</li><li>本来我们应该手写实现这个查询接口的类，并在对应的方法里面写sql语句、使用SqlSession执行SQL语句，再把结果集强转成我们自己的实体类。</li><li>Mybatis则不需要我们手写这个实现类，而是弄了一个mapper的xml文件，里面定义了<strong>某个接口的某个方法的实现</strong>，我们只需要在xml中定义这个方法的SQL语句、参数类型、参数集、结果类型、结果集等标签。</li><li>再将对应的mapper注册到Mybatis的配置文件中。</li><li><strong>然后项目启动时，Mybatis框架去配置文件的注册中心中把注册过的类提前实现好，生成.class字节码文件（猜测）</strong>，我们只需要通过<code>getMapper(UserDao.class)</code>方法（这个方法里面肯定封装了newInstance或类似的方法）就可以拿到对应类的实例，然后直接调用相应的方法就行。而且会自动帮我们把结果集封装到mapper定义的结果类型中。</li></ul><h2 id="三、Mybatis中的三个核心类"><a href="#三、Mybatis中的三个核心类" class="headerlink" title="三、Mybatis中的三个核心类"></a>三、Mybatis中的三个核心类</h2><h3 id="（1）SqlSessionFactoryBuilder"><a href="#（1）SqlSessionFactoryBuilder" class="headerlink" title="（1）SqlSessionFactoryBuilder"></a>（1）SqlSessionFactoryBuilder</h3><p>这个类是<strong>用于创建SqlSessionFactory对象的</strong>，SqlSessionFactory对象一旦创建就不再需要SqlSessionFactoryBuilder了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用mybatis第一步，获取SqlSessionFactory对象</span><br><span class="hljs-keyword">static</span>&#123;<br>    String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    InputStream inputStream = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        inputStream = Resources.getResourceAsStream(resource);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（2）SqlSessionFactory"><a href="#（2）SqlSessionFactory" class="headerlink" title="（2）SqlSessionFactory"></a>（2）SqlSessionFactory</h3><p>SqlSessionFactory一旦被创建，应该在程序运行期间一直存在，因为<strong>它是创建SqlSession对象的工厂</strong>。默认为单例模式。</p><h3 id="（3）SqlSession"><a href="#（3）SqlSession" class="headerlink" title="（3）SqlSession"></a>（3）SqlSession</h3><p>SqlSession是用于访问数据库的一个会话。</p><ul><li>SqlSession实例<strong>不是线程安全的</strong>，因此避免被共享，最佳的使用域是请求或非静态方法作用域。</li><li>使用完一个SqlSession后<strong>一定一定一定</strong>要关闭它，为避免关闭资源时异常，最好使用以下方式使用SqlSession</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取SqlSession对象的方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>&#125;<br><br><span class="hljs-comment">// 重载方法，选择是否自动提交</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> autoCommit)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(autoCommit);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(SqlSession sqlSession = MybatisUtils.getSqlSession())&#123;<br>    UserDao userDao = sqlSession.getMapper(UserDao.class);<br>    List&lt;User&gt; userList = userDao.getUserList();<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、Mapper标签属性注意事项"><a href="#四、Mapper标签属性注意事项" class="headerlink" title="四、Mapper标签属性注意事项"></a>四、Mapper标签属性注意事项</h2><ul><li><code>id</code>：对应接口的方法名</li><li><code>resultType</code>：结果集类型，要写全限定类名，或别名</li><li><code>parameterType</code>：参数类型</li><li>当接口方法只有一个参数时，<code>#&#123;&#125;</code>中有以下几种填法<ul><li>若传入参数类型是一个实体类或其他类，<code>#&#123;&#125;</code>可直接填入相应属性名</li><li>若传入参数类型是<code>Map</code>接口类（可以用别名<code>map</code>代表<code>Map</code>），<code>#&#123;&#125;</code>可直接填入相应的键值</li><li>若传入参数是<code>String</code>、<code>int</code>等其他类型，<code>#&#123;&#125;</code>填任意值数字或字母的组合都行，建议使用<code>param1</code></li></ul></li><li>当接口方法只有多个参数时，<code>parameterType</code>可不填，<code>#&#123;&#125;</code>按接口方法的参数顺序填入<code>#&#123;param1&#125;</code>、<code>#&#123;param2&#125;</code>。或者在接口处使用<code>@param</code>注解，给参数起一个别名。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有两个类型相同的参数的查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTwoUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;param1&#125; or id = #&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有两个类型不同的参数的查询2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTwoUserById2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Object&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;param1&#125; or name = #&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有两个类型不同的参数的查询3 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTwoUserById3&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;param1&#125; or id = #&#123;param2.id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有两个类型不同的参数的查询4 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTwoUserById4&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;id&#125; or id = #&#123;user.id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 有两个类型不同的参数的查询4，使用<span class="hljs-doctag">@Param</span>注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getTwoUserById4</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id,<span class="hljs-meta">@Param(&quot;user&quot;)</span> User user)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>模糊查询有两种方式<ul><li>在mapper中这样用来拼接<code>%</code>：<code>like &quot;%&quot;#&#123;param1&#125;&quot;%&quot;</code></li><li>mapper中仍然使用<code>like #&#123;param1&#125;</code>，而在调用方式时手动在传入参数两边加上<code>%</code></li></ul></li></ul><p>推荐使用第一种，因为在参数里面加<code>%</code>可能面临被转义的风险。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike1&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where name like &quot;%&quot;#&#123;param1&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where name like #&#123;param1&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>resultMap</code>：结果集映射，将从数据库中取出来的字段和类中的属性做一个映射关系，为解决数据库字段名和类属性名不一致的问题。<code>column</code>为数据库字段名，<code>property</code>为类的属性名。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;pwd&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五、mybatis-config-xml配置解析"><a href="#五、mybatis-config-xml配置解析" class="headerlink" title="五、mybatis-config.xml配置解析"></a>五、mybatis-config.xml配置解析</h2><h3 id="（1）properties标签"><a href="#（1）properties标签" class="headerlink" title="（1）properties标签"></a>（1）properties标签</h3><p>可以引入其他某个<code>.properties</code>文件，作为参数值在本配置文件中使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>也可以可以加入<code>property</code>标签加入自定义参数。</p><p>对于有重复的参数，参数调用顺序是，先生成<code>property</code>标签中的参数，再读取引入的配置文件中的参数，对于有重复的参数会被覆盖掉，理解成一个<code>HashMap</code>即可。</p><h3 id="（2）settings标签"><a href="#（2）settings标签" class="headerlink" title="（2）settings标签"></a>（2）settings标签</h3><p>有以下属性：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a></p><p>主要用的有：</p><ul><li>cacheEnabled：缓存</li><li>useGeneratedKeys：自动生成主键</li><li>mapUnderscoreToCamelCase：数据库字段名转java属性名时自动重命名</li><li>logImpl：日志实现类</li></ul><p>官网也给了一个建议的设置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PARTIAL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WARNING&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultExecutorType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SIMPLE&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultFetchSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OTHER&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="（3）typeAliases标签"><a href="#（3）typeAliases标签" class="headerlink" title="（3）typeAliases标签"></a>（3）typeAliases标签</h3><p>为类型设置别名，这样避免了写全限定类型或全限定接口名。</p><p>当为一整个包的类设置别名时，若类型带有<code>@Alias</code>注解时，别名为注解值；否则别名为对应类的类型，首字母小写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;typeAlias type=&quot;org.yuyr757.pojo.User&quot; alias=&quot;UserAlias&quot;/&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.xxxxx.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Mybatis有一些默认别名，如下：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases</a></p><h3 id="（4）mappers映射器"><a href="#（4）mappers映射器" class="headerlink" title="（4）mappers映射器"></a>（4）mappers映射器</h3><p>官网有四种写法，使用完全限定资源定位符（URL）不推荐使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;mapper resource=&quot;org/xxxx/Dao/UserMapper.xml&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;mapper class=&quot;org.xxxx.Dao.UserMapper&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.xxxx.Dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最推荐使用第四种，将包内的映射器接口实现全部注册为映射器。使用条件：</p><ul><li>接口和mapper必须放在同一个包下，建议包名为Dao，<font color="Red">同一个包下是指编译后同一个包下，可以在resources目录下也新建一个<code>org.xxxx.Dao</code>目录，这样接口和mapper配置就会编译到同一个包下了。</font></li><li>接口和mapper两个文件名必须相同（文件类型后缀不管）</li><li>使用这种方式必须在<code>pom.xml</code>中把<code>src/java/main</code>下的xml文件作为配置文件添加到<code>build.resources.resource</code>中</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">java.org.xxxx.Dao<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserMapper</span>.</span></span>java（接口）<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Department</span>.</span></span>java<br>resources.org.xxxx.Dao<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserMapper</span>.</span></span>xml（mapper）<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Department</span>.</span></span>xml<br></code></pre></td></tr></table></figure><h2 id="六、分页"><a href="#六、分页" class="headerlink" title="六、分页"></a>六、分页</h2><p>1、在mapper的sql语句中把startIndex和endIndex作为参数传入进去</p><p>2、分页插件PageHelper：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p><h2 id="七、使用注解开发"><a href="#七、使用注解开发" class="headerlink" title="七、使用注解开发"></a>七、使用注解开发</h2><p>实现方式：反射、动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对于这种很简单的sql，可以不用写mapper，直接写一个Select注解，里面传入sql值即可</span><br><span class="hljs-comment"> * 注意点：</span><br><span class="hljs-comment"> * 1、数据库字段名和类属性名要相同</span><br><span class="hljs-comment"> * 2、returnType为接口的返回类型</span><br><span class="hljs-comment"> * 3、parameterType为接口的参数类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;param1&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserByIdUsingAnnotation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;param1&#125; or name = #&#123;param2&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserByIdUsingAnnotation2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span></span>;<br><br><span class="hljs-meta">@Insert(&quot;insert into user(id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUserUsingAnnotation</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="八、连表查询1"><a href="#八、连表查询1" class="headerlink" title="八、连表查询1"></a>八、连表查询1</h2><p>在数据库设计时，为降低数据的冗余，一般都会做到三范式。比如学生老师信息表可能会做成以下这种方式：</p><p>比如一个学生表如下：</p><table><thead><tr><th>ID</th><th>NAME</th><th>TEACHER_ID</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>1</td></tr><tr><td>2</td><td>小五</td><td>1</td></tr><tr><td>3</td><td>小华</td><td>3</td></tr><tr><td>4</td><td>小石</td><td>2</td></tr><tr><td>5</td><td>李笑</td><td>3</td></tr><tr><td>6</td><td>孙武</td><td>2</td></tr><tr><td>7</td><td>黄铭</td><td>2</td></tr></tbody></table><p>一个老师表如下：</p><table><thead><tr><th>ID</th><th>NAME</th></tr></thead><tbody><tr><td>1</td><td>李老师</td></tr><tr><td>2</td><td>黄老师</td></tr><tr><td>3</td><td>钱老师</td></tr></tbody></table><p>因此我们的java对象应该是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Teacher teacher; <span class="hljs-comment">// 引用了一个老师</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们在配置mapper时有两种方法：</p><h3 id="1、通过子查询方式"><a href="#1、通过子查询方式" class="headerlink" title="1、通过子查询方式"></a>1、通过子查询方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentTeacher&quot;</span>&gt;</span><br>    select * from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 对象使用association，集合使用collection --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;teacher_id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>    select * from teacher where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>association</code>标签的属性解释：</p><ul><li><code>property</code>：属性名</li><li><code>column</code>：该属性要用数据库中的某个字段名去关联查询</li><li><code>javaType</code>：该属性的类型</li><li><code>select</code>：从数据库拿到这个类的数据的select语句</li></ul><p>这种方式实际上就是把查询出来的关联字段去重，去重后再去数据库里面查相应的数据，再封装到对象中。</p><p>如打开日志后可以发现这种方式实际上查了四次数据库。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-02-22 17:40:11[ <span class="hljs-builtin-name">DEBUG</span> ]Opening JDBC<span class="hljs-built_in"> Connection</span><br><span class="hljs-built_in"></span>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]Created<span class="hljs-built_in"> connection </span>202125197.<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]==&gt;  Preparing: select * <span class="hljs-keyword">from</span> student <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]==&gt; Parameters: <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt;  Preparing: select * <span class="hljs-keyword">from</span> teacher where id = ? <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt; Parameters: 1(Integer)<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;====      Total: 1<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt;  Preparing: select * <span class="hljs-keyword">from</span> teacher where id = ? <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt; Parameters: 3(Integer)<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;====      Total: 1<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt;  Preparing: select * <span class="hljs-keyword">from</span> teacher where id = ? <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt; Parameters: 2(Integer)<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;====      Total: 1<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;==      Total: 7<br>Student&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小五&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小华&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;钱老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小石&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=5, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李笑&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;钱老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=6, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;孙武&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=7, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄铭&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]Closing JDBC<span class="hljs-built_in"> Connection </span>[com.mysql.cj.jdbc.ConnectionImpl@c0c2f8d]<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]Returned<span class="hljs-built_in"> connection </span>202125197 <span class="hljs-keyword">to</span> pool.<br></code></pre></td></tr></table></figure><h3 id="2、通过连表查询方式"><a href="#2、通过连表查询方式" class="headerlink" title="2、通过连表查询方式"></a>2、通过连表查询方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentTeacher2&quot;</span>&gt;</span><br>    select s.id, s.name, s.teacher_id, t.name as teacher_name<br>    from student s left join teacher t on s.teacher_id = t.id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;teacher_id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;teacher_name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同样有一个<code>association</code>标签，而下面还有封装这个<code>teacher</code>类的子标签，子标签定义了初始化这个类所需要的字段映射。</p><ul><li><code>property</code>：属性名</li><li><code>javaType</code>：该属性的类型</li></ul><p>这种方式只需要查一次数据库：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-02-22 17:41:58[ <span class="hljs-builtin-name">DEBUG</span> ]Opening JDBC<span class="hljs-built_in"> Connection</span><br><span class="hljs-built_in"></span>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]Created<span class="hljs-built_in"> connection </span>202125197.<br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]==&gt;  Preparing: select s.id, s.name, s.teacher_id, t.name as teacher_name <span class="hljs-keyword">from</span> student s left join teacher t on s.teacher_id = t.id <br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]==&gt; Parameters: <br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;==      Total: 7<br>Student&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小五&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小石&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=6, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;孙武&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=7, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄铭&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小华&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;钱老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=5, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李笑&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;钱老师&#x27;</span>&#125;&#125;<br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]Closing JDBC<span class="hljs-built_in"> Connection </span>[com.mysql.cj.jdbc.ConnectionImpl@c0c2f8d]<br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]Returned<span class="hljs-built_in"> connection </span>202125197 <span class="hljs-keyword">to</span> pool.<br></code></pre></td></tr></table></figure><p><font color="Red">具体使用哪种方式视情况而定，简单的连表可以使用第二种。当连表查询的sql特别复杂，以致于难以在sql层面去优化时，可以使用第一种，主查询把其他需要连的表的主键查询来，子查询再用主键去查，可能会提高效率。</font></p><h2 id="九、连表查询2"><a href="#九、连表查询2" class="headerlink" title="九、连表查询2"></a>九、连表查询2</h2><p>对于以上的学生老师表，我们的java类还可能是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student2</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> teacherId;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher2</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students; <span class="hljs-comment">// 老师这里有多个学生对象的引用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>同样有子查询和连表查询两种方式：</p><h3 id="1、通过子查询方式-1"><a href="#1、通过子查询方式-1" class="headerlink" title="1、通过子查询方式"></a>1、通过子查询方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 子查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacherById2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;teacher2Student2&quot;</span>&gt;</span><br>    select t.id, t.name from teacher t where t.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher2Student2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;teacher2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;student2&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudent&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;student2Map&quot;</span>&gt;</span><br>    select * from student where teacher_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student2Map&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;student2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;teacher_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、通过连表查询方式-1"><a href="#2、通过连表查询方式-1" class="headerlink" title="2、通过连表查询方式"></a>2、通过连表查询方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 连表查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacherById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;teacher2Student&quot;</span>&gt;</span><br>    select t.id, t.name, s.id as student_id, s.name as student_name<br>    from teacher t left join student s on t.id = s.teacher_id<br>    where t.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher2Student&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;teacher2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里要用ofType，即集合的元素类型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;student2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;student_id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;student_name&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十、缓存"><a href="#十、缓存" class="headerlink" title="十、缓存"></a>十、缓存</h2><h3 id="1、本地缓存。"><a href="#1、本地缓存。" class="headerlink" title="1、本地缓存。"></a>1、本地缓存。</h3><p>作用域为SqlSession，默认开启。</p><p>在一个session中查两次相同的sql，只会执行一次sql，第二次拿到的对象，和第一次拿到的对象的<font color="Red">地址都是一样的。</font><strong>本地缓存将会在做出修改、事务提交或回滚，以及关闭session时清空。默认情况下，本地缓存数据的生命周期等同于整个session的周期。</strong></p><h3 id="2、二级缓存。"><a href="#2、二级缓存。" class="headerlink" title="2、二级缓存。"></a>2、二级缓存。</h3><p>作用域为mapper的namespace，<font color="Red">当sqlsession作出修改、事务提交、回滚或关闭时，会把本地缓存扔到二级缓存中。即一级缓存失效时，会把其缓存的数据扔到二级缓存中。</font></p><p>需要在mapper中加入<code>&lt;cache/&gt;</code>就可以为这个mapper开启二级缓存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">       <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>mybatis-config.xml</code>配置中，设置<code>cacheEnabled</code>为true可以为所有mapper开启二级缓存。</p><p>缓存清除策略：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><h3 id="3、缓存顺序"><a href="#3、缓存顺序" class="headerlink" title="3、缓存顺序"></a>3、缓存顺序</h3><p><strong>二级缓存 =&gt; 本地缓存 =&gt; 数据库</strong></p><h2 id="N、注意事项"><a href="#N、注意事项" class="headerlink" title="N、注意事项"></a>N、注意事项</h2><ul><li>insert、update、delete要手动提交事务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sqlSession.commit();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>springMVC-study</title>
    <link href="/java/springMVC/SpringMVC-Study/"/>
    <url>/java/springMVC/SpringMVC-Study/</url>
    
    <content type="html"><![CDATA[<h2 id="一、回顾Servlet"><a href="#一、回顾Servlet" class="headerlink" title="一、回顾Servlet"></a>一、回顾Servlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 转发，forward</span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(request, response);<br><br><span class="hljs-comment">// 重定向，redirect</span><br>response.sendRedirect(<span class="hljs-string">&quot;/index.jsp&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- session失效时间，单位分钟 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、SpringMVC开始"><a href="#二、SpringMVC开始" class="headerlink" title="二、SpringMVC开始"></a>二、SpringMVC开始</h2><h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p><font color="Red">约定大于配置。</font></p><p>最重要的一个类：<code>DispatcherServlet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FrameworkServlet</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DispatcherServlet</span><span class="hljs-params">(WebApplicationContext webApplicationContext)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(webApplicationContext);<br>setDispatchOptionsRequest(<span class="hljs-keyword">true</span>);<br>&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;&#125;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/DispatcherServlet.png"></p><p><font color="Red">这个类的作用就是就是把不同的请求分发到不同的类。</font></p><h3 id="2、配置springmvc（重要！）"><a href="#2、配置springmvc（重要！）" class="headerlink" title="2、配置springmvc（重要！）"></a>2、配置springmvc（重要！）</h3><h4 id="1、web-xml"><a href="#1、web-xml" class="headerlink" title="1、web.xml"></a>1、web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开始配置SpringMVC --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1、注册DispatcherServlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 关联一个springmvc配置文件，本质是一个spring配置文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-config.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 启动级别 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    / 和 /* 是有区别的，用/，不能用/*</span><br><span class="hljs-comment">    /  ：匹配所有请求，不会匹配jsp</span><br><span class="hljs-comment">    /* ：匹配所有请求，包括jsp，即把返回一个.jsp页面也当作了一个请求</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、springmvc-config-xml"><a href="#2、springmvc-config-xml" class="headerlink" title="2、springmvc-config.xml"></a>2、springmvc-config.xml</h4><p>本质是一个spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 处理器映射器，有多种映射器 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这种映射器是通过bean的名字查找 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 处理器适配器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器，配置了前后缀，以后重定向到某个jsp时就可以不用写前后缀了 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置handler --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上面那个映射器会去查找和url名字相同的bean id --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 找到之后上面那个适配器就会把请求交给对应bean的class去处理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.controller.Hello2Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如下图</p><ul><li>配置<code>处理器映射器</code>就是为了做2、3、4三步，去找到对应的handler</li><li>配置<code>处理器适配器</code>就是为了做5、6、7、8四步，把对应的handler交给controller处理</li><li>配置<code>视图解析器</code>就是为了做9、10、11、12四步，把controller处理好的带model和view名字的MV对象交给视图解析器，先去处理对应的jsp，然后把生成好的页面返回给浏览器。</li></ul><p><img src="/images/SpringMVC-Flow.png"></p><h3 id="3、配置springmvc时404的问题"><a href="#3、配置springmvc时404的问题" class="headerlink" title="3、配置springmvc时404的问题"></a>3、配置springmvc时404的问题</h3><p>原因之一可能是：IDEA的项目结构中的<code>Artifacts</code>的<code>utput Layout</code>要确保<code>WEB-INF</code>目录下有<code>classes</code>和<code>lib</code>两个目录，若没有<code>lib</code>目录，则新建一个，然后把所有我们的依赖包放到<code>lib</code>目录中。</p><p><img src="/images/404solution.png"></p><h3 id="4、使用springmvc"><a href="#4、使用springmvc" class="headerlink" title="4、使用springmvc"></a>4、使用springmvc</h3><p>这里是采用实现Controller接口的方式，不建议使用，建议使用下面注解开发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">// 注意！！这个Controller是org.springframework.web.servlet.mvc.Controller，是一个接口</span><br><span class="hljs-comment">// 而不是org.springframework.stereotype.Controller，这个Controller是注解用的</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello2Controller</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 模型和视图</span><br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br><br>        <span class="hljs-comment">// 封装对象</span><br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;HelloSpringMVC&quot;</span>);<br><br>        <span class="hljs-comment">// 封装要跳转的对象</span><br>        mv.setViewName(<span class="hljs-string">&quot;hello2&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、使用注解开发SpringMVC"><a href="#三、使用注解开发SpringMVC" class="headerlink" title="三、使用注解开发SpringMVC"></a>三、使用注解开发SpringMVC</h2><p>web.xml中的配置不变，springmvc-config.xml中的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效，由IOC容器统一管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.yuye757.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置对url的检查，将一些静态资源交给默认的Servlet处理，非静态资源才让DispatcherServlet处理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启注解 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器，配置了前后缀，以后重定向到某个jsp时就可以不用写前后缀了 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span> <span class="hljs-comment">// 不写的话，就直接走方法的mapping uri</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span> <span class="hljs-comment">// 如果没有配置restful，这里一定要写，不写则找不到这个方法的uri</span><br>    <span class="hljs-comment">// uil为：localhost:8080/warName/hello/h1</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">// 封装数据</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello, SpringMVC Annotation!&quot;</span>);<br><br>        String viewName = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>        <span class="hljs-comment">// 加了@Controller注解的类下的所有加了@RequestMapping的方法</span><br>        <span class="hljs-comment">// 若返回的类型是字符串，且能够找到对应的jsp，就会被视图解析器处理</span><br>        <span class="hljs-comment">// /WEB-INF/jsp/$&#123;viewName&#125;.jsp</span><br>        <span class="hljs-keyword">return</span> viewName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、restful风格的uri"><a href="#四、restful风格的uri" class="headerlink" title="四、restful风格的uri"></a>四、restful风格的uri</h2><p>jsp不支持DELETE、PUT类型的方法，以下那两个方法看看即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/restful&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestfulController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 原来的方式：localhost:8080/warName/test?a=1&amp;b=2</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a + b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// restful方式：localhost:8080/warName/test/1/2</span><br>    <span class="hljs-comment">// @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a + b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;GET方法：&quot;</span> + res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// restful方式：localhost:8080/warName/test/1/2</span><br>    <span class="hljs-comment">// @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a - b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;POST方法：&quot;</span> + res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// restful方式：localhost:8080/warName/test/1/2</span><br>    <span class="hljs-comment">// @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.PUT)</span><br>    <span class="hljs-meta">@PutMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test4</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a * b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;PUT方法：&quot;</span> + res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// restful方式：localhost:8080/warName/test/1/2</span><br>    <span class="hljs-comment">// @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.DELETE)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test5</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a / b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;DELETE方法：&quot;</span> + res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、springmvc使用细节"><a href="#五、springmvc使用细节" class="headerlink" title="五、springmvc使用细节"></a>五、springmvc使用细节</h2><h3 id="1、转发和重定向"><a href="#1、转发和重定向" class="headerlink" title="1、转发和重定向"></a>1、转发和重定向</h3><p>可以在方法中加入request、response参数，使用servlet原生的转发或重定向方式。</p><p>在springmvc中可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/modelTest&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelTest1</span> </span>&#123;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/test1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>        <span class="hljs-comment">// 重定向：redirect</span><br>        mv.setViewName(<span class="hljs-string">&quot;redirect:/restful/test2/10/5&quot;</span>);<br>        <br>        <span class="hljs-comment">// 转发：forward</span><br>        <span class="hljs-comment">// mv.setViewName(&quot;forward:/restful/test2/10/5&quot;);</span><br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">注意：通过这种方式的转发会带上方法的类型，如POST、PUT。但是重定向不会，默认是GET方法。因为重定向实际上是重新发起了一次请求，因此默认是GET。</font></p><h3 id="2、参数"><a href="#2、参数" class="headerlink" title="2、参数"></a>2、参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.yuye757.pojo.User;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-comment">// 若有@RequestParam，则前端传入的参数以注解里面的名字为准，此时变量名失效。没有的话就只能用变量名。</span><br>    <span class="hljs-comment">// 建议都加上@RequestParam，这样可以很明显的告诉别人这是要从前端接收的参数</span><br>    <span class="hljs-comment">// http://localhost:8080/user/t1?username=123456</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Model model, <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前端接收到的参数：&quot;</span> + name);<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, name);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1、若参数为普通类型，则通过方法的参数名字和url的参数名字匹配</span><br><span class="hljs-comment">    2、若参数为对象，则会调用无参构造方法，再按照对象属性名和url的参数名去匹配，匹配到的就会调用其setter方法</span><br><span class="hljs-comment">       和url参数名没匹配上的属性或没有setter方法的属性则没有值</span><br><span class="hljs-comment">       若没有无参构造方法，则调用有参构造方法。总之把pojo类的构造方法写全是最好的。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// http://localhost:8080/user/t2?id=1&amp;name=我是一个名字&amp;age=12</span><br>    <span class="hljs-meta">@GetMapping(&quot;/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(User user, Model model)</span></span>&#123;<br>        String s = user.toString();<br>        System.out.println(s);<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, s);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、乱码"><a href="#3、乱码" class="headerlink" title="3、乱码"></a>3、乱码</h3><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 之前我们自己写filter来解决乱码问题 --&gt;</span><br><span class="hljs-comment">&lt;!-- 在springmvc中，他给我们写了一个过滤器来解决乱码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注意这里要用/*，之前上面说了/*可以把jsp资源也包括在处理范围类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、返回值"><a href="#4、返回值" class="headerlink" title="4、返回值"></a>4、返回值</h3><p>（1）让方法返回一个纯字符串给前端，而不是走视图解析器</p><ul><li>在类上面加<code>@RestController</code>，这个注解可以使类中的所有方法都返回字符串，而不是走视图解析器</li><li>在方法上面加<code>@ResponseBody</code>注解</li></ul><p>（2）返回json字符串</p><ul><li>使用jackson包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.controller;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.yuyr757.User.User;<br><br><span class="hljs-comment">// @RestController这个注解可以使类中的所有方法都返回字符串，而不是走视图解析器</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">// 使用这个注解，则不会走视图解析器，而是直接返回一个字符串</span><br>    <span class="hljs-comment">// produces = &quot;application/json;charset=utf-8&quot;，加上这个指明返回的页面格式和编码</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user/j1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;你好&quot;</span>, <span class="hljs-number">2</span>);<br>        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper(); <span class="hljs-comment">// 使用jackson包</span><br>        String s = objectMapper.writeValueAsString(user);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用fastjson包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user/j4&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">2</span>);<br>    list.add(user);<br><br>    <span class="hljs-comment">// 原生日期格式</span><br>    Date date = <span class="hljs-keyword">new</span> Date();<br>    list.add(date);<br><br>    <span class="hljs-comment">// 通过java.text.DateFormat的格式化</span><br>    ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    list.add(simpleDateFormat.format(date));<br><br>    <span class="hljs-comment">// 通过jackson格式化</span><br>    ObjectMapper objectMapper2 = <span class="hljs-keyword">new</span> ObjectMapper();<br>    objectMapper2.setDateFormat(simpleDateFormat);<br>    String s2 = objectMapper2.writeValueAsString(date);<br>    list.add(s2);<br><br>    <span class="hljs-keyword">return</span> JSON.toJSONString(list, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>); <span class="hljs-comment">// 使用fastjson</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（3）使用jackson包返回json字符串到前端后乱码问题</p><ul><li>在<code>@RequestMapping</code>注解里面加入<code>produces</code>参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/user/j1&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span><br></code></pre></td></tr></table></figure><ul><li>在springmvc-config.xml中配置jackson独有的配置（建议使用）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Jackson乱码解决--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）在前端使用json</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> user = &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;yuyr757&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">        <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span></span><br><span class="javascript">    &#125;;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(user);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;---------将对象解析为json----------&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">JSON</span>.stringify(user);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(value);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;---------将json解析为对象----------&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> object = <span class="hljs-built_in">JSON</span>.parse(value);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(object);</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="六、拦截器和过滤器"><a href="#六、拦截器和过滤器" class="headerlink" title="六、拦截器和过滤器"></a>六、拦截器和过滤器</h2><p><strong>拦截器</strong>：拦截器只会拦截访问的控制器方法，如果访问的是jsp、html、css、image、js是不会被拦截的。<font color="Red">实现了<code>HandlerInterceptor</code>接口的类就是拦截器。拦截器是AOP思想的一个具体应用。</font></p><p><strong>过滤器</strong>：在web.xml中配置的Filter就是过滤器，url_pattern配置了<code>/*</code>会对所有资源进行过滤。</p><p>登录拦截示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String username, String password, HttpSession session)</span></span>&#123;<br>        session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/goLogin&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">goLogin</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/main&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/logout&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span></span>&#123;<br>        session.removeAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/main&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">// return true即放行，return false则阻断</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        HttpSession session = request.getSession();<br>        System.out.println(request.getRequestURI());<br><br>        <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">&quot;Login&quot;</span>) || request.getRequestURI().contains(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>) != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 下面两个不会返回值，一般用于其他处理，如日志，或者直接删掉也可以</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuye757.interceptor.LoginInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、文件上传和下载"><a href="#七、文件上传和下载" class="headerlink" title="七、文件上传和下载"></a>七、文件上传和下载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileUploader</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        String filename = file.getOriginalFilename();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(filename))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件名：&quot;</span> + filename);<br><br>        <span class="hljs-comment">// 上传路径保存设置</span><br>        String path = session.getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br><br>        <span class="hljs-comment">// 如果路径不存在，则创建一个</span><br>        File realPath = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>            realPath.mkdir();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span> + realPath);<br><br>        <span class="hljs-comment">// 创建流</span><br>        InputStream is = file.getInputStream();<br>        OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(realPath + <span class="hljs-string">&quot;\\&quot;</span> + filename);<br><br>        <span class="hljs-comment">// 读写</span><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span>((len = is.read(buffer)) &gt; <span class="hljs-number">0</span>)&#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, buffer.length);<br>            os.flush();<br>        &#125;<br>        os.close();<br>        is.close();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br><br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        String filename = file.getOriginalFilename();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(filename))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件名：&quot;</span> + filename);<br><br>        <span class="hljs-comment">// 上传路径保存设置</span><br>        String path = session.getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br><br>        <span class="hljs-comment">// 如果路径不存在，则创建一个</span><br>        File realPath = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>            realPath.mkdir();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span> + realPath);<br><br>        <span class="hljs-comment">// 通过CommonsMultipartFile的方法直接写入文件</span><br>        file.transferTo(<span class="hljs-keyword">new</span> File(path + <span class="hljs-string">&quot;/&quot;</span> + filename));<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br><br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/download1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download1</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, String filename)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String path = request.getSession().getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br>        response.reset(); <span class="hljs-comment">// 设置页面不缓存，清空buffer</span><br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;multipart/form-data&quot;</span>);<br>        <span class="hljs-comment">// 设置响应头</span><br>        response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="hljs-string">&quot;utf-8&quot;</span>));<br><br>        File file = <span class="hljs-keyword">new</span> File(path + <span class="hljs-string">&quot;\\&quot;</span> + filename);<br>        System.out.println(<span class="hljs-string">&quot;下载文件为：&quot;</span> + file.toString());<br><br>        <span class="hljs-comment">// 读取文件流</span><br>        InputStream is = <span class="hljs-keyword">new</span> FileInputStream(file);<br>        <span class="hljs-comment">// 输出文件流</span><br>        OutputStream os = response.getOutputStream();<br><br>        <span class="hljs-comment">// 读写</span><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span>((len = is.read(buffer)) &gt; <span class="hljs-number">0</span>)&#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, buffer.length);<br>            os.flush();<br>        &#125;<br>        os.close();<br>        is.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>spring-study</title>
    <link href="/java/spring/Spring-study/"/>
    <url>/java/spring/Spring-study/</url>
    
    <content type="html"><![CDATA[<p>代码地址：<a href="https://github.com/yury757/SpringStudy">yury757/SpringStudy (github.com)</a></p><p><font color="Red">spring：约定大于配置！</font></p><h2 id="一、IOC（控制反转）"><a href="#一、IOC（控制反转）" class="headerlink" title="一、IOC（控制反转）"></a>一、IOC（控制反转）</h2><h3 id="1、什么是IOC"><a href="#1、什么是IOC" class="headerlink" title="1、什么是IOC"></a>1、什么是IOC</h3><p>之前都是我们手动new一个对象（比如new一个Dao层对象），然后使用这个对象的属性的方法。</p><p>而IOC就是不用我们去new这个对象，我们只要定义一些配置，然后把创建对象的工作交给spring框架处理，我们需要使用时直接把对象从IOC容器中取出来即可。</p><p><font color="Red">因此IOC（控制反转）的含义就是：spring中，对象创建的权利从我们程序员手动创建控制管理，转变为由spring框架去创建控制管理。</font></p><p><font color="Red">DI（依赖注入）的含义就是：spring框架在创建类的实例时，这个类的所有属性需要私有化，并且设置getter、setter方法，spring框架就可以通过setter方法给对应属性注入值。若没有相应的setter方法，则会报错。</font></p><p>配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用spring来创建对象，在spring中，这些对象都叫做bean --&gt;</span><br>    <span class="hljs-comment">&lt;!-- id：唯一id --&gt;</span><br>    <span class="hljs-comment">&lt;!-- class：需要new的类型 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- property：对象的属性 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- property.name：对象属性名 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- property.value：对象属性设置值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.Hello&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring_value&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>取出对象的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取spring的上下文对象</span><br>ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><span class="hljs-comment">// 我们的对象都在spring管理，我们要使用的话，直接去spring容器里面取</span><br>Hello hello = (Hello)context.getBean(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(hello.toString());<br></code></pre></td></tr></table></figure><p>和Mybatis有点像，都是通过配置文件来配置创建对象所需要的东西，然后把创建对象的工作交给框架来做。</p><p><font color="Red">只不过Mybatis是根据接口创建对象，这个对象的类型的java代码我们甚至没写过，而且对象里面只有方法（CRUD）。而spring的创建对象只是单纯的根据我们写好的java类去new一个实例，然后我们需要什么就取什么。</font></p><h3 id="2、通过bean创建对象的四种方式"><a href="#2、通过bean创建对象的四种方式" class="headerlink" title="2、通过bean创建对象的四种方式"></a>2、通过bean创建对象的四种方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 无参构造，再调用相应属性的setter方法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test_user_name1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有参构造，使用构造方法参数下标 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test_user_name2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有参构造，使用构造方法参数类型 --&gt;</span><br><span class="hljs-comment">&lt;!-- 不建议使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test_user_name3&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有参构造，使用构造方法参数参数名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test_user_name4&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、spring创建对象的时间"><a href="#3、spring创建对象的时间" class="headerlink" title="3、spring创建对象的时间"></a>3、spring创建对象的时间</h3><p><font color="Red">值得注意的是，bean默认为单例模式。对于单例模式的bean，当程序启动时，spring就会立即给帮我们把对象创建好了，而不是等我们调用getBean时创建的。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了无参构造方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了有参构造方法&quot;</span>);<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getName方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了setName方法&quot;</span>);<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getId方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了setId方法&quot;</span>);<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHello</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ApplicationContext context;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>); <span class="hljs-comment">// 在这里打断点调试</span><br>        <span class="hljs-comment">// 上面这条语句结束后，就立即打印了下面几句话</span><br>        <span class="hljs-comment">// 调用了无参构造方法</span><br>        <span class="hljs-comment">// 调用了setId方法</span><br>        <span class="hljs-comment">// 调用了setName方法</span><br>        <span class="hljs-comment">// 调用了有参构造方法</span><br>        <span class="hljs-comment">// 调用了有参构造方法</span><br>        <span class="hljs-comment">// 调用了有参构造方法</span><br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUser</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br>        User user1 = (User)context.getBean(<span class="hljs-string">&quot;user1&quot;</span>);<br>        System.out.println(user1.toString());<br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br>        User user2 = (User)context.getBean(<span class="hljs-string">&quot;user2&quot;</span>);<br>        System.out.println(user2.toString());<br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br>        User user3 = (User)context.getBean(<span class="hljs-string">&quot;user3&quot;</span>);<br>        System.out.println(user3.toString());<br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br>        User user4 = (User)context.getBean(<span class="hljs-string">&quot;user4&quot;</span>);<br>        System.out.println(user4.toString());<br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、spring配置文件"><a href="#4、spring配置文件" class="headerlink" title="4、spring配置文件"></a>4、spring配置文件</h3><h4 id="（1）bean标签"><a href="#（1）bean标签" class="headerlink" title="（1）bean标签"></a>（1）bean标签</h4><ul><li><p><code>id</code>：唯一id，用于获取到这个对象的id</p></li><li><p><code>class</code>：需要new的类型，要写全限定类名</p></li><li><p><code>property</code>：定义对象的属性的标签</p></li><li><p><code>constructor-arg</code>：定义构造函数的标签</p><ul><li><code>name</code>：对象属性名或构造函数的参数名</li><li><code>value</code>：普通值</li><li><code>ref</code>：引用一个bean</li><li><code>array</code>：注入一个数组</li><li><code>list</code>：注入一个列表</li><li><code>map</code>：注入一个映射表</li><li><code>set</code>：注入一个集合</li><li><code>null</code>：注入一个null指针</li><li><code>props</code>：注入一个properties对象</li></ul></li><li><p><code>scope</code>：作用域</p></li></ul><h4 id="（2）import标签"><a href="#（2）import标签" class="headerlink" title="（2）import标签"></a>（2）import标签</h4><p>导入其他bean配置文件。</p><p>适用于团队开发，不同的人开发的bean不同，最终汇总的时候用一个applicationContext.xml引入各个bean.xml即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans2.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans3.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、注入方式"><a href="#5、注入方式" class="headerlink" title="5、注入方式"></a>5、注入方式</h3><h4 id="（1）普通方式"><a href="#（1）普通方式" class="headerlink" title="（1）普通方式"></a>（1）普通方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.pojo;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Address address;<br>    <span class="hljs-keyword">private</span> String[] books;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbies;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; card;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<br>    <span class="hljs-keyword">private</span> String wife;<br>    <span class="hljs-keyword">private</span> Properties info;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&quot;</span> + address +<br>                <span class="hljs-string">&quot;, books=&quot;</span> + Arrays.toString(books) +<br>                <span class="hljs-string">&quot;, hobbies=&quot;</span> + hobbies +<br>                <span class="hljs-string">&quot;, card=&quot;</span> + card +<br>                <span class="hljs-string">&quot;, games=&quot;</span> + games +<br>                <span class="hljs-string">&quot;, info=&quot;</span> + info +<br>                <span class="hljs-string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Address <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(Address address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String[] getBooks() &#123;<br>        <span class="hljs-keyword">return</span> books;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBooks</span><span class="hljs-params">(String[] books)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.books = books;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getHobbies</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hobbies;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHobbies</span><span class="hljs-params">(List&lt;String&gt; hobbies)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.hobbies = hobbies;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getCard</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> card;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCard</span><span class="hljs-params">(Map&lt;String, String&gt; card)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.card = card;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">getGames</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> games;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGames</span><span class="hljs-params">(Set&lt;String&gt; games)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.games = games;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Properties <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setInfo</span><span class="hljs-params">(Properties info)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getWife</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> wife;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWife</span><span class="hljs-params">(String wife)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.wife = wife;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, Address address, String[] books, List&lt;String&gt; hobbies, Map&lt;String, String&gt; card, Set&lt;String&gt; games, Properties info, String wife)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.address = address;<br>        <span class="hljs-keyword">this</span>.books = books;<br>        <span class="hljs-keyword">this</span>.hobbies = hobbies;<br>        <span class="hljs-keyword">this</span>.card = card;<br>        <span class="hljs-keyword">this</span>.games = games;<br>        <span class="hljs-keyword">this</span>.info = info;<br>        <span class="hljs-keyword">this</span>.wife = wife;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Address&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Address</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Address</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 测试特别复杂类型的注入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.Student&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 普通值，value --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;yuyr757&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- bean注入，ref --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 数组注入，array --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 列表注入，list --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>写代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>看电影<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 映射表注入，map --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;身份证&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111111111111111111&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;银行卡&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;222222222222222222&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 集合注入，set --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>魂斗罗<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>冒险岛<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>七龙珠<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- null注入，null --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- properties对象注入，props，注意和map的区别 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;学号&quot;</span>&gt;</span>U201300001<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.Address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;我是一个地址&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）拓展方式"><a href="#（2）拓展方式" class="headerlink" title="（2）拓展方式"></a>（2）拓展方式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 以上加入这个这个拓展标签 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- xmlns:p=&quot;http://www.springframework.org/schema/p&quot; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 加入这个标签后可以直接在后面使用 p:属性名 来定义属性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user5&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.User&quot;</span> <span class="hljs-attr">p:id</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;user_test_5&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 以上加入这个这个拓展标签 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- xmlns:p=&quot;http://www.springframework.org/schema/c&quot; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 加入这个标签后可以直接在后面使用 c:属性名/下标 来定义构造方法的参数的值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.User&quot;</span> <span class="hljs-attr">c:id</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;user_test_6&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user7&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.User&quot;</span> <span class="hljs-attr">c:_0</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">c:_1</span>=<span class="hljs-string">&quot;user_test_7&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6、bean的作用域"><a href="#6、bean的作用域" class="headerlink" title="6、bean的作用域"></a>6、bean的作用域</h3><h4 id="（1）singleton-Scope（单例，默认）"><a href="#（1）singleton-Scope（单例，默认）" class="headerlink" title="（1）singleton Scope（单例，默认）"></a>（1）singleton Scope（单例，默认）</h4><p>从服务器启动到服务器消灭，全局只创建一个对象。当使用多线程时，多个线程拿到的是同一个对象（<font color="Red">注意线程的安全</font>）。</p><h4 id="（2）prototype（多例）"><a href="#（2）prototype（多例）" class="headerlink" title="（2）prototype（多例）"></a>（2）prototype（多例）</h4><p>每次调用getBean方法，都会重新new一个对象。</p><h4 id="（3）request、session、application"><a href="#（3）request、session、application" class="headerlink" title="（3）request、session、application"></a>（3）request、session、application</h4><p>这三个只能在web应用中使用，和servlet中的不同作用域的context差不多。</p><h3 id="7、bean的自动装配"><a href="#7、bean的自动装配" class="headerlink" title="7、bean的自动装配"></a>7、bean的自动装配</h3><p><font color="Red">即spring会在容器中自动寻找创建某个对象的依赖，并装配到这个对象的属性中。</font>有以下方式：</p><h4 id="（1）在xml中显式配置"><a href="#（1）在xml中显式配置" class="headerlink" title="（1）在xml中显式配置"></a>（1）在xml中显式配置</h4><ul><li>byName：在容器中自动查找对应属性的setter方法名中set后面的值相同的bean的id</li><li>byType：在容器中自动查找对应属性类型相同的bean，使用这种方式，一定要保证相同类型的对象只有一个bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.Dog&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;bean id=&quot;cat2&quot; class=&quot;org.yuyr757.pojo.Cat&quot;/&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- byName：在容器中自动查找对应属性的setter方法名中set后面的值相同的bean的id --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;这是我的名字1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- byType：在容器中自动查找对应属性类型相同的bean --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当容器中有两个相同类型的对象时，不能使用byType --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;这是我的名字2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）使用注解"><a href="#（2）使用注解" class="headerlink" title="（2）使用注解"></a>（2）使用注解</h4><p>要在<code>applicationContext.xml</code>中加入以下支持。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="Red">xml配置和注解的一般结合方式：在xml中配置bean，在注入属性时使用注解。</font></p><h3 id="8、注解"><a href="#8、注解" class="headerlink" title="8、注解"></a>8、注解</h3><h4 id="（1）普通注解"><a href="#（1）普通注解" class="headerlink" title="（1）普通注解"></a>（1）普通注解</h4><ul><li><p><code>@Component</code>：作用目标：类。把该类当作一个bean对象，即相当于在配置中加入了一个bean标签，默认单例。</p></li><li><p><code>@AutoWired</code>：作用目标：很多，一般用于属性。为该属性通过setter方法注入一个值，相当于在配置文件中加入了一个property标签。<font color="Red">先通过byType的方法注入的，当IOC容器中有多个相同类型的对象时，再使用byName的方式来注入，而这个name默认就是根据变量名来的。</font></p></li><li><p><code>@Qualifier</code>：作用目标：很多，一般用于属性。<font color="Red">通过byName自动注入，该注解有一个value属性，指定去找对应名字的bean。</font>可以和<code>@AutoWired</code>配合使用。</p></li><li><p><code>@Resources</code>：作用目标：很多，一般用于属性。<font color="Red">相当于以上两个注解的结合。</font>有一个name属性，用于匹配bean的名字，不填。</p></li><li><p><code>@value</code>：作用目标：很多，一般用于属性。为该属性通过setter方法注入一个普通的确定的值。</p></li></ul><h4 id="（2）衍生注解"><a href="#（2）衍生注解" class="headerlink" title="（2）衍生注解"></a>（2）衍生注解</h4><ul><li><code>Repository</code>：这是Component注解的别名，用于表示这个类是Dao层的类</li><li><code>Service</code>：这是Component注解的别名，用于表示这个类是Service层的类</li><li><code>Controller</code>：这是Component注解的别名，用于表示这个类是Controller层的类</li><li><code>Scope</code>：作用域，singleton、prototype等</li></ul><h3 id="9、使用java类来配置spring"><a href="#9、使用java类来配置spring" class="headerlink" title="9、使用java类来配置spring"></a>9、使用java类来配置spring</h3><p>即不需要再xml中配置spring，而是在一个SpringConfig类中配置。</p><ul><li><code>@configuration</code>：在类上加入这个注解，则表明这是一个配置类。</li><li><code>@Bean</code>：在方法的的上面加这个注解，相当于xml中的一个bean标签，方法的名字就是bean标签的id，方法的返回值就是bean标签的class属性。</li><li><code>@Import</code>：引入其他配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><span class="hljs-keyword">import</span> org.yuyr757.pojo.Address;<br><span class="hljs-keyword">import</span> org.yuyr757.pojo.User;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(MyConfig2.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Address <span class="hljs-title">address</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Address(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Address <span class="hljs-title">address2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Address(<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;yuyr757&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Address address;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&quot;</span> + address +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Address <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(Address address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, Address address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、AOP"><a href="#二、AOP" class="headerlink" title="二、AOP"></a>二、AOP</h2><p>AOP：Aspect-Oriented Programming，面向切面编程</p><p><img src="/images/aop-program.png"></p><h3 id="1、代理模式"><a href="#1、代理模式" class="headerlink" title="1、代理模式"></a>1、代理模式</h3><h4 id="（1）静态代理"><a href="#（1）静态代理" class="headerlink" title="（1）静态代理"></a>（1）静态代理</h4><p>角色：</p><ul><li>抽象角色：一般使用接口或抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真是角色，并做一些附属操作</li><li>客户：访问代理角色的人</li></ul><p>以租房为例。</p><p>很多客户（租户）直接找到真实角色（房东），完成一个操作（租房）。但是要完成这个操作要很多其他繁琐的事情（比如每次都要带客户看房、签合同等），真实角色（房东）不想做这些他认为没有意义的操作。于是真实角色（房东）找到一个同样可以做这个操作（租房）的代理角色（中介），让代理角色（中介）去和客户（租户）完成看房、签合同等其他操作，真实角色（房东）就可以专心做租房这一个操作了。抽象角色指一类人，这类人都可以完成租房这个操作。在这里真实角色（房东）和代理角色（中介）都是同一类抽象角色。</p><p><font color="Red">注意在代码中理解四类角色。</font></p><ul><li>示例一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.Demo1;<br><span class="hljs-comment">// 抽象角色</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.Demo1;<br><span class="hljs-comment">// 客户</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 直接找房东租房</span><br>        Host host = <span class="hljs-keyword">new</span> Host();<br>        host.rent();<br><br>        System.out.println(<span class="hljs-string">&quot;======================&quot;</span>);<br><br>        <span class="hljs-comment">// 找中介租房</span><br>        <span class="hljs-comment">// 通过代理可以做一些附属操作</span><br>        Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);<br>        proxy.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.Demo1;<br><span class="hljs-comment">// 房东</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东要出租房子&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.Demo1;<br><span class="hljs-comment">// 中介</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Host host;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Host <span class="hljs-title">getHost</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHost</span><span class="hljs-params">(Host host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;中介带看房&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">payFee</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;收取中介费&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.seeHouse();<br>        host.rent();<br>        <span class="hljs-keyword">this</span>.payFee();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>示例二：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.Demo2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.Demo2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.Demo2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceProxy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceProxy</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserService <span class="hljs-title">getUserService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userService;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;使用了add&quot;</span>);<br>        <span class="hljs-keyword">this</span>.userService.add();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;使用了delete&quot;</span>);<br>        <span class="hljs-keyword">this</span>.userService.delete();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;使用了update&quot;</span>);<br>        <span class="hljs-keyword">this</span>.userService.update();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;使用了query&quot;</span>);<br>        <span class="hljs-keyword">this</span>.userService.query();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.Demo2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>        UserServiceProxy userServiceProxy = <span class="hljs-keyword">new</span> UserServiceProxy(userService);<br>        userServiceProxy.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ul><li>可以使真实角色专注他自己的业务，其他业务交给其他角色来做，实现了分工</li><li>有良好的扩展性，可以在不修改其他功能的基础上新增其他功能</li></ul><p><font color="Red">缺点：一个真实角色就要产生一个代理角色，代码量会翻倍。有没有一种方法可以避免写这么多代理类，或者自动生成代理类。这就是动态代理。</font></p><h4 id="（2）动态代理（十分重要！）"><a href="#（2）动态代理（十分重要！）" class="headerlink" title="（2）动态代理（十分重要！）"></a>（2）动态代理（十分重要！）</h4><ul><li><p>动态代理和静态代理的角色一样。</p></li><li><p>动态代理的代理角色（代理类）是动态生成的，不是我们自己写的。</p></li><li><p>动态代理有两类：</p><ul><li>基于接口——JDK动态代理</li><li>基于类——cglib</li><li>java字节码实现——javassist</li></ul></li><li><p>需要了解两个类/接口：</p><ul><li>InvocationHandler：调用处理程序</li><li>Proxy：代理类</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Processes a method invocation on a proxy instance and returns</span><br><span class="hljs-comment">     * the result.  This method will be invoked on an invocation handler</span><br><span class="hljs-comment">     * when a method is invoked on a proxy instance that it is</span><br><span class="hljs-comment">     * associated with.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>   proxy （代理实例，即生成的代理对象，要用该对象去调用某个方法）the proxy instance that the method was invoked on</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>   method （在代理实例上调用的接口方法的实例，即要调用的方法）the &#123;<span class="hljs-doctag">@code</span> Method&#125; instance corresponding to</span><br><span class="hljs-comment">     * the interface method invoked on the proxy instance.  The declaring</span><br><span class="hljs-comment">     * class of the &#123;<span class="hljs-doctag">@code</span> Method&#125; object will be the interface that</span><br><span class="hljs-comment">     * the method was declared in, which may be a superinterface of the</span><br><span class="hljs-comment">     * proxy interface that the proxy class inherits the method through.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>   args （参数数组）an array of objects containing the values of the</span><br><span class="hljs-comment">     * arguments passed in the method invocation on the proxy instance,</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> null&#125; if interface method takes no arguments.</span><br><span class="hljs-comment">     * Arguments of primitive types are wrapped in instances of the</span><br><span class="hljs-comment">     * appropriate primitive wrapper class, such as</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> java.lang.Integer&#125; or &#123;<span class="hljs-doctag">@code</span> java.lang.Boolean&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  the value to return from the method invocation on the</span><br><span class="hljs-comment">     * proxy instance.  If the declared return type of the interface</span><br><span class="hljs-comment">     * method is a primitive type, then the value returned by</span><br><span class="hljs-comment">     * this method must be an instance of the corresponding primitive</span><br><span class="hljs-comment">     * wrapper class; otherwise, it must be a type assignable to the</span><br><span class="hljs-comment">     * declared return type.  If the value returned by this method is</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> null&#125; and the interface method&#x27;s return type is</span><br><span class="hljs-comment">     * primitive, then a &#123;<span class="hljs-doctag">@code</span> NullPointerException&#125; will be</span><br><span class="hljs-comment">     * thrown by the method invocation on the proxy instance.  If the</span><br><span class="hljs-comment">     * value returned by this method is otherwise not compatible with</span><br><span class="hljs-comment">     * the interface method&#x27;s declared return type as described above,</span><br><span class="hljs-comment">     * a &#123;<span class="hljs-doctag">@code</span> ClassCastException&#125; will be thrown by the method</span><br><span class="hljs-comment">     * invocation on the proxy instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  Throwable the exception to throw from the method</span><br><span class="hljs-comment">     * invocation on the proxy instance.  The exception&#x27;s type must be</span><br><span class="hljs-comment">     * assignable either to any of the exception types declared in the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> throws&#125; clause of the interface method or to the</span><br><span class="hljs-comment">     * unchecked exception types &#123;<span class="hljs-doctag">@code</span> java.lang.RuntimeException&#125;</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> java.lang.Error&#125;.  If a checked exception is</span><br><span class="hljs-comment">     * thrown by this method that is not assignable to any of the</span><br><span class="hljs-comment">     * exception types declared in the &#123;<span class="hljs-doctag">@code</span> throws&#125; clause of</span><br><span class="hljs-comment">     * the interface method, then an</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> UndeclaredThrowableException&#125; containing the</span><br><span class="hljs-comment">     * exception that was thrown by this method will be thrown by the</span><br><span class="hljs-comment">     * method invocation on the proxy instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>     UndeclaredThrowableException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> Throwable</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这个类提供了创建动态代理类和实例的方法，这个方法是静态的，通过这些方法创建的类都继承了Proxy这个类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span></span>&#123;<br>    <br>    <span class="hljs-comment">/* -------------------属性------------------- */</span><br>    <span class="hljs-comment">// final的属性基本都不用管，因为我们无法做修改</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">2222568056686623797L</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Class&lt;?&gt;[] constructorParams = &#123; InvocationHandler.class &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;<br>        proxyClassCache = <span class="hljs-keyword">new</span> WeakCache&lt;&gt;(<span class="hljs-keyword">new</span> KeyFactory(), <span class="hljs-keyword">new</span> ProxyClassFactory());<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object key0 = <span class="hljs-keyword">new</span> Object();<br>    <br>    <span class="hljs-comment">// 这个是我们需要传入的对象，就是上面说的那个接口类</span><br>    <span class="hljs-keyword">protected</span> InvocationHandler h;<br>    <br>    <span class="hljs-comment">/* -------------------构造方法------------------- */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(InvocationHandler h)</span></span>;<br>    <br>    <span class="hljs-comment">/* -------------------静态方法------------------- */</span><br>    <br>    <span class="hljs-comment">// 生成代理类，会调用getProxyClass0方法</span><br>    <span class="hljs-meta">@CallerSensitive</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader,<br>                                         Class&lt;?&gt;... interfaces);<br>    <br>    <span class="hljs-comment">// 检查代理权限</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkProxyAccess</span><span class="hljs-params">(Class&lt;?&gt; caller,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         ClassLoader loader,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         Class&lt;?&gt;... interfaces)</span></span>;<br>    <br>    <span class="hljs-comment">// 重要！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</span><br>    <span class="hljs-comment">// 从类加载器中生成一个代理类，文档说生成代理类之前必须检查代理权限（checkProxyAccess）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,<br>                                           Class&lt;?&gt;... interfaces);<br>    <br>    <span class="hljs-comment">// 重要！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</span><br>    <span class="hljs-comment">// 生成一个代理类的实例</span><br>    <span class="hljs-comment">// loader：真实对象（目标对象）的类加载器</span><br>    <span class="hljs-comment">// interfaces：真实对象（目标对象）的接口组成的数组</span><br>    <span class="hljs-comment">// h：实现了上面那个InvocationHandler接口的对象</span><br>    <span class="hljs-meta">@CallerSensitive</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          InvocationHandler h)</span></span>;<br>    <br>    <span class="hljs-comment">// 检查caller类和proxyclass类是否在同一个包内，如果不在同一个包内，再检查相关权限</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkNewProxyPermission</span><span class="hljs-params">(Class&lt;?&gt; caller, Class&lt;?&gt; proxyClass)</span></span>;<br>    <br>    <span class="hljs-comment">// 判断一个类是否是一个由Proxy类生成的代理类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isProxyClass</span><span class="hljs-params">(Class&lt;?&gt; cl)</span></span>;<br>    <br>    <span class="hljs-comment">// 传入一个对象参数，取出这个对象中的InvocationHandler属性，就是上面的h</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InvocationHandler <span class="hljs-title">getInvocationHandler</span><span class="hljs-params">(Object proxy)</span></span>;<br>    <br>    <span class="hljs-comment">// native，非java实现，不用管</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; defineClass0(ClassLoader loader, String name,<br>                                                <span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len);<br>    <br>    <span class="hljs-comment">/* -------------------内部private类------------------- */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Key1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WeakReference</span>&lt;<span class="hljs-title">Class</span>&lt;?&gt;&gt;</span>&#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Key2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WeakReference</span>&lt;<span class="hljs-title">Class</span>&lt;?&gt;&gt;</span>&#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyX</span></span>&#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyFactory</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">BiFunction</span>&lt;<span class="hljs-title">ClassLoader</span>, <span class="hljs-title">Class</span>&lt;?&gt;[], <span class="hljs-title">Object</span>&gt;</span>&#123;&#125;<br>    <span class="hljs-comment">// 创建代理类的工厂，如果工厂中有相应接口的代理类的缓存，则会返回一个代理类的复制，否则会重新创建一个代理类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyClassFactory</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">BiFunction</span>&lt;<span class="hljs-title">ClassLoader</span>, <span class="hljs-title">Class</span>&lt;?&gt;[], <span class="hljs-title">Class</span>&lt;?&gt;&gt;</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">动态代理的本质：JVM在运行时动态创建class字节码并加载的过程。要实现的接口和调用接口方法的handler，可以生成一个class字节码，然后由对应的类加载器加载calss字节码，就可以在内存中生成一个类对象（代理类）了。当代理对象调用对应方法时，handler会将方法转发给自己的invoke方法。于是我们就可以在invoke方法中加入增强方法的代码。</font></p><p>用动态代理来增强示例二如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.DynamicProxy2;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置真实对象，相当于代理对象要和真实对象签定委托代理的契约，代理对象才可以有权限对做真实对象才能做的事情</span><br><span class="hljs-comment">     * 就像现实生活中，租房中介要拿到房东的授权委托书，中介才可以有权去代理房东租房</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyInvocationHandler</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyInvocationHandler</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成一个代理对象，即生成一个租房中介</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@loader</span> 这个中介的类加载器和房东是一样的，即他们的级别是一样的</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@interfaces</span> 这个中介的接口和房东是一样的，即他们都应该有相同的动作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@h</span> 这个中介拿到一个InvocationHandler对象，即每当客户有租房的动作时，租房的动作会通过InvocationHandler转发到自己的invoke方法，代理对象就可以在invoker方法中做一些额外操作</span><br><span class="hljs-comment">     * 此外newProxyInstance方法内部还会授予相关代理权限，不然任何一个没有权限的人都可以代理房东去租房</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>                <span class="hljs-keyword">this</span>.target.getClass().getClassLoader(),<br>                <span class="hljs-keyword">this</span>.target.getClass().getInterfaces(),<br>                <span class="hljs-keyword">this</span><br>        );<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-keyword">this</span>.log(method.getName());<br>        Object returnObject = method.invoke(target, args);<br>        <span class="hljs-keyword">return</span> returnObject;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了&quot;</span> + msg + <span class="hljs-string">&quot;方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.DynamicProxy2;<br><br><span class="hljs-keyword">import</span> org.yuyr757.Demo2.UserService;<br><span class="hljs-keyword">import</span> org.yuyr757.Demo2.UserServiceImpl;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        UserService userservice = <span class="hljs-keyword">new</span> UserServiceImpl();<br>        ProxyInvocationHandler handler = <span class="hljs-keyword">new</span> ProxyInvocationHandler(userservice);<br>        UserService proxy = (UserService)handler.getProxy();<br>        System.out.println(<span class="hljs-string">&quot;=============查看生成的类的具体信息=============&quot;</span>);<br>        Class proxyClass = proxy.getClass();<br>        System.out.println(<span class="hljs-string">&quot;类名称：&quot;</span> + proxyClass.getName());<br>        System.out.println(<span class="hljs-string">&quot;类加载器：&quot;</span> + proxyClass.getClassLoader());<br>        System.out.println(<span class="hljs-string">&quot;类接口：&quot;</span> + Arrays.toString(proxyClass.getInterfaces()));<br>        System.out.println(<span class="hljs-string">&quot;类的父类：&quot;</span> + proxyClass.getSuperclass());<br>        System.out.println(<span class="hljs-string">&quot;public方法和父类的public方法：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Method method : proxyClass.getMethods()) &#123;<br>            System.out.println(method.toString());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;所有本类的方法：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Method method : proxyClass.getDeclaredMethods()) &#123;<br>            System.out.println(method.toString());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;所有本类的属性：&quot;</span> );<br>        <span class="hljs-keyword">for</span> (Field declaredField : proxyClass.getDeclaredFields()) &#123;<br>            System.out.println(declaredField);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=============测试方法=============&quot;</span>);<br>        proxy.add();<br>        proxy.delete();<br>        proxy.update();<br>        proxy.query();<br>        System.out.println(<span class="hljs-string">&quot;=============代理其他实现了该接口的类只需要修改目标对象即可=============&quot;</span>);<br>        handler.setTarget(<span class="hljs-keyword">new</span> UserServiceImpl2());<br>        UserService proxy2 = (UserService)handler.getProxy();<br>        proxy2.add();<br>        proxy2.delete();<br>        proxy2.update();<br>        proxy2.query();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>动态代理的优点：动态代理代理的是接口，一般是一类业务，所有实现了该接口的类都可以被代理，减少了代码量。</p><p>缺点：效率稍微低一些。因为要在运行时根据接口动态生成字节码，再重新加载字节码。</p><h3 id="2、spring-aop"><a href="#2、spring-aop" class="headerlink" title="2、spring-aop"></a>2、spring-aop</h3><p>几个重要概念：</p><ul><li><strong>切入点（pointcut）</strong>：即我们原有的功能或业务逻辑，一堆方法的集合</li><li><strong>切面（aspect）</strong>：一个切入到我们原有功能里面的新功能的集合（模块），一个类</li><li><strong>通知（advisor）</strong>：切面要完成的工作，即类中的方法</li><li><strong>连接点（joinpoint）</strong>：在切入点具体执行的某一个方法</li></ul><p>通知的五种类型：</p><ul><li><strong>前置通知（Before advice）</strong>：即在目标方法执行前加一个增强方法</li><li><strong>正常返回通知（After returning advice）</strong>：在连接点正常执行完成后执行，如果连接点抛出异常，则不会执行。</li><li><strong>异常返回通知（After throwing advice）</strong>：在连接点抛出异常后执行。</li><li><strong>返回通知（After (finally) advice）</strong>：在连接点执行完成后执行，不管是正常执行完成，还是抛出异常，都会执行返回通知中的内容。</li><li><strong>环绕通知（Around advice）</strong>：即把目标方法包裹在该通知方法内，比如我们使用IDEA有一个快捷键是<code>ctrl + alt + T</code>，即用一个方法把目标方法包裹（surrounding）起来。使用这种通知时，要把目标方法传入我们的通知方法中。<font color="Red">最强的通知类型，完全可以使用这一个通知，然后在通知方法里面定义具体的实现，来满足以上四个通知（下面有示例）。前四个通知和环绕通知最好不要一起使用， 即要么使用前四个通知，要么只使用环绕通知。若都使用了，比如同时使用了前置通知和环绕通知，则目标方法执行前的增强方法好像是根据xml配置的顺序决定的。反正别一起使用就对了。【！！！推荐使用环绕通知，自己写增强方法，因为在有返回值和报异常同时存在的情况下，环绕通知有更强的实现，以上四个通知都做不到】</font></li></ul><h4 id="（1）方式一：使用spring-aop接口实现"><a href="#（1）方式一：使用spring-aop接口实现" class="headerlink" title="（1）方式一：使用spring aop接口实现"></a>（1）方式一：使用spring aop接口实现</h4><p>配置文件中不需要aspect，因为spring会去找实现了相应接口的类当作aspect，需要配置pointcut和advisor。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置AOP --&gt;</span><br><span class="hljs-comment">&lt;!-- 方式一：使用原生spring aop的api接口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置切入点，即需要增强的目方法 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- expression：表达式，execution(要执行的位置，修饰词 返回值 列名 方法名 参数) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 执行环绕增加 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;logBefore&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;logAfter&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）方式二：自定义类-xml配置（建议使用）"><a href="#（2）方式二：自定义类-xml配置（建议使用）" class="headerlink" title="（2）方式二：自定义类+xml配置（建议使用）"></a>（2）方式二：自定义类+xml配置（建议使用）</h4><p>要自定义类当作aspect，配置文件中定义aspect标签引用自定义类，再配置pointcut、before、after等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 方式二：使用自定义类来实现aop --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需要配置切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diyPoint&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（3）方式三：使用自定义类-注解"><a href="#（3）方式三：使用自定义类-注解" class="headerlink" title="（3）方式三：使用自定义类+注解"></a>（3）方式三：使用自定义类+注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.DiyAop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointCut2</span> </span>&#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=========方法执行前2=========&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=========方法执行后2=========&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 方式三：使用自定义+注解 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- proxy-target-class默认为false，false代表使用jdk自己的动态代理实现，true代表使用cglib实现，一般用false即可 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（4）示例"><a href="#（4）示例" class="headerlink" title="（4）示例"></a>（4）示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.DiyAop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointCut</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=========before通知=========&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=========after通知=========&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=========afterReturning通知=========&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowing</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=========afterThrowing通知=========&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        Object object = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;=========around通知前=========&quot;</span>);<br>            object = joinPoint.proceed();<br>            System.out.println(<span class="hljs-string">&quot;=========around通知-afterReturning=========&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IllegalArgumentException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;=========around通知-afterThrowing=========&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;=========around通知后=========&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 需要配置切面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diyPoint&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;point&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;point&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut-ref=&quot;point&quot;/&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;around&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;point&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.services;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">50</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.services;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> org.yuyr757.services.UserService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAop1</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ApplicationContext context;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAopAroundReturning</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;【开始测试正常返回时的通知结果】&quot;</span>);<br>        UserService userService = context.getBean(<span class="hljs-string">&quot;userServiceImpl&quot;</span>, UserService.class);<br>        <span class="hljs-keyword">int</span> num = userService.add(<span class="hljs-number">188</span>);<br>        System.out.println(num);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAopAroundThrowing</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;【开始测试报异常时的通知结果】&quot;</span>);<br>        UserService userService = context.getBean(<span class="hljs-string">&quot;userServiceImpl&quot;</span>, UserService.class);<br>        <span class="hljs-keyword">int</span> num = userService.add(<span class="hljs-number">1</span>);<br>        System.out.println(num);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三、整合spring和mybatis"><a href="#三、整合spring和mybatis" class="headerlink" title="三、整合spring和mybatis"></a>三、整合spring和mybatis</h2><p>需要用到<code>mybatis-spring</code>这个包。</p><p>此外对于每个mapper接口我们必须手动写一个实现类，然后注册到spring的bean中，实现类使用的SqlSession要使用SqlSessionTemplate。其他的都和mybatis一样配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用spring数据源代替mybatis数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;datasource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf-8<span class="hljs-symbol">&amp;amp;</span>useSSL=true<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- sqlSessionFactory --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;datasource&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 绑定mybatis配置文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 一般这里只需要绑定配置文件就可以，mybatis的配置还是在mybatis-config.xml中配置 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 这个sqlSessionTemplate是SqlSession的一个实现类，我们以后就不用手动调用openSession()方法来获得SqlSession对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 因为这个类没有setter方法，所以只能通过有参构造方法来初始化 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、spring的事务管理"><a href="#四、spring的事务管理" class="headerlink" title="四、spring的事务管理"></a>四、spring的事务管理</h2><h3 id="1、编程式事务管理"><a href="#1、编程式事务管理" class="headerlink" title="1、编程式事务管理"></a>1、编程式事务管理</h3><p>手动在程序中写try catch来实现事务就是编程式事务管理。</p><h3 id="2、声明式事务管理"><a href="#2、声明式事务管理" class="headerlink" title="2、声明式事务管理"></a>2、声明式事务管理</h3><p>把事务交给IOC容器管理就是声明式事务管理。配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 声明式事务管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;datasource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 结合AOP实现事务织入 --&gt;</span><br><span class="hljs-comment">&lt;!-- 配置事务通知的的类：需要导入tx命名空间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvisor&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- name：给哪些方法配置事务，propagation：配置事务的传播特性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;select*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置事务的切入点 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* org.yuyr757.mapper.*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvisor&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointCut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot-study</title>
    <link href="/java/springboot/springboot-study/"/>
    <url>/java/springboot/springboot-study/</url>
    
    <content type="html"><![CDATA[<p><font color="Red">约定大于配置！！</font></p><p>版本：SpringBoot-2.4.3</p><h2 id="一、springboot使用简介"><a href="#一、springboot使用简介" class="headerlink" title="一、springboot使用简介"></a>一、springboot使用简介</h2><h3 id="（1）pom-xml"><a href="#（1）pom-xml" class="headerlink" title="（1）pom.xml"></a>（1）pom.xml</h3><p>pom.xml的依赖都在父工程中<code>spring-boot-dependencies</code>中，我们在引入一些springboot依赖时，可以不需要指定版本，因为父工程中指定了建议的版本。也可以写版本号使用我们自己的版本号。</p><h3 id="（2）启动器"><a href="#（2）启动器" class="headerlink" title="（2）启动器"></a>（2）启动器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>就是一个个功能的开关，我们要使用某个功能，找到相应的启动器<code>starter</code>打开就可以了。如下官网提供了很多启动器：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/using-spring-boot.html#using-boot-starter</a></p><h3 id="（3）启动类"><a href="#（3）启动类" class="headerlink" title="（3）启动类"></a>（3）启动类</h3><p>springboot为我们写了一个默认的启动类，该启动类加了<code>@SpringBootApplication</code>注解，这个注解主要由以下三个注解组成。</p><ul><li>@SpringBootConfiguration：表示这是一个配置类</li><li>@EnableAutoConfiguration：启用自动装配</li><li>@ComponentScan：组件扫描，自动注册bean</li></ul><p>以上三个注解不是必需的，即我们可以挑选使用我们自己需要的功能，或者使用其他注解来启动应用。如下，我们不启用组件扫描，配置了一个属性，还导入了我们自定义的其他配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.myapplication;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@Import(&#123; MyConfig.class, MyAnotherConfig.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>            SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（4）运行程序"><a href="#（4）运行程序" class="headerlink" title="（4）运行程序"></a>（4）运行程序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 使用jar包直接运行</span><br>java -jar target/myapplication-0.0.1-SNAPSHOT.jar<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用maven运行</span><br>mvn spring-boot:run<br></code></pre></td></tr></table></figure><h3 id="（5）自动配置"><a href="#（5）自动配置" class="headerlink" title="（5）自动配置"></a>（5）自动配置</h3><p>Spring Boot自动配置会尝试根据您添加的jar依赖项自动配置您的Spring应用程序。 例如，如果HSQLDB位于类路径上，并且尚未手动配置任何数据库连接bean，则Spring Boot会自动配置内存数据库。<font color="Red">springboot支持的自动配置类如下：</font></p><p><a href="https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-auto-configuration-classes.html">https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-auto-configuration-classes.html</a></p><p>可以在配置文件中加入以下设置查看哪些自动配置生效了，哪些没生效。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">debug:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="（6）手动配置"><a href="#（6）手动配置" class="headerlink" title="（6）手动配置"></a>（6）手动配置</h3><p>当我们不想用某个依赖的自动配置时，我们可以在我们的启动程序中加上<code>exclude=&#123;DataSourceAutoConfiguration.class&#125;</code>来排除，然后在配置文件中写上我们需要的配置。其实不用排除也可以，springboot中的自动配置有默认值，直接在配置文件中写我们需要的配置，会覆盖默认值。<font color="Red">springboot自动配置的默认值如下：</font></p><p><a href="https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-application-properties.html">https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-application-properties.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.*;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.*;<br><br><span class="hljs-meta">@SpringBootApplication(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApplication</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">配置文件中可以写的配置属性从哪里来？（重要！！）</font></p><p>打开下面这个文件</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-symbol">\o</span>rg<span class="hljs-symbol">\s</span>pringframework<span class="hljs-symbol">\b</span>oot<span class="hljs-symbol">\s</span>pring-boot-autoconfigure<span class="hljs-symbol">\2</span>.4.3<span class="hljs-symbol">\s</span>pring-boot-autoconfigure-2.4.3.jar!<span class="hljs-symbol">\M</span>ETA-INF<span class="hljs-symbol">\s</span>pring.factories<br></code></pre></td></tr></table></figure><p>都是一个个的xxxAutoConfiguration类，点进去基本都会有以下几个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 表明这是一个配置类，即在spring中讲的使用配置类来配置bean</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><br><span class="hljs-comment">// 条件：必须加载了某个类，这个自动配置类才会生效</span><br><span class="hljs-meta">@ConditionalOnClass(KafkaTemplate.class)</span><br><br><span class="hljs-comment">// 使用某个属性类当作自动配置的属性</span><br><span class="hljs-meta">@EnableConfigurationProperties(KafkaProperties.class)</span><br><br><span class="hljs-comment">// 点进去上面那个xxxProperties.class，可以发现这里面有很多属性</span><br><span class="hljs-comment">// 且有下面这个注解，这个注解的功能就是将我们的配置文件的属性和这个类中的属性绑定（参考下面的“使用yaml给bean注入属性”）</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.kafka&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KafkaProperties</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">即xxxAutoConfiguration类就是一个个的配置类，目的是实例化一个个的bean；而xxxProperties类就是属性类，为示例化bean提供属性值，我们在配置文件中可以写的属性就是xxxProperties类中的属性。</font></p><h3 id="（7）配置顺序（重要！！）"><a href="#（7）配置顺序（重要！！）" class="headerlink" title="（7）配置顺序（重要！！）"></a>（7）配置顺序（重要！！）</h3><p>springboot可以从很多地方来配置，官方给了一个配置的覆盖顺序，后面配置会覆盖前面的配置：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>、Default properties (specified <span class="hljs-keyword">by</span> setting SpringApplication.setDefaultProperties).<br><br><span class="hljs-number">2</span>、@PropertySource annotations <span class="hljs-keyword">on</span> your @Configuration classes. Please note <span class="hljs-keyword">that</span> such <span class="hljs-keyword">property</span> sources are <span class="hljs-keyword">not</span> added <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> Environment <span class="hljs-keyword">until</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">application</span> context <span class="hljs-keyword">is</span> being refreshed. This <span class="hljs-keyword">is</span> too late <span class="hljs-keyword">to</span> configure certain properties such <span class="hljs-keyword">as</span> logging.* <span class="hljs-keyword">and</span> spring.main.* which are <span class="hljs-built_in">read</span> <span class="hljs-keyword">before</span> refresh begins.<br><br><span class="hljs-number">3</span>、（主要！）Config data (such <span class="hljs-keyword">as</span> <span class="hljs-built_in">application</span>.properties files)<br><br><span class="hljs-number">4</span>、A RandomValuePropertySource <span class="hljs-keyword">that</span> has properties only <span class="hljs-keyword">in</span> random.*.<br><br><span class="hljs-number">5</span>、OS environment variables.<br><br><span class="hljs-number">6</span>、Java System properties (System.getProperties()).<br><br><span class="hljs-number">7</span>、JNDI attributes <span class="hljs-keyword">from</span> java:comp/env.<br><br><span class="hljs-number">8</span>、ServletContext init parameters.<br><br><span class="hljs-number">9</span>、ServletConfig init parameters.<br><br><span class="hljs-number">10</span>、Properties <span class="hljs-keyword">from</span> SPRING_APPLICATION_JSON (inline JSON embedded <span class="hljs-keyword">in</span> an environment variable <span class="hljs-keyword">or</span> system <span class="hljs-keyword">property</span>).<br><br><span class="hljs-number">11</span>、Command line arguments.<br><br><span class="hljs-number">12</span>、properties attribute <span class="hljs-keyword">on</span> your tests. Available <span class="hljs-keyword">on</span> @SpringBootTest <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span> test annotations <span class="hljs-keyword">for</span> testing a particular slice <span class="hljs-keyword">of</span> your <span class="hljs-built_in">application</span>.<br><br><span class="hljs-number">13</span>、@TestPropertySource annotations <span class="hljs-keyword">on</span> your tests.<br><br><span class="hljs-number">14</span>、Devtools <span class="hljs-keyword">global</span> settings properties <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> $HOME/.config/spring-boot directory when devtools <span class="hljs-keyword">is</span> active.<br></code></pre></td></tr></table></figure><p>而第3点配置文件<code>application.yaml</code>可以放置在以下位置，加载顺序也是后面的配置会覆盖前面的配置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>、<span class="hljs-keyword">classpath</span>:/<br><br><span class="hljs-number">2</span>、<span class="hljs-keyword">classpath</span>:<span class="hljs-regexp">/config/</span><br><br><span class="hljs-number">3</span>、<span class="hljs-keyword">file</span>:/<br><br><span class="hljs-number">4</span>、<span class="hljs-keyword">file</span>:<span class="hljs-regexp">/config/</span><br></code></pre></td></tr></table></figure><p><font color="Red">多环境配置：</font></p><p>可以在文件名后面加对应环境，来设置对应环境的配置，即<code>application-dev.yaml</code>。然后在<code>application.yaml</code>中配置如下设置来修改配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><p>或者不用新建<code>application-dev.yaml</code>配置文件，而是直接在<code>application.yaml</code>中加入三根英文横线<code>---</code>来分隔文档版本，并且加上对应的环境，也可以进行配置切换。如下使用的就是<code>dev</code>环境。其实建议使用额外增加一个配置文件<code>application-dev.yaml</code>的形式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8085</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8086</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><p>对于多环境配置的加载顺序，官网也还有一个顺序，也是后面的配置会覆盖前面的配置，如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>、Application properties packaged <span class="hljs-keyword">inside </span>your <span class="hljs-keyword">jar </span>(application.properties <span class="hljs-keyword">and </span>YAML variants).<br><br><span class="hljs-number">2</span>、Profile-specific application properties packaged <span class="hljs-keyword">inside </span>your <span class="hljs-keyword">jar </span>(application-&#123;profile&#125;.properties <span class="hljs-keyword">and </span>YAML variants).<br><br><span class="hljs-number">3</span>、Application properties outside of your packaged <span class="hljs-keyword">jar </span>(application.properties <span class="hljs-keyword">and </span>YAML variants).<br><br><span class="hljs-number">4</span>、Profile-specific application properties outside of your packaged <span class="hljs-keyword">jar </span>(application-&#123;profile&#125;.properties <span class="hljs-keyword">and </span>YAML variants).<br></code></pre></td></tr></table></figure><p><font color="Red">最佳的一种方式就是：</font></p><p>在<code>classpath:/</code>下的<code>application.yaml</code>中配置我们的应用，多环境则配置相应的<code>application-&#123;profiles&#125;.yaml</code>，然后启动项目时在命令行中加上<code>spring.profiles.active</code>参数。</p><h2 id="二、YAML配置"><a href="#二、YAML配置" class="headerlink" title="二、YAML配置"></a>二、YAML配置</h2><p>springboot会读取的数据配置文件只有<code>application.properties</code>、<code>application.yaml</code>这两个，修改了文件名则不会生效。</p><p>推荐使用yaml配置文件。</p><h3 id="1、YAML语法"><a href="#1、YAML语法" class="headerlink" title="1、YAML语法"></a>1、YAML语法</h3><p>具体语法见这里：<a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">https://www.ruanyifeng.com/blog/2016/07/yaml.html</a></p><p>注意点：</p><ul><li><p><font color="Red">YAML语法对空格的要求及其严格，一定要小心。</font></p></li><li><p><font color="Red">Key-Value键值对中，key后后面冒号后面一定要加一个空格！！</font></p></li><li><p><font color="Red">缩进为两个空格，表示子属性，不能用tab符号。</font></p></li></ul><p>其中引用的使用建议使用EL表达式，而不是<code>&amp;</code>、<code>*</code>，因为EL表达式不仅可以因为该文件内的属性，还可以引用springboot给我们设置好的其他属性。还可以使用类似三元运算符。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">number:</span> <span class="hljs-string">$&#123;random.uuid&#125;</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">$&#123;mysql.version&#125;</span><br><span class="hljs-attr">number2:</span> <span class="hljs-string">$&#123;value2:123&#125;</span> <span class="hljs-comment"># 若value2存在则使用value2的值，否则使用123</span><br></code></pre></td></tr></table></figure><h3 id="2、使用yaml给bean注入属性"><a href="#2、使用yaml给bean注入属性" class="headerlink" title="2、使用yaml给bean注入属性"></a>2、使用yaml给bean注入属性</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">yury757</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">number:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2020</span><span class="hljs-string">/12/02</span><br>  <span class="hljs-attr">maps:</span><br>    <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">lists:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">旺财3</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>配置了yaml后可以直接在对应的类上面用以下注解，来给bean注入属性。这个注解的作用是将配置文件中的属性值，映射到这个类的属性上。<code>prefix</code>的值就是配置文件中的某一个<code>Key</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> Integer number;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>&#125;<br></code></pre></td></tr></table></figure><p>加了这个注解后IDEA会有一个红色的提示，pom.xml中加入以下依赖，就不会有了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 用yaml注入对象属性值的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="Red">这种方式需要对应的类有 <code>无参构造方法</code> 和 <code>每个属性的setter方法</code>，不然会报错。</font></p><h3 id="3、JSR303校验"><a href="#3、JSR303校验" class="headerlink" title="3、JSR303校验"></a>3、JSR303校验</h3><p>即在属性上加一些注解可以对注入的值进行校验。</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>普通值校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Min</span>            <span class="hljs-comment">// 验证 Number 和 String 对象是否大等于指定的值  </span><br><span class="hljs-meta">@Max</span>            <span class="hljs-comment">// 验证 Number 和 String 对象是否小等于指定的值  </span><br><span class="hljs-meta">@DecimalMax</span> <span class="hljs-comment">//被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度</span><br><span class="hljs-meta">@DecimalMin</span> <span class="hljs-comment">//被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度</span><br><span class="hljs-meta">@Digits</span>                     <span class="hljs-comment">//验证 Number 和 String 的构成是否合法  </span><br><span class="hljs-meta">@Digits(integer=,fraction=)</span> <span class="hljs-comment">// 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。</span><br><span class="hljs-meta">@Range(min=, max=)</span>          <span class="hljs-comment">// 校验值的大小是否在给定的范围内（可包含）</span><br><span class="hljs-meta">@Range(min=10000,max=50000,message=&quot;range.bean.wage&quot;)</span><br><span class="hljs-keyword">private</span> BigDecimal wage;<br><span class="hljs-meta">@Valid</span> <span class="hljs-comment">// 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)</span><br><span class="hljs-meta">@CreditCardNumber</span>                             <span class="hljs-comment">// 信用卡验证</span><br><span class="hljs-meta">@Email</span>                                        <span class="hljs-comment">// 验证是否是邮件地址，如果为null,不进行验证，算通过验证。</span><br><span class="hljs-meta">@ScriptAssert(lang= ,script=, alias=)</span>         <span class="hljs-comment">// 脚本代码段验证，lang为哪种语言</span><br><span class="hljs-meta">@URL(protocol=,host=, port=,regexp=, flags=)</span>  <span class="hljs-comment">// url验证</span><br></code></pre></td></tr></table></figure><p>空检查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@Null       <span class="hljs-comment">// 验证对象是否为null</span><br>@NotNull    <span class="hljs-comment">// 验证对象是否不为null, 无法查检长度为0的字符串</span><br>@NotBlank   <span class="hljs-comment">// 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br>@NotEmpty   <span class="hljs-comment">// 检查约束元素是否为NULL或者是EMPTY.</span><br></code></pre></td></tr></table></figure><p>Booelan检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AssertTrue</span>     <span class="hljs-comment">// 验证 Boolean 对象是否为 true  </span><br><span class="hljs-meta">@AssertFalse</span>    <span class="hljs-comment">// 验证 Boolean 对象是否为 false</span><br></code></pre></td></tr></table></figure><p>长度检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Size(min=, max=)</span>   <span class="hljs-comment">// 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="hljs-meta">@Length(min=, max=)</span> <span class="hljs-comment">// 验证string字符串的长度是否在给定的范围指内</span><br></code></pre></td></tr></table></figure><p>日期检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Past</span>       <span class="hljs-comment">// 验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="hljs-meta">@Future</span>     <span class="hljs-comment">// 验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="hljs-meta">@Pattern</span>    <span class="hljs-comment">// 验证 String 对象是否符合正则表达式的规则</span><br></code></pre></td></tr></table></figure><h2 id="三、使用springboot开发web"><a href="#三、使用springboot开发web" class="headerlink" title="三、使用springboot开发web"></a>三、使用springboot开发web</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- web启动器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 用yaml注入对象属性值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 属性校验 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- thymeleaf模板引擎 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 系统功能监控、统计相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 单元测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1、静态资源存放位置"><a href="#1、静态资源存放位置" class="headerlink" title="1、静态资源存放位置"></a>1、静态资源存放位置</h3><p>（1）webjars静态资源（一般不这么用）</p><p>从webjars导入的静态资源的访问路径是：<code>classpath</code> + 导入的webjars包在<code>META-INF/resources/</code>后面的路径。</p><p>（2）其他静态资源</p><p>（从左到右优先级依次降低，即同一个静态资源，会先拿最左边的）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <span class="hljs-string">&quot;classpath:/static/&quot;</span>, <span class="hljs-string">&quot;classpath:/public/&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>配置文件中，以下配置的默认值是<code>/**</code>，即把类路径当作根目录，再去找上面的三个文件夹。若修改了这里，比如改成了<code>/test/**</code>，则要通过<code>/test/</code>这个路径才能找到对应的资源。所以<font color="Red">千万不要</font>设置下面这个配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">spring</span><br>  <span class="hljs-string">mvc</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/**</span><br></code></pre></td></tr></table></figure><p><font color="Red">即我们只要将静态资源放在resources、static、public下的任意一个位置就可以了，按照自己喜好分类放置。</font></p><p><font color="Red">注意<code>template</code>目录和外部的目录是无法直接访问到的。</font></p><h3 id="2、模板引擎"><a href="#2、模板引擎" class="headerlink" title="2、模板引擎"></a>2、模板引擎</h3><h4 id="（1）thymeleaf"><a href="#（1）thymeleaf" class="headerlink" title="（1）thymeleaf"></a>（1）thymeleaf</h4><ul><li>pom.xml依赖</li></ul><p>若springboot版本没有thymeleaf启动器，则引入以下依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- thymeleaf模板引擎，最好使用3.x --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如有启动器，则直接引入启动器的依赖即可，引入以下依赖反而报错。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- thymeleaf模板引擎 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>同样按上面的方法找到我们需要在配置文件中需要配置的属性，找到下面这个类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafProperties</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_PREFIX = <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_SUFFIX = <span class="hljs-string">&quot;.html&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> checkTemplate = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> checkTemplateLocation = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">private</span> String prefix = DEFAULT_PREFIX;<br><span class="hljs-keyword">private</span> String suffix = DEFAULT_SUFFIX;<br><span class="hljs-keyword">private</span> String mode = <span class="hljs-string">&quot;HTML&quot;</span>;<br><span class="hljs-keyword">private</span> Charset encoding = DEFAULT_ENCODING;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> cache = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">private</span> Integer templateResolverOrder;<br><span class="hljs-keyword">private</span> String[] viewNames;<br><span class="hljs-keyword">private</span> String[] excludedViewNames;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> enableSpringElCompiler;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> renderHiddenMarkersBeforeCheckboxes = <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> enabled = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Servlet servlet = <span class="hljs-keyword">new</span> Servlet();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Reactive reactive = <span class="hljs-keyword">new</span> Reactive();<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面可以看到thymeleaf使用的前缀是<code>classpath:/templates/</code>，后缀是<code>.html</code>，因此我们要把html文件放到templates目录下，才会生效。</p><p>在html中加入thymeleaf的命名空间，就可以使用thymeleaf的语法了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>一定要了解的thymeleaf语法：</strong></p><p>Variable Expression：<code>$&#123;&#125;</code></p><p>Selection Variable Expression：<code>*&#123;&#125;</code></p><p>Message Expression：<code>#&#123;&#125;</code></p><p>Link Url Expression：<code>@&#123;&#125;</code></p><p>Fragment Expression：<code>~&#123;&#125;</code></p><h3 id="3、自定义扩展webmvc"><a href="#3、自定义扩展webmvc" class="headerlink" title="3、自定义扩展webmvc"></a>3、自定义扩展webmvc</h3><ul><li>写一个配置类，要实现WebMvcConfigurer接口，并加上@Configuration注解</li><li>想加入一个自定义视图解析器，则自定义一个视图解析器类（视图解析器类要实现接口ViewResolver），然后定一个@bean的方法，返回这个类就注册好了。</li><li>想加入一个自定义拦截器，则定义一个拦截器（拦截器要实现接口HandlerInterceptor），然后重写addInterceptors方法，把拦截器注册进去，再配置好需要拦截的url pattern即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yury757.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.View;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ViewResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">// 自定义视图解析器步骤</span><br><span class="hljs-comment">// 写一个配置类，要实现WebMvcConfigurer接口，并加上@Configuration注解</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-comment">// 往IOC容器中注册一个bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MyViewResolver <span class="hljs-title">getMyViewResolver</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyViewResolver();<br>    &#125;<br><br>    <span class="hljs-comment">// 自定义视图解析器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ViewResolver</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 注册拦截器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> MyInterceptor())<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/*.js&quot;</span>, <span class="hljs-string">&quot;/*.css&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 自定义拦截器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            System.out.println(request.getRequestURI());<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、国际化（i18n）"><a href="#4、国际化（i18n）" class="headerlink" title="4、国际化（i18n）"></a>4、国际化（i18n）</h3><p>sources目录下新建一个<code>i18n</code>目录，再新建以下三个配置文件（这里只能使用<code>.properties</code>，不能使用<code>.yaml</code>）：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">login.<span class="hljs-keyword">properties</span><br>login_en_US.<span class="hljs-keyword">properties</span><br>login_zh_CN.<span class="hljs-keyword">properties</span><br></code></pre></td></tr></table></figure><p>会发现这三个被绑定在一起了，然后就可以像正常输入配置文件一样，在对应的语言配置中输入变量及对应语言的内容。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># login.properties</span><br><span class="hljs-meta">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-meta">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-meta">login.rememberMe</span>=<span class="hljs-string">记住我</span><br><span class="hljs-meta">login.tips</span>=<span class="hljs-string">请登录</span><br><span class="hljs-meta">login.username</span>=<span class="hljs-string">用户名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># login_en_US.properties</span><br><span class="hljs-meta">login.btn</span>=<span class="hljs-string">Sign In</span><br><span class="hljs-meta">login.password</span>=<span class="hljs-string">password</span><br><span class="hljs-meta">login.rememberMe</span>=<span class="hljs-string">remember me</span><br><span class="hljs-meta">login.tips</span>=<span class="hljs-string">Please Login In</span><br><span class="hljs-meta">login.username</span>=<span class="hljs-string">username</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># login_zh_CN.properties</span><br><span class="hljs-meta">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-meta">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-meta">login.rememberMe</span>=<span class="hljs-string">记住我</span><br><span class="hljs-meta">login.tips</span>=<span class="hljs-string">请登录</span><br><span class="hljs-meta">login.username</span>=<span class="hljs-string">用户名</span><br></code></pre></td></tr></table></figure><p>然后在html中就可以使用这里面的变量，不同的模板引擎有不同的写法，如thymeleaf的写法是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">#&#123;login.tips&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center mb-4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;72&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.tips&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后还要在webmvc组件中配置国际化处理器，以及将处理器注册到bean中的配置类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yury757.config;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.util.StringUtils;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">// 国际化处理器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LocaleResolver</span> </span>&#123;<br><br>    <span class="hljs-comment">// 解析请求，精简版，不能直接在工作中使用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        String l = request.getParameter(<span class="hljs-string">&quot;l&quot;</span>);<br><br>        Locale locale = Locale.getDefault();<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(l))&#123;<br>            String[] s = l.split(<span class="hljs-string">&quot;_&quot;</span>);<br>            locale = <span class="hljs-keyword">new</span> Locale(s[<span class="hljs-number">0</span>], s[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> locale;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocale</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yury757.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebMvcConfigurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/index.html&quot;</span>).setViewName(<span class="hljs-string">&quot;/index&quot;</span>);<br>        registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;/index&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 注册bean，使用我们自己写的国际化组件</span><br>    <span class="hljs-comment">// 注意！！！！！这里方法名要用和类名一样，且首字母小写</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyLocaleResolver();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、SpringBoot整合其他组件"><a href="#四、SpringBoot整合其他组件" class="headerlink" title="四、SpringBoot整合其他组件"></a>四、SpringBoot整合其他组件</h2><p>pom中以<code>spring-boot-starter-</code>开头的就是springboot官方的，以<code>-spring-boot-starter</code>结尾的就是对应组件的公司自己写的。</p><h3 id="（1）整合Druid数据源"><a href="#（1）整合Druid数据源" class="headerlink" title="（1）整合Druid数据源"></a>（1）整合Druid数据源</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- log4j2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- druid数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span><br><br>      <span class="hljs-comment"># 最大等待时间，配置获取连接等待超时，时间单位都是毫秒ms</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 最大值</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span><br>      <span class="hljs-comment">#最小值</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-comment">#初始化大小</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span><br>      <span class="hljs-comment">#配置一个连接在池中最小生存的时间</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment">#配置间隔多久才进行一次检测，检测需要关闭的空闲连接</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">300000</span><br>      <span class="hljs-attr">test-on-borrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">test-on-return:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment">#最大PSCache连接</span><br>      <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">20</span><br>      <span class="hljs-attr">use-global-data-source-stat:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br>      <span class="hljs-attr">connection-properties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><br>      <span class="hljs-comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，</span><br>      <span class="hljs-comment"># wall用于防火墙</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">stat:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">wall:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">log4j2:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 配置StatFilter</span><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-comment"># 默认为false，设置为true启动</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class="hljs-comment"># 配置StatViewServlet</span><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">&quot;/druid/*&quot;</span><br>        <span class="hljs-comment"># 允许哪些ip</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">root</span><br>        <span class="hljs-comment"># 禁止哪些ip</span><br>        <span class="hljs-attr">deny:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.102</span><br>        <span class="hljs-comment"># 是否可以重置</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># 启用</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="（2）整合mybatis"><a href="#（2）整合mybatis" class="headerlink" title="（2）整合mybatis"></a>（2）整合mybatis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.yury757.pojo</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yury757.mapper;<br><br><span class="hljs-keyword">import</span> com.yury757.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectList</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">selectById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、网站安全"><a href="#五、网站安全" class="headerlink" title="五、网站安全"></a>五、网站安全</h2><p>这部分内容用过滤器和拦截器也可以做到，只是以下两个框架可以使我们的安全组件更高效更简化。</p><h3 id="1、SpringSecurity"><a href="#1、SpringSecurity" class="headerlink" title="1、SpringSecurity"></a>1、SpringSecurity</h3><p><strong>功能：身份验证（Authentication）和访问控制（Authorization）</strong></p><p>很重要的几个类或注解：</p><ul><li>WebSecurityConfigurerAdapter：想要自定义安全策略，只要继承这个类就可以，重写里面的方法即可</li><li>AuthenrcationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">super</span>.configure(http);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yury757.config;<br><br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br>    <span class="hljs-comment">// 自定义授权规则</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 首页所有人可以访问，功能页只有对应权限的人才能访问</span><br>        http.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br>        <span class="hljs-comment">// 没有权限，跳到登录页面</span><br>        http.formLogin().loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>).loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>).defaultSuccessUrl(<span class="hljs-string">&quot;/index&quot;</span>);<br>        <span class="hljs-comment">// 使用自己的登录页面和自己的登录处理逻辑时，要禁用csrf防护</span><br>        <span class="hljs-comment">// 千万不要禁用csrf，及找其他方式处理登录页面</span><br>        http.csrf().disable();<br>        <span class="hljs-comment">// 开启注销功能</span><br>        http.logout();<br>        <span class="hljs-comment">// 开启“记住我”功能，实际上就是丢了一个“rememberMe”的cookie，默认保存两周</span><br>        http.rememberMe();<br>    &#125;<br><br>    <span class="hljs-comment">// 自定义认证规则</span><br>    <span class="hljs-comment">// 在spring security5中，需要不能直接使用密码，要加密使用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 这些数据正常应该从数据库里面读取</span><br>        auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> BCryptPasswordEncoder())<br>                .withUser(<span class="hljs-string">&quot;yury757&quot;</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip2&quot;</span>, <span class="hljs-string">&quot;vip3&quot;</span>)<br>                .and()<br>                .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>, <span class="hljs-string">&quot;vip2&quot;</span>, <span class="hljs-string">&quot;vip3&quot;</span>)<br>                .and()<br>                .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、Shiro"><a href="#2、Shiro" class="headerlink" title="2、Shiro"></a>2、Shiro</h3><p>也是一个安全组件。可以脱离web使用。</p><p>重要的三个对象：</p><ul><li>Subject：应用代码直接交互的对象，即外部浏览器或爬虫调用我们服务器api的用户。</li><li>SecurityManager：安全管理器，管理所有的subject</li><li>Realm：连接数据</li></ul><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="1、获取-Bean"><a href="#1、获取-Bean" class="headerlink" title="1、获取 Bean"></a>1、获取 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContextAware;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBeanUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationContextAware</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        <span class="hljs-keyword">if</span> (SpringBeanUtil.applicationContext == <span class="hljs-keyword">null</span>) &#123;<br>            SpringBeanUtil.applicationContext = applicationContext;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取applicationContext</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationContext <span class="hljs-title">getApplicationContext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> applicationContext;<br>    &#125;<br><br>    <span class="hljs-comment">// 通过name获取 Bean.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getBean</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> applicationContext.getBean(name);<br>    &#125;<br><br>    <span class="hljs-comment">// 通过class获取Bean.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (T) applicationContext.getBean(clazz);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 通过name,以及Clazz返回指定的Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(String name, Class&lt;T&gt; clazz)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> applicationContext.getBean(name, clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、程序启动后初始化"><a href="#2、程序启动后初始化" class="headerlink" title="2、程序启动后初始化"></a>2、程序启动后初始化</h3><p>spring event 模块可以让用户控制在某个事件发生后执行某个操作。</p><p>一个很常用的操作就是在程序启动后执行一些初始化操作，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EventListener(ApplicationReadyEvent.class)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;data init - &quot;</span> + System.currentTimeMillis());<br>&#125;<br></code></pre></td></tr></table></figure><p>但要注意的是，执行的方法一定要确保不会报错，不然程序无法启动，尤其是在生产环境中。</p><h3 id="3、定时任务"><a href="#3、定时任务" class="headerlink" title="3、定时任务"></a>3、定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在bean的方法上添加Schedule注解即可</span><br><span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doTask</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;test - &quot;</span> + System.currentTimeMillis());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java_JUC-study</title>
    <link href="/java/java_JUC/Java_JUC-study/"/>
    <url>/java/java_JUC/Java_JUC-study/</url>
    
    <content type="html"><![CDATA[<h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><h3 id="1、进程和线程"><a href="#1、进程和线程" class="headerlink" title="1、进程和线程"></a>1、进程和线程</h3><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。程序是指令、数据及其组织形式的描述，进程是程序的实体。狭义地说，进程就是一个正在运行的程序。</p><p>线程（Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p><h3 id="2、并行和并发"><a href="#2、并行和并发" class="headerlink" title="2、并行和并发"></a>2、并行和并发</h3><p>并行：一组程序按独立异步的速度执行，无论从微观还是宏观，程序都是一起执行的。即CPU可以同时在两个线程上工作。</p><p>并发：在同一个时间段内，两个或多个程序执行，宏观上来看是一起执行的，但微观上来看是交替执行的。比如CPU在线程1上工作一段时间，又切换到线程2上工作一段时间，因此宏观上来看两个程序都执行了。</p><p>知乎有一个举例说得好：</p><p>你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。</p><p>你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。</p><p>你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。</p><p><font color="Red">并发的关键是你有处理多个任务的能力，不一定要同时。并行的关键是你有同时处理多个任务的能力。区分它们最关键的点就是：是否是同时。</font>因此，单核CPU是无法实现并行的，只能通过CPU调度实现并发。而多核CPU才能实现并行。</p><h3 id="3、线程的状态"><a href="#3、线程的状态" class="headerlink" title="3、线程的状态"></a>3、线程的状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">State</span> </span>&#123;<br>    <span class="hljs-comment">// 就绪</span><br>    NEW,<br>    <span class="hljs-comment">// 运行</span><br>    RUNNABLE,<br>    <span class="hljs-comment">// 阻塞</span><br>    BLOCKED,<br>    <span class="hljs-comment">// 等待</span><br>    WAITING,<br>    <span class="hljs-comment">// 有一个特定时间的等待状态</span><br>    TIMED_WAITING,<br>    <span class="hljs-comment">// 终止</span><br>    TERMINATED;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、java有权限开线程吗？"><a href="#4、java有权限开线程吗？" class="headerlink" title="4、java有权限开线程吗？"></a>4、java有权限开线程吗？</h3><p>没有。java的thread.start方法本质调用的是一个native方法，该方法调用底层C++方法来实现开线程。</p><h3 id="5、wait和sleep的区别"><a href="#5、wait和sleep的区别" class="headerlink" title="5、wait和sleep的区别"></a>5、wait和sleep的区别</h3><p>（1）来自不同的类，wait来此Object，而sleep来自Thread；</p><p>（2）wait会释放锁，而sleep不会释放锁；</p><p>（3）wait只有在synchronized代码块下使用，而sleep可以在任何地方使用；</p><h2 id="二、锁"><a href="#二、锁" class="headerlink" title="二、锁"></a>二、锁</h2><blockquote><p>传统使用synchronized来给对象加锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">50</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.number &gt; <span class="hljs-number">0</span>)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出了第&quot;</span> + (number--) + <span class="hljs-string">&quot;张表，剩余&quot;</span> + number + <span class="hljs-string">&quot;张票&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用Lock接口来实现</p></blockquote><h3 id="1、Lock接口"><a href="#1、Lock接口" class="headerlink" title="1、Lock接口"></a>1、Lock接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WriteLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WriteLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="（1）ReentrantLock（可重入锁，常用）"><a href="#（1）ReentrantLock（可重入锁，常用）" class="headerlink" title="（1）ReentrantLock（可重入锁，常用）"></a>（1）ReentrantLock（可重入锁，常用）</h4><p>含义：可以多次获取同一个锁，但是释放也要多次释放。</p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">()</span> </span>&#123; sync = <span class="hljs-keyword">new</span> NonfairSync(); &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> fair)</span> </span>&#123; sync = fair ? <span class="hljs-keyword">new</span> FairSync() : <span class="hljs-keyword">new</span> NonfairSync(); &#125;<br></code></pre></td></tr></table></figure><p>有两种锁：</p><ul><li>公平锁：对线程公平对待，必须先来后到；</li><li>非公平锁：线程竞争锁时不管先来后到，让他们蜂拥上去抢。（默认）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02SaleTicket2</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;<br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt;&#123; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) ticket.sale(); &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt;&#123; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) ticket.sale(); &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt;&#123; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) ticket.sale(); &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket2</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">50</span>;<br><br>    Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 业务代码</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.number &gt; <span class="hljs-number">0</span>)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出了第&quot;</span> + (number--) + <span class="hljs-string">&quot;张表，剩余&quot;</span> + number + <span class="hljs-string">&quot;张票&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用Lock的代码套路：</p><ul><li>先调用lock.lock()方法</li><li>再用try包裹起来，里面写业务代码</li><li>最后finally要调用lock.unlock()方法</li></ul><p>Synchronized和Lock的区别</p><ul><li>Synchronized是java关键字，而Lock是一个java类</li><li>Synchronized无法获取锁的状态，而Lock可以查看锁的状态</li><li>Synchronized会自动释放锁，Lock必须手动解锁，如果出了问题而没有释放，则会<strong>死锁</strong>。</li><li>Synchronized，线程1（获得锁），线程2（阻塞），线程1（阻塞），线程2（永远等下去）；而Lock可以使用tryLock方法看是否可以获取锁，若长时间没有获取到锁，则会返回false，<font color="Red">而lock()方法如果一直获取不到锁，也会一直阻塞，这就出现了死锁。因此要避免使用lock()方法，使用tryLock()方法</font>。</li><li>Synchronized是非公平的可重入锁，不可以中断，而Lock可以手动设置公平和非公平，且可以判断锁状态</li><li>Synchronized适合锁少量的代码块同步问题，而Lock适合锁大量同步代码块</li></ul><p>即Synchronized是自动版的Lock，而Lock是纯手动配置。</p><h3 id="2、生产者消费者问题"><a href="#2、生产者消费者问题" class="headerlink" title="2、生产者消费者问题"></a>2、生产者消费者问题</h3><p>生产者消费者问题的套路：</p><ul><li>先判断等待</li><li>再写业务代码</li><li>最后通知</li></ul><h4 id="（1）使用Synchronized来写"><a href="#（1）使用Synchronized来写" class="headerlink" title="（1）使用Synchronized来写"></a>（1）使用Synchronized来写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test03ProducerConsumer</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>        Data data = <span class="hljs-keyword">new</span> Data();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.plus();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.minus();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">plus</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">if</span> (number != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 等待</span><br>            <span class="hljs-keyword">this</span>.wait();<br>        &#125;<br>        number++;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; =&gt; &quot;</span> + number);<br>        <span class="hljs-comment">// 通知其他线程，加法做完了</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">minus</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">if</span> (number == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 等待</span><br>            <span class="hljs-keyword">this</span>.wait();<br>        &#125;<br>        number--;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; =&gt; &quot;</span> + number);<br>        <span class="hljs-comment">// 通知其他线程，减法做完了</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）虚假唤醒（重要）"><a href="#（2）虚假唤醒（重要）" class="headerlink" title="（2）虚假唤醒（重要）"></a>（2）虚假唤醒（重要）</h4><p>在上面例子中，只有一个生产者和一个消费者，因此生产者只可能被消费者唤醒，而消费者只可能被生产者唤醒。</p><p>但是如果有两个生产者和两个消费者的情况下，<strong>一个生产者可能唤醒了另外一个生产者，导致生产者的活动执行了两次。</strong>这就是虚假唤醒。</p><p><font color="Red">解决办法：使用while，而不是if来判断，即某个线程被唤醒后，还要再判断一次是否是真实的被唤醒情况。</font></p><h4 id="（3）使用Lock来写"><a href="#（3）使用Lock来写" class="headerlink" title="（3）使用Lock来写"></a>（3）使用Lock来写</h4><table><thead><tr><th>Synchronized方式</th><th>Lock方式</th></tr></thead><tbody><tr><td>synchronized</td><td>Lock类</td></tr><tr><td>wait方法</td><td>Condition类的await方法</td></tr><tr><td>notify方法</td><td>Condition类的signal方法</td></tr></tbody></table><p>Conditioin类就类似一个对象的监视器，await方法可以使调用这个方法的线程阻塞，signal方法可以唤醒某个被阻塞的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test03ProducerConsumer2</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>        Data data = <span class="hljs-keyword">new</span> Data();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.plus();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.minus();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.plus();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.minus();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;D&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data2</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;<br>    Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    Condition condition = lock.newCondition();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">plus</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span> (number != <span class="hljs-number">0</span>)&#123;<br>                condition.await();<br>            &#125;<br>            number++;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; =&gt; &quot;</span> + number);<br>            condition.signalAll();<br>        &#125;<span class="hljs-keyword">catch</span> (InterruptedException ex)&#123;<br>            ex.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">minus</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span> (number == <span class="hljs-number">0</span>)&#123;<br>                condition.await();<br>            &#125;<br>            number--;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; =&gt; &quot;</span> + number);<br>            condition.signalAll();<br>        &#125;<span class="hljs-keyword">catch</span> (InterruptedException ex)&#123;<br>            ex.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、（重要！）锁到底锁的是什么"><a href="#3、（重要！）锁到底锁的是什么" class="headerlink" title="3、（重要！）锁到底锁的是什么"></a>3、（重要！）锁到底锁的是什么</h3><ul><li>普通方法上加锁，锁的是<font color="Red">调用该方法的对象（实例）</font>。</li><li>静态方法上加锁，锁的是<font color="Red">class对象（模板）</font>。</li><li>同一个对象，一个线程调用普通同步方法，另一个线程调用普通方法，普通方法的调用不受锁的影响，因为普通方法调用根本不用去获取锁，因此即使该对象被其他线程锁住了，普通方法也可以成功调用。<font color="Red">把同步方法理解成需要在房子里才可以执行，普通方法不用进入房子就可以执行，因此普通方法的调用不会受锁的影响，只有同步方法才会受锁的影响，因为如果房子被其他线程“关门”了，他进不去就只能等待。</font></li><li>同一个对象，一个线程调用静态同步方法，另一个线程调用静态方法，静态方法的调用不受锁的影响，原因同上。</li><li>同一个对象，一个线程调用静态同步方法，另一个线程调用普通同步方法，普通同步方法的调用不受锁的影响，因为静态方法锁的是class对象（模板），普通对象（实例）和class对象（模板）不在一起，静态方法在class对象（模板）中，而普通方法在普通对象中。</li></ul><h2 id="三、集合类的安全性"><a href="#三、集合类的安全性" class="headerlink" title="三、集合类的安全性"></a>三、集合类的安全性</h2><h3 id="1、List的安全性"><a href="#1、List的安全性" class="headerlink" title="1、List的安全性"></a>1、List的安全性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-comment">// 使用ArrayList类，最终打印的长度可能不是10000</span><br><span class="hljs-comment">// 而用CopyOnWriteArrayList类，最终打印的长度就是10000</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test06UnsafeList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; objects = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>                objects.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>                System.out.println(objects.size());<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ArrayList类是非线程安全的，解决List的安全性的几个解决方案：</p><ul><li>使用Vector类，Vector类是线程安全的List实现类，基于synchronized实现</li><li>使用Collections.synchronized(new ArrayList&lt;&gt;())，生成的SynchronizedList就是在arraylist外再包了一层同步方法而已。</li><li>使用JUC的CopyOnWriteArrayList类，基于ReentrantLock实现，效率比synchronized高。（用这个）</li></ul><h3 id="2、Set的安全性"><a href="#2、Set的安全性" class="headerlink" title="2、Set的安全性"></a>2、Set的安全性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test07UnsafeSet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Set&lt;String&gt; objects = <span class="hljs-keyword">new</span> CopyOnWriteArraySet&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>                objects.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>                System.out.println(objects.size());<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样HashSet也是非线程安全的，解决方法：</p><ul><li>使用Collections.synchronizedSet(new HashSet&lt;&gt;())</li><li>使用CopyOnWriteArraySet，基于CopyOnWriteArrayList实现，效率比HashSet低（用这个）</li></ul><h3 id="3、Map的安全性"><a href="#3、Map的安全性" class="headerlink" title="3、Map的安全性"></a>3、Map的安全性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test08UnsafeMap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;String, String&gt; objects = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>                objects.put(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>), UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>                System.out.println(objects.size());<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HashMap是非线程安全的，解决方法：</p><ul><li>使用Collections.synchronizedMap(new HashMap&lt;&gt;())</li><li>使用ConcurrentHashMap（用这个）</li></ul><h2 id="四、Callable"><a href="#四、Callable" class="headerlink" title="四、Callable"></a>四、Callable</h2><h4 id="（1）Callable和Runnable的区别："><a href="#（1）Callable和Runnable的区别：" class="headerlink" title="（1）Callable和Runnable的区别："></a>（1）Callable和Runnable的区别：</h4><ul><li>Callable可以有返回值</li><li>Callable可以抛出异常</li><li>调用方法不同，Callable由call()调用，Runnable由run()调用</li></ul><h4 id="（2）Callable的使用"><a href="#（2）Callable的使用" class="headerlink" title="（2）Callable的使用"></a>（2）Callable的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test09Callable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        FutureTask futureTask = <span class="hljs-keyword">new</span> FutureTask(<span class="hljs-keyword">new</span> Test09Callable());<br>        <span class="hljs-keyword">new</span> Thread(futureTask).start();<br>        <span class="hljs-keyword">new</span> Thread(futureTask).start();<br>        String o = (String)futureTask.get();<br>        System.out.println(<span class="hljs-string">&quot;main方法：&quot;</span> + o);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法内部：asdfsdf&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;asdfsdf&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：</p><ul><li>同时使用两次<code>new Thread(futureTask).start();</code>时，只会输出一次</li><li><code>futureTask.get();</code>方法可能会被阻塞，如果call()方法内部是耗时操作的话</li></ul><h2 id="五、三大常用辅助类"><a href="#五、三大常用辅助类" class="headerlink" title="五、三大常用辅助类"></a>五、三大常用辅助类</h2><h3 id="1、CountDownLatch"><a href="#1、CountDownLatch" class="headerlink" title="1、CountDownLatch"></a>1、CountDownLatch</h3><p>这是一个减法计数器类。构造函数接受一个int参数，表示初始数量；countDown()方法将计数器减1；await()方法会阻塞当前线程，只有当计数器为0时，才会被唤醒并继续往下执行。</p><p>如下是一个简单测试类，只有当所有线程都完成了工作，才能输出close the door。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test10CountDownLatch</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">6</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;Person &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot; go out&quot;</span>);<br>                <span class="hljs-comment">// 计数器减1</span><br>                countDownLatch.countDown();<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br><br>        <span class="hljs-comment">// 等待计数器归零，才会继续向下执行</span><br>        countDownLatch.await();<br><br>        System.out.println(<span class="hljs-string">&quot;close the door&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、CyclicBarrier"><a href="#2、CyclicBarrier" class="headerlink" title="2、CyclicBarrier"></a>2、CyclicBarrier</h3><p>循环阻塞。使当线程实现全部<font color="Red">彼此等待</font>直到达到一个共同的屏障点的辅助类。有点像加法计数器，全部线程都到达了一个准备好了的状态，则就会执行最终线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.BrokenBarrierException;<br><span class="hljs-keyword">import</span> java.util.concurrent.CyclicBarrier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 集齐七颗龙珠召唤神龙</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test11CyclicBarrier</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CyclicBarrier cyclicBarrier = <span class="hljs-keyword">new</span> CyclicBarrier(<span class="hljs-number">7</span>, () -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;召唤神龙成功&quot;</span>);<br>        &#125;);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> tmp = i;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;收集到了第&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;颗龙珠&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    cyclicBarrier.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、Semaphore"><a href="#3、Semaphore" class="headerlink" title="3、Semaphore"></a>3、Semaphore</h3><p>信号量。类似排队系统，指定一个最大容量，先进来的可以处理，直到到达最大容量，后面的等待，当里面有元素释放时，后面的元素才能进入处理。acquire()放入元素，如果容量满了则等待；release()方法释放元素，唤醒其他等待线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test12Semaphore</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 默认线程数量</span><br>        Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    semaphore.acquire();<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;抢到车位&quot;</span>);<br><br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;离开车位&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    semaphore.release();<br>                &#125;<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、读写锁"><a href="#六、读写锁" class="headerlink" title="六、读写锁"></a>六、读写锁</h2><p>接口：ReadWriteLock</p><p>实现类：ReentrantReadWriteLock，维护了一对关联的lock，一个只用于读（read lock，共享锁），一个只用于写（write lock，独占锁），read lock可以允许多个线程同时读，而write lock同一个时间点只允许一个线程写。</p><p>读-读：可以共存</p><p>读-写：不能同时，需排队</p><p>写-写：不能同时，需排队</p><p>独占锁（写锁）：一次只能被一个线程占有</p><p>共享锁（读锁）：可以被多个线程同时占有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> jdk.internal.org.objectweb.asm.tree.FieldInsnNode;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test13ReadWriteLock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyCacheLock cache = <span class="hljs-keyword">new</span> MyCacheLock();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> tmp = i;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                cache.put(tmp + <span class="hljs-string">&quot;&quot;</span>, tmp);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> tmp = i;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                Object o = cache.get(tmp + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义缓存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCache</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String key, Object object)</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写入&quot;</span> + key);<br>        <span class="hljs-keyword">this</span>.map.put(key, object);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写入&quot;</span> + key + <span class="hljs-string">&quot;OK&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(String key)</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读取&quot;</span> + key);<br>        Object o = <span class="hljs-keyword">this</span>.map.get(key);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读取&quot;</span> + key + <span class="hljs-string">&quot;OK&quot;</span>);<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义缓存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCacheLock</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// 读写锁：更加细粒度地控制读写</span><br>    <span class="hljs-keyword">private</span> ReentrantReadWriteLock readWriteLock = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br><br>    <span class="hljs-comment">// 写入操作，同一时间只允许一个线程写入</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String key, Object object)</span></span>&#123;<br>        readWriteLock.writeLock().lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写入&quot;</span> + key);<br>            <span class="hljs-keyword">this</span>.map.put(key, object);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写入&quot;</span> + key + <span class="hljs-string">&quot;OK&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>            ex.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.writeLock().unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 读取操作，允许多个线程同时读</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(String key)</span></span>&#123;<br>        readWriteLock.readLock().lock();<br>        Object o = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读取&quot;</span> + key);<br>            o = <span class="hljs-keyword">this</span>.map.get(key);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读取&quot;</span> + key + <span class="hljs-string">&quot;OK&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>            ex.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.readLock().lock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、阻塞队列"><a href="#七、阻塞队列" class="headerlink" title="七、阻塞队列"></a>七、阻塞队列</h2><p>接口：BlockingQueue</p><h3 id="1、ArrayBlockingQueue"><a href="#1、ArrayBlockingQueue" class="headerlink" title="1、ArrayBlockingQueue"></a>1、ArrayBlockingQueue</h3><p>该实现类基于数组实现。</p><table><thead><tr><th>方式</th><th>抛出异常</th><th>不抛出异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add(E)</td><td>offer(E)</td><td>put(E)</td><td>offer(E, long, TimeUnit)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(long, TimeUnit)</td></tr><tr><td>检查队首元素</td><td>element()</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table><h3 id="2、LinkedBlockingQueue"><a href="#2、LinkedBlockingQueue" class="headerlink" title="2、LinkedBlockingQueue"></a>2、LinkedBlockingQueue</h3><p>该实现类基于链表实现，和上面的使用方式一样，略。</p><h3 id="3、SynchronousQueue"><a href="#3、SynchronousQueue" class="headerlink" title="3、SynchronousQueue"></a>3、SynchronousQueue</h3><p>SynchronousQueue为同步队列，和其他阻塞队列不太一样，SynchronousQueue在初始化时不需要传入capacity容量参数，可以认为SynchronousQueued的容量为0。</p><ul><li>put(E)方法会阻塞，等待其他线程来取出该元素。</li><li>take()方法调用时，如果之前没有put进来值，则take会阻塞；如果之前有put进来值，则会取出之前put进来的值。</li></ul><p><font color="Red">注意：在测试多线程和sleep时尽量不要用junit测试，junit对他们的支持有些问题，可以直接写一个main方法作为测试类。</font></p><h2 id="八、线程池（重点）"><a href="#八、线程池（重点）" class="headerlink" title="八、线程池（重点）"></a>八、线程池（重点）</h2><h3 id="1、池化技术"><a href="#1、池化技术" class="headerlink" title="1、池化技术"></a>1、池化技术</h3><p>线程池、连接池、内存池、对象池……</p><p>池化技术：事先准备好一些资源，有人要用，直接取出来使用，用完之后还回去即可。</p><p>好处：</p><ul><li>降低资源创建时的CPU等资源消耗</li><li>提高响应速度</li><li>方便管理</li></ul><p>线程池的优点：<font color="Red">线程复用、可以控制最大并发数、方便管理线程。</font></p><h3 id="2、七大参数"><a href="#2、七大参数" class="headerlink" title="2、七大参数"></a>2、七大参数</h3><p>创建线程池应使用如下构造方法自定义创建线程池，而不能使用后面会说的Executors来创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a new &#123;<span class="hljs-doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span><br><span class="hljs-comment"> * parameters.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment"> *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span><br><span class="hljs-comment"> *        pool</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> keepAliveTime when the number of threads is greater than</span><br><span class="hljs-comment"> *        the core, this is the maximum time that excess idle threads</span><br><span class="hljs-comment"> *        will wait for new tasks before terminating.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> unit the time unit for the &#123;<span class="hljs-doctag">@code</span> keepAliveTime&#125; argument</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> workQueue the queue to use for holding tasks before they are</span><br><span class="hljs-comment"> *        executed.  This queue will hold only the &#123;<span class="hljs-doctag">@code</span> Runnable&#125;</span><br><span class="hljs-comment"> *        tasks submitted by the &#123;<span class="hljs-doctag">@code</span> execute&#125; method.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> threadFactory the factory to use when the executor</span><br><span class="hljs-comment"> *        creates a new thread</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> handler the handler to use when execution is blocked</span><br><span class="hljs-comment"> *        because the thread bounds and queue capacities are reached</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if &#123;<span class="hljs-doctag">@code</span> workQueue&#125;</span><br><span class="hljs-comment"> *         or &#123;<span class="hljs-doctag">@code</span> threadFactory&#125; or &#123;<span class="hljs-doctag">@code</span> handler&#125; is null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-keyword">int</span> maximumPoolSize,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-keyword">long</span> keepAliveTime,</span></span><br><span class="hljs-params"><span class="hljs-function">                          TimeUnit unit,</span></span><br><span class="hljs-params"><span class="hljs-function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="hljs-params"><span class="hljs-function">                          ThreadFactory threadFactory,</span></span><br><span class="hljs-params"><span class="hljs-function">                          RejectedExecutionHandler handler)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt; corePoolSize ||<br>        keepAliveTime &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-keyword">null</span> || threadFactory == <span class="hljs-keyword">null</span> || handler == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    <span class="hljs-keyword">this</span>.acc = System.getSecurityManager() == <span class="hljs-keyword">null</span> ?<br>            <span class="hljs-keyword">null</span> :<br>            AccessController.getContext();<br>    <span class="hljs-keyword">this</span>.corePoolSize = corePoolSize;<br>    <span class="hljs-keyword">this</span>.maximumPoolSize = maximumPoolSize;<br>    <span class="hljs-keyword">this</span>.workQueue = workQueue;<br>    <span class="hljs-keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>    <span class="hljs-keyword">this</span>.threadFactory = threadFactory;<br>    <span class="hljs-keyword">this</span>.handler = handler;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>参数类型</th><th>解释</th></tr></thead><tbody><tr><td>corePoolSize</td><td>int</td><td>维持在线程池中的核心线程数，即使是空闲状态，也会保留在线程池中</td></tr><tr><td>maximumPoolSize</td><td>int</td><td>线程池中允许容纳的最大线程。提交任务时，若发现任务阻塞队列满了时，线程池就会进行扩容，但不能超过这个最大线程数</td></tr><tr><td>keepAliveTime</td><td>long</td><td>当线程池中的线程数超过核心线程数时，空闲线程的留存时间，当线程处于空闲状态超过这个时间时，会移除这个线程，直到总线程数等于核心线程数</td></tr><tr><td>unit</td><td>TimeUnit</td><td>keepAliveTime参数的单位</td></tr><tr><td>workQueue</td><td>BlockingQueue&lt;Runnable&gt;</td><td>任务阻塞队列，当用户提交执行的任务数超过核心线程数时，剩余任务就会在队列中排队等待</td></tr><tr><td>threadFactory</td><td>ThreadFactory</td><td>创建线程的工厂类</td></tr><tr><td>handler</td><td>RejectedExecutionHandler</td><td>当任务队列达到上限或线程数达到最大线程数时的处理策略</td></tr></tbody></table><h3 id="3、线程池的工作流程"><a href="#3、线程池的工作流程" class="headerlink" title="3、线程池的工作流程"></a>3、线程池的工作流程</h3><ul><li><code>execute(Runnable command)</code>提交任务</li><li>判断核心线程中是否存在空闲的线程？若存在，则占用一个空闲线程来执行任务；否则进行下一步。</li><li>判断任务阻塞队列是否已满？若没有满，则将任务存入任务阻塞队列中等待；否则进行下一步。</li><li>判断整个线程池是否已满，若没有满，则创建一个新的线程执行任务；否则执行拒绝策略。</li></ul><h3 id="4、四种拒绝策略"><a href="#4、四种拒绝策略" class="headerlink" title="4、四种拒绝策略"></a>4、四种拒绝策略</h3><p>（1）抛异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbortPolicy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RejectedExecutionHandler</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates an &#123;<span class="hljs-doctag">@code</span> AbortPolicy&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbortPolicy</span><span class="hljs-params">()</span> </span>&#123; &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Always throws RejectedExecutionException.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r the runnable task requested to be executed</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e the executor attempting to execute this task</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RejectedExecutionException always</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RejectedExecutionException(<span class="hljs-string">&quot;Task &quot;</span> + r.toString() +<br>                                             <span class="hljs-string">&quot; rejected from &quot;</span> +<br>                                             e.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）在当前线程直接运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallerRunsPolicy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RejectedExecutionHandler</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a &#123;<span class="hljs-doctag">@code</span> CallerRunsPolicy&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CallerRunsPolicy</span><span class="hljs-params">()</span> </span>&#123; &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Executes task r in the caller&#x27;s thread, unless the executor</span><br><span class="hljs-comment">     * has been shut down, in which case the task is discarded.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r the runnable task requested to be executed</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e the executor attempting to execute this task</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!e.isShutdown()) &#123;<br>            r.run();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）剔除最早提交的那个任务，将新任务开启执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiscardOldestPolicy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RejectedExecutionHandler</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a &#123;<span class="hljs-doctag">@code</span> DiscardOldestPolicy&#125; for the given executor.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DiscardOldestPolicy</span><span class="hljs-params">()</span> </span>&#123; &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Obtains and ignores the next task that the executor</span><br><span class="hljs-comment">     * would otherwise execute, if one is immediately available,</span><br><span class="hljs-comment">     * and then retries execution of task r, unless the executor</span><br><span class="hljs-comment">     * is shut down, in which case task r is instead discarded.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r the runnable task requested to be executed</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e the executor attempting to execute this task</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!e.isShutdown()) &#123;<br>            e.getQueue().poll();<br>            e.execute(r);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（4）啥都不做，静默掠过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiscardPolicy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RejectedExecutionHandler</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a &#123;<span class="hljs-doctag">@code</span> DiscardPolicy&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DiscardPolicy</span><span class="hljs-params">()</span> </span>&#123; &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Does nothing, which has the effect of discarding task r.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r the runnable task requested to be executed</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e the executor attempting to execute this task</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、注意"><a href="#5、注意" class="headerlink" title="5、注意"></a>5、注意</h3><p>线程池的创建不允许使用<code>Executors</code>去创建，而是通过<code>ThreadPoolExecutor</code>去创建。本质上<code>Executors</code>也是通过<code>new ThreadPoolExecutor</code>的方式来创建线程池，但是<code>Executors</code>把很多参数都封装好了，不能自定义某些参数，因此自己通过<code>new ThreadPoolExecutor</code>的方式创建的线程池在管理上更具有自主性，此外通过使用<code>Executors</code>封装好了的参数创建的线程池有诸多弊端，如下：</p><p>（1）<code>Executors.newFixedThreadPool(int nThreads)</code></p><p>这种创建方式创建的线程池的任务队列大小是<strong>Integer.MAX_VALUE</strong>，因此如果工作线程满了，如果同时涌来大量任务请求，则会导致任务队列积压，非常容易导致内存溢出、程序崩溃。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,<br>                                  <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                  <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）<code>Executors.newSingleThreadExecutor()</code></p><p>这种方式和上面那个一样，都是由于创建的是一个<strong>Integer.MAX_VALUE</strong>大小的任务队列，容易造成任务积压导致内存溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newSingleThreadExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FinalizableDelegatedExecutorService<br>        (<span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                                <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）<code>Executors.newCachedThreadPool()</code></p><p>这种创建方式的任务队列是SynchronousQueue，线程池最大容量是<strong>Integer.MAX_VALUE</strong>，而我们知道SynchronousQueue是同步队列，只要有元素put进去，就会阻塞，此时就需要创建一个线程来处理这个请求，而线程池的最大值又设定为<strong>Integer.MAX_VALUE</strong>，因此同样如果请求突然增加，就会创建大量线程，容易造成内存溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newCachedThreadPool</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                  <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                  <span class="hljs-keyword">new</span> SynchronousQueue&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p>（4）<code>Executors.newScheduledThreadPool(int corePoolSize)</code></p><p>这种创建方式和上面一样，可创建的线程最大容量为<strong>Integer.MAX_VALUE</strong>，容易会因为大量创建线程而导致内存溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ScheduledExecutorService <span class="hljs-title">newScheduledThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="hljs-number">0</span>, NANOSECONDS,<br>          <span class="hljs-keyword">new</span> DelayedWorkQueue());<br>&#125;<br></code></pre></td></tr></table></figure><p>总结如下：</p><p>以下四种方式都是用的默认的线程创建工厂和默认的拒绝策略。</p><table><thead><tr><th>创建线程池的方式</th><th>核心线程数</th><th>最大线程数</th><th>线程空闲超时时间</th><th>任务队列类</th><th>任务队列容量</th><th>OOM原因</th></tr></thead><tbody><tr><td>Executors.newFixedThreadPool(int nThreads)</td><td>自定义</td><td>自定义</td><td>0毫秒</td><td>LinkedBlockingQueue</td><td>Integer.MAX_VALUE</td><td>任务队列大量堆积导致OOM</td></tr><tr><td>Executors.newSingleThreadExecutor()</td><td>1</td><td>1</td><td>0毫秒</td><td>LinkedBlockingQueue</td><td>Integer.MAX_VALUE</td><td>任务队列大量堆积导致OOM</td></tr><tr><td>Executors.newCachedThreadPool()</td><td>0</td><td>Integer.MAX_VALUE</td><td>60秒</td><td>SynchronousQueue</td><td>0</td><td>创建大量线程导致OOM</td></tr><tr><td>Executors.newScheduledThreadPool(int corePoolSize)</td><td>自定义</td><td>Integer.MAX_VALUE</td><td>0微秒</td><td>DelayedWorkQueue</td><td>0</td><td>创建大量线程导致OOM</td></tr></tbody></table><h2 id="九、IO密集型程序和CPU密集型程序"><a href="#九、IO密集型程序和CPU密集型程序" class="headerlink" title="九、IO密集型程序和CPU密集型程序"></a>九、IO密集型程序和CPU密集型程序</h2><ul><li>CPU密集型也叫计算密集型，指的是系统运作大部分的状况是CPU Loading很高，I/O在很短的时间就可以完成，而CPU还有许多运算要处理。如计算圆周率程序、对视频音频进行编码解码的程序等，绝大部分时间都在进行CPU计算。开发CPU密集型程序尽量使用运行效率更高的编程语言，比如C/C++。</li><li>IO密集型是指程序绝大多数时间都花在IO上了，而IO结束后，CPU的计算在很短时间内就可以完成。常见的大部分任务都是IO密集型任务，比如web应用。开发IO密集型程序最好选择开发效率更高的编程语言，如python/java。</li></ul><h2 id="十、四大函数式接口"><a href="#十、四大函数式接口" class="headerlink" title="十、四大函数式接口"></a>十、四大函数式接口</h2><p><strong>函数式接口</strong>：只有一个方法的接口。</p><h3 id="1、Function"><a href="#1、Function" class="headerlink" title="1、Function"></a>1、Function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;<br>    Function&lt;Integer, String&gt; function = <span class="hljs-keyword">new</span> Function&lt;Integer, String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">apply</span><span class="hljs-params">(Integer o)</span> </span>&#123;<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; o; i++) &#123;<br>                sb.append(<span class="hljs-string">&quot;1&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125;<br>    &#125;;<br><br>    Function&lt;Integer, String&gt; function2 = (Integer o) -&gt;&#123;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; o; i++) &#123;<br>            sb.append(<span class="hljs-string">&quot;2&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;;<br><br>    System.out.println(function.apply(<span class="hljs-number">2</span>));<br>    System.out.println(function2.apply(<span class="hljs-number">4</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、Predicate"><a href="#2、Predicate" class="headerlink" title="2、Predicate"></a>2、Predicate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span>&#123;<br>    Predicate&lt;Float&gt; predicate1 = <span class="hljs-keyword">new</span> Predicate&lt;Float&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(Float o)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> o &gt; <span class="hljs-number">1000.2f</span>;<br>        &#125;<br>    &#125;;<br><br>    Predicate&lt;Float&gt; predicate2 = (Float o) -&gt; &#123; <span class="hljs-keyword">return</span> o &gt; <span class="hljs-number">1000.2f</span>; &#125;;<br><br>    System.out.println(predicate1.test(<span class="hljs-number">1000f</span>));<br>    System.out.println(predicate1.test(<span class="hljs-number">1001f</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、Consumer"><a href="#3、Consumer" class="headerlink" title="3、Consumer"></a>3、Consumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span>&#123;<br>    Consumer&lt;String[]&gt; consumer1 = <span class="hljs-keyword">new</span> Consumer&lt;String[]&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(String[] strings)</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (String s : strings) &#123;<br>                System.out.println(s);<br>            &#125;<br>        &#125;<br>    &#125;;<br>    Consumer&lt;String[]&gt; consumer2 = (String[] strings) -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (String s : strings) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;;<br>    consumer1.accept(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;456&quot;</span>&#125;);<br>    consumer2.accept(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、Supplier"><a href="#4、Supplier" class="headerlink" title="4、Supplier"></a>4、Supplier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test04</span><span class="hljs-params">()</span></span>&#123;<br>    Supplier&lt;String&gt; supplier1 = <span class="hljs-keyword">new</span> Supplier&lt;String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;suppplier1 =&gt; &quot;</span> + UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>    Supplier&lt;String&gt; supplier2 = () -&gt; <span class="hljs-string">&quot;suppplier2 =&gt; &quot;</span> + UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    System.out.println(supplier1.get());<br>    System.out.println(supplier2.get());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十一、流式计算"><a href="#十一、流式计算" class="headerlink" title="十一、流式计算"></a>十一、流式计算</h2><p>大数据：存储 + 计算</p><p>java集合类、数据库等本质是用来存储东西的，计算都应交给流来操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test19StreamCalculate</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        test01();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;<br>        User u1 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">21</span>);<br>        User u2 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">22</span>);<br>        User u3 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">23</span>);<br>        User u4 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">24</span>);<br>        User u5 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-number">25</span>);<br>        User u6 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-number">26</span>);<br>        List&lt;User&gt; userList = Arrays.asList(u1, u2, u3, u4, u5, u6);<br>        <span class="hljs-comment">// Lambda表达式、链式编程、函数式接口、Stream流式计算</span><br>        userList.stream()<br>                .filter(user -&gt; user.getId() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)                <span class="hljs-comment">// 筛选id为偶数的用户</span><br>                .filter(user -&gt; user.getAge() &gt; <span class="hljs-number">23</span>)                   <span class="hljs-comment">// 筛选年龄大于23的用户</span><br>                .map(user -&gt; user.getName().toUpperCase())            <span class="hljs-comment">// 只保留名字</span><br>                .sorted((String s1, String s2) -&gt; s2.compareTo(s1))   <span class="hljs-comment">// 对名字倒序排序</span><br>                .limit(<span class="hljs-number">1</span>)                                             <span class="hljs-comment">// 只取第一个</span><br>                .forEach(System.out::println);                        <span class="hljs-comment">// 打印</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十二、ForkJoin"><a href="#十二、ForkJoin" class="headerlink" title="十二、ForkJoin"></a>十二、ForkJoin</h2><h3 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h3><p>将一个大任务拆分成多个小任务，每个子任务分别执行，全部子任务结束后获取结果，再将所有结果汇总起来成最终结果。</p><p><img src="/images/FockJoin.png"></p><h3 id="2、特点：工作窃取"><a href="#2、特点：工作窃取" class="headerlink" title="2、特点：工作窃取"></a>2、特点：工作窃取</h3><p>子任务分配给其他很多线程后，不同线程执行完成的时间可能不一样，先完成的的线程会把未完成的线程的部分任务拿过来帮忙一起做。</p><p>里面维护的是双端队列，可以从两端取任务来执行。</p><h3 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinPool;<br><span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinTask;<br><span class="hljs-keyword">import</span> java.util.concurrent.RecursiveTask;<br><span class="hljs-keyword">import</span> java.util.stream.LongStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test18FockJoin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveTask</span>&lt;<span class="hljs-title">Long</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> Long start;<br>    <span class="hljs-keyword">private</span> Long end;<br><br>    <span class="hljs-comment">// 临界值</span><br>    <span class="hljs-keyword">private</span> Long temp = <span class="hljs-number">10000L</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test18FockJoin</span><span class="hljs-params">(Long start, Long end)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.start = start;<br>        <span class="hljs-keyword">this</span>.end = end;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">for</span> (Long i = start; i &lt;= end; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Long <span class="hljs-title">compute</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ((end - start) &lt; temp)&#123;<br>            <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0L</span>;<br>            <span class="hljs-keyword">for</span> (Long i = start; i &lt;= end; i++) &#123;<br>                sum += i;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">long</span> middle = (start + end) / <span class="hljs-number">2</span>;<br>            Test18FockJoin test18FockJoin1 = <span class="hljs-keyword">new</span> Test18FockJoin(start, middle);<br>            test18FockJoin1.fork();<br>            Test18FockJoin test18FockJoin2 = <span class="hljs-keyword">new</span> Test18FockJoin(middle + <span class="hljs-number">1</span>, end);<br>            test18FockJoin2.fork();<br>            <span class="hljs-keyword">return</span> test18FockJoin1.join() + test18FockJoin2.join();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        test03();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通计算方式</span><br><span class="hljs-comment">     * 500000000500000000</span><br><span class="hljs-comment">     * 3603毫秒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> starttime = System.currentTimeMillis();<br><br>        Test18FockJoin task = <span class="hljs-keyword">new</span> Test18FockJoin(<span class="hljs-number">1L</span>, <span class="hljs-number">10_0000_0000L</span>);<br>        Long res = task.sum();<br><br>        System.out.println(res);<br>        <span class="hljs-keyword">long</span> endtime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费时间：&quot;</span> + (endtime - starttime) + <span class="hljs-string">&quot;毫秒&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用forkjoin</span><br><span class="hljs-comment">     * 500000000500000000</span><br><span class="hljs-comment">     * 2133毫秒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> starttime = System.currentTimeMillis();<br><br>        ForkJoinPool forkJoinPool = <span class="hljs-keyword">new</span> ForkJoinPool();<br>        Test18FockJoin task = <span class="hljs-keyword">new</span> Test18FockJoin(<span class="hljs-number">1L</span>, <span class="hljs-number">10_0000_0000L</span>);<br>        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task);<br>        Long res = task.get();<br><br>        System.out.println(res);<br>        <span class="hljs-keyword">long</span> endtime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费时间：&quot;</span> + (endtime - starttime) + <span class="hljs-string">&quot;毫秒&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用Stream并行流</span><br><span class="hljs-comment">     * 500000000500000000</span><br><span class="hljs-comment">     * 215毫秒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> starttime = System.currentTimeMillis();<br><br>        <span class="hljs-keyword">long</span> res = LongStream.rangeClosed(<span class="hljs-number">1</span>, <span class="hljs-number">10_0000_0000L</span>).parallel().reduce(<span class="hljs-number">0</span>, Long::sum);<br><br>        System.out.println(res);<br>        <span class="hljs-keyword">long</span> endtime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费时间：&quot;</span> + (endtime - starttime) + <span class="hljs-string">&quot;毫秒&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十三、异步回调（Future）"><a href="#十三、异步回调（Future）" class="headerlink" title="十三、异步回调（Future）"></a>十三、异步回调（Future）</h2><p>Future接口：用来处理异步任务的，提供了检查异步任务是否完成、取消任务、是否被取消了、获取任务结果、在指定延迟内获取返回值等接口方法。</p><p>CompletableFuture为其中一个实现类，介绍两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 没有返回值的异步回调</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture&lt;Void&gt; <span class="hljs-title">runAsync</span><span class="hljs-params">(Runnable runnable)</span></span>&#123;&#125;<br><br><span class="hljs-comment">// 有返回值的异步回调</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;U&gt; <span class="hljs-function">CompletableFuture&lt;U&gt; <span class="hljs-title">supplyAsync</span><span class="hljs-params">(Supplier&lt;U&gt; supplier)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CompletableFuture;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.Future;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 异步调用：</span><br><span class="hljs-comment"> * 1、异步执行</span><br><span class="hljs-comment"> * 2、成功回调</span><br><span class="hljs-comment"> * 3、失败回调</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test20Future</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 无返回值的异步任务</span><br>        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;异步无返回值1&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;异步无返回值2&quot;</span>);<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;同步任务&quot;</span>);<br><br>        <span class="hljs-comment">// 阻塞，直到获取结果</span><br>        Void unused = completableFuture.get();<br>        System.out.println(<span class="hljs-string">&quot;异步无返回值任务结束&quot;</span>);<br><br>        <span class="hljs-comment">// 有返回值的异步任务</span><br>        CompletableFuture&lt;Integer&gt; completableFuture2 = CompletableFuture.supplyAsync(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;异步有返回值1&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;异步有返回值2&quot;</span>);<br>            <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>        &#125;);<br>        Integer res = completableFuture2.whenComplete((t, u) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;t =&gt; &quot;</span> + t);<br>            System.out.println(<span class="hljs-string">&quot;u =&gt; &quot;</span> + u);<br>        &#125;).exceptionally((ex) -&gt; &#123;<br>            System.out.println(ex.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">233</span>;<br>        &#125;).get();<br><br>        System.out.println(res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十四、JMM（重要）"><a href="#十四、JMM（重要）" class="headerlink" title="十四、JMM（重要）"></a>十四、JMM（重要）</h2><h3 id="1、什么是JMM"><a href="#1、什么是JMM" class="headerlink" title="1、什么是JMM"></a>1、什么是JMM</h3><p>JMM是java memory model，即java内存模型，<font color="Red">因为在不同硬件厂商和不同操作系统下，程序对内存的访问会有一定的差异，会造成相同代码运行出来的结果不一样，因此JMM屏蔽掉了这些差异，实现了java在不同的平台下都能达到一致的效果。</font></p><p>Java内存模型规定<strong>所有的变量都存储在主内存</strong>中，包括实例变量，静态变量，但是不包括局部变量和方法参数。每个线程都有自己的工作内存，<strong>线程的工作内存保存了该线程用到的变量和主内存的副本拷贝，线程对变量的操作都在工作内存中进行，然后刷回到主存。线程不能直接读写主内存中的变量</strong>。</p><p><img src="/images/JMM.png"></p><h3 id="2、八种内存交互操作"><a href="#2、八种内存交互操作" class="headerlink" title="2、八种内存交互操作"></a>2、八种内存交互操作</h3><p>JMM八种内存交互操作：</p><ul><li>lock(锁定)，作用于<strong>主内存</strong>中的变量，把变量标识为线程独占的状态。</li><li>read(读取)，作用于<strong>主内存</strong>的变量，把变量的值从主内存传输到线程的工作内存中，以便下一步的load操作使用。</li><li>load(加载)，作用于<strong>工作内存</strong>的变量，把read操作主存的变量放入到工作内存的变量副本中。</li><li>use(使用)，作用于<strong>工作内存</strong>的变量，把工作内存中的变量传输到执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。</li><li>assign(赋值)，作用于<strong>工作内存</strong>的变量，它把一个从执行引擎中接受到的值赋值给工作内存的变量副本中，每当虚拟机遇到一个给变量赋值的字节码指令时将会执行这个操作。</li><li>store(存储)，作用于<strong>工作内存</strong>的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用。</li><li>write(写入)：作用于<strong>主内存</strong>中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</li><li>unlock(解锁)：作用于<strong>主内存</strong>的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li></ul><p><img src="/images/JMM%E5%85%AB%E7%A7%8D%E5%86%85%E5%AD%98%E6%93%8D%E4%BD%9C.png"></p><p>8种内存交互操作制定的规则：</p><ul><li>不允许read、load、store、write操作之一单独出现，也就是read操作后必须load，store操作后必须write。</li><li>不允许线程丢弃他最近的assign操作，即工作内存中的变量数据改变了之后，必须告知主存。</li><li>不允许线程将没有assign的数据从工作内存同步到主内存。</li><li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是对变量实施use、store操作之前，必须经过load和assign操作。</li><li>一个变量同一时间只能有一个线程对其进行lock操作。多次lock之后，必须执行相同次数unlock才可以解锁。</li><li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值。在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值。</li><li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量。</li><li>一个线程对一个变量进行unlock操作之前，必须先把此变量同步回主内存。</li></ul><h3 id="3、三个特征：可见性、原子性、有序性"><a href="#3、三个特征：可见性、原子性、有序性" class="headerlink" title="3、三个特征：可见性、原子性、有序性"></a>3、三个特征：可见性、原子性、有序性</h3><h4 id="（1）volatile保证可见性"><a href="#（1）volatile保证可见性" class="headerlink" title="（1）volatile保证可见性"></a>（1）volatile保证可见性</h4><p>可见性，是指在有多个线程对内存中的同一个变量进行操作时，如果内存中的值被修改了，其他线程可以立即直到这个值被改掉了，并获取最新的值。</p><p>如下代码示例，这个程序永远不会结束。即这种情况下是没保证可见性的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test21Volatile</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (num == <span class="hljs-number">0</span>)&#123;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;线程2：&quot;</span> + num);<br>        &#125;);<br>        thread.start();<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        num = <span class="hljs-number">1</span>;<br>        System.out.println(<span class="hljs-string">&quot;主线程：&quot;</span> + num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在某些情况下，使用synchronized和lock是可以保证可见性的，但是上面例子不行。</p><p>上面这个例子只要在num的定义加上volatile关键字即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="（2）Atomic类保证原子性"><a href="#（2）Atomic类保证原子性" class="headerlink" title="（2）Atomic类保证原子性"></a>（2）Atomic类保证原子性</h4><p>原子性：不可分割性，在数据库的事务中，指的是一个事务的所有操作要么全部完成，要么全部不完成。而线程的原子性是指<font color="Red">一个线程在执行任务时，是不可分割，不可中断的，且不能被其他线程所干扰，这个线程中的所有操作要么全部成功，要么全部失败。</font></p><p>volatile是无法保证原子性的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test22Atomic</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        num++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000</span>; j++) &#123;<br>                    add();<br>                &#125;<br>            &#125;).start();<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>(Thread.activeCount() &gt; <span class="hljs-number">2</span>)&#123;<br>            Thread.yield();<br>        &#125;<br><br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>即多个线程同时操作同一个资源时，会出现资源错误。对于这种问题，常见的在add方法那里用synchronized和lock来解决。</p><p>然而还有一种办法就是使用Atomic类，使用<font color="Red">原子类的速度一般情况下比使用锁的效率高</font>。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test22Atomic</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> AtomicInteger num = <span class="hljs-keyword">new</span> AtomicInteger();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        num.getAndIncrement(); <span class="hljs-comment">// AtomicInteger类的+1方法，底层用的CAS</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000</span>; j++) &#123;<br>                    add();<br>                &#125;<br>            &#125;).start();<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>(Thread.activeCount() &gt; <span class="hljs-number">2</span>)&#123;<br>            Thread.yield();<br>        &#125;<br><br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体探究见CAS章节。</p><h4 id="（3）volatile保证有序性（禁止指令重排）"><a href="#（3）volatile保证有序性（禁止指令重排）" class="headerlink" title="（3）volatile保证有序性（禁止指令重排）"></a>（3）volatile保证有序性（禁止指令重排）</h4><p>什么是有序性，即你编写的每一行源代码被计算机CPU拿去执行的顺序是和源代码顺序一致的。</p><p>指令重排是指<strong>你写的程序，计算机并不是按照你写的那样去执行的，即计算机会对你的代码重新架构再执行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">源代码 —&gt; 编译器的优化重排 —&gt; 指令并行也可能会重排 —&gt; 内存系统也可能会重排 —&gt; 执行<br></code></pre></td></tr></table></figure><p>计算机对我们的代码做指令重排就没办法保证有序性，指令重排可能会产生一些不可预知的问题。</p><p>在Java中，可以使用synchronized或者volatile保证多线程之间操作的有序性，即禁止计算机对某些代码做指令重排。</p><h2 id="十五、深究单例模式"><a href="#十五、深究单例模式" class="headerlink" title="十五、深究单例模式"></a>十五、深究单例模式</h2><h3 id="1、饿汉式单例模式"><a href="#1、饿汉式单例模式" class="headerlink" title="1、饿汉式单例模式"></a>1、饿汉式单例模式</h3><p>这种模式很少出现线程安全问题，缺点是类一加载就会初始化一个对象，有时候每用到这个对象时，也会一直存在，浪费空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 饿汉式单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test23Hungry</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Test23Hungry</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Test23Hungry hungry = <span class="hljs-keyword">new</span> Test23Hungry();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Test23Hungry <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> hungry;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、懒汉式单例模式"><a href="#2、懒汉式单例模式" class="headerlink" title="2、懒汉式单例模式"></a>2、懒汉式单例模式</h3><p>懒汉式单例模式是指要用到这个实例时再初始化。如果私有构造方法没有synchronized时，多个线程同时getInstance时会有线程安全问题。</p><p>同时加上volatile防止指令重排导致的线程安全问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉式单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test24Lazy</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Test24Lazy</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; - OK&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 加volatile禁止指令重排导致的线程安全问题</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Test25DCLLazy lazy = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">// 线程不安全</span><br><span class="hljs-comment">//    public static Test24Lazy getInstance()&#123;</span><br><span class="hljs-comment">//        if (lazy == null)&#123;</span><br><span class="hljs-comment">//            lazy = new Test24Lazy();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        return lazy;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">// 线程安全</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Test24Lazy <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 双重检测</span><br>        <span class="hljs-keyword">if</span> (lazy == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 静态方法，因此要锁住class</span><br>            <span class="hljs-keyword">synchronized</span> (Test24Lazy.class)&#123;<br>                <span class="hljs-keyword">if</span> (lazy == <span class="hljs-keyword">null</span>)&#123;<br>                    lazy = <span class="hljs-keyword">new</span> Test24Lazy();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lazy;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                <span class="hljs-comment">// 多线程会有问题，可能多次初始化这个类，需要对getInstance方法加锁</span><br>                Test24Lazy lazy = Test24Lazy.getInstance();<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、反射对单例模式的影响"><a href="#3、反射对单例模式的影响" class="headerlink" title="3、反射对单例模式的影响"></a>3、反射对单例模式的影响</h3><p>对于例模式，正常情况下是安全的，但是如果通过反射来创建实例，即打破了单例模式。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test25ReflectionHungry</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Test25ReflectionHungry</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; - OK&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Test25ReflectionHungry hungry = <span class="hljs-keyword">new</span> Test25ReflectionHungry();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Test25ReflectionHungry <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> hungry;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;<br>        Test25ReflectionHungry single = Test25ReflectionHungry.getInstance();<br>        Constructor&lt;Test25ReflectionHungry&gt; constructor = Test25ReflectionHungry.class.getDeclaredConstructor(<span class="hljs-keyword">null</span>);<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Test25ReflectionHungry single2 = constructor.newInstance();<br>        System.out.println(single);<br>        System.out.println(single2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于饿汉式单例模式，直接把构造函数改成如下即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Test25ReflectionHungry</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (Test25ReflectionHungry.class)&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; - OK&quot;</span>);<br>        <span class="hljs-keyword">if</span> (hungry != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;不要尝试使用反射创建对象!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是对于懒汉式单例模式，改成上面这种，有一个问题就是如果一开始就使用反射来创建对象的话依旧没办法阻止。</p><p>因此对于懒汉式单例模式可以尝试通过使用使用如下修改：</p><p>但是依旧可以通过反射修改flag的值来破坏单例模式，即使通过对flag的值进行加密等其他操作，通过反射几乎总是可以破坏这种单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test26ReflectionLazy</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Test26ReflectionLazy</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (Test25ReflectionHungry.class)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; - OK&quot;</span>);<br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-keyword">false</span>)&#123;<br>                flag = <span class="hljs-keyword">true</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;不要尝试使用反射创建对象!&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Test26ReflectionLazy lazy = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Test26ReflectionLazy <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 双重检测</span><br>        <span class="hljs-keyword">if</span> (lazy == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 静态方法，因此要锁住class</span><br>            <span class="hljs-keyword">synchronized</span> (Test24Lazy.class)&#123;<br>                <span class="hljs-keyword">if</span> (lazy == <span class="hljs-keyword">null</span>)&#123;<br>                    lazy = <span class="hljs-keyword">new</span> Test26ReflectionLazy();<br>                    flag = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lazy;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;<br>        Constructor&lt;Test26ReflectionLazy&gt; constructor = Test26ReflectionLazy.class.getDeclaredConstructor(<span class="hljs-keyword">null</span>);<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Test26ReflectionLazy single = constructor.newInstance();<br>        Test26ReflectionLazy single2 = constructor.newInstance();<br>        System.out.println(single);<br>        System.out.println(single2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、通过enum来实现安全的单例模式"><a href="#4、通过enum来实现安全的单例模式" class="headerlink" title="4、通过enum来实现安全的单例模式"></a>4、通过enum来实现安全的单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Test27EnumSingle</span> </span>&#123;<br>    INSTANCE;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Test27ReflectionLazy lazy = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Test27ReflectionLazy <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> lazy;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Test27EnumSingle</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (lazy == <span class="hljs-keyword">null</span>) &#123;<br>            lazy = <span class="hljs-keyword">new</span> Test27ReflectionLazy();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;<br>        System.out.println(Test27EnumSingle.INSTANCE.getInstance());<br>        <span class="hljs-comment">// 通过反射内部类无法获取对象</span><br>        Constructor&lt;Test27ReflectionLazy&gt; constructor = Test27ReflectionLazy.class.getDeclaredConstructor(<span class="hljs-keyword">null</span>);<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object single = constructor.newInstance();<br>        Object single2 = constructor.newInstance();<br>        System.out.println(single);<br>        System.out.println(single2);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test27ReflectionLazy</span> </span>&#123;<br>    Test27ReflectionLazy()&#123;<br>        <span class="hljs-keyword">synchronized</span> (Test27ReflectionLazy.class)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; - OK&quot;</span>);<br>            <span class="hljs-keyword">if</span> (Test27EnumSingle.INSTANCE != <span class="hljs-keyword">null</span> &amp;&amp; Test27EnumSingle.INSTANCE.getInstance() != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;不要尝试使用反射创建对象!&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十六、CAS"><a href="#十六、CAS" class="headerlink" title="十六、CAS"></a>十六、CAS</h2><h3 id="1、乐观锁和悲观锁"><a href="#1、乐观锁和悲观锁" class="headerlink" title="1、乐观锁和悲观锁"></a>1、乐观锁和悲观锁</h3><p>悲观锁：线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。synchronized和实现了Lock接口的各种锁都是悲观锁。</p><p>乐观锁：线程执行的时候不会加锁，假设没有冲突去完成某项操作，如果因为冲突失败了就重试，最后直到成功为止。如自旋锁。</p><h3 id="2、什么是CAS"><a href="#2、什么是CAS" class="headerlink" title="2、什么是CAS"></a>2、什么是CAS</h3><p>CAS（Compare-And-Swap）是比较并交换的意思，它是一条 CPU 并发原语（Unsafe类中的三个方法如下），用于判断内存中某个值是否为预期值，如果是则更改为新的值，这个过程是原子的。</p><p>CAS机制当中使用了3个基本操作数：内存地址V（由一个Object和一个long型的offset决定），旧的预期值A，计算后要修改后的新值B。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// var1和var2找到对应的内存地址</span><br><span class="hljs-comment">// var4为预期值</span><br><span class="hljs-comment">// var5为新值</span><br><span class="hljs-comment">// 如果内存中的值和预期值相同，则把内存中的值修改为var5</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSwapObject</span><span class="hljs-params">(Object var1, <span class="hljs-keyword">long</span> var2, Object var4, Object var5)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSwapInt</span><span class="hljs-params">(Object var1, <span class="hljs-keyword">long</span> var2, <span class="hljs-keyword">int</span> var4, <span class="hljs-keyword">int</span> var5)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSwapLong</span><span class="hljs-params">(Object var1, <span class="hljs-keyword">long</span> var2, <span class="hljs-keyword">long</span> var4, <span class="hljs-keyword">long</span> var6)</span></span>;<br></code></pre></td></tr></table></figure><p>比如我们在探究Atomic保证原子性时发现，使用int型的num++并不是原子操作，可能产生线程安全问题，而num.getAndIncrement()方法则是原子操作，其底层通过自旋锁+CAS来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAndIncrement</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> unsafe.getAndAddInt(<span class="hljs-keyword">this</span>, valueOffset, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 自旋锁 + CAS</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAndAddInt</span><span class="hljs-params">(Object var1, <span class="hljs-keyword">long</span> var2, <span class="hljs-keyword">int</span> var4)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> var5;<br>    <span class="hljs-keyword">do</span> &#123;<br>        var5 = <span class="hljs-keyword">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class="hljs-keyword">while</span>(!<span class="hljs-keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class="hljs-keyword">return</span> var5;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSwapInt</span><span class="hljs-params">(Object var1, <span class="hljs-keyword">long</span> var2, <span class="hljs-keyword">int</span> var4, <span class="hljs-keyword">int</span> var5)</span></span>;<br></code></pre></td></tr></table></figure><p>解释如下：</p><p>先把内存中的这个对象的值取出来，然后把这个值和内存中的值比较，如果相同，则设置为新的值并退出循环，如果不同则继续循环（自旋锁，会一直尝试比较并修改，直到成功为止）。<font color="Red">有人会觉得这不明显相同吗，其实并不是。在高并发的情况下，线程1把这个值取出来了，比如是100，下一时刻线程2可能已经把这个值更新掉了，比如是200，如果线程1仍然更新为101的话就错了，应该在线程2的操作的基础上再+1，即201。因此必须把取出来的值和内存上的值再比较一遍再更新，而这个比较再更新的操作则是一个cpu的原子操作，即在cpu内部是一个不可分割的操作，如果比较发现不同，说明别人把这个东西改过了，因此必须重来。</font></p><h3 id="3、ABA问题"><a href="#3、ABA问题" class="headerlink" title="3、ABA问题"></a>3、ABA问题</h3><p>ABA问题是指，上面说的线程2把内存中的值改成了200，但是如果中间还有一个线程3又把值从200改回到了100，<font color="Red">即线程1执行过程中，内存中的值修改过两次，从100到200，又从200回到100。</font>线程1再执行比较时发现值和预期相同，于是就更新到101。</p><p><font color="Red">但是这个100已经不是原来的100了。</font>这就是ABA问题。</p><p>ABA问题在大多数情况下不会对程序产生太大的影响，通过带时间戳的原子类可以解决ABA问题，其内部维护了一个int型的时间戳，CAS操作需要再对比时间戳，因此可以通过时间戳来判断内存中的值是否被改动过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomicStampedReference</span>&lt;<span class="hljs-title">V</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pair</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>        <span class="hljs-keyword">final</span> T reference;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> stamp;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Pair</span><span class="hljs-params">(T reference, <span class="hljs-keyword">int</span> stamp)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.reference = reference;<br>            <span class="hljs-keyword">this</span>.stamp = stamp;<br>        &#125;<br>        <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Pair&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(T reference, <span class="hljs-keyword">int</span> stamp)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Pair&lt;T&gt;(reference, stamp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Pair&lt;V&gt; pair;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十七、自旋锁"><a href="#十七、自旋锁" class="headerlink" title="十七、自旋锁"></a>十七、自旋锁</h2><p>自旋锁（spinlock）：是指当一个线程在获取锁的时候，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。<font color="Red">被“阻塞”的线程并不是真正停了，而是一直在做循环判断的“等待”（busy waiting），直到其他线程解锁。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury757;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicReference;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test29SpinLockDemo</span> </span>&#123;<br>    AtomicReference&lt;Thread&gt; reference = <span class="hljs-keyword">new</span> AtomicReference&lt;&gt;();<br><br>    <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span></span>&#123;<br>        Thread thread = Thread.currentThread();<br>        System.out.println(thread.getName() + <span class="hljs-string">&quot; =&gt; 尝试获取锁&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!reference.compareAndSet(<span class="hljs-keyword">null</span>, thread))&#123;&#125;<br>        System.out.println(thread.getName() + <span class="hljs-string">&quot; =&gt; 获取锁成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 解锁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span></span>&#123;<br>        Thread thread = Thread.currentThread();<br>        System.out.println(thread.getName() + <span class="hljs-string">&quot; =&gt; 尝试解锁&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> b = reference.compareAndSet(thread, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">if</span> (b)&#123;<br>            System.out.println(thread.getName() + <span class="hljs-string">&quot; =&gt; 解锁成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(thread.getName() + <span class="hljs-string">&quot; =&gt; 解锁失败，当前线程没有被加锁&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解释：</p><p>当第一个线程获取到锁时，reference为空，因此lock方法中reference.compareAndSet(null, thread)返回true，则while循环失败退出。</p><p>当第二线程尝试获取锁时，reference不为空，则reference.compareAndSet(null, thread)返回false，while则会一直循环。</p><p>当第一个线程解锁时，会判断reference中的线程引用是否是当前线程，然后将reference置为null。此时下一刻第二个线程的循环就判断成功了，则成功获取到了锁。</p><p>当有多个线程尝试竞争锁时，由于reference.compareAndSet(null, thread)是原子操作，因此只可能有一个线程成功获取锁。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hadoop-study</title>
    <link href="/bigdata/hadoop/hadoop-study/"/>
    <url>/bigdata/hadoop/hadoop-study/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/">Index of /apache/hadoop/common (tsinghua.edu.cn)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/yury<br><span class="hljs-meta">#</span><span class="bash"> 下载</span><br>wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/stable/hadoop-3.3.0.tar.gz<br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar xzvf hadoop-3.3.0.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以这个目录为工作目录</span><br>cd hadoop-3.3.0/<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 编辑以下文件</span><br>vi ./etc/hadoop/hadoop-env.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将以下环境变量加入文件</span><br>export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 配置环境变量</span><br>sudo vi /etc/profile<br>export HADOOP_HOME=/home/yury/hadoop-3.3.0/<br>export PATH=$&#123;PATH&#125;:$&#123;HADOOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="1、单机模式"><a href="#1、单机模式" class="headerlink" title="1、单机模式"></a>1、单机模式</h3><p>hadoop默认情况下是配置成一个单独的java进程的单机模式。以下示例为mapreduce的一个例子，复制解压缩的conf目录以用作输入，然后查找并显示给定正则表达式的每个匹配项。输出被写入给定的输出目录。</p><p>hadoop本质就是一个文件系统（hdfs）以及在这个文件系统上的计算（MapReduce），只不过这个文件系统的特殊和优势之处在于适用于<strong>分布式和大数据</strong>，因此下面这个mapreduce的例子就是对文件处理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir input<br>cp etc/hadoop/*.xml input<br>bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar grep input output &#x27;dfs[a-z.]+&#x27;<br>cat output/*<br></code></pre></td></tr></table></figure><h3 id="2、伪分布式"><a href="#2、伪分布式" class="headerlink" title="2、伪分布式"></a>2、伪分布式</h3><p>伪分布式是指，整体还是在一个服务器中，但是namenode、datanode等服务分别运行在不同的JVM进程中。</p><p>修改etc/hadoop/core-site.xml：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ./etc/hadoop/core-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://localhost:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改etc/hadoop/hdfs-site.xml：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ./etc/hadoop/hdfs-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置ssh无密码登录各个服务器，不然后面会提示没有权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 如果是首次使用该命令，需要输入回复yes</span><br>ssh localhost<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以上命令如果需要密码，则配置以下命令</span><br>ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa<br>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br>chmod 0600 ~/.ssh/authorized_keys<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 如果是完全分布式，则需将本服务器的公钥复制到其他服务器</span><br>ssh-copy-id 192.168.0.202<br>ssh-copy-id 192.168.0.203<br></code></pre></td></tr></table></figure><p>运行一个测试</p><p><font color="Red">每次修改了core-site.xml都要格式化namenode。</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 格式化hdfs文件系统</span><br>bin/hdfs namenode -format<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改一个配置</span><br>export HDFS_NAMENODE_USER=&quot;root&quot;<br>export HDFS_DATANODE_USER=&quot;root&quot;<br>export HDFS_SECONDARYNAMENODE_USER=&quot;root&quot;<br>export YARN_RESOURCEMANAGER_USER=&quot;root&quot;<br>export YARN_NODEMANAGER_USER=&quot;root&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动一个名称节点和数据节点</span><br>sbin/start-dfs.sh<br><span class="hljs-meta">#</span><span class="bash"> 成功启动后可以在下面这个url来查看web管理界面</span><br><span class="hljs-meta">#</span><span class="bash"> http://192.168.141.141:9870/</span><br><span class="hljs-meta">#</span><span class="bash"> yarn的web管理页面</span><br><span class="hljs-meta">#</span><span class="bash"> http://192.168.141.141:8088/</span><br><br>jps<br><span class="hljs-meta">#</span><span class="bash"> jps命令结果如下</span><br><span class="hljs-meta">#</span><span class="bash"> 7969 Jps</span><br><span class="hljs-meta">#</span><span class="bash"> 7589 DataNode</span><br><span class="hljs-meta">#</span><span class="bash"> 7848 SecondaryNameNode</span><br><span class="hljs-meta">#</span><span class="bash"> 7369 NameNode</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建HDFS文件系统的文件夹</span><br>bin/hdfs dfs -mkdir /user<br>bin/hdfs dfs -mkdir /user/yury<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 复制所有xml文件到分布式文件系统的input文件夹中</span><br>bin/hdfs dfs -mkdir /input<br>bin/hdfs dfs -put etc/hadoop/*.xml /input<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 运行mapreduce例子</span><br>bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar grep input output &#x27;dfs[a-z.]+&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 测试输出文件（把分布式系统中的文件拷贝到本地文件系统并查看内容）</span><br>bin/hdfs dfs -get output output<br>cat output/*<br><span class="hljs-meta">#</span><span class="bash"> 或者直接在分布式文件系统上查看输出文件</span><br>bin/hdfs dfs -cat output/*<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 停止进程</span><br>sbin/stop-dfs.sh<br></code></pre></td></tr></table></figure><p>配置yarn</p><p>修改etc/hadoop/mapred-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi etc/hadoop/mapred-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;property&gt;<br>  &lt;name&gt;mapreduce.framework.name&lt;/name&gt;<br>  &lt;value&gt;yarn&lt;/value&gt;<br>&lt;/property&gt;<br>&lt;property&gt;<br>    &lt;name&gt;mapreduce.application.classpath&lt;/name&gt;<br>    &lt;value&gt;$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure><p>修改etc/hadoop/yarn-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi etc/hadoop/yarn-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;property&gt;<br>  &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;<br>  &lt;value&gt;mapreduce_shuffle&lt;/value&gt;<br>&lt;/property&gt;<br>&lt;property&gt;<br>  &lt;name&gt;yarn.nodemanager.env-whitelist&lt;/name&gt;<br>  &lt;value&gt;JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure><p>启动yarn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动</span><br>sbin/start-yarn.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭</span><br>sbin/stop-yarn.sh<br></code></pre></td></tr></table></figure><h3 id="3、完全分布式"><a href="#3、完全分布式" class="headerlink" title="3、完全分布式"></a>3、完全分布式</h3><p>配置wokers（3.2.1之前的版本是slaves）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/hadoop/workers<br><span class="hljs-meta">#</span><span class="bash"> 将工作结点的ip或者ip别名放入workers文件即可</span><br>192.168.0.202<br>192.168.0.203<br></code></pre></td></tr></table></figure><p>同步配置的其他服务器命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp etc/hadoop/* yury@192.168.0.202:/home/yury/hadoop-3.3.0/etc/hadoop/<br>scp etc/hadoop/* yury@192.168.0.203:/home/yury/hadoop-3.3.0/etc/hadoop/<br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>datanode没有显示在web界面中</p>]]></content>
    
    
    <categories>
      
      <category>bigdata</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一章-MySQL架构与历史</title>
    <link href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/"/>
    <url>/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-MySQL逻辑架构"><a href="#1-1-MySQL逻辑架构" class="headerlink" title="1.1 MySQL逻辑架构"></a>1.1 MySQL逻辑架构</h2><ul><li><p>第一层：连接、线程处理、授权认证、安全等</p></li><li><p>第二层：缓存、解析器、优化器等。<strong>第一层 + 第二层 = 服务器层？？？</strong></p></li><li><p>第三层：存储引擎，负责MySQL数据的存储和提取。</p></li></ul><p><img src="https://img2020.cnblogs.com/blog/2145586/202011/2145586-20201106210532402-1730406593.png"></p><h3 id="1-1-1-连接管理与安全性"><a href="#1-1-1-连接管理与安全性" class="headerlink" title="1.1.1 连接管理与安全性"></a>1.1.1 连接管理与安全性</h3><p><strong>每个客户端连接都会在服务器中有一个线程，这个连接的查询只会在这个单独的线程中进行。</strong>如：</p><ul><li><p>使用命令行登录MySQL服务器后，show processlist就会新增一个线程；</p></li><li><p>使用workbench打开一个连接后会新增两个线程（不知道为何有两个线程？），workbench的SQL tab和线程无关，开十个SQL tab还是两个线程；</p></li><li><p>使用datagrip每打开一个query console并查询数据后就会开启一个线程。</p></li></ul><h3 id="1-1-2-优化与执行"><a href="#1-1-2-优化与执行" class="headerlink" title="1.1.2 优化与执行"></a>1.1.2 优化与执行</h3><p>特殊关键字提示优化器：hint</p><p>请求优化器解释优化过程：explain</p><h2 id="1-2-并发控制"><a href="#1-2-并发控制" class="headerlink" title="1.2 并发控制"></a>1.2 并发控制</h2><p>并发控制的问题：多个查询在同一时刻修改数据时产生的问题。</p><p>并发控制的两个层面：服务器层、存储引擎层。</p><h3 id="1-2-1-读写锁"><a href="#1-2-1-读写锁" class="headerlink" title="1.2.1 读写锁"></a>1.2.1 读写锁</h3><p>在处理并发的读或写时，可以通过实现一个由两种类型的锁组成的锁系统来解决问题。这两种类型的锁通常被称为<strong>共享锁（shared lock）和排他锁（exclusive lock），也叫读锁（read lock）和写锁（write lock）</strong>。</p><ul><li><p>读锁：读锁之间是共享的，即读锁之间互不阻塞；</p></li><li><p>写锁：写锁之间是排他的，即一个写锁会阻塞其他写锁和读锁，<font color="Blue">注意不仅仅是写锁会被阻塞，读锁也会被阻塞！</font></p></li></ul><p><font color="Red">写锁比读锁的优先级高，即在一个锁队列中，一个写锁可能会插队到读锁前面，而读锁不能被插入到写锁前面，想想之前数据结构中学的优先队列。</font></p><h3 id="1-2-2-锁粒度"><a href="#1-2-2-锁粒度" class="headerlink" title="1.2.2 锁粒度"></a>1.2.2 锁粒度</h3><p><strong>锁粒度：</strong>对正在修改的数据片进行锁定的精度，即对一条数据进行修改时，是做到仅锁住这条数据，还是锁住整个表。</p><p><strong>锁策略：</strong>在锁的开销和数据的安全性之间寻求平衡。一般商业数据库是在表上加行级锁。</p><p>表锁：锁定整张表。开销最小，</p><p>行级锁：锁定独写的某一条数据。开销最大。</p><h2 id="1-3-事务"><a href="#1-3-事务" class="headerlink" title="1.3 事务"></a>1.3 事务</h2><p><font color="Red">事务（Transaction）：</font>是一组原子性的SQL查询，或者说一个独立的工作单元。</p><p>ACID：</p><ol><li><strong>原子性（atomicity）</strong></li></ol><p>一个事务必须被视为一个不可分割的最小单元，整个事务的操作要么全部提交成功，要么全部失败回滚，不能只执行其中的一部分操作，这就是事务的原子性。</p><ol start="2"><li><strong>一致性（consistency）</strong></li></ol><p>数据库总是从一个一致状态转换到另外一个一致状态。</p><p><a href="https://www.jdon.com/concurrent/acid-database.html">有一个博客</a>对一致性的解释比较容易理解：</p><p>一致性有下面特点：</p><ul><li><p>如果一个操作触发辅助操作（级联，触发器），这些也必须成功，否则交易失败。</p></li><li><p>如果系统是由多个节点组成，一致性规定所有的变化必须传播到所有节点（多主复制）。如果从站节点是异步更新，那么我们打破一致性规则，系统成为“最终一致性”。</p></li><li><p>一个事务是数据状态的切换，因此，<strong>如果事务是并发多个，系统也必须如同串行事务一样操作</strong>。</p></li></ul><p>在现实中，事务系统遭遇并发请求时，这种串行化是有成本的， Amdahl法则描述如下：它是描述序列串行执行和并发之间的关系。一个程序在并行计算情况下使用多个处理器所能提升的速度是由这个程序中串行执行部分的时间决定的。</p><p>大多数数据库管理系统选择（默认情况下）是放宽一致性，以达到更好的并发性。</p><p>事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。</p><ol start="3"><li><strong>隔离性（isolation）</strong></li></ol><p>隔离性是指，一个事务所做的修改在最终提交之前，对其他事务是不可见的（并不是完全不可见，有不同的隔离级别）。</p><ol start="4"><li><strong>持久性（durability）</strong></li></ol><p>事务一旦提交，其所作的修改就会永久保存到数据库中，此时即使系统奔溃，修改的数据也不会丢失。<font color="Red">不可能有能做到100%持久性保证的策略。</font></p><h3 id="1-3-1-隔离级别"><a href="#1-3-1-隔离级别" class="headerlink" title="1.3.1 隔离级别"></a>1.3.1 隔离级别</h3><p>READ UNCOMMITTED（未提交读）、READ COMMITTED（提交读，也是不可重复读）、REPEATABLE READ（可重复读，<strong>是MySQL的默认事务隔离级别</strong>）、SERIALIZABLE（可串行化）。</p><p><a href="https://developer.aliyun.com/article/743691">这篇博文</a>对隔离级别的讲解很到位（若原文链接失效，可参考我自己的<a href="https://www.cnblogs.com/yuyr757/articles/13939593.html">复制内容</a>），可以参考。书中都是文字性的讲解，不太好理解。<strong>额外要注意的一点就是SERIALIZABLE会在读的每一行上加锁。</strong></p><p><img src="https://img2020.cnblogs.com/blog/2145586/202011/2145586-20201107004053104-1267357727.png"></p><h3 id="1-3-2-死锁"><a href="#1-3-2-死锁" class="headerlink" title="1.3.2 死锁"></a>1.3.2 死锁</h3><p><strong>死锁：是指当两个或多个事务在同一资源上相互占用，请求锁定对方占用的资源，每个事务都在等待对方释放锁，从而等待状态永远不会结束形成恶性循环的现象。</strong></p><p><img src="https://img2020.cnblogs.com/blog/2145586/202011/2145586-20201107005100110-223892046.png"></p><p>书中这个例子很容易理解，如果凑巧两个事务的第一条SQL同时执行，则事务1锁定了stock_id=4的数据（假设叫做第1条数据），事务2锁定了stock_id=3的数据（假设叫做第2条数据），然后事务1等待事务2释放第2条数据的锁，而事务2要执行整个事务提交后才能释放数据2的锁，当时在执行第2条SQL时又要等事务1释放第1条数据的锁，这样就导致两个事务相互等待，且相互等待的状态永远不会结束，导致死锁。</p><p>数据库实现了各种死锁检测机制和死锁超时机制。<strong>当前InnoDB处理死锁的方法是，将持有最少行级排他锁的事务进行回滚。</strong>（书中原文）</p><p>死锁的产生有些还和存储引擎的实现方式有关。</p><h3 id="1-3-3-事务日志"><a href="#1-3-3-事务日志" class="headerlink" title="1.3.3 事务日志"></a>1.3.3 事务日志</h3><p>使用事务日志，存储引擎在修改表的数据时，只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘的事务日志中。可以理解为事务提交后并不会直接修改硬盘中的数据，而是先把事务日志写到硬盘的事务日志中，然后让数据在后台慢慢修改到硬盘中。通常称这种日志为<strong>预写式日志</strong>，修改数据要写入两次数据到硬盘中，第一次是日志，第二次才是数据根据日志进行修改。系统奔溃时，也可以通过硬盘中的事务日志进行数据恢复。</p><h3 id="1-3-4-MySQL中的事务"><a href="#1-3-4-MySQL中的事务" class="headerlink" title="1.3.4 MySQL中的事务"></a>1.3.4 MySQL中的事务</h3><p>如果不是显示地使用start transaction，则默认为每一个SQL语句都是一个事务。MySQL默认采用自动提交事务（autocommit）的方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW VARIABLES LIKE &#x27;AUTOCOMMIT&#x27;;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| autocommit    | ON    |<br>+---------------+-------+<br>1 row in set, 1 warning (0.01 sec)<br><br>mysql&gt; SET AUTOCOMMIT = 0; -- 显示的将该线程下的提交方式修改为手动提交，即要手动使用COMMIT或ROLLBACK<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p>注意！某些命令在执行前会强制执行COMMIT提交掉当前事务的修改，如ALTER TABLE、LOCK TABLES等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SET TRANSACTION ISOLATION LEVEL READ COMMITTED; -- 设置下一个事务的隔离级别，可以用在存储过程的start transaction之前。<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED; -- 设置当前会话事务的隔离级别<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p>虽然InnoDB会根据事务隔离级别自动锁定修改，但MySQL也支持显式锁定表：LOCK TABLES。但<strong>本书建议，只有在使用set transaction = 0的事务中可以使用LOCK TABLES，其他情况应该避免使用使用LOCK TABLES。</strong></p><h2 id="1-4-多版本并发控制（MVCC）"><a href="#1-4-多版本并发控制（MVCC）" class="headerlink" title="1.4 多版本并发控制（MVCC）"></a>1.4 多版本并发控制（MVCC）</h2><p>可以认为MVCC是行级锁的一个变种，但是它很多情况下避免了枷锁操作，虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p><p>下面是本书中通过InnoDB的简化版行为来说明MVCC是如何工作的。</p><p><img src="https://img2020.cnblogs.com/blog/2145586/202011/2145586-20201107014028395-1594607007.png"></p><h2 id="1-5-MySQL的存储引擎"><a href="#1-5-MySQL的存储引擎" class="headerlink" title="1.5 MySQL的存储引擎"></a>1.5 MySQL的存储引擎</h2><ul><li><p>InnoDB引擎：支持事务</p></li><li><p>MyISAM引擎：不支持事务和行级锁，但读取效率高</p></li><li><p>Archive：不支持引擎，支持行级锁，插入效率高</p></li><li><p>CSV引擎：用作数据交换很有用</p></li><li><p>Memory引擎：不支持行级锁，支持hash索引，查找效率特别高，比MyISAM效率还更高，数据保存在内存中的形式</p></li></ul><p><img src="https://img2020.cnblogs.com/blog/2145586/202011/2145586-20201107020519952-283921490.png"></p><p>中间省略大量内容…</p><p>如果需要对记录的日志做分析报表，则生成报表的SQL可能会导致日志插入效率下降，怎么办？一种办法是，利用MySQL内置的复制方案，复制一份到从库，然后在从库做查询操作，主库只用于高效的插入操作，因此从库的查询操作就不会影响到主库的插入性能。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
      <category>高性能MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二章-MySQL基准测试</title>
    <link href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC2%E7%AB%A0-MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
    <url>/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC2%E7%AB%A0-MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>基准测试：是针对系统设计的一种压力测试。</p><h2 id="2-1-为什么需要基准测试"><a href="#2-1-为什么需要基准测试" class="headerlink" title="2.1 为什么需要基准测试"></a>2.1 为什么需要基准测试</h2><p>基准测试可以观察系统中在不同压力下的行为。有很多用处的可测试点，详见书中。</p><h2 id="2-2-基准测试的策略"><a href="#2-2-基准测试的策略" class="headerlink" title="2.2 基准测试的策略"></a>2.2 基准测试的策略</h2><p>略</p><h3 id="2-2-1-测试何种指标"><a href="#2-2-1-测试何种指标" class="headerlink" title="2.2.1 测试何种指标"></a>2.2.1 测试何种指标</h3><ul><li><p><strong>吞吐量：</strong>是指单位时间内事务的处理数。</p></li><li><p><strong>响应时间或延迟：</strong>用于测试任务所需的整体时间。根据不同的时间单位可以计算所需的平均响应时间、最小响应时间、最大响应时间的所占百分比，或者将每次响应时间制作成频率分布图、折线图等图表进行分析。</p></li><li><p><strong>并发性：</strong>数据库的并发性和web服务器的并发性有些差异，web服务器的并发性指的是可以一段时间内同时处理多少web请求，而数据库的并发性测试，主要关注于，当并发事务增加时，需要测试的吞吐量是否下降，响应时间是否变长。</p></li><li><p><strong>可扩展性：</strong>指的是给系统增加一倍的工作，在理想情况下可以使吞吐量增加一倍；或者说给系统增加一倍的资源，就可以获得两倍的吞吐量。（这是最理想情况，现实中几乎达不到，即边际效益下降）</p></li></ul><p><strong>BENCHMARK(count, expr)函数</strong>：用于计算表达式expr共count次，可以用来计时MySQL处理表达式的速度。结果值为0，对于不适当的参数（例如NULL或负重复计数），则为NULL。因此SELECT的结果不重要，而是要看执行花费的时间。下面这个例子可以发现MD5算法比SHA1算法速度更快。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT BENCHMARK(1000000, MD5(&#x27;test&#x27;));<br>+---------------------------------+<br>| BENCHMARK(1000000, MD5(&#x27;test&#x27;)) |<br>+---------------------------------+<br>|                               0 |<br>+---------------------------------+<br>1 row in set (0.14 sec)<br><br>mysql&gt; SELECT BENCHMARK(1000000, SHA1(&#x27;test&#x27;));<br>+----------------------------------+<br>| BENCHMARK(1000000, SHA1(&#x27;test&#x27;)) |<br>+----------------------------------+<br>|                                0 |<br>+----------------------------------+<br>1 row in set (0.47 sec)<br></code></pre></td></tr></table></figure><p><strong>http_load</strong>：web服务器测试工具，略。</p><h2 id="2-5-基准测试案例"><a href="#2-5-基准测试案例" class="headerlink" title="2.5 基准测试案例"></a>2.5 基准测试案例</h2><p>略。有需要的可以参考书中的测试案例去做基准测试。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
      <category>高性能MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第三章-服务器性能剖析</title>
    <link href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC3%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/"/>
    <url>/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC3%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><strong>（1）性能剖析（profiling）：用于测试服务器的时间花费在哪里。</strong></p><p>本书对数据库性能的定义：是指完成某件任务所需要的时间度量，即响应时间，每个SQL语句的查询话费的时间。</p><p><strong>完成一项任务所需要的时间可以分成两部分：执行时间和等待时间（如IO等待）。</strong></p><p><strong>（2）性能剖析有两个步骤：</strong></p><ul><li><p>测量任务所花费的时间；</p></li><li><p>对结果进行统计分析，均值、方差、分布、计算特定的指标分析等。</p></li></ul><p><strong>（3）性能剖析本身会导致服务器变慢吗？</strong></p><p>当然会，因为要做额外的工作付出额外的开销。但是如果性能剖析可以帮助应用程序运行得更快，那么性能剖析就使值得的。</p><p><strong>（4）慢查询日志和通用日志</strong></p><p><font color="Red">慢查询日志是指捕获所有查询时间超过long_query_time的查询，将其SQL语句和消耗时间记录到日志中。可以设置long_query_time = 0来捕获所有SQL。慢查询日志是开销最低、精度最高的测量查询时间的工具。</font></p><p>通用日志是指查询请求到服务器时记录，不包含响应时间和执行计划等重要信息。</p><p>将慢查询日志生成剖析报告的工具：<font color="Red">pt-query-digest</font>（十年前给力，2020年需根据实际情况使用更好的工具）。</p><p><strong>（5）SHOW PROFILES</strong></p><p><font color="Red">SHOW PROFILES</font> 命令可以对每条SQL进行性能剖析，默认是禁用的，使用set profiling = 1打开对当前线程的SQL进行剖析。</p><p>SHOW PROFILE FOR QUERY N 命令可以展示记录的id为N的查询每个执行步骤的详细时间记录。</p><p>也可以查询每个查询的所有详细步骤信息：SELECT * FROM INFORMATION_SCHEMA.FROFILING;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; set profiling = 1;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br>mysql&gt; select 1;<br>+---+<br>| 1 |<br>+---+<br>| 1 |<br>+---+<br>1 row in set (0.00 sec)<br><br>mysql&gt; show profiles;<br>+----------+------------+----------+<br>| Query_ID | Duration   | Query    |<br>+----------+------------+----------+<br>|        1 | 0.00043725 | select 1 |<br>+----------+------------+----------+<br>1 row in set, 1 warning (0.00 sec)<br><br>mysql&gt; select 2;<br>+---+<br>| 2 |<br>+---+<br>| 2 |<br>+---+<br>1 row in set (0.00 sec)<br><br>mysql&gt; show profiles;<br>+----------+------------+----------+<br>| Query_ID | Duration   | Query    |<br>+----------+------------+----------+<br>|        1 | 0.00043725 | select 1 |<br>|        2 | 0.00042800 | select 2 |<br>+----------+------------+----------+<br>2 rows in set, 1 warning (0.00 sec)<br><br>mysql&gt; set profiling = 0;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br>mysql&gt; select 3;<br>+---+<br>| 3 |<br>+---+<br>| 3 |<br>+---+<br>1 row in set (0.00 sec)<br><br>mysql&gt; show profiles;<br>+----------+------------+----------+<br>| Query_ID | Duration   | Query    |<br>+----------+------------+----------+<br>|        1 | 0.00043725 | select 1 |<br>|        2 | 0.00042800 | select 2 |<br>+----------+------------+----------+<br>2 rows in set, 1 warning (0.00 sec)<br><br>mysql&gt; show profile for query 1;<br>+----------------------+----------+<br>| Status               | Duration |<br>+----------------------+----------+<br>| starting             | 0.000116 |<br>| checking permissions | 0.000007 |<br>| Opening tables       | 0.000013 |<br>| init                 | 0.000005 |<br>| optimizing           | 0.000008 |<br>| executing            | 0.000051 |<br>| end                  | 0.000004 |<br>| query end            | 0.000005 |<br>| closing tables       | 0.000002 |<br>| freeing items        | 0.000043 |<br>| cleaning up          | 0.000186 |<br>+----------------------+----------+<br>11 rows in set, 1 warning (0.00 sec)<br><br>mysql&gt; select * from information_schema.profiling;<br>+----------+-----+----------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-----------------------+----------------------+-------------+<br>| QUERY_ID | SEQ | STATE                | DURATION | CPU_USER | CPU_SYSTEM | CONTEXT_VOLUNTARY | CONTEXT_INVOLUNTARY | BLOCK_OPS_IN | BLOCK_OPS_OUT | MESSAGES_SENT | MESSAGES_RECEIVED | PAGE_FAULTS_MAJOR | PAGE_FAULTS_MINOR | SWAPS | SOURCE_FUNCTION       | SOURCE_FILE          | SOURCE_LINE |<br>+----------+-----+----------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-----------------------+----------------------+-------------+<br>|        1 |   2 | starting             | 0.000116 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | NULL                  | NULL                 |        NULL |<br>|        1 |   3 | checking permissions | 0.000007 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | check_access          | sql_authorization.cc |        2203 |<br>|        1 |   4 | Opening tables       | 0.000013 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | open_tables           | sql_base.cc          |        5590 |<br>|        1 |   5 | init                 | 0.000005 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | Sql_cmd_dml::execute  | sql_select.cc        |         662 |<br>|        1 |   6 | optimizing           | 0.000008 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | JOIN::optimize        | sql_optimizer.cc     |         217 |<br>|        1 |   7 | executing            | 0.000051 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | JOIN::exec            | sql_executor.cc      |         227 |<br>|        1 |   8 | end                  | 0.000004 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | Sql_cmd_dml::execute  | sql_select.cc        |         715 |<br>|        1 |   9 | query end            | 0.000005 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | mysql_execute_command | sql_parse.cc         |        4547 |<br>|        1 |  10 | closing tables       | 0.000002 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | mysql_execute_command | sql_parse.cc         |        4593 |<br>|        1 |  11 | freeing items        | 0.000043 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | mysql_parse           | sql_parse.cc         |        5264 |<br>|        1 |  12 | cleaning up          | 0.000186 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | dispatch_command      | sql_parse.cc         |        2159 |<br>|        2 |   2 | starting             | 0.000130 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | NULL                  | NULL                 |        NULL |<br>|        2 |   3 | checking permissions | 0.000011 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | check_access          | sql_authorization.cc |        2203 |<br>|        2 |   4 | Opening tables       | 0.000023 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | open_tables           | sql_base.cc          |        5590 |<br>|        2 |   5 | init                 | 0.000009 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | Sql_cmd_dml::execute  | sql_select.cc        |         662 |<br>|        2 |   6 | optimizing           | 0.000009 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | JOIN::optimize        | sql_optimizer.cc     |         217 |<br>|        2 |   7 | executing            | 0.000012 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | JOIN::exec            | sql_executor.cc      |         227 |<br>|        2 |   8 | end                  | 0.000004 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | Sql_cmd_dml::execute  | sql_select.cc        |         715 |<br>|        2 |   9 | query end            | 0.000006 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | mysql_execute_command | sql_parse.cc         |        4547 |<br>|        2 |  10 | closing tables       | 0.000094 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | mysql_execute_command | sql_parse.cc         |        4593 |<br>|        2 |  11 | freeing items        | 0.000112 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | mysql_parse           | sql_parse.cc         |        5264 |<br>|        2 |  12 | cleaning up          | 0.000019 | 0.000000 |   0.000000 |              NULL |                NULL |         NULL |          NULL |          NULL |              NULL |              NULL |              NULL |  NULL | dispatch_command      | sql_parse.cc         |        2159 |<br>+----------+-----+----------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-----------------------+----------------------+-------------+<br>22 rows in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p><font color="Red">（6）SHOW STATUS</font></p><p>SHOW STATUS 命令可以查看计数器统计到的值，如统计了查询的次数、使用某个索引的次数。虽然无法展示使用时间，但还是可以通过观察哪些操作执行的更频繁。最有用的计数器有：句柄计数器（handler counter）、临时文件和表计数器等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW STATUS WHERE VARIABLE_NAME LIKE &#x27;Handler%&#x27; OR VARIABLE_NAME LIKE &#x27;Created%&#x27;;<br>+----------------------------+-------+<br>| Variable_name              | Value |<br>+----------------------------+-------+<br>| Created_tmp_disk_tables    | 0     |<br>| Created_tmp_files          | 5     |<br>| Created_tmp_tables         | 3     |<br>| Handler_commit             | 3     |<br>| Handler_delete             | 0     |<br>| Handler_discover           | 0     |<br>| Handler_external_lock      | 90    |<br>| Handler_mrr_init           | 0     |<br>| Handler_prepare            | 0     |<br>| Handler_read_first         | 0     |<br>| Handler_read_key           | 3     |<br>| Handler_read_last          | 0     |<br>| Handler_read_next          | 0     |<br>| Handler_read_prev          | 0     |<br>| Handler_read_rnd           | 0     |<br>| Handler_read_rnd_next      | 58    |<br>| Handler_rollback           | 0     |<br>| Handler_savepoint          | 0     |<br>| Handler_savepoint_rollback | 0     |<br>| Handler_update             | 0     |<br>| Handler_write              | 55    |<br>+----------------------------+-------+<br>21 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><font color="Red">FLASH STATUS; – 该命令作用是重置计数器</font></p><p><font color="Red">通过重置计数器，并测试一条SQL，就可以获取这条SQL的执行时各个计数器的值。EXPLAIN 得到的是估计的结果，而通过 SHOW STATUS 统计计数器的值测量到的是实际发生的结果。</font></p><p><strong>（7）间歇性问题</strong></p><p>举例：一个SQL查询正常情况下很快，但是有几次不合理的特别慢，手工执行下也很快，EXPLAIN 和 SHOW STATUS 中都正确使用了索引，尝试修改WHERE 条件排除缓存命中的可能，也没有什么问题，这种情况下很难查出来是什么原因导致这几次SQL执行很慢，可能是正在备份，或某种类型的锁，或争用阻塞了SQL的进度等，这种问题就是<font color="Red">间歇性问题</font>。书中对间歇性问题的建议是不要花费太多时间去找出问题所在，更不能用试错的方式来解决问题，可以通过以下思路进行尝试：</p><ul><li><p>先确定到底是服务器问题还是单条SQL的问题</p><ul><li><p>使用SHOW GLOBAL STATUS</p></li><li><p>使用SHOW PROCESSLIST</p></li><li><p>使用慢查询日志</p></li></ul><p>  以上两个方法都是通过不停的捕获命令的输出，观察异常值等其他特征，来进行诊断。第三个方法是查看慢查询日志中吞吐量突然下降时间段<strong>结束后</strong>的那一部分日志，再具体分析哪个SQL导致缓慢。以上三个方法在书中都有具体例子，有需要可以自行看书。书中建议从第1、2两种方法开始查找问题，这两个方法开销最低。</p></li><li><p>有必要再捕获诊断数据</p><ul><li>触发器：根据实际情况设计触发指标和触发条件，使用合理工具（如pt-talk和pt-collect）收集数据给触发器去判断。</li></ul></li></ul><p><strong>（8）一个诊断案例</strong></p><p>略，有需要可以自行看书。</p><p><strong>（9）使用information_schema</strong></p><p>稍后整理一个information_schema库的专题讲解。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
      <category>高性能MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第四章-Schema与数据类型优化</title>
    <link href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC4%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/"/>
    <url>/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC4%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="4-1-选择优化的数据类型"><a href="#4-1-选择优化的数据类型" class="headerlink" title="4.1 选择优化的数据类型"></a>4.1 选择优化的数据类型</h2><p>1、应该尽量使用可以正确存储存储数据的最小数据类型。如能使用tinyint就不要使用int，能使用varchar(20)，就不要使用varchar(100)。</p><p>2、应该尽量使用尽可能简单的数据类型，如日期类型尽量使用date、time、datetime，而不是使用varchar存储日期数据，另外应该使用整形存储IP地址，而不是使用varchar。</p><p>3、应该尽量避免null，可以保证不出错的情况下尽量把列指定为not null。<font color="Blue">一方面在于在查询时，如果有null，则需要使用ifnull，而这样的话会使索引失效；</font>另一方面，可为null的列会占用更多的存储空间。</p><p>4、int(11)通常是没有意义的；decimal(m,n)中m是指整数部分和小数部分位数之和，n则仅仅指小数部分位数。</p><p>5、财务数据建议用decimal存储，可以对小数部分进行精确计算，而在数据量比较大时，可以考虑使用BIGINT代替decimal，并根据需要存储的小数位乘以相应的倍数就行，如需要保留到万分之一，可以将原始数据乘以一百万，再存到bigint里面，因为bigint相比decimal的好处在于计算更精确和计算效率高。<font color="Blue">（但是这种方式要注意使用该金额时可能会出现忘记除掉相应的倍数的情况，个人建议还是使用decimal，更安全）</font></p><p>6、varchar和char：</p><p><font color="Blue">（1）varchar和char类型消耗的存储空间的字节数由其字符集决定，如使用utf8mb4时，英文字母和数字占用1个字节，而大部分中文占用3个字节，少量特殊字符占用4个字节。使用char_length()和length()可以查看字符串长度和字符串所占用的字节长度。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select test1, length(test1), char_length(test1) from test_varchar1;<br>+--------+---------------+--------------------+<br>| test1  | length(test1) | char_length(test1) |<br>+--------+---------------+--------------------+<br>| abc    |             3 |                  3 |<br>| 123    |             3 |                  3 |<br>| 你好啊 |             9 |                  3 |<br>+--------+---------------+--------------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><font color="Blue">（2）varchar(n)是变长，char(n)是定长，即varchar消耗的存储空间是随字符串长度而改变的，char消耗的存储空间是既定的。此外varchar还会消耗1-2个字节存储字符串的长度，而char不会。因此对于存储定长数据，使用char更好，因此不需要额外存储一个字节来保存字符串长度，但在实际业务中这种需求较少，反倒使用enum的都比使用char的多。</font></p><p><font color="Blue">（3）char类型会删除末尾的空格再进行存储**<font color="Red">（危！）</font>**，而varchar不会删除末尾空格（实际上在MySQL4.1或更老的版本中varchar也会删末尾空格）。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select test2, test3, char_length(test2), char_length(test3), length(test2), length(test3), concat(&#x27;(&#x27;, test2, &#x27;)&#x27;), concat(&#x27;(&#x27;, test3, &#x27;)&#x27;) from test_varchar2; -- test2为varchar类型，而test3为char类型。<br>+--------+-------+--------------------+--------------------+---------------+---------------+-------------------------+-------------------------+<br>| test2  | test3 | char_length(test2) | char_length(test3) | length(test2) | length(test3) | concat(&#x27;(&#x27;, test2, &#x27;)&#x27;) | concat(&#x27;(&#x27;, test3, &#x27;)&#x27;) |<br>+--------+-------+--------------------+--------------------+---------------+---------------+-------------------------+-------------------------+<br>|   ab   |   ab  |                  6 |                  4 |             6 |             4 | (  ab  )                | (  ab)                  |<br>|   ab   |   ab  |                  6 |                  4 |             6 |             4 | (  ab  )                | (  ab)                  |<br>+--------+-------+--------------------+--------------------+---------------+---------------+-------------------------+-------------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><font color="Blue">（4）当使用严格的SQL模式时，insert的数据超过varchar和char的最大长度时，都会报错；当启动非严格的SQL模式时，他们则是将超过长度后面的字符删除存储，并予以警告，而不是报错。</font></p><p><font color="Blue">（5）最好的策略是根据业务需求选择最适合的类型，只分配真正需要的空间。</font></p><p>7、blob与text都是用于存储长度特别长（超过65535个字节）的数据类型，对他们的排序并不是对整个字符串进行排序，都是对其前max_sort_length个字节的字符进行排序，可以手动设置max_sort_length的值，或者使用order by sustring(column, length)。区别在于blob存储的是字符串的二进制，而text存储的是原始字符串。</p><p><font color="Red">8、enum类型会将“数字-字符串”映射关系的“查找表”存储于.frm文件中，而数据中只存储“数字”键，这种双重性容易导致混乱，特别是排序的时候，enum排序是使用内部存储的整数进行排序，而不是定义的字符串进行排序。除非使用FIELD()函数自定义排序顺序。列关联时的效率：enum关联enum &gt; varchar关联varchar &gt; enum和varchar互相关联</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create table `enum1`(column1 enum(&#x27;Y&#x27;, &#x27;M&#x27;, &#x27;N&#x27;));<br>Query OK, 0 rows affected (0.01 sec)<br>mysql&gt; insert into enum1 values(&#x27;Y&#x27;), (&#x27;Y&#x27;), (&#x27;N&#x27;), (&#x27;M&#x27;);<br>Query OK, 4 rows affected (0.00 sec)<br><br>mysql&gt; select column1 from enum1;<br>+---------+<br>| column1 |<br>+---------+<br>| Y       |<br>| Y       |<br>| N       |<br>| M       |<br>+---------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; select column1 + 1 from enum1;<br>+-------------+<br>| column1 + 1 |<br>+-------------+<br>|           2 |<br>|           2 |<br>|           4 |<br>|           3 |<br>+-------------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; select column1 from enum1 order by column1;<br>+---------+<br>| column1 |<br>+---------+<br>| Y       |<br>| Y       |<br>| M       |<br>| N       |<br>+---------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; select column1 from enum1 order by field(column1, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;Y&#x27;);<br>+---------+<br>| column1 |<br>+---------+<br>| M       |<br>| N       |<br>| Y       |<br>| Y       |<br>+---------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>9、datetime和timestamp</p><table><thead><tr><th>类型</th><th>占用字节数</th><th>支持的时间范围</th></tr></thead><tbody><tr><td>datetime</td><td>8</td><td>1000-01-01 00:00:00至9999-12-31 23:59:59</td></tr><tr><td>timestamp</td><td>4</td><td>1970-01-01 00:00:00至2038-01-19 23:59:59</td></tr></tbody></table><p><font color="Blue">10、标识列（即能唯一标识一条数据的字段）数据类型通常用unsigned int auto_increment或UUID()两种：当该标识列索引使用BTREE（innodb默认使用BTREE）时，使用unsigned int auto_increment更好（io速度更快、存储空间更小等），当标识列索引使用hash索引（innodb不显式支持hash索引，但当支持自适应hash索引，等后面讲）时，两者差不多。</font></p><p>11、最好避免使用BIT和SET类型。</p><h2 id="4-2-schema设计中的陷阱"><a href="#4-2-schema设计中的陷阱" class="headerlink" title="4.2 schema设计中的陷阱"></a>4.2 schema设计中的陷阱</h2><p>1、避免过多的列和过多的关联</p><p>2、避免NULL，或者使用其他值代替NULL</p><h2 id="4-3-范式和反范式"><a href="#4-3-范式和反范式" class="headerlink" title="4.3 范式和反范式"></a>4.3 范式和反范式</h2><p>设计方面的东西，详见原文或者参考其他博客，如<a href="https://www.cnblogs.com/ningskyer/articles/5632017.html">这里</a></p><h2 id="4-4-缓存表和汇总表"><a href="#4-4-缓存表和汇总表" class="headerlink" title="4.4 缓存表和汇总表"></a>4.4 缓存表和汇总表</h2><p><strong>缓存表：</strong>表示存储那些可以比较简单的从schema其他表获取（但每次获取速度都比较慢）数据的表（例如，逻辑上冗杂的数据）。</p><p><strong>汇总表：</strong>表示存储那些使用group by语句聚合的数据。</p><p><font color="Blue">使用缓存表的情况是，比如展示一个很详细的业务数据，要关联很多张表并进行相关运算，每次查询速度都比较慢，则可以将定期查询该SQL并放到一张缓存表中，等需要的时候直接取这张缓存表中的数据即可，然后定时维护这张缓存表以更新数据。这种情况数据虽然有延迟，但对于用户来说能很快的看到数据。</font></p><p><font color="Blue">使用汇总表的情况是，比如要看网站最近一个月每天的点击量，则要做group by操作，可以每天定时执行一个的SQL，将当天的点击量记录到这张汇总表中，等需要的时候直接where between就行，不用做group by。</font></p><p><strong>物化视图</strong>：预先计算并存储在磁盘上的表，并通过各种策略来<strong>自动</strong>更新该表（视图）。MySQL可以用第三方工具：Justin Swanhart的Flexviews。</p><p><font color="Red">计数器表</font>：再比如上面那个网站最近一个月每天的点击量的情况，可以通过定义一张下面所示的表，每次收到用户访问，就随机选一个槽进行更新（避免锁冲突）。再设置一个定时任务，每天将昨天的数据汇总到0号槽，并删除其他槽，这样就是一个统计每一天的访问量的计数器表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `daily_click` (<br>  `day` date NOT NULL,<br>  `slot` int unsigned NOT NULL,<br>  `cnt` int DEFAULT 0,<br>  PRIMARY KEY (`day`,`slot`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br><br>mysql&gt; insert into daily_click values(now(), round(rand(), 2) * 100, 1) on duplicate key update cnt = cnt + 1; -- 我这里执行了六次<br>Query OK, 1 row affected, 1 warning (0.00 sec)<br><br>mysql&gt; select * from daily_click;<br>+------------+------+------+<br>| day        | slot | cnt  |<br>+------------+------+------+<br>| 2020-11-22 |   22 |    1 |<br>| 2020-11-22 |   29 |    1 |<br>| 2020-11-22 |   48 |    1 |<br>| 2020-11-22 |   53 |    2 |<br>| 2020-11-22 |   95 |    1 |<br>+------------+------+------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt; update daily_click as c,<br>      (select day, sum(cnt) as cnt, min(slot) as slot from daily_click group by day) as x<br>      set c.cnt = if(c.slot = x.slot, x.cnt, 0),<br>      c.slot = if(c.slot = x.slot, 0, c.slot)<br>      where c.day = x.day and c.day = &#x27;2020-11-22&#x27;;<br>Query OK, 5 rows affected (0.00 sec)<br>Rows matched: 5  Changed: 5  Warnings: 0<br><br>mysql&gt; delete from daily_click where day = &#x27;2020-11-22&#x27; and slot &lt;&gt; 0;<br>Query OK, 4 rows affected (0.00 sec)<br><br>mysql&gt; select * from daily_click;<br>+------------+------+------+<br>| day        | slot | cnt  |<br>+------------+------+------+<br>| 2020-11-22 |    0 |    6 |<br>+------------+------+------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="4-5-加快ALTER-TABLE的速度"><a href="#4-5-加快ALTER-TABLE的速度" class="headerlink" title="4.5 加快ALTER TABLE的速度"></a>4.5 加快ALTER TABLE的速度</h2><p><font color="Blue">1、修改列的三种方式：</font></p><p><font color="Blue">（1）ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST | AFTER col_name]：这种方法是整列换成一个新列的定义，包括列名也可以修改，会引起表的重建，即删除旧列，构造新列；</font></p><p><font color="Blue">（2）ALTER TABLE tbl_name MODIFY [COLUMN] col_name column_definition [FIRST | AFTER col_name]：这种方法也是整列换成一个新列，但是不能修改表名，只能修改属性，也会引起表的重建；</font></p><p><font color="Blue">（3）ALTER TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT {literal | (expr)} | DROP DEFAULT}：这种方法局限性很高，只能修改列的默认值属性，这个语句会直接修改表的.frm文件，不涉及表数据，不会引起表的重建，因此速度很快。</font></p><p><font color="Blue">即如果是需要修改的东西实际存在于.frm文件中，都可以通过直接修改.frm文件来进行修改，而不用重建表。</font>注意：《高性能MySQL》这本书对用的MySQL版本是8.0以下的版本，MySQL8.0及以后没有.frm文件了，表结构和表数据都在整个.ibd文件的表空间中。以上三种修改，第三种也是最快的，但是只是底层原理上有了较大的变化，详见MySQL官方文档。</p><p>2、修改表结构的技巧：</p><p>（1）先在一台不提供服务的库上执行alter table操作，然后和提供服务的主库进行切换。<font color="Blue">过程（个人盲猜的）：停止从主备库同步，备用库执行alter table，重新同步主备库，待同步成功再切换主备库。问题：切换主备库会不会导致整个服务器停顿？</font></p><p>（2）影子拷贝。建一个新的空表，表结构为原表修改后的表结构，在新表中建三个INSERT UPDATE DELETE的触发器，将旧表数据拷贝到新表，最新数据会通过触发器更新过去，然后通过重命名表和删表的方式交换两张表。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
      <category>高性能MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第五章-创建高性能的索引</title>
    <link href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC5%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
    <url>/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC5%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h2 id="〇、索引的本质"><a href="#〇、索引的本质" class="headerlink" title="〇、索引的本质"></a>〇、索引的本质</h2><p>索引本质就是一个排好序的数据结构，实现这种快速排序、插入、查找等操作的数据结构有：平衡二叉树、红黑树、多路查找树（其中平衡的多路查找树就是B-Tree）等。</p><h2 id="一、索引的类型"><a href="#一、索引的类型" class="headerlink" title="一、索引的类型"></a>一、索引的类型</h2><h3 id="1、B-Tree索引"><a href="#1、B-Tree索引" class="headerlink" title="1、B-Tree索引"></a>1、B-Tree索引</h3><p>B-Tree，即平衡的多路查找树。具体解释参考其他文章。B-Tree适用于<strong>全键值、键值范围、键前缀查找</strong>。匹配原则如下（只列出了比较重要的）：</p><ul><li><p>匹配最左前缀：<font color="Blue">where条件中的字段会先匹配索引最左边的字段，如果匹配则适用该索引，并依次匹配后面的字段，直到无效为止，<strong>前面匹配到的字段依然适用索引</strong>；若一开始最左边的字段就不匹配，则不适用于该索引。</font></p></li><li><p>匹配列前缀：在满足最左前缀的前提下，可以匹配某一列的值的开头部分。如某一个索引字段为（A, B）两个字段，如以下where都是可以使用该索引的。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WHERE A = &#x27;a&#x27; AND B LIKE &#x27;b%&#x27;<br>WHERE A LIKE &#x27;a%&#x27; AND B = &#x27;b&#x27;<br>WHERE A LIKE &#x27;a%&#x27; AND B LIKE &#x27;b%&#x27;<br></code></pre></td></tr></table></figure><ul><li><p>匹配范围值：这里所说的范围查询包括between、in、&gt;、&lt;。</p></li><li><p>精确匹配前一列，并范围匹配后面的列。</p></li><li><p>只访问索引的查询，即<strong>索引覆盖</strong>。</p></li><li><p>order by也可以使用索引，且where字段可以和order by字段拼接来匹配索引。</p></li></ul><h3 id="2、hash索引"><a href="#2、hash索引" class="headerlink" title="2、hash索引"></a>2、hash索引</h3><p>在MySQL中，只有memory引擎显示支持hash索引。hash索引也是memory引擎的默认索引类型。hash索引有以下特征：</p><ul><li><p>对索引字段使用=，&lt;=&gt;，IN速度特别快，但不支持&gt;和&lt;。</p></li><li><p>无法使用hash索引来加快order by的速度，因为其不是按照哈希值顺序存储的。</p></li><li><p>无法使用like匹配前缀来加快查询速度。</p></li><li><p>hash索引只存储哈希值和行指针，不存储字段值。</p></li><li><p>当出现hash冲突时，必须遍历冲突值来获取匹配结果。</p></li></ul><h4 id="自适应哈希索引"><a href="#自适应哈希索引" class="headerlink" title="自适应哈希索引"></a>自适应哈希索引</h4><p>InnoDB引擎有一个特殊的功能叫做“自适应哈希索引（adaptive hash index)”。当InnoDB注意到某些索引值被使用得非常频繁时，它会在内存中基于B-Tree索引之上再创建一个哈希索引，这样就让B-Tree索引也具有哈希索引的一些优点，比如快速的哈希查找。这是一个完全自动的、内部的行为，用户无法控制或者配置，不过如果有必要，完全可以关闭该功能。 </p><h4 id="自定义哈希索引"><a href="#自定义哈希索引" class="headerlink" title="自定义哈希索引"></a>自定义哈希索引</h4><p>可以通过自定义哈希函数，将对应的字段值通过通过一个自定义哈希函数计算出哈希值列，将这些哈希值额外存在一个字段中。</p><p>这样的好处就是，<font color="Red">当需要检索的那些字段很长时，需要的索引也很大，性能较低，而哈希值很短，索引也很小，性能较高。查询时需要查询匹配值的哈希值和匹配值两个字段，哈希值快速缩小范围，当出现冲突时，使用匹配值精确匹配。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE pseudohash(<br>    id int unsigned NOT NULL auto_increment,<br>    url varchar(255) NOT NULL,<br>    url_crc int unsigned NOT NULL DEFAULT 0,<br>    primary key(id)<br>);<br><br>DELIMITER //<br>CREATE TRIGGER pseudohash_crc_ins BEFORE INSERT ON pseudohash FOR EACH ROW BEGIN<br>SET NEW.url_crc = crc32(NEW.url);<br>END;<br>//<br>CREATE TRIGGER pseudohash_crc_upd BEFORE UPDATE ON pseudohash FOR EACH ROW BEGIN<br>SET NEW.url_crc = crc32(NEW.url);<br>END;<br>//<br>DELIMITER ;<br><br>insert into pseudohash(url) values (&#x27;http://www.mysql.com&#x27;);<br><br>select * from pseudohash where url_crc = CRC32(&#x27;http://www.mysql.com&#x27;) and url = &#x27;http://www.mysql.com&#x27;;<br><br></code></pre></td></tr></table></figure><h3 id="3、空间数据索引（R-Tree）"><a href="#3、空间数据索引（R-Tree）" class="headerlink" title="3、空间数据索引（R-Tree）"></a>3、空间数据索引（R-Tree）</h3><p>MyISAM引擎支持R-Tree，可以用于存储空间相关数据，如地理数据。</p><h3 id="4、全文索引（FULLTEXT）"><a href="#4、全文索引（FULLTEXT）" class="headerlink" title="4、全文索引（FULLTEXT）"></a>4、全文索引（FULLTEXT）</h3><p>全文索引是一种特殊类型的索引，它查找的是文本中的关键词，而不是直接比较索引中的值，更类似于搜索引擎做的事。</p><p>简单介绍几个全文索引的特点，有需要去查看官方文档或其他文章。</p><ul><li>只能构建在char、varchar、text类型上</li><li>通过全文索引的查询有自己特殊的语法<code>match(index_column) again(&#39;xxxx&#39;)</code></li><li>全文索引的检索有最小搜索长度和最大搜索长度限制（可以通过修改my.ini修改配置），表的行数量条件要求，以及各种殷勤和版本限制等。</li></ul><h2 id="二、索引的优点"><a href="#二、索引的优点" class="headerlink" title="二、索引的优点"></a>二、索引的优点</h2><ul><li>大大减少了服务器需要扫描的数据量</li><li>帮助服务器避免了排序或临时表</li><li>将随机IO变为顺序IO</li></ul><h3 id="额外的IO知识"><a href="#额外的IO知识" class="headerlink" title="额外的IO知识"></a>额外的IO知识</h3><ul><li><p><font color="Blue">IO请求的时间主要有三块：寻道时间、旋转延迟、数据传输时间。寻道时间 &gt; 旋转延迟 &gt; 数据传输时间。</font></p></li><li><p><font color="Blue">顺序IO是指读写操作的访问地址连续，寻址时间极大减少，性能高。随机IO是指读写操作访问地址不连续，磁头需要不停的移动，时间都浪费在磁头寻址上了，所以性能较差。</font></p></li></ul><p><font color="Blue">详见：<a href="https://tech.meituan.com/2017/05/19/about-desk-io.html">https://tech.meituan.com/2017/05/19/about-desk-io.html</a></font></p><h2 id="三、高性能的索引策略"><a href="#三、高性能的索引策略" class="headerlink" title="三、高性能的索引策略"></a>三、高性能的索引策略</h2><h3 id="1、提高索引的选择性"><a href="#1、提高索引的选择性" class="headerlink" title="1、提高索引的选择性"></a>1、提高索引的选择性</h3><p><font color="Red">索引的选择性</font>，是指不重复的索引值和表的总记录数的比值，即count(distinct column) / count(1)的值。</p><p>索引的选择性越高，则查询效率越高，因为选择性高的索引可以让MySQL在查询时过滤掉更多的行。对应的可以在explain中查看filtered字段，filtered越高说明通过索引过滤掉的行越多，索引效率越高。</p><p>在char、varchar、text上可以构建前缀索引，即指定长度来对字符串的前几个字符构建索引。text必须使用<font color="Red">前缀索引</font>，varchar可以不指定前缀长度。然而varchar很长时，会导致索引很大效率低，构建一个较短的前缀索引还是有必要的。<font color="Red">关键在于，要使前缀索引对记录的过滤率（选择性）尽可能向完整长度索引对记录的过滤率（选择性）靠近。这样既达到了提高效率节省空间的作用，还实现了高效的数据查询。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(DISTINCT city)/COUNT(*) FROM sakila.city_demo;<br><br>SELECT<br>COUNT(DISTINCT LEFT(city, 3))/COUNT(*) AS sel3，<br>COUNT(DISTINCT LEFT(city, 4))/COUNT(*) AS sel4，<br>COUNT(DISTINCT LEFT(city, 5))/COUNT(*) AS sel5，<br>COUNT(DISTINCT LEFT(city, 6))/COUNT(*) AS sel6，<br>COUNT(DISTINCT LEFT(city, 7))/COUNT(*) AS sel7<br>FROM sakila.city_demo；<br></code></pre></td></tr></table></figure><h3 id="2、多列索引"><a href="#2、多列索引" class="headerlink" title="2、多列索引"></a>2、多列索引</h3><p>应该构建合适的多列索引，而不是对每一列构建一个索引。</p><h3 id="3、索引顺序"><a href="#3、索引顺序" class="headerlink" title="3、索引顺序"></a>3、索引顺序</h3><p><font color="Red">将选择性最高的索引放在索引最前列。</font></p><h3 id="4、聚簇索引"><a href="#4、聚簇索引" class="headerlink" title="4、聚簇索引"></a>4、聚簇索引</h3><p><font color="Red">聚簇索引</font>：在B+Tree的基础上，每个叶子节点不仅有索引字段值，还有该索引字段对应的实际的数据行。因为无法把数据行放在两个不同的地方，因此一个表只能有一个聚簇索引，实际上聚簇索引“就是”表本身。<font color="Red">聚簇索引并不是一种基本索引类型，而是一种数据分布策略。</font></p><p>对于InnoDB，如果有主键，则主键就是聚簇索引；如果未定义主键，则会使用unique键字段作为聚簇索引；如果都没有，则会隐式定义一个主键作为聚簇索引。</p><p>二级索引定位行需要两次查找，第一次定位到二级索引上保存的即聚簇索引键，第二次通过聚簇索引键定位到实际的行数据。</p><h3 id="5、InnoDB和MyISAM的数据分布对比"><a href="#5、InnoDB和MyISAM的数据分布对比" class="headerlink" title="5、InnoDB和MyISAM的数据分布对比"></a>5、InnoDB和MyISAM的数据分布对比</h3><h4 id="（1）MyISAM"><a href="#（1）MyISAM" class="headerlink" title="（1）MyISAM"></a>（1）MyISAM</h4><ul><li>不支持聚簇索引，数据是按照插入顺序存储在磁盘中的。</li><li>在数据之外还有一个行号，用于查找该行的指针。</li><li><font color="Red">主键索引和二级索引没有本质区别，分布方式都是把索引列排序后加上行号，因此无论是主键索引还是二级索引，都要通过两次寻址才能获取数据。</font></li></ul><img src="/images/MyISAM数据分布.png" style="zoom:50%;"><h4 id="（2）InnoDB"><a href="#（2）InnoDB" class="headerlink" title="（2）InnoDB"></a>（2）InnoDB</h4><ul><li>数据是按照主键大小排序插入，若没有设置主键，则会给定一个隐式自增主键。这个主键代替MyISAM的行号。</li><li>支持聚簇索引，聚簇索引已经包含了整个表的数据，且还包含了事务ID、用于事务和MVCC的回滚指针等其他数据。</li><li>二级索引只有索引列和主键列。<font color="Red">因此通过主键查找行只要一次寻址，而通过二级索引还是需要两次寻址。</font></li></ul><img src="/images/InnoDB和MyISAM的区别.PNg" style="zoom:50%;"><h4 id="（3）Tips"><a href="#（3）Tips" class="headerlink" title="（3）Tips"></a>（3）Tips</h4><p><font color="Red">在IO密集的应用中，最好避免使用随机的主键（如UUID）来做聚簇索引的主键，原因如下：。</font></p><ul><li>每次生成的UUID不一定比之前的大，所以InnoDB无法简单地将新行插入到索引的最后面，要找到合适的位置，就会导致大量的随机IO</li><li>因为写入是乱序的，InnoDB不得不频繁地做页分裂操作，以便为新的行分配空间。页分裂会导致移动大量数据，一次插入最少需要修改三个页而不是一个页。</li><li>由于频繁的页分裂，页会变得稀疏并被不规则地填充，所以最终数据会有碎片。</li></ul><h4 id="（4）auto-increment的缺点"><a href="#（4）auto-increment的缺点" class="headerlink" title="（4）auto_increment的缺点"></a>（4）auto_increment的缺点</h4><p>在高并发的情况下，在InnoDB中按主键顺序插入可能会造成明显的争用。一方面主键的上界会成为热点，因为所有的插入操作都在这里，高并发可能会导致<font color="Red">间隙锁</font>（简单来说就是主键键值之间的距离的锁，该锁可以阻塞insert操作，防止幻读）竞争。另一方面，auto_increment的锁机制也是一个热点。如果遇到插入争用问题，则可能需要考虑重新设计表结构或者应用，或者更改innodb_autoinc_lock_mode配置。</p><h3 id="6、覆盖索引"><a href="#6、覆盖索引" class="headerlink" title="6、覆盖索引"></a>6、覆盖索引</h3><p>定义：如果一个索引包含（或者说覆盖）所有需要查询的字段，则称这个情况为“覆盖索引”。</p><p>覆盖索引是针对某一个sql语句来判断的，所以只能称之为一种特殊情况。</p><p>出现“覆盖索引”时，查询数据不需要回表，因为索引中已经有了我们需要的数据，因此覆盖索引的效率很高。</p><h3 id="7、使用索引来优化排序"><a href="#7、使用索引来优化排序" class="headerlink" title="7、使用索引来优化排序"></a>7、使用索引来优化排序</h3><h4 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips 1"></a>Tips 1</h4><p><font color="Red">出现“覆盖索引”时，在explain中的extra字段会出现“using index”值。而explain中的type字段中的“index”意思是访问数据的类型，例如全表扫描、范围扫描、索引扫描、常数引用等，对于索引扫描，意思是，访问数据只需要扫描索引，不需要回表查找数据。</font></p><h4 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips 2"></a>Tips 2</h4><p><font color="Red">如果查询需要关联多张表，则只有当order by子句引用的字段都是第一张表时，才能使用索引进行排序。</font></p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
      <category>高性能MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL备份-Linux版</title>
    <link href="/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88/"/>
    <url>/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h2 id="一、该文档适用版本"><a href="#一、该文档适用版本" class="headerlink" title="一、该文档适用版本"></a>一、该文档适用版本</h2><p>MySQL：8.0.22</p><p>Linux：18.04.5 LTS</p><h2 id="二、MySQL在Linux上各种的默认路径"><a href="#二、MySQL在Linux上各种的默认路径" class="headerlink" title="二、MySQL在Linux上各种的默认路径"></a>二、MySQL在Linux上各种的默认路径</h2><table><thead><tr><th>MySQL变量</th><th>路径</th><th align="left">解释</th></tr></thead><tbody><tr><td>datadir</td><td>/var/lib/mysql</td><td align="left">存放数据文件、log_bin日志文件等</td></tr><tr><td>log-error</td><td>/var/log/mysql/error.log</td><td align="left">错误日志文件</td></tr><tr><td></td><td>/etc/mysql</td><td align="left">存放MySQL配置文件</td></tr><tr><td>basedir</td><td>/usr/</td><td align="left"></td></tr><tr><td>character_sets_dir</td><td>/usr/share/mysql-8.0/charsets/</td><td align="left">字符集路径</td></tr><tr><td>general_log_file</td><td>/var/lib/mysql/yuyr757.log</td><td align="left"></td></tr><tr><td>lc_messages_dir</td><td>/usr/share/mysql-8.0/</td><td align="left"></td></tr><tr><td>log_bin_basename</td><td>/var/lib/mysql/binlog</td><td align="left">bin_log日志文件路径和文件名前缀</td></tr><tr><td>log_bin_index</td><td>/var/lib/mysql/binlog.index</td><td align="left">bin_log日志文件索引</td></tr><tr><td>log_error</td><td>/var/log/mysql/error.log</td><td align="left">报错日志</td></tr><tr><td>plugin_dir</td><td>/usr/lib/mysql/plugin/</td><td align="left">插件路径</td></tr><tr><td>pid_file</td><td>/var/run/mysqld/mysqld.pid</td><td align="left"></td></tr><tr><td>relay_log_basename</td><td>/var/lib/mysql/yuyr757-relay-bin</td><td align="left"></td></tr><tr><td>relay_log_index</td><td>/var/lib/mysql/yuyr757-relay-bin.index</td><td align="left"></td></tr><tr><td>secure_file_priv</td><td>/var/lib/mysql-files/</td><td align="left"></td></tr><tr><td>slow_query_log_file</td><td>/var/lib/mysql/yuyr757-slow.log</td><td align="left"></td></tr><tr><td>socket</td><td>/var/run/mysqld/mysqld.sock</td><td align="left"></td></tr><tr><td>sql_log_off</td><td>OFF</td><td align="left"></td></tr><tr><td>tmpdir</td><td>/tmp</td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr><tr><td></td><td></td><td align="left"></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/bin                 客户端程序和脚本  <br>/usr/sbin                mysqld 服务器  <br>/var/lib/mysql           日志文件，数据文件<br>/usr/share/doc/packages  文档  <br>/usr/include/mysql       包含( 头) 文件  <br>/usr/lib/mysql           库  <br>/usr/share/mysql         错误消息和字符集文件  <br>/usr/share/sql-bench     基准程序 <br></code></pre></td></tr></table></figure><h2 id="三、热备份（不需要关闭服务器）"><a href="#三、热备份（不需要关闭服务器）" class="headerlink" title="三、热备份（不需要关闭服务器）"></a>三、热备份（不需要关闭服务器）</h2><h3 id="1、mysqldump"><a href="#1、mysqldump" class="headerlink" title="1、mysqldump"></a>1、mysqldump</h3><p>mysqldump用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Usage: mysqldump [OPTIONS] database [tables]<br>OR     mysqldump [OPTIONS] --databases [OPTIONS] DB1 [DB2 DB3...]<br>OR     mysqldump [OPTIONS] --all-databases [OPTIONS]<br><br>Default options are read from the following files in the given order:<br>/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf<br></code></pre></td></tr></table></figure><p>[OPTIONS]参数很多，和mysql命令参数差不多，有需要自行查看<code>mysqldump --help</code>，以下讲解常用参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">-u, --user：用户名<br>-p, --password：密码，该参数不能带值<br>-h, --host：服务器地址<br>-P, --port：端口<br>-A, --all-databses：所有数据库<br>-S, --socket：用来连接服务器的socket文件<br>-B, --databses：指定要导出的数据库，默认情况下生成的sql文件是不带create database if not exists语句的，加上--database就会有创建数据库的语句。<br>-R, --routines：导出数据库中的procedures和functions<br>--triggers：导出对应表的触发器<br>-E, --events：导出所有事件<br>-w, --where：按照指定where条件下的数据<br>--single-transaction：通过开启一个事务导出所有表来创建一致的快照（个人理解为导出的一瞬间创建一个快照，然后导出的数据都是基于那个快照版本，可以保持数据一致性）。仅适用于存储在支持多版本的存储引擎中的表（当前仅InnoDB支持）；<br>-d, --no-data：不导出数据<br>-t, --no-create-info：不重建数据库和表结构，即不输出drop database并create database，drop table并create table语句<br></code></pre></td></tr></table></figure><p>下面是对一个test数据库的全备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -u root -p --single-transaction --routines --events --triggers --databases test &gt; /tmp/test.sql<br></code></pre></td></tr></table></figure><h3 id="2、select-into-outfile"><a href="#2、select-into-outfile" class="headerlink" title="2、select into outfile"></a>2、select into outfile</h3><p><font color="Red">注意：如果<code>secure_file_priv</code>变量不为空，则outfile的文件只能导出到那个变量的文件夹。</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在一个正常的select语句结束，加上以下语句到sql语句结尾，即可将select出来的数据导出到文件</span><br>INTO OUTFILE &#x27;/tmp/employee_data_1.txt&#x27;<br>FIELDS TERMINATED BY &#x27;,&#x27; OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27; ESCAPED BY &#x27;\&#x27; LINES TERMINATED BY &#x27;\n&#x27;;<br><br>FIELDS TERMINATED BY # 字段分隔符<br>ENCLOSED BY          # 字段引用符，即字段左右两端会加上符号。OPTIONALLY即选择性，int和decimal不会被加上引用符，其他会。<br>LINES TERMINATED BY  # 行分隔符<br>ESCAPED BY           # 转义符，当文本中的符号和这里设置的符号冲突时，输出到csv时会自动给文本加上转义符，即表示转义符后面的这个符号是纯文本，不用做字段分隔，或字段引用，或行分隔符，或转义作用。<br><br>在Linux中，显示加上ESCAPED BY &#x27;\&#x27;时，sql语句没有任何响应。显示加上显示加上ESCAPED BY &#x27;\\&#x27;会报错。很迷，无所谓，反正默认为&#x27;\&#x27;。<br></code></pre></td></tr></table></figure><p><strong>示例1</strong>（以下\t和\n都是手敲进去的，实际上查数据时\t和\n都会显示为缩进和换行）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> select * from test2;</span><br>+----+---------+------------+------------------------------+-------------------+<br>| id | value   | date       | text                         | decimal_value     |<br>+----+---------+------------+------------------------------+-------------------+<br>|  1 | &#x27;sfas1&#x27; | 2021-01-17 | sdfasdf&quot;asdf\tasdf&quot;as,df\as\nf | 436526.7780000000 |<br>|  2 | sfsa2   | 2021-01-17 | sdfasdf&quot;asdf\tasdf&quot;as,df\as\nf | 436526.7780000000 |<br>|  3 | sfsa3   | 2021-01-17 | sdfasdf&quot;asdf\tasdf&quot;as,df\as\nf | 436526.7780000000 |<br>|  4 | NULL    | 2021-01-17 | sdfasdf&quot;asdf\tasdf&quot;as,df\as\nf | 436526.7780000000 |<br>|  5 | _abcd_  | 2021-01-17 | sdfasdf&quot;asdf\tasdf&quot;as,df\as\nf | 436526.7780000000 |<br>+----+---------+------------+------------------------------+-------------------+<br>5 rows in set (0.00 sec)<br><span class="hljs-meta"></span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> select * from test2 into outfile <span class="hljs-string">&#x27;/var/lib/mysql-files/test.csv&#x27;</span> FIELDS TERMINATED BY <span class="hljs-string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED BY <span class="hljs-string">&#x27;&quot;&#x27;</span> lines terminated by <span class="hljs-string">&#x27;\n&#x27;</span>;</span><br>Query OK, 5 rows affected (0.00 sec)<br><br>vim /var/lib/mysql-files/test.csv<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 数据如下：</span><br>1,&quot;&#x27;sfas1&#x27;&quot;,&quot;2021-01-17&quot;,&quot;sdfasdf\&quot;asdf asdf\&quot;as,df\\as\<br>f&quot;,436526.7780000000<br>2,&quot;sfsa2&quot;,&quot;2021-01-17&quot;,&quot;sdfasdf\&quot;asdf   asdf\&quot;as,df\\as\<br>f&quot;,436526.7780000000<br>3,&quot;sfsa3&quot;,&quot;2021-01-17&quot;,&quot;sdfasdf\&quot;asdf   asdf\&quot;as,df\\as\<br>f&quot;,436526.7780000000<br>4,\N,&quot;2021-01-17&quot;,&quot;sdfasdf\&quot;asdf        asdf\&quot;as,df\\as\<br>f&quot;,436526.7780000000<br>5,&quot;_abcd_&quot;,&quot;2021-01-17&quot;,&quot;sdfasdf\&quot;asdf  asdf\&quot;as,df\\as\<br>f&quot;,436526.7780000000<br></code></pre></td></tr></table></figure><p>解释：</p><ul><li><p><code>,</code>虽然为字段分隔符，但有字段引用符的存在，所以不需要转义。没有字段引用符的例子见后面</p></li><li><p> <code>\N</code>表示MySQL中的NULL</p></li><li><p><code>&quot;</code>需要转义，所以csv中表示为<code>\&quot;</code></p></li><li><p><code>\t</code>不需要被转义，因此在csv中表示为<code>\t</code>，用vim查看时即显示为若干个空格。</p></li><li><p><code>\n</code>需要转义，所以在csv中为<code>\\n</code>，用vim查看时即显示为<code>\</code>再换行。</p></li></ul><p><strong>示例2：</strong>（不带字段引用符）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> select * from test2 into outfile <span class="hljs-string">&#x27;/var/lib/mysql-files/test.csv&#x27;</span> FIELDS TERMINATED BY <span class="hljs-string">&#x27;,&#x27;</span> lines terminated by <span class="hljs-string">&#x27;\n&#x27;</span>;</span><br>Query OK, 5 rows affected (0.00 sec)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 数据如下，可以看到text列中的逗号就带上了\，而双引号就没有带\</span><br><span class="bash">1,<span class="hljs-string">&#x27;sfas1&#x27;</span>,2021-01-17,sdfasdf<span class="hljs-string">&quot;asdf       asdf&quot;</span>as\,df\\as\</span><br><span class="bash">f,436526.7780000000</span><br>2,sfsa2,2021-01-17,sdfasdf&quot;asdf asdf&quot;as\,df\\as\<br>f,436526.7780000000<br>3,sfsa3,2021-01-17,sdfasdf&quot;asdf asdf&quot;as\,df\\as\<br>f,436526.7780000000<br>4,\N,2021-01-17,sdfasdf&quot;asdf    asdf&quot;as\,df\\as\<br>f,436526.7780000000<br>5,_abcd_,2021-01-17,sdfasdf&quot;asdf        asdf&quot;as\,df\\as\<br>f,436526.7780000000<br></code></pre></td></tr></table></figure><h3 id="3、percona的xtrabackup"><a href="#3、percona的xtrabackup" class="headerlink" title="3、percona的xtrabackup"></a>3、percona的xtrabackup</h3><p>percona是一个提供数据库工具一个第三方供应商，xtrabackup是他的一个用于数据库备份的产品，使用方法略，因为我也没用过。</p><h2 id="四、冷备份（需要关闭服务器）"><a href="#四、冷备份（需要关闭服务器）" class="headerlink" title="四、冷备份（需要关闭服务器）"></a>四、冷备份（需要关闭服务器）</h2><p><font color="Red">本人在windows上使用8.0.17版本的MySQL在import tablespace时不要cfg文件，不知道是windows版本的原因，还是8.0.17版本的原因，懒得追究了。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 用一个test表来做测试<br>create table test(id int primary key);<br><br># 将该步骤确保所有对表的修改全部写入到二进制文件中，并将表加上锁，只允许读操作，不允许写操作<br>flush tables test for export;<br><br># 将test.ibd表空间文件和test.cfg元数据文件复制一份命名为tmp.ibd、tmp.cfg<br>cp test.ibd tmp.ibd<br>cp test.cfg tmp.cfg<br><br># 解除锁表<br>unlock tables;<br><br># 修改表名为你需要的复制的表<br>alter table test rename to test22;<br><br># 创建一张原表<br>create table test like test22;<br><br># 删除表空间<br>alter table test discard tablespace;<br><br># 将备份的表空间文件和元数据文件恢复<br>mv tmp.ibd test.ibd<br>mv tmp.cfg test.cfg<br><br># 更改文件的所属用户，否则会出现权限错误<br>chown -R mysql.mysql .<br><br># 恢复表空间<br>alter table test import tablespace;<br><br># 解除锁表<br>unlock tables;<br><br># 待所有恢复都成功了之后，再删除cfg文件<br>rm test.cfg<br></code></pre></td></tr></table></figure><h2 id="五、数据恢复"><a href="#五、数据恢复" class="headerlink" title="五、数据恢复"></a>五、数据恢复</h2><h3 id="1、MySQL中的source命令"><a href="#1、MySQL中的source命令" class="headerlink" title="1、MySQL中的source命令"></a>1、MySQL中的source命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 注意这个是MySQL的命令，而不是Linux命令</span><br>source /tmp/test.sql # 即执行test.sql中的全部语句<br></code></pre></td></tr></table></figure><h3 id="2、MySQL中的load-data命令"><a href="#2、MySQL中的load-data命令" class="headerlink" title="2、MySQL中的load data命令"></a>2、MySQL中的load data命令</h3><p>MySQL官网的load data命令语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">LOAD DATA<br>    [LOW_PRIORITY | CONCURRENT] [LOCAL]<br>    INFILE &#x27;file_name&#x27;<br>    [REPLACE | IGNORE]<br>    INTO TABLE tbl_name<br>    [PARTITION (partition_name [, partition_name] ...)]<br>    [CHARACTER SET charset_name]<br>    [&#123;FIELDS | COLUMNS&#125;<br>        [TERMINATED BY &#x27;string&#x27;]<br>        [[OPTIONALLY] ENCLOSED BY &#x27;char&#x27;]<br>        [ESCAPED BY &#x27;char&#x27;]<br>    ]<br>    [LINES<br>        [STARTING BY &#x27;string&#x27;]<br>        [TERMINATED BY &#x27;string&#x27;]<br>    ]<br>    [IGNORE number &#123;LINES | ROWS&#125;]<br>    [(col_name_or_user_var<br>        [, col_name_or_user_var] ...)]<br>    [SET col_name=&#123;expr | DEFAULT&#125;<br>        [, col_name=&#123;expr | DEFAULT&#125;] ...]<br></code></pre></td></tr></table></figure><p>基本用法和select into outfile一样，高阶用法具体查看MySQL文档。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> drop table test2;</span><br>Query OK, 0 rows affected (0.00 sec)<br><span class="hljs-meta"></span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> CREATE TABLE `test2` (</span><br>    -&gt;   `id` int NOT NULL AUTO_INCREMENT,<br>    -&gt;   `value` varchar(20) DEFAULT NULL,<br>    -&gt;   `date` date DEFAULT NULL,<br>    -&gt;   `text` text,<br>    -&gt;   `decimal_value` decimal(20,10) DEFAULT NULL,<br>    -&gt;   PRIMARY KEY (`id`)<br>    -&gt; ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;<br>Query OK, 0 rows affected (0.01 sec)<br><span class="hljs-meta"></span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> load data infile <span class="hljs-string">&#x27;/var/lib/mysql-files/test.csv&#x27;</span> into table test2  FIELDS TERMINATED BY <span class="hljs-string">&#x27;,&#x27;</span> lines terminated by <span class="hljs-string">&#x27;\n&#x27;</span>;</span><br>Query OK, 5 rows affected (0.01 sec)<br>Records: 5  Deleted: 0  Skipped: 0  Warnings: 0<br><span class="hljs-meta"></span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> select * from test2;</span><br>+----+---------+------------+------------------------------+-------------------+<br>| id | value   | date       | text                         | decimal_value     |<br>+----+---------+------------+------------------------------+-------------------+<br>|  1 | &#x27;sfas1&#x27; | 2021-01-17 | sdfasdf&quot;asdf      asdf&quot;as,df\as<br>f | 436526.7780000000 |<br>|  2 | sfsa2   | 2021-01-17 | sdfasdf&quot;asdf      asdf&quot;as,df\as<br>f | 436526.7780000000 |<br>|  3 | sfsa3   | 2021-01-17 | sdfasdf&quot;asdf      asdf&quot;as,df\as<br>f | 436526.7780000000 |<br>|  4 | NULL    | 2021-01-17 | sdfasdf&quot;asdf      asdf&quot;as,df\as<br>f | 436526.7780000000 |<br>|  5 | _abcd_  | 2021-01-17 | sdfasdf&quot;asdf      asdf&quot;as,df\as<br>f | 436526.7780000000 |<br>+----+---------+------------+------------------------------+-------------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><font color="Red">注意：在做数据转移时一定要把以下符号记住，否则容易出现数据错误。</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[CHARACTER SET charset_name]<br>[&#123;FIELDS | COLUMNS&#125;<br>    [TERMINATED BY &#x27;string&#x27;]<br>    [[OPTIONALLY] ENCLOSED BY &#x27;char&#x27;]<br>    [ESCAPED BY &#x27;char&#x27;]<br>]<br>[LINES<br>    [STARTING BY &#x27;string&#x27;]<br>    [TERMINATED BY &#x27;string&#x27;]<br>]<br></code></pre></td></tr></table></figure><h2 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h2><h3 id="1、禁用log-bin对insert速度的影响"><a href="#1、禁用log-bin对insert速度的影响" class="headerlink" title="1、禁用log_bin对insert速度的影响"></a>1、禁用log_bin对insert速度的影响</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show master status;<br>+---------------+----------+--------------+------------------+-------------------+<br>| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+---------------+----------+--------------+------------------+-------------------+<br>| binlog.000002 |      156 |              |                  |                   |<br>+---------------+----------+--------------+------------------+-------------------+<br>1 row in set (0.00 sec)<br><br># 查看binlog文件，因为刚重启了MySQL服务器，所以大小是156字节<br>root@yuyr757:/var/lib/mysql# ll binlog.000002<br>-rw-r----- 1 mysql mysql 156 1月  24 14:40 binlog.000002<br><br># 禁用log_bin<br>mysql&gt; set sql_log_bin = 0;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; create table test3 like test;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; select count(id) from test;<br>+-----------+<br>| count(id) |<br>+-----------+<br>|   3145728 |<br>+-----------+<br>1 row in set (0.99 sec)<br><br># 300万条数据插入约8.6秒。<br>mysql&gt; insert into test3(value) select value from test;<br>Query OK, 3145728 rows affected (8.62 sec)<br>Records: 3145728  Duplicates: 0  Warnings: 0<br><br># 再次查看binlog文件，还是156字节<br>root@yuyr757:/var/lib/mysql# ll binlog.000002<br>-rw-r----- 1 mysql mysql 156 1月  24 14:40 binlog.000002<br></code></pre></td></tr></table></figure><p>下面重启MySQL服务器，不禁用log_bin，看看300万条数据插入需要花多少时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs mysql">root@yuyr757:/home/yuyr757# systemctl restart mysql<br><br>root@yuyr757:/home/yuyr757# mysql -u root -p<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 8<br>Server version: 8.0.22 MySQL Community Server - GPL<br><br>Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>mysql&gt; use test;<br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>mysql&gt; select count(1) from test;<br>+----------+<br>| count(1) |<br>+----------+<br>|  3145728 |<br>+----------+<br>1 row in set (1.12 sec)<br><br>mysql&gt; create table test4 like test;<br>Query OK, 0 rows affected (0.01 sec)<br><br># 约13.9秒<br>mysql&gt; insert into test4(value) select value from test;<br>Query OK, 3145728 rows affected (13.93 sec)<br>Records: 3145728  Duplicates: 0  Warnings: 0<br><br># 查看logbin文件，37911028字节<br>root@yuyr757:/var/lib/mysql# ll binlog.000003<br>-rw-r----- 1 mysql mysql 37911028 1月  24 14:49 binlog.000003<br></code></pre></td></tr></table></figure><p>可见，禁用log_bin，insert速度从13.9秒缩短到了8.6秒。提高了38.13%的速度。即一些需要插入大量数据且允许适当禁用log_bin的情况时，可以适当禁用log_bin，来提高插入数据的速度。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/operating-support/docker/docker/"/>
    <url>/operating-support/docker/docker/</url>
    
    <content type="html"><![CDATA[<h2 id="一、docker安装"><a href="#一、docker安装" class="headerlink" title="一、docker安装"></a>一、docker安装</h2><p>参见<a href="https://docs.docker.com/engine/">官方文档</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 卸载原来的docker</span><br>sudo apt remove docker \<br>    docker.io \<br>    docker-engine<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装允许仓库使用https的依赖包</span><br>sudo apt-get install \<br>    apt-transport-https \<br>    ca-certificates \<br>    curl \<br>    gnupg-agent \<br>    software-properties-common<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装GPG密钥</span><br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 向sources.list中添加Docker软件源（感觉设置ubuntu全局软件源镜像为国内镜像，可能可以不做这一步）</span><br>sudo add-apt-repository \<br>    &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 下载安装docker-ce（社区版）</span><br>sudo apt install docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置dockerhub镜像，和linux的apt安装软件要设置镜像一样，国外网站比较慢，用国内的镜像源很快</span><br>cd /etc/docker # 如果没有docker文件夹，则自建一个docker文件夹<br>vi daemon.json # 修改这个文件，如果没有则自建一个文件，写入以下值。<br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]<br>&#125;<br>:wq # 保存退出<br>systemctl restart docker # 重启docker服务<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 运行hello-world</span><br>sudo docker run hello-world<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看docker本地镜像包有哪些</span><br>sudo docker images<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> docker的默认工作路径为</span><br>cd /var/lib/docker<br></code></pre></td></tr></table></figure><h2 id="二、docker原理"><a href="#二、docker原理" class="headerlink" title="二、docker原理"></a>二、docker原理</h2><h3 id="docker通信"><a href="#docker通信" class="headerlink" title="docker通信"></a>docker通信</h3><p>客户端和服务器之间的通信</p><p><img src="/images/docker%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="docker客户端服务器"></p><p>外网和docker的通信</p><p><img src="/images/docker%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84.png" alt="docker端口映射"></p><p>docker容器之间的通信</p><p><img src="/images/docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1.png" alt="docker容器之间的通信"></p><h3 id="docker为什么比VM加载快？"><a href="#docker为什么比VM加载快？" class="headerlink" title="docker为什么比VM加载快？"></a>docker为什么比VM加载快？</h3><p>docker是在宿主机OS内核的基础上运行的，不用重新加载OS内核；而VM是抽象了一个OS内核，每次启动都要重新加载新的OS内核，所以慢。</p><p><img src="/images/docker%E7%BB%93%E6%9E%84%E5%92%8CVM%E7%BB%93%E6%9E%84.png" alt="docker结构和VM结构"></p><p><img src="/images/docker%E5%92%8CVM%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="docker和VM的区别"></p><h2 id="三、docker命令"><a href="#三、docker命令" class="headerlink" title="三、docker命令"></a>三、docker命令</h2><h3 id="docker帮助命令"><a href="#docker帮助命令" class="headerlink" title="docker帮助命令"></a>docker帮助命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker version            # docker版本信息<br>docker info               # docker系统的具体信息<br>docker [command] --help   # 查看某个命令的帮助<br></code></pre></td></tr></table></figure><p>docker命令行帮助文档：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><h3 id="docker镜像命令"><a href="#docker镜像命令" class="headerlink" title="docker镜像命令"></a>docker镜像命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images [OPTIONS] [REPOSITORY[:TAG]]  # 查看所有镜像<br>docker search [OPTIONS] TERM                # 搜索镜像<br>docker search --filter stars=3000 mysql     # 搜索mysql，带筛选参数，=3000其实是大于3000的意思<br>docker pull [OPTIONS] NAME[:TAG|@DIGEST]    # 下载镜像<br>docker rmi [OPTIONS] IMAGE [IMAGE...]       # 删除镜像，按ID删除<br>docker rmi $(docker images -aq)             # 删除所有镜像，$()里面放的是变量<br></code></pre></td></tr></table></figure><h3 id="docker容器命令"><a href="#docker容器命令" class="headerlink" title="docker容器命令"></a>docker容器命令</h3><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]       # 在一个新的容器中运行这个镜像（的命令）<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 常用参数使用方式如下：</span><br>--name=&quot;name01&quot;         # 给容器命名<br>-d                      # 后台方式运行<br>-it                     # 以交互方式运行，进入容器查看内容<br><span class="hljs-meta">#</span><span class="bash"> 如：docker run -it centos /bin/bash <span class="hljs-comment"># 以交互方式运行容器，运行参数为/bin/bash</span></span><br>-p                      # 指定容器端口，有以下四种方式<br>    -p ip主机端口:容器端口<br>    -p 主机端口:容器端口（常用）<br>    -p 容器端口<br>    容器端口<br>-P                      # 大写的P，随机指定端口<br></code></pre></td></tr></table></figure><p>坑：docker使用-d后台运行，必须要有一个前台进程，若没有前台进程，docker发现没有应用，就会自动停止这个容器。</p><p>docker run -d centos这个命令虽然以后台方式运行，但是没有前台控制台进程，docker会自动停止这个容器；</p><p>docker run -d -it centos这个命令以后台方式运行，且有控制命令台，只不过控制命令台也在后台运行，因此docker启动这个容器后不会自动停止这个容器。</p><p>此外，第一个容器停止了之后无法重新启动，因为根源上就没有前台进程；而第二个容器手动停止后，是可以再次启动的，因此有前台进程。</p><h4 id="列举容器"><a href="#列举容器" class="headerlink" title="列举容器"></a>列举容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps [OPTIONS]             # 列举容器，默认显示当前正在运行的容器<br>docker ps -a                    # 列举所有容器，包括历史运行过的容器<br></code></pre></td></tr></table></figure><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]        # 进入容器并以COMMAND命令开启一个新的进程<br>docker attach [OPTIONS] CONTAINER                       # 进入容器并跳到正在执行的那个进程<br></code></pre></td></tr></table></figure><h4 id="退出容器-以交互方式进入容器后的退出"><a href="#退出容器-以交互方式进入容器后的退出" class="headerlink" title="退出容器(以交互方式进入容器后的退出)"></a>退出容器(以交互方式进入容器后的退出)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit                # 退出并停止容器<br>ctrl + P + Q        # 退出但不停止容器<br></code></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm [OPTIONS] CONTAINER [CONTAINER...]        # 删除容器，默认不能删除正在运行的容器，按ID删除<br>-f                                                  # 强制删除，可以删除正在运行的容器<br>docker rm -f $(docker ps -aq)                       # 删除所有容器<br></code></pre></td></tr></table></figure><h4 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start       # 启动容器<br>docker restart     # 重启容器<br>docker stop        # 停止容器<br>docker kill        # 杀死容器<br></code></pre></td></tr></table></figure><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs [OPTIONS] CONTAINER         # 查看日志<br></code></pre></td></tr></table></figure><h4 id="查看容器内的进程"><a href="#查看容器内的进程" class="headerlink" title="查看容器内的进程"></a>查看容器内的进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker top CONTAINER [ps OPTIONS]       # 查看容器内的进程，CONTAINER为容器ID<br></code></pre></td></tr></table></figure><h4 id="查看容器的元数据"><a href="#查看容器的元数据" class="headerlink" title="查看容器的元数据"></a>查看容器的元数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker inspect [OPTIONS] NAME|ID [NAME|ID...]       # 查看容器的元数据<br></code></pre></td></tr></table></figure><h4 id="拷贝文件或文件夹"><a href="#拷贝文件或文件夹" class="headerlink" title="拷贝文件或文件夹"></a>拷贝文件或文件夹</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-      # 从容器拷贝至宿主机<br>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH      # 从宿主机拷贝至容器<br></code></pre></td></tr></table></figure><h3 id="docker命令小结"><a href="#docker命令小结" class="headerlink" title="docker命令小结"></a>docker命令小结</h3><p><img src="/images/docker%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93.png" alt="docker命令小结"></p><h3 id="docker命令练习"><a href="#docker命令练习" class="headerlink" title="docker命令练习"></a>docker命令练习</h3><h4 id="使用docker安装一个Nginx"><a href="#使用docker安装一个Nginx" class="headerlink" title="使用docker安装一个Nginx"></a>使用docker安装一个Nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search nginx --filter stars=3000           # 找到我们需要的image，也可以去官网上找<br>docker pull nginx                                 # 下载nginx<br>docker run -p 3344:80 --name nginx01 -d nginx     # 启动nginx，-p为端口映射参数，--name命名，-d为后台运行（该程序可以不需要前台进程）<br>curl localhost:3344                               # 结果如下的html页面<br>docker exec -it nginx01 /bin/bash                 # 进入容器<br>whereis nginx<br><span class="hljs-meta">#</span><span class="bash"> nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br>cd /etc/nginx<br>ls<br><span class="hljs-meta">#</span><span class="bash"> conf.dfastcgi_paramskoi-utf  koi-win  mime.types  modules  nginx.conf  scgi_paramsuwsgi_params  win-utf</span><br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">        <span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For online documentation and support please refer to<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>Commercial support is available at<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Thank you for using nginx.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用docker安装一个tomcat"><a href="#使用docker安装一个tomcat" class="headerlink" title="使用docker安装一个tomcat"></a>使用docker安装一个tomcat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search --filter stars=300 tomcat<br>docker pull tomcat<br>docker run -d -p 3355:8080 --name tomcat01 tomcat<br>docker exec -it tomcat01 /bin/bash                      # 进入了tomcat所在的容器<br>cd /usr/local/tomcat<br>cp -r webapps.dist/* webapps                            # 20210102，官方默认的tomcat是不带webapps这个文件夹的，可以从webapps.dist文件夹里面的所有文件拷贝到一个新建的webapps文件下，就可以了<br>^p ^q                                                   # 退出容器<br>curl localhost:3355                                     # 结果如下html所示（省略了body）<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Apache Tomcat/9.0.41<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tomcat.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>...省略<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、docker镜像"><a href="#四、docker镜像" class="headerlink" title="四、docker镜像"></a>四、docker镜像</h2><p>1、镜像是分层下载的，各个镜像之间的层可以共享，各个层的ID为其加密的一个唯一ID。</p><p>2、对于一个容器的所有修改，不是修改原来的层，而是会形成一个新的层，push到docker hub后只是在原来的层上面新加了一层，技术原理很像git。</p><h2 id="五、docker数据卷"><a href="#五、docker数据卷" class="headerlink" title="五、docker数据卷"></a>五、docker数据卷</h2><p>将容器内的数据<font color="Red">挂载</font>到宿主机上，实现数据同步。<font color="Red">这种同步是双向绑定，即任意一方的修改都会同步到另一方。同时这种同步不需要启动容器，容器未启动时，在宿主机的修改也会同步到容器中。</font></p><p><img src="/images/docker%E5%AE%B9%E5%99%A8%E5%8D%B7%E6%8A%80%E6%9C%AF.png" alt="docker容器卷技术"></p><h3 id="制定路径挂载"><a href="#制定路径挂载" class="headerlink" title="制定路径挂载"></a>制定路径挂载</h3><p><font color="Red">主机目录地址位置的值一定要以/开头，才是指定路径挂载</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it -v 主机目录地址:容器内目录地址<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 示例</span><br>docker run -it -v /home/yuyr757/Documents/testdocker:/home/testdocker centos /bin/bash<br></code></pre></td></tr></table></figure><h3 id="练习：安装mysql并实现数据持久化"><a href="#练习：安装mysql并实现数据持久化" class="headerlink" title="练习：安装mysql并实现数据持久化"></a>练习：安装mysql并实现数据持久化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动一个mysql容器，绑定了两个文件夹同步</span><br>docker run -p 3310:3306 -v /home/yuyr757/Documents/mysql/conf:/etc/mysql/conf.d -v /home/yuyr757/Documents/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 -d mysql<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 在外部通过3310端口访问mysql服务器，可以进入数据库</span><br>mysql -u root -proot -h 192.168.141.128 -P 3310<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建一个数据库</span><br>create table test;<br>create table test_table(id int unsigned auto_increment primary key, value varchar(20));<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 在linux宿主机和linux容器里面的数据文件夹都可以看到数据文件已经创建了。</span><br><span class="hljs-meta">#</span><span class="bash"> 在linux宿主机删除容器后会发现数据文件依旧存在！！</span><br>docker rm -f mysql01<br>root@yuyr757:/home/yuyr757/Documents/mysql/data# ls<br> auto.cnf        binlog.index      client-key.pem       ibdata1      &#x27;#innodb_temp&#x27;        private_key.pem   sys<br> binlog.000001   ca-key.pem       &#x27;#ib_16384_0.dblwr&#x27;   ib_logfile0   mysql                public_key.pem    test<br> binlog.000002   ca.pem           &#x27;#ib_16384_1.dblwr&#x27;   ib_logfile1   mysql.ibd            server-cert.pem   undo_001<br> binlog.000003   client-cert.pem   ib_buffer_pool       ibtmp1        performance_schema   server-key.pem    undo_002<br></code></pre></td></tr></table></figure><h3 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h3><p><font color="Red">具名挂载（常用）</font>：<code>-v name:container_path</code>，name为挂在的卷名称，container_path为容器内路径，这种方式挂载的宿主机路径为：<code>/var/lib/docker/volumes/$&#123;name&#125;/_data</code>文件夹内。</p><p><font color="Red">匿名挂载</font>：<code>-v container_path</code>，-v后面只有一个路径，则是匿名挂载，匿名挂载的宿主机路径和上面一致，只是name为匿名ID而已。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 匿名挂载示例如下</span><br>docker run -P -d --name nginx02 -v /etc/nginx nginx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 通过inspect查看元数据</span><br>docker inspect nginx02<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 里面有一个Mounts的Type为colume即为数据卷，可以看到其name为一串加密的ID</span><br>&quot;Mounts&quot;: [<br>&#123;<br>&quot;Type&quot;: &quot;volume&quot;,<br>&quot;Name&quot;: &quot;c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2&quot;,<br>&quot;Source&quot;: &quot;/var/lib/docker/volumes/c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2/_data&quot;,<br>&quot;Destination&quot;: &quot;/etc/nginx&quot;,<br>&quot;Driver&quot;: &quot;local&quot;,<br>&quot;Mode&quot;: &quot;&quot;,<br>&quot;RW&quot;: true,<br>&quot;Propagation&quot;: &quot;&quot;<br>&#125;<br>],<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看数据卷</span><br>docker volume ls<br><span class="hljs-meta">#</span><span class="bash"> DRIVER    VOLUME NAME</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">local</span>     c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看卷的元数据</span><br>docker volume inspect c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2<br>[<br>    &#123;<br>        &quot;CreatedAt&quot;: &quot;2021-01-03T14:46:37+08:00&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Labels&quot;: null,<br>        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2/_data&quot;,<br>        &quot;Name&quot;: &quot;c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2&quot;,<br>        &quot;Options&quot;: null,<br>        &quot;Scope&quot;: &quot;local&quot;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 具名挂载示例如下</span><br>docker run -P -d --name nginx03 -v juming-nginx:/etc/nginx nginx<br><br>docker inspect nginx03<br>&quot;Mounts&quot;: [<br>    &#123;<br>        &quot;Type&quot;: &quot;volume&quot;,<br>        &quot;Name&quot;: &quot;juming-nginx&quot;,<br>        &quot;Source&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,<br>        &quot;Destination&quot;: &quot;/etc/nginx&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Mode&quot;: &quot;z&quot;,<br>        &quot;RW&quot;: true,<br>        &quot;Propagation&quot;: &quot;&quot;<br>    &#125;<br>],<br><br>docker volume ls<br><span class="hljs-meta">#</span><span class="bash"> DRIVER    VOLUME NAME</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">local</span>     c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">local</span>     juming-nginx</span><br><br>docker volume inspect juming-nginx<br>[<br>    &#123;<br>        &quot;CreatedAt&quot;: &quot;2021-01-03T14:55:23+08:00&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Labels&quot;: null,<br>        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,<br>        &quot;Name&quot;: &quot;juming-nginx&quot;,<br>        &quot;Options&quot;: null,<br>        &quot;Scope&quot;: &quot;local&quot;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="数据卷权限"><a href="#数据卷权限" class="headerlink" title="数据卷权限"></a>数据卷权限</h3><p>-v后面的容器目录还跟了一个<code>:ro</code>或<code>:rw</code>，默认是<code>:rw</code>。</p><p><code>:ro</code>：readonly，即容器内的绑定的那个目录是只读的，无法在容器内修改，只能在宿主机修改。</p><p><code>:rw</code>：readwrite，即容器内绑定的那个目录有读写权限。</p><p>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -P -d --name nginx04 -v juming-nginx04:/etc/nginx:ro nginx<br>docker exec -it nginx04 /bin/bash<br>cd /etc/nginx<br>mkdir test<br><span class="hljs-meta">#</span><span class="bash"> mkdir: cannot create directory <span class="hljs-string">&#x27;test&#x27;</span>: Read-only file system</span><br></code></pre></td></tr></table></figure><h3 id="挂载数据卷的第二种方式"><a href="#挂载数据卷的第二种方式" class="headerlink" title="挂载数据卷的第二种方式"></a>挂载数据卷的第二种方式</h3><p>在构建image时即把需要挂载的卷路径写上，启动时即会自动挂载卷。如protainer的官方镜像就会自动挂载两个卷。</p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>容器之间可以同步数据，即为数据卷容器。</p><p><img src="/images/docker%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --volumes-from [container]<br></code></pre></td></tr></table></figure><h2 id="六、DockerFile"><a href="#六、DockerFile" class="headerlink" title="六、DockerFile"></a>六、DockerFile</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>DockerFIle是用来构建docker镜像的命令行脚本文件。就像装双系统或装虚拟机时，要做一个镜像，把一系列装系统时要加入系统的软件或需要执行的命令放到镜像中。</p><p>1、每一个指令都是大写</p><p>2、每一个指令都会提交一个新的镜像层</p><p>如ubuntu镜像的dockerfile脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM scratch<br>ADD ubuntu-bionic-core-cloudimg-amd64-root.tar.gz /<br>RUN set -xe \<br>&amp;&amp; echo &#x27;#!/bin/sh&#x27; &gt; /usr/sbin/policy-rc.d \<br>&amp;&amp; echo &#x27;exit 101&#x27; &gt;&gt; /usr/sbin/policy-rc.d \<br>&amp;&amp; chmod +x /usr/sbin/policy-rc.d \<br>&amp;&amp; dpkg-divert --local --rename --add /sbin/initctl \<br>&amp;&amp; cp -a /usr/sbin/policy-rc.d /sbin/initctl \<br>&amp;&amp; sed -i &#x27;s/^exit.*/exit 0/&#x27; /sbin/initctl \<br>&amp;&amp; echo &#x27;force-unsafe-io&#x27; &gt; /etc/dpkg/dpkg.cfg.d/docker-apt-speedup \<br>&amp;&amp; echo &#x27;DPkg::Post-Invoke &#123; &quot;rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true&quot;; &#125;;&#x27; &gt; /etc/apt/apt.conf.d/docker-clean \<br>&amp;&amp; echo &#x27;APT::Update::Post-Invoke &#123; &quot;rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true&quot;; &#125;;&#x27; &gt;&gt; /etc/apt/apt.conf.d/docker-clean \<br>&amp;&amp; echo &#x27;Dir::Cache::pkgcache &quot;&quot;; Dir::Cache::srcpkgcache &quot;&quot;;&#x27; &gt;&gt; /etc/apt/apt.conf.d/docker-clean \<br>&amp;&amp; echo &#x27;Acquire::Languages &quot;none&quot;;&#x27; &gt; /etc/apt/apt.conf.d/docker-no-languages \<br>&amp;&amp; echo &#x27;Acquire::GzipIndexes &quot;true&quot;; Acquire::CompressionTypes::Order:: &quot;gz&quot;;&#x27; &gt; /etc/apt/apt.conf.d/docker-gzip-indexes \<br>&amp;&amp; echo &#x27;Apt::AutoRemove::SuggestsImportant &quot;false&quot;;&#x27; &gt; /etc/apt/apt.conf.d/docker-autoremove-suggests<br>RUN [ -z &quot;$(apt-get indextargets)&quot; ]<br>RUN mkdir -p /run/systemd &amp;&amp; echo &#x27;docker&#x27; &gt; /run/systemd/container<br><br>CMD [&quot;/bin/bash&quot;]<br></code></pre></td></tr></table></figure><h3 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h3><p>可见参考如下博客：<a href="https://www.cnblogs.com/nuccch/p/10828666.html">https://www.cnblogs.com/nuccch/p/10828666.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker history [image]             # 查看某个镜像构建的所有历史过程，很像git log<br></code></pre></td></tr></table></figure><p>CMD命令和ENTRYPOINT的区别：</p><p>CMD只会执行最后一条CMD命令，且docker run的参数会覆盖CMD中的参数；</p><p>ENTRYPOINT所有命令都会执行，且docker run的参数会追加到ENTRYPOINT命令后面。</p><h2 id="七、docker网络"><a href="#七、docker网络" class="headerlink" title="七、docker网络"></a>七、docker网络</h2><h3 id="docker网络基础"><a href="#docker网络基础" class="headerlink" title="docker网络基础"></a>docker网络基础</h3><p>docker网络和vmware虚拟机的网络相似，docker默认使用网桥虚拟网络。</p><p>docker容器与宿主机之间、docker容器之间都是通过docker0这个路由器来通信的。</p><p>docker网络模型如下：</p><p><img src="/images/docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1.png"></p><p><img src="/images/docker%E5%AE%B9%E5%99%A8%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1.png"></p><h3 id="docker网络命令"><a href="#docker网络命令" class="headerlink" title="docker网络命令"></a>docker网络命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network COMMAND<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 列举所有网络</span><br>docker network ls<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看某个网络详情</span><br>docker network inspect [network_id]<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建一个自定义网络</span><br>docker network create<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看linex的端口映射/转发</span><br>iptables -t nat -L -n<br></code></pre></td></tr></table></figure><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><blockquote><p>问题：在微服务中，通过是通过服务名称访问服务的，如果一个mysql服务挂了，重启一个mysql的docker服务后，ip地址就可能换了，因此如果可以通过docker的名称就能访问到docker服务就好了。</p></blockquote><p>–link可以解决，但不推荐。推荐使用自定义网络。</p><h4 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h4><ul><li>bridge：桥接（docker默认）</li><li>none：不使用网络</li><li>host：主机模式，和宿主机共享网络</li><li>container：容器网络连通（用的少）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 直接启动容器时，其实会有一个默认参数--net bridge如下，即使用docker默认的桥接网络</span><br>docker run -d -P --name tomcat01 --net bridge tomcat<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建一个自定义网络</span><br><span class="hljs-meta">#</span><span class="bash"> --driver：网络模式</span><br><span class="hljs-meta">#</span><span class="bash"> --subnet：子网范围</span><br><span class="hljs-meta">#</span><span class="bash"> 192.168.0.0/16可用的子网为192.168.0.2-192.168.255.255</span><br><span class="hljs-meta">#</span><span class="bash"> 192.168.0.0/24可用的子网为192.168.0.2-192.168.0.255</span><br><span class="hljs-meta">#</span><span class="bash"> --gateway：网关地址，所有子网和网络中其他地址通信都要通过该地址来路由</span><br>docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看网络</span><br>docker network ls<br><span class="hljs-meta">#</span><span class="bash"> NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="hljs-meta">#</span><span class="bash"> 40b40bd10d88   bridge    bridge    <span class="hljs-built_in">local</span></span><br><span class="hljs-meta">#</span><span class="bash"> c76560fbd32a   host      host      <span class="hljs-built_in">local</span></span><br><span class="hljs-meta">#</span><span class="bash"> b7176c250a27   mynet     bridge    <span class="hljs-built_in">local</span> <span class="hljs-comment"># 这个就是我们新建的自定义网络</span></span><br><span class="hljs-meta">#</span><span class="bash"> 9cdc4457c126   none      null      <span class="hljs-built_in">local</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将tomcat放在我们自己的网络中</span><br>docker run -d -P --name tomcat01 --net mynet tomcat<br></code></pre></td></tr></table></figure><p><font color="Red">注意：使用自定义网络就可以直接使用容器名字ping通其他容器，不需要配置任何其他东西。而docker自带的网络docker0卻不具备这样的功能。</font></p><p>构建自定义网络还一个好处就是，可以把不同的服务集群部署在不同的网络下，保证了集群是安全的健康的。</p><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><blockquote><p>两个不同网络之间的容器如何ping通？即一个容器使用docker0，另一个容器使用我们创建的自定义网络。都不在同一个网段下，无法通过各自的网关ping通，那这个如何做到呢？</p></blockquote><p>docker提供了一个方法，可以将容器连接到一个网络。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将一个容器连接到另一个网络下</span><br>docker network connect [OPTIONS] NETWORK CONTAINER<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用docker0创建一个容器</span><br>docker run -d -P --name tomcat-default-01 tomcat<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将tomcat-default-01容器和mynet网络打通</span><br>docker network connect mynet tomcat-default-01 # 命令结束后什么事情都没发生<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看mynet网络详情，会发现是直接把这个容器又挂在了mynet网络下</span><br>docker network inspect b7176c250a27<br>&quot;Containers&quot;: &#123;<br>     &quot;349c6846987344c00f2bd138698ceca3651a41add5456aebe6a2b8727955d7f8&quot;: &#123;<br>         &quot;Name&quot;: &quot;tomcat-default-01&quot;,<br>         &quot;EndpointID&quot;: &quot;fda6d449a211b053e084898d0e0b53008b0dc9e0735d18f29e1f7a59a2a4ae2b&quot;,<br>         &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,<br>         &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,<br>         &quot;IPv6Address&quot;: &quot;&quot;<br>     &#125;,<br>     &quot;fca88679607e20464de21c5fe0599e40fe221e534df766a4df27efd99ab66f6b&quot;: &#123;<br>         &quot;Name&quot;: &quot;tomcat01&quot;,<br>         &quot;EndpointID&quot;: &quot;c06c4eb1d7f29ed4ca8cc10a7ca79c2e3b993d787fc7e993e0baf026e7dfbace&quot;,<br>         &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,<br>         &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,<br>         &quot;IPv6Address&quot;: &quot;&quot;<br>     &#125;<br>&#125;,<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看tomcat-default-01容器详情，会发现它有两个网络</span><br>docker inspect tomcat-default-01<br>&quot;Networks&quot;: &#123;<br>    &quot;bridge&quot;: &#123;<br>        &quot;IPAMConfig&quot;: null,<br>        &quot;Links&quot;: null,<br>        &quot;Aliases&quot;: null,<br>        &quot;NetworkID&quot;: &quot;40b40bd10d8870bf241428acac690dcdda5e6a47a80f924da1027eecf84bf28d&quot;,<br>        &quot;EndpointID&quot;: &quot;ac4f9011bdc4a67fc3b1ce34b37687dc7ff7c38a5ab8f92467d1f69aa9c1b9e8&quot;,<br>        &quot;Gateway&quot;: &quot;172.17.0.1&quot;,<br>        &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,<br>        &quot;IPPrefixLen&quot;: 16,<br>        &quot;IPv6Gateway&quot;: &quot;&quot;,<br>        &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>        &quot;GlobalIPv6PrefixLen&quot;: 0,<br>        &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,<br>        &quot;DriverOpts&quot;: null<br>    &#125;,<br>    &quot;mynet&quot;: &#123;<br>        &quot;IPAMConfig&quot;: &#123;&#125;,<br>        &quot;Links&quot;: null,<br>        &quot;Aliases&quot;: [<br>            &quot;349c68469873&quot;<br>        ],<br>        &quot;NetworkID&quot;: &quot;b7176c250a272ee1db707007378b611d507fd92c46f7ef1f4e5049ae817019ad&quot;,<br>        &quot;EndpointID&quot;: &quot;fda6d449a211b053e084898d0e0b53008b0dc9e0735d18f29e1f7a59a2a4ae2b&quot;,<br>        &quot;Gateway&quot;: &quot;192.168.0.1&quot;,<br>        &quot;IPAddress&quot;: &quot;192.168.0.3&quot;,<br>        &quot;IPPrefixLen&quot;: 16,<br>        &quot;IPv6Gateway&quot;: &quot;&quot;,<br>        &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>        &quot;GlobalIPv6PrefixLen&quot;: 0,<br>        &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,<br>        &quot;DriverOpts&quot;: &#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">这种方式即是一个容器两个ip</font></p><p><img src="/images/docker%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%A1.png"></p><h2 id="八、实战：部署一个redis集群"><a href="#八、实战：部署一个redis集群" class="headerlink" title="八、实战：部署一个redis集群"></a>八、实战：部署一个redis集群</h2><p>需要部署的redis集群模型如下：</p><p><img src="/images/docker%E9%83%A8%E7%BD%B2redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%9E%8B.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 先建一个redis集群网络</span><br>docker network create --subnet 172.38.0.0/16 redis<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 通过脚本创建六个redis配置文件</span><br>for port in $(seq 1 6); \<br>do \<br>mkdir -p /home/yuyr757/Documents/redis/node-$&#123;port&#125;/conf<br>touch /home/yuyr757/Documents/redis/node-$&#123;port&#125;/conf/redis.conf<br>cat &lt;&lt; EOF &gt;/home/yuyr757/Documents/redis/node-$&#123;port&#125;/conf/redis.conf<br>port 6379<br>bind 0.0.0.0<br>cluster-enabled yes<br>cluster-config-file yes<br>cluster-node-timeout 5000<br>cluster-announce-ip 172.38.0.1$&#123;port&#125;<br>cluster-announce-port 6379<br>cluster-announce-bus-port 16379<br>appendonly yes<br>EOF<br>done<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动redis</span><br>for port in $(seq 1 6); \<br>do \<br>docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \<br>-v /home/yuyr757/Documents/redis/node-$&#123;port&#125;/data:/data \<br>-v /home/yuyr757/Documents/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis --ip 172.38.0.1$&#123;port&#125; redis redis-server /etc/redis/redis.conf; \<br>done<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入redis-1</span><br>docker exec -it redis-1 /bin/bash<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建集群</span><br>redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1<br><span class="hljs-meta">#</span><span class="bash"> 以下是输出消息：</span><br>&lt;&lt;&#x27;COMMENT&#x27;<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...</span><br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 172.38.0.15:6379 to 172.38.0.11:6379<br>Adding replica 172.38.0.16:6379 to 172.38.0.12:6379<br>Adding replica 172.38.0.14:6379 to 172.38.0.13:6379<br>M: 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379<br>   slots:[0-5460] (5461 slots) master<br>M: 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379<br>   slots:[5461-10922] (5462 slots) master<br>M: a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379<br>   slots:[10923-16383] (5461 slots) master<br>S: 476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379<br>   replicates a3b25de9426dd1d4143870a08740b481f0a2560f<br>S: c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379<br>   replicates 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee<br>S: 20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379<br>   replicates 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9<br>Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br>Waiting for the cluster to join<br>...<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span><br>M: 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>M: a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379<br>   slots:[10923-16383] (5461 slots) master<br>   1 additional replica(s)<br>M: 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379<br>   slots:[5461-10922] (5462 slots) master<br>   1 additional replica(s)<br>S: 476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379<br>   slots: (0 slots) slave<br>   replicates a3b25de9426dd1d4143870a08740b481f0a2560f<br>S: c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379<br>   slots: (0 slots) slave<br>   replicates 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee<br>S: 20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379<br>   slots: (0 slots) slave<br>   replicates 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br>COMMENT<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入redis-1</span><br>docker exec -it redis-1 /bin/bash<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入redis集群客户端</span><br>redis-cli -c<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看redis集群信息</span><br>127.0.0.1:6379&gt; cluster info<br>&lt;&lt;&#x27;COMMENT&#x27;<br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:6<br>cluster_size:3<br>cluster_current_epoch:6<br>cluster_my_epoch:1<br>cluster_stats_messages_ping_sent:107<br>cluster_stats_messages_pong_sent:105<br>cluster_stats_messages_sent:212<br>cluster_stats_messages_ping_received:100<br>cluster_stats_messages_pong_received:107<br>cluster_stats_messages_meet_received:5<br>cluster_stats_messages_received:212<br>COMMENT<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看集群中的结点</span><br>127.0.0.1:6379&gt; cluster nodes<br>&lt;&lt;&#x27;COMMENT&#x27;<br>a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379@16379 master - 0 1610196549828 3 connected 10923-16383<br>52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379@16379 master - 0 1610196549324 2 connected 5461-10922<br>476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379@16379 slave a3b25de9426dd1d4143870a08740b481f0a2560f 0 1610196550000 3 connected<br>4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379@16379 myself,master - 0 1610196548000 1 connected 0-5460<br>c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379@16379 slave 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 0 1610196551341 1 connected<br>20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379@16379 slave 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 0 1610196550332 2 connected<br>COMMENT<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 测试redis</span><br>127.0.0.1:6379&gt; set a b<br><span class="hljs-meta">-&gt;</span><span class="bash"> Redirected to slot [15495] located at 172.38.0.13:6379</span><br>OK<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 停止redis-3</span><br>docker stop redis-3<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 在redis-1服务器上请求redis，在14服务器上相应了</span><br>127.0.0.1:6379&gt; get a<br><span class="hljs-meta">-&gt;</span><span class="bash"> Redirected to slot [15495] located at 172.38.0.14:6379</span><br>&quot;b&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看redis集群的结点信息，发现172.38.0.13已经fail了，本来作为从服务器的14服务器已经变成主服务器了。</span><br>172.38.0.14:6379&gt; cluster nodes<br>&lt;&lt;&#x27;COMMENT&#x27;<br>476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379@16379 myself,master - 0 1610197181000 7 connected 10923-16383<br>4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379@16379 master - 0 1610197183456 1 connected 0-5460<br>c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379@16379 slave 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 0 1610197182445 1 connected<br>52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379@16379 master - 0 1610197183000 2 connected 5461-10922<br>a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379@16379 master,fail - 1610197047513 1610197045000 3 connected<br>20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379@16379 slave 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 0 1610197183052 2 connected<br>COMMENT<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 再次启动redis-3</span><br>docker start redis-3<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 再次查看redis集群结点，发现redis-3服务器已经变从服务器了。</span><br>127.0.0.1:6379&gt; cluster nodes<br>52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379@16379 master - 0 1610197501795 2 connected 5461-10922<br>a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379@16379 myself,slave 476e79e895cc6eecbb36634273031afdd737c534 0 1610197500000 7 connected<br>c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379@16379 slave 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 0 1610197500785 1 connected<br>476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379@16379 master - 0 1610197500000 7 connected 10923-16383<br>4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379@16379 master - 0 1610197500000 1 connected 0-5460<br>20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379@16379 slave 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 0 1610197500583 2 connected<br></code></pre></td></tr></table></figure><h2 id="九、实战：部署一个wordpress博客"><a href="#九、实战：部署一个wordpress博客" class="headerlink" title="九、实战：部署一个wordpress博客"></a>九、实战：部署一个wordpress博客</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network create --driver bridge --subnet 192.0.0.0/16 --gateway 192.0.0.1 wordpressnetwork<br><br>docker run -d -P -e MYSQL_ROOT_PASSWORD=root --name mysql-for-wordpress -v /home/wordpress/mysql/data:/var/lib/mysql -v /home/wordpress/mysql/conf:/etc/mysql/conf.d --network wordpressnetwork mysql<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入数据库容器，建一个数据库用于wordpress用，名称为wordpress。</span><br>docker exec -it mysql-for-wordpress /bin/bash<br>mysql -u root -proot<br>create table wordpress;<br>exit;<br><br>docker run -d -P --name wordpress -v /home/wordpress/wordpress:/usr/share/wordpress --network wordpressnetwork wordpress<br><span class="hljs-meta">#</span><span class="bash"> 这一步可以直接加以下等参数，也可以在前台进入wordpress时设置</span><br><span class="hljs-meta">#</span><span class="bash"> -e WORDPRESS_DB_HOST=mysql-for-wordpress</span><br><span class="hljs-meta">#</span><span class="bash"> -e WORDPRESS_DB_USER=root</span><br><span class="hljs-meta">#</span><span class="bash"> -e WORDPRESS_DB_PASSWORD=root</span><br><span class="hljs-meta">#</span><span class="bash"> -e WORDPRESS_DB_NAME=wordpress</span><br><span class="hljs-meta">#</span><span class="bash"> -e WORDPRESS_TABLE_PREFIX=wp_</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL查询执行计划详解-explain</title>
    <link href="/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/"/>
    <url>/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>本文来自<a href="https://dev.mysql.com/doc/refman/8.0/en/using-explain.html">官方文档</a></p><p>explain用于解释优化器在执行select、update、delete、insert、replace语句时的执行计划，即它解释了MySQL如何处理SQL语句，包括表如何连接、表的连接顺序、用了哪些索引等。（replace是MySQL对于标准SQL语句的扩展，其他数据库可能没有，replace的使用见<a href="https://dev.mysql.com/doc/refman/8.0/en/replace.html">这里</a>）</p><p>本文使用的表结构和数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE test;<br><br>CREATE TABLE trb1 (<br>    id int auto_increment primary key,<br>    name varchar(50),<br>    purchased date<br>)<br>PARTITION BY RANGE (ID) (<br>    PARTITION p0 VALUES LESS THAN (3),<br>    PARTITION P1 VALUES LESS THAN (7),<br>    PARTITION P2 VALUES LESS THAN (9),<br>    PARTITION P3 VALUES LESS THAN (11)<br>);<br><br>INSERT INTO trb1 VALUES<br>(1, &#x27;desk organiser&#x27;, &#x27;2003-10-15&#x27;),<br>(2, &#x27;CD player&#x27;, &#x27;1993-11-05&#x27;),<br>(3, &#x27;TV set&#x27;, &#x27;1996-03-10&#x27;),<br>(4, &#x27;bookcase&#x27;, &#x27;1982-01-10&#x27;),<br>(5, &#x27;exercise bike&#x27;, &#x27;2004-05-09&#x27;),<br>(6, &#x27;sofa&#x27;, &#x27;1987-06-05&#x27;),<br>(7, &#x27;popcorn maker&#x27;, &#x27;2001-11-22&#x27;),<br>(8, &#x27;aquarium&#x27;, &#x27;1992-08-04&#x27;),<br>(9, &#x27;study desk&#x27;, &#x27;1984-09-16&#x27;),<br>(10, &#x27;lava lamp&#x27;, &#x27;1998-12-25&#x27;);<br><br>create table trb2(<br>    id2 int auto_increment primary key,<br>    id int<br>);<br><br>insert into trb2(id) values(3), (3), (4);<br><br>create table trb3(<br>    id3 int,<br>    name varchar(50),<br>    purchased date,<br>    primary key(id3, name),<br>    index trb3_index1(name, purchased)<br>);<br><br>insert into trb3 values<br>(1, &#x27;desk organiser&#x27;, &#x27;2003-10-15&#x27;),<br>(2, &#x27;CD player&#x27;, &#x27;1993-11-05&#x27;),<br>(3, &#x27;TV set&#x27;, &#x27;1996-03-10&#x27;),<br>(4, &#x27;bookcase&#x27;, &#x27;1982-01-10&#x27;),<br>(5, &#x27;exercise bike&#x27;, &#x27;2004-05-09&#x27;),<br>(6, &#x27;sofa&#x27;, &#x27;1987-06-05&#x27;),<br>(7, &#x27;popcorn maker&#x27;, &#x27;2001-11-22&#x27;),<br>(8, &#x27;aquarium&#x27;, &#x27;1992-08-04&#x27;),<br>(9, &#x27;study desk&#x27;, &#x27;1984-09-16&#x27;),<br>(10, &#x27;lava lamp&#x27;, &#x27;1998-12-25&#x27;);<br></code></pre></td></tr></table></figure><p><strong>文章目录：</strong></p><p>[toc]</p><h2 id="二、explain输出格式解释"><a href="#二、explain输出格式解释" class="headerlink" title="二、explain输出格式解释"></a>二、explain输出格式解释</h2><p>EXPLAIN为SELECT语句中使用的每个表返回一行信息，按照MySQL在处理语句时读取它们的顺序列示。explain的输出列如下。</p><table><thead><tr><th>Column</th><th>JSON Name</th><th>Meaning</th></tr></thead><tbody><tr><td>id</td><td>select_id</td><td>查询的唯一标识，</td></tr><tr><td>select_type</td><td>None</td><td>select类型</td></tr><tr><td>table</td><td>table_name</td><td>表名，如设置了别名（alias）则展示别名</td></tr><tr><td>partitions</td><td>partitions</td><td>查询计划匹配到的分区</td></tr><tr><td>type</td><td>access_type</td><td>连接类型</td></tr><tr><td>possible_keys</td><td>possible_keys</td><td>可能使用的索引</td></tr><tr><td>key</td><td>key</td><td>实际使用的索引</td></tr><tr><td>key_len</td><td>key_length</td><td>实际使用的索引的<font color="Blue">字节长度</font></td></tr><tr><td>ref</td><td>ref</td><td>与索引比较的列</td></tr><tr><td>rows</td><td>rows</td><td>估计要检查的行数量</td></tr><tr><td>filtered</td><td>filtered</td><td>按表条件过滤的行百分比</td></tr><tr><td>Extra</td><td>None</td><td>额外信息</td></tr></tbody></table><h3 id="1、id"><a href="#1、id" class="headerlink" title="1、id"></a>1、id</h3><p>MySQL会给每一个查询分配一个id，归属同一个查询的行则该标识相同，不同的查询按序号顺序列示。<font color="Blue">注意并不是每有一个select就会有一个独立的id</font>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb1 t1 where exists(select 1 from trb2 t2 where t2.id = t1.id); -- id相同<br>+----+-------------+-------+-------------+------+---------------+------+---------+------+------+----------+-------------------------------------------------------------------+<br>| id | select_type | table | partitions  | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra<br>                            |<br>+----+-------------+-------+-------------+------+---------------+------+---------+------+------+----------+-------------------------------------------------------------------+<br>|  1 | SIMPLE      | t2    | NULL        | ALL  | NULL          | NULL | NULL    | NULL |    3 |   100.00 | Start temporary<br>                            |<br>|  1 | SIMPLE      | t1    | p0,p1,p2,p3 | ALL  | NULL          | NULL | NULL    | NULL |   10 |    10.00 | Using where; End temporary; Using join buffer (Block Nested Loop) |<br>+----+-------------+-------+-------------+------+---------------+------+---------+------+------+----------+-------------------------------------------------------------------+<br>2 rows in set, 2 warnings (0.00 sec)<br><br>mysql&gt; explain select t1.*, (select t2.id2 from trb2 t2 where t2.id = t1.id limit 1) as id2 from trb1 t1; -- id不同<br>+----+--------------------+-------+-------------+------+---------------+------+---------+------+------+----------+-------------+<br>| id | select_type        | table | partitions  | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |<br>+----+--------------------+-------+-------------+------+---------------+------+---------+------+------+----------+-------------+<br>|  1 | PRIMARY            | t1    | p0,p1,p2,p3 | ALL  | NULL          | NULL | NULL    | NULL |   10 |   100.00 | NULL        |<br>|  2 | DEPENDENT SUBQUERY | t2    | NULL        | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where |<br>+----+--------------------+-------+-------------+------+---------------+------+---------+------+------+----------+-------------+<br>2 rows in set, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="2、select-type"><a href="#2、select-type" class="headerlink" title="2、select_type"></a>2、select_type</h3><table><thead><tr><th>select_type Value</th><th>JSON Name</th><th>Meaning</th></tr></thead><tbody><tr><td>SIMPLE</td><td>None</td><td>简单的select语句，没使用union或子查询</td></tr><tr><td>PRIMARY</td><td>None</td><td>最外层的select语句</td></tr><tr><td>UNION</td><td>None</td><td>union中的第二个或更后面的select语句</td></tr><tr><td>DEPENDENT UNION</td><td>dependent (true)</td><td>union中的第二个或更后面的select语句，依赖于外部查询（不理解）</td></tr><tr><td>UNION RESULT</td><td>union_result</td><td>union的结果，把union查询当作一个临时表的结果</td></tr><tr><td>SUBQUERY</td><td>None</td><td>子查询的第一个select语句</td></tr><tr><td>DEPENDENT SUBQUERY</td><td>dependent (true)</td><td>子查询的第一个select语句，依赖于外部查询</td></tr><tr><td>DERIVED</td><td>None</td><td>派生表，临时表</td></tr><tr><td>DEPENDENT DERIVED</td><td>dependent (true)</td><td>依赖于另外一个表的临时表</td></tr><tr><td>MATERIALIZED</td><td>materialized_from_subquery</td><td>物化子查询</td></tr><tr><td>UNCACHEABLE SUBQUERY</td><td>cacheable (false)</td><td>一个无法缓存的子查询，外部查询的每一行都要重新执行子查询</td></tr><tr><td>UNCACHEABLE UNION</td><td>cacheable (false)</td><td>属于一个uncacheable subquery的union查询的第二个或更后面的查询</td></tr></tbody></table><p>看下面这个查询。</p><p>id为1的是外部主查询，表名是<derived3>，即id为3的derived类型的表，即别名为b的表，explain中没把b展示出来。id为2的是一个临时表，其表名为table1，可能是因为使用了union，展示的union中的第一个表名。</derived3></p><p>id为4的是一个uncacheable union，即无法被缓存的子查询，且存在于一个union中，处于union的第二个或更后面的位置。<font color="Blue">因为order by rand()，每次都要重新执行这次查询才能获取结果，因此无法被缓存。</font></p><p>id为NULL的是一个union结果，表名为&lt;union3,4&gt;，即union了id为3和4两张表的结果。</p><p>id为2的是一个UNCACHEABLE SUBQUERY，解释如id为4的一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN select b.*, (SELECT table3.id as c from trb1 table3 order by rand() limit 1) AS c FROM ( (select table1.id as a from trb1 table1 order by rand() LIMIT 1) UNION (select table2.id as a from trb1 table2 order by rand() LIMIT 1) ) as b;<br>+----+----------------------+------------+-------------+------+---------------+------+---------+------+------+----------+---------------------------------+<br>| id | select_type          | table      | partitions  | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra<br>    |<br>+----+----------------------+------------+-------------+------+---------------+------+---------+------+------+----------+---------------------------------+<br>|  1 | PRIMARY              | &lt;derived3&gt; | NULL        | ALL  | NULL          | NULL | NULL    | NULL |    2 |   100.00 | NULL<br>    |<br>|  3 | DERIVED              | table1     | p0,p1,p2,p3 | ALL  | NULL          | NULL | NULL    | NULL |   10 |   100.00 | Using temporary; Using filesort |<br>|  4 | UNCACHEABLE UNION    | table2     | p0,p1,p2,p3 | ALL  | NULL          | NULL | NULL    | NULL |   10 |   100.00 | Using temporary; Using filesort |<br>| NULL | UNION RESULT         | &lt;union3,4&gt; | NULL        | ALL  | NULL          | NULL | NULL    | NULL | NULL |     NULL | Using temporary<br>      |<br>|  2 | UNCACHEABLE SUBQUERY | table3     | p0,p1,p2,p3 | ALL  | NULL          | NULL | NULL    | NULL |   10 |   100.00 | Using temporary; Using filesort |<br>+----+----------------------+------------+-------------+------+---------------+------+---------+------+------+----------+---------------------------------+<br>5 rows in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p><font color="Blue">当子查询中依赖外部表来获取结果时，就会有一个dependent，如下。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select t1.*, (select t2.id2 from trb2 t2 where t2.id = t1.id limit 1) as id2 from trb1 t1;<br>+----+--------------------+-------+-------------+------+---------------+------+---------+------+------+----------+-------------+<br>| id | select_type        | table | partitions  | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |<br>+----+--------------------+-------+-------------+------+---------------+------+---------+------+------+----------+-------------+<br>|  1 | PRIMARY            | t1    | p0,p1,p2,p3 | ALL  | NULL          | NULL | NULL    | NULL |   10 |   100.00 | NULL        |<br>|  2 | DEPENDENT SUBQUERY | t2    | NULL        | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where |<br>+----+--------------------+-------+-------------+------+---------------+------+---------+------+------+----------+-------------+<br>2 rows in set, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><p><font color="Blue">DEPENDENT SUBQUERY评估与UNCACHEABLE SUBQUERY评估不同</font>：对于DEPENDENT SUBQUERY，子查询仅针对其外部上下文中变量的<strong>每组不同值</strong>重新评估一次。对于UNCACHEABLE SUBQUERY，将为外部上下文的<strong>每一行</strong>重新评估子查询。即DEPENDENT SUBQUERY是有一部分缓存的。</p><h3 id="3、table"><a href="#3、table" class="headerlink" title="3、table"></a>3、table</h3><p>table指的是表名或别名，或其他形式名称。（&lt;DERIVED**N**&gt;，&lt;UNION**M**,**N**&gt;，&lt;subquery**N**&gt;，加粗字母均为表对应的id。具体见上面的分析）</p><h3 id="4、partition"><a href="#4、partition" class="headerlink" title="4、partition"></a>4、partition</h3><p>partition指的是该查询所使用到的表分区。关于表分区的解释见<a href="https://dev.mysql.com/doc/refman/8.0/en/partitioning-info.html">官方文档</a>。如上面那个trb1表使用了所有的分区，又如下面这个查询只用到了p0、p1分区。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb1 where id &lt; 5;<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+<br>| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+<br>|  1 | SIMPLE      | trb1  | p0,p1      | ALL  | NULL          | NULL | NULL    | NULL |    6 |    33.33 | Using where |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="5、type"><a href="#5、type" class="headerlink" title="5、type"></a><font color="Red">5、type</font></h3><p>type指的是join type，即表之间是如何连接的。下面从最优到最差的方式排序列出了各种连接方式。</p><ul><li><p>system：指表中只有一条记录，且符合const类型的查询。是一种特殊const类型。</p></li><li><p>const：指通过primary key或unique查询出来的数据，最多只有一条记录匹配。</p></li><li><p>eq_ref：指该表通过完整的primary key或uniqeu not null去和其他表相应字段连接时，则该表的join type为qe_ref，另外一张表的join type根据另外一张表的key去判断。这种情况下可以保证最多只能匹配出一条记录。如下，trb1表是eq_ref，而trb2表的join type是ALL，全表扫描。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb1, trb2 where trb1.id = trb2.id;<br>+----+-------------+-------+-------------+--------+---------------+---------+---------+--------------+------+----------+-------------+<br>| id | select_type | table | partitions  | type   | possible_keys | key     | key_len | ref          | rows | filtered | Extra       |<br>+----+-------------+-------+-------------+--------+---------------+---------+---------+--------------+------+----------+-------------+<br>|  1 | SIMPLE      | trb2  | NULL        | ALL    | NULL          | NULL    | NULL    | NULL         |    3 |   100.00 | Using where |<br>|  1 | SIMPLE      | trb1  | p0,P1,P2,P3 | eq_ref | PRIMARY       | PRIMARY | 4       | test.trb2.id |    1 |   100.00 | NULL        |<br>+----+-------------+-------+-------------+--------+---------------+---------+---------+--------------+------+----------+-------------+<br>2 rows in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>ref：指该表通过某个索引的<font color="Blue">最左前缀</font>的部分或完整字段或<font color="Blue">多字段主键中满足<font color="Blue">最左前缀</font>的部分字段</font>去和其他表字段连接时，则该表的join type为ref。这种情况下无法保证匹配出最多一条记录。如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb3 where id3 = 1;<br>+----+-------------+-------+------------+------+---------------+---------+---------+-------+------+----------+-------+<br>| id | select_type | table | partitions | type | possible_keys | key     | key_len | ref   | rows | filtered | Extra |<br>+----+-------------+-------+------------+------+---------------+---------+---------+-------+------+----------+-------+<br>|  1 | SIMPLE      | trb3  | NULL       | ref  | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL  |<br>+----+-------------+-------+------------+------+---------------+---------+---------+-------+------+----------+-------+<br>1 row in set, 1 warning (0.00 sec)<br><br>mysql&gt; explain select t3.*, t2.id2 from trb3 t3, trb2 t2 where t3.id3 = t2.id2;<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------------+------+----------+-------------+<br>| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref         | rows | filtered | Extra       |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------------+------+----------+-------------+<br>|  1 | SIMPLE      | t2    | NULL       | index | PRIMARY       | PRIMARY | 4       | NULL        |    3 |   100.00 | Using index |<br>|  1 | SIMPLE      | t3    | NULL       | ref   | PRIMARY       | PRIMARY | 4       | test.t2.id2 |    1 |   100.00 | NULL        |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------------+------+----------+-------------+<br>2 rows in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li><p>fulltext：使用全文索引。大多业务使用较少，除非那种需要检索大量文本的业务。全文索引仅排在ref后面，说明全文索引的效率很高。<br>全文索引大概意思就是专门用于文本查询的一个索引，只能构建在char、varchar、text类型上，通过全文索引的查询有自己特殊的语法（match(index_column) again(‘xxxx’)），全文索引的检索有最小搜索长度和最大搜索长度限制（当然可以通过修改my.ini修改配置），表的行数量条件要求，以及各种殷勤和版本限制等。关于全文索引的具体介绍见<a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-fulltext-index.html">官方文档</a>。</p></li><li><p>ref_or_null：即在ref情况下，使用索引的后面一个或多个字段使用is null来匹配，如下。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM ref_table<br>  WHERE key_column=expr OR key_column IS NULL;<br></code></pre></td></tr></table></figure><ul><li>index_merge：索引合并。索引合并大概意思就是查询使用了多个索引并且可以合并这些索引以查询数据。具体见<a href="https://dev.mysql.com/doc/refman/8.0/en/index-merge-optimization.html">官方文档</a>。如下就是一个索引合并。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb3 where id3 = 1 or name = &#x27;CD player&#x27;;<br>+----+-------------+-------+------------+-------------+---------------------+---------------------+---------+------+------+----------+----------------------------------------------------+<br>| id | select_type | table | partitions | type        | possible_keys       | key                 | key_len | ref  | rows | filtered | Extra<br>                                    |<br>+----+-------------+-------+------------+-------------+---------------------+---------------------+---------+------+------+----------+----------------------------------------------------+<br>|  1 | SIMPLE      | trb3  | NULL       | index_merge | PRIMARY,trb3_index1 | trb3_index1,PRIMARY | 202,4   | NULL |    2 |   100.00 | Using sort_union(trb3_index1,PRIMARY); Using where |<br>+----+-------------+-------+------------+-------------+---------------------+---------------------+---------+------+------+----------+----------------------------------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>unique_subquery：官方文档说是这种是在IN子查询中使用索引覆盖，以提高效率，如下，但是本人实际测试中并未使用这种join type。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">value IN (SELECT primary_key FROM single_table WHERE some_expr)<br></code></pre></td></tr></table></figure><ul><li>index_subquery：和上一个相似，区别是不用primary_key，而是使用普通的索引。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">value IN (SELECT key_column FROM single_table WHERE some_expr)<br></code></pre></td></tr></table></figure><ul><li>range：索引被用作范围查询时可能使用range类型，有以下几点值得注意：<ul><li>join type为range时，key_len为使用的索引的最大长度</li><li>join type为range时，ref字段为NULL</li><li>=, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, LIKE, or IN() 都可能会使用range</li><li>索引用作范围查询时并不一定使用range，也可能使用其他，优化器会根据实际情况选择。如下第一个SQL即使用了index。</li><li>range也要满足<font color="Blue">最左前缀</font>原则，不满足则可能使用其他类型，如下方代码块中的最后一个SQL。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb3 where name &gt; &#x27;aa&#x27;;<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra                    |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>|  1 | SIMPLE      | trb3  | NULL       | index | trb3_index1   | trb3_index1 | 206     | NULL |   10 |   100.00 | Using where; Using index |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>1 row in set, 1 warning (0.00 sec)<br><br>mysql&gt; explain select * from trb3 where name &gt; &#x27;sofa&#x27;;<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra                    |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>|  1 | SIMPLE      | trb3  | NULL       | range | trb3_index1   | trb3_index1 | 202     | NULL |    2 |   100.00 | Using where; Using index |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>1 row in set, 1 warning (0.00 sec)<br><br>mysql&gt; explain select * from trb3 where name &gt; &#x27;sofa&#x27; and purchased &lt; &#x27;2020-01-01&#x27;;<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra                    |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>|  1 | SIMPLE      | trb3  | NULL       | range | trb3_index1   | trb3_index1 | 202     | NULL |    2 |    33.33 | Using where; Using index |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>1 row in set, 1 warning (0.00 sec)<br><br>mysql&gt; explain select * from trb3 where purchased &lt; &#x27;2020-01-01&#x27;;<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra                    |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>|  1 | SIMPLE      | trb3  | NULL       | index | trb3_index1   | trb3_index1 | 206     | NULL |   10 |    33.33 | Using where; Using index |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>index：虽然使用了索引中的字段进行查询，但是不满足最左前缀原则，则MySQL会在索引树中全树扫描，这就是index，如上面代码块中的第一个SQL和最后一个SQL。最后一个SQL使用index好理解，第一个SQL使用index个人认为是优化器发现索引树中的最小值 &gt; 查询条件’aa’，因此name &gt; ‘aa’就等于全树扫描，所以为index。如下当条件为name &gt; ‘ar’时，就使用了range，且任何条件大于索引树中的最小值的查询，都会使用range，而小于则全树扫描。<br>index的效率比ALL高一点点，毕竟扫描全树的IO事件比扫描全表的IO事件更少。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb3 where name &gt; &#x27;ar&#x27;;<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra                    |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>|  1 | SIMPLE      | trb3  | NULL       | range | trb3_index1   | trb3_index1 | 202     | NULL |    9 |   100.00 | Using where; Using index |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>ALL：全表扫描，未走任何索引，效率最低。</li></ul><h3 id="6、possible-key"><a href="#6、possible-key" class="headerlink" title="6、possible key"></a>6、possible key</h3><p>可能使用的索引，没啥好讲的。</p><h3 id="7、key"><a href="#7、key" class="headerlink" title="7、key"></a><font color="Red">7、key</font></h3><p>实际使用的索引，也没啥好讲。</p><p>index hint是指，让MySQL按照我们的给定的索引去查询数据，主要有force index、use index和ignore index，也可以加上for join | order by | group by来指定索引使用的范围，如下SQL。具体使用见<a href="https://dev.mysql.com/doc/refman/8.0/en/index-hints.html">官方文档</a>。</p><p><font color="Blue">force index和use index的区别是：</font>force index会强制使用该索引，但use index是建议MySQL使用该索引，但是优化器还是会根据实际情况来选择是否要全表扫描。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb3 force index for order by (trb3_index1) where id3 &gt; 3 order by name;<br>+----+-------------+-------+------------+-------+---------------------+---------+---------+------+------+----------+-----------------------------+<br>| id | select_type | table | partitions | type  | possible_keys       | key     | key_len | ref  | rows | filtered | Extra                       |<br>+----+-------------+-------+------------+-------+---------------------+---------+---------+------+------+----------+-----------------------------+<br>|  1 | SIMPLE      | trb3  | NULL       | range | PRIMARY,trb3_index1 | PRIMARY | 4       | NULL |    7 |   100.00 | Using where; Using filesort |<br>+----+-------------+-------+------------+-------+---------------------+---------+---------+------+------+----------+-----------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="8、key-len"><a href="#8、key-len" class="headerlink" title="8、key_len"></a>8、key_len</h3><p>该字段指的是查询执行时实际使用的索引的总最大字节长度，当所有有多个字段时，可以通过这个来看一个查询具体使用了哪几个字段。int占用4个字节，varchar每一个字符占用4个字节和2个字符存储字符串长度（varchar中文实际上大部分占3个字节，少量才占用四个字节，这里按最大的算），因此varchar(50)占用202个字节。如下通过查看字节长度就可以发现使用了多字段索引中的哪几个字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb3 where id3 = 3;<br>+----+-------------+-------+------------+------+---------------------+---------+---------+-------+------+----------+-------+<br>| id | select_type | table | partitions | type | possible_keys       | key     | key_len | ref   | rows | filtered | Extra |<br>+----+-------------+-------+------------+------+---------------------+---------+---------+-------+------+----------+-------+<br>|  1 | SIMPLE      | trb3  | NULL       | ref  | PRIMARY,trb3_index1 | PRIMARY | 4       | const |    1 |   100.00 | NULL  |<br>+----+-------------+-------+------------+------+---------------------+---------+---------+-------+------+----------+-------+<br>1 row in set, 1 warning (0.00 sec)<br><br>mysql&gt; explain select * from trb3 where name &gt; &#x27;sdf&#x27;;<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra                    |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>|  1 | SIMPLE      | trb3  | NULL       | range | trb3_index1   | trb3_index1 | 202     | NULL |    5 |   100.00 | Using where; Using index |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>1 row in set, 1 warning (0.00 sec)<br><br>mysql&gt; explain select * from trb3 where id3 = 3 and name &gt; &#x27;a&#x27;;<br>+----+-------------+-------+------------+-------+---------------------+---------+---------+------+------+----------+-------------+<br>| id | select_type | table | partitions | type  | possible_keys       | key     | key_len | ref  | rows | filtered | Extra       |<br>+----+-------------+-------+------------+-------+---------------------+---------+---------+------+------+----------+-------------+<br>|  1 | SIMPLE      | trb3  | NULL       | range | PRIMARY,trb3_index1 | PRIMARY | 206     | NULL |    1 |   100.00 | Using where |<br>+----+-------------+-------+------------+-------+---------------------+---------+---------+------+------+----------+-------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="9、ref"><a href="#9、ref" class="headerlink" title="9、ref"></a>9、ref</h3><p>该字段显示了用哪些列或常量来和索引字段去匹配以查询数据。当索引和一个常量匹配时，ref字段为const，当使用索引行进范围查询时，ref字段为NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from trb2 where id2 in (select id from trb1 where name = &#x27;aquarium&#x27;);<br>+----+-------------+-------+-------------+--------+---------------+---------+---------+---------------+------+----------+-------------+<br>| id | select_type | table | partitions  | type   | possible_keys | key     | key_len | ref           | rows | filtered | Extra       |<br>+----+-------------+-------+-------------+--------+---------------+---------+---------+---------------+------+----------+-------------+<br>|  1 | SIMPLE      | trb2  | NULL        | ALL    | PRIMARY       | NULL    | NULL    | NULL          |    3 |   100.00 | NULL        |<br>|  1 | SIMPLE      | trb1  | p0,P1,P2,P3 | eq_ref | PRIMARY       | PRIMARY | 4       | test.trb2.id2 |    1 |    10.00 | Using where |<br>+----+-------------+-------+-------------+--------+---------------+---------+---------+---------------+------+----------+-------------+<br>2 rows in set, 1 warning (0.00 sec)<br><br>mysql&gt; explain select * from trb3 where id3 = if(id3 &gt; 3, 5, 2);<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra                    |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>|  1 | SIMPLE      | trb3  | NULL       | index | NULL          | trb3_index1 | 206     | NULL |   12 |    10.00 | Using where; Using index |<br>+----+-------------+-------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="10、rows"><a href="#10、rows" class="headerlink" title="10、rows"></a>10、rows</h3><p>rows列表示MySQL认为执行查询必须检查的行数。对于InnoDB表，此数字是估计值，可能并不总是准确的。</p><h3 id="11、filtered"><a href="#11、filtered" class="headerlink" title="11、filtered"></a>11、filtered</h3><p>该列指的是按表条件过滤的表行的估计百分比。最大值为100，这表示未过滤行。值从100减小表示过滤量增加。rows × filtered的值表示与下表连接的行数。例如，如果行数为1000，过滤条件为50.00（50％），则与下表连接的行数为1000×50％= 500。</p><h3 id="12、Extra"><a href="#12、Extra" class="headerlink" title="12、Extra"></a><font color="Red">12、Extra</font></h3><p>该列展示了SQL执行计划的额外信息，包括太多的内容，大部分是很少见的，以下主要解释几个重要的值得优化的内容：</p><ul><li><p>Using filesort：意为MySQL必须额外对检索出来的数据进行一次排序再输出这些数据。<br>排序是通过根据连接类型遍历所有行并存储与WHERE子句匹配的所有行的排序键和指向该行的指针来完成的。即排序会using filesort会遍历所有行，存储通过where条件筛选出的行的排序字段和指向该行的指针，再对排序字段值和指针进行排序，再按照指针顺序输出数据。<br>因此这种排序方式是特别慢的，排序优化见<a href="https://dev.mysql.com/doc/refman/8.0/en/order-by-optimization.html">官方文档</a>。</p></li><li><p>Using index：仅使用索引树中的信息从表中检索列信息，而不必进行其他查找以读取实际行。</p></li><li><p>Using index condition：通过访问索引集并首先对其进行测试以确定是否需要读取完整的表。除非有必要整表扫描，否则索引信息将用于延迟（“下推push down”）再读取整个表行。<br>索引条件下推（Index Condition Pushdown）是针对MySQL使用using index从表中检索行的情况的一种优化。如果不使用ICP，则存储引擎将遍历索引以在基表中定位行，并将其返回给MySQL服务器，后者将评估这些行的WHERE条件。启用ICP后，如果仅可以使用索引中的列来评估WHERE条件的一部分，则MySQL服务器会将WHERE条件的这一部分下推到存储引擎。然后，存储引擎通过使用索引条目来评估推送的索引条件，并且只有在满足此条件的情况下，才从表中读取行。 ICP可以减少存储引擎必须访问基表的次数以及MySQL服务器必须访问存储引擎的次数。见<a href="https://dev.mysql.com/doc/refman/8.0/en/index-condition-pushdown-optimization.html">官方文档</a>。</p></li><li><p>Using index for group-by：即有一个索引可以可用于检索GROUP BY或DISTINCT查询的所有列，类似于group by的索引覆盖。</p></li><li><p>Using temporary：使用临时表。</p></li><li><p>Using where：即存在where条件，且where字段不在任意一个索引中，不能使用索引树进行where匹配，而必须在检查所有行再把满足where条件的数据输出给客户端。</p></li></ul><h2 id="三、explain的扩展输出格式"><a href="#三、explain的扩展输出格式" class="headerlink" title="三、explain的扩展输出格式"></a>三、explain的扩展输出格式</h2><p>explain输出列中的Extra列实际上并不是explain的，而是show warnings的结果，可以在使用explain后，可以紧跟着使用show warnings命令查看完整的extended information。</p><p>8.0.12版本之前，show warnings只适用于select，8.0.12版本之后，它适用于select、delete、update、replace、insert。</p><p>show warnings的message列显示了优化器如何限定select语句中的表名和列名，select语句在应用优化器的优化和重写之后的样子（会额外提供一些特殊标记，不一定是有效的SQL），以及其他与优化器处理有关的信息。如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select t1.id, t1.id in (select id from trb2) from trb1 t1;<br>+----+-------------+-------+-------------+-------+---------------+---------+---------+------+------+----------+-------------+<br>| id | select_type | table | partitions  | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |<br>+----+-------------+-------+-------------+-------+---------------+---------+---------+------+------+----------+-------------+<br>|  1 | PRIMARY     | t1    | p0,P1,P2,P3 | index | NULL          | PRIMARY | 4       | NULL |   10 |   100.00 | Using index |<br>|  2 | SUBQUERY    | trb2  | NULL        | ALL   | NULL          | NULL    | NULL    | NULL |    3 |   100.00 | NULL        |<br>+----+-------------+-------+-------------+-------+---------------+---------+---------+------+------+----------+-------------+<br>2 rows in set, 1 warning (0.00 sec)<br><br>mysql&gt; show warnings;<br>+-------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<br>| Level | Code | Message<br><br>                                                                                                                   |<br>+-------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<br>| Note  | 1003 | /* select#1 */ select `test`.`t1`.`ID` AS `id`,&lt;in_optimizer&gt;(`test`.`t1`.`ID`,`test`.`t1`.`ID` in ( &lt;materialize&gt; (/* select#2 */ select `test`.`trb2`.`id` from `test`.`trb2` where true having true ), &lt;primary_index_lookup&gt;(`test`.`t1`.`ID` in &lt;temporary table&gt; on &lt;auto_key&gt; where ((`test`.`t1`.`ID` = `materialized-subquery`.`id`))))) AS `t1.id in (select id from trb2)` from `test`.`trb1` `t1` |<br>+-------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>show warnings中message列可能包含的特殊标记见<a href="https://dev.mysql.com/doc/refman/8.0/en/explain-extended.html">官方文档</a>，如下。</p><ul><li><p>&lt;auto_key&gt;<br>为临时表自动生成的索引。</p></li><li><p>&lt;cache&gt;(expr)<br>expr表达式执行一次，将结果保存在内存中备用。对于有很多个缓存值，MySQL会创建一个临时表，并显示&lt;temporary table&gt;。</p></li><li><p>&lt;exists&gt;(query fragment)<br>子查询将转换为EXISTS语句。和子查询优化有关，子查询优化有物化成临时表、semi join和转换成EXISTS语句等优化方法，其中如果使用转换成EXISTS这种优化方式时，可能就会有&lt;exists&gt;标记（盲猜的）。见官方文档<a href="https://dev.mysql.com/doc/refman/8.0/en/subquery-optimization.html">8.2.2 Optimizing Subqueries, Derived Tables, View References, and Common Table Expressions</a>。</p></li><li><p>&lt;in_optimizer&gt; (query fragment)<br>指这是一个内部优化器对象，对用户没有任何意义。</p></li><li><p>&lt;index_lookup&gt; (query fragment)<br>使用索引查找来处理查询片段以查找合格的行。</p></li><li><p>&lt;if&gt;(condition, expr1, expr2)<br>if条件，condition条件为真则执行expr1，否则执行expr2。</p></li><li><p>&lt;is_not_null_test&gt;(expr)<br>用于验证表达式是否为null的测试。</p></li><li><p>&lt;materialize&gt;(query fragment)<br>物化子查询，见&lt;exists&gt;。</p></li><li><p>`materialized-subquery`.col_name<br>一个子查询结果被物化成内部临时表后，这个临时表对某一列的引用。</p></li><li><p>&lt;primary_index_lookup&gt;(query fragment)<br>使用主键查找来处理查询片段以查找合格的行。</p></li><li><p>&lt;ref_null_helper&gt;(expr)<br>这是一个内部优化器对象，对用户没有任何意义。</p></li><li><p>/* select#N */ select_stmt<br>指与explain中对应的某一个SELECT语句，N即为explain中的id。</p></li><li><p>outer_tables semi join (inner_tables)<br>半联接操作。inner_tables显示未拉出的表。见&lt;exists&gt;。</p></li><li><p>&lt;temporary table&gt;(expr)<br>为缓存结果创建的一个临时表。</p></li></ul><h2 id="四、explain的其他用法"><a href="#四、explain的其他用法" class="headerlink" title="四、explain的其他用法"></a>四、explain的其他用法</h2><h3 id="explain-for-connection"><a href="#explain-for-connection" class="headerlink" title="explain for connection"></a>explain for connection</h3><p>可以通过show processlist查看连接线程列表，或通过select connection_id()查看当前连接线程的id。</p><p>explain for connection connection_id的用处是查看id为connection_id的线程当前正在执行的SQL语句的执行计划。如果那个线程当前没有执行SQL语句，则结果为空；如果那个线程当前执行的SQL语句不是select、update、replace、insert、delete中的任意一个，则会报错。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show processlist;<br>+-----+-----------------+-----------------+-------+---------+--------+------------------------+------------------+<br>| Id  | User            | Host            | db    | Command | Time   | State                  | Info             |<br>+-----+-----------------+-----------------+-------+---------+--------+------------------------+------------------+<br>|   4 | event_scheduler | localhost       | NULL  | Daemon  | 733424 | Waiting on empty queue | NULL             |<br>| 508 | root            | localhost:2004  | test  | Query   |      0 | starting               | show processlist |<br>| 509 | root            | localhost:1748  | xxxx | Sleep   |    275 |                        | NULL             |<br>| 510 | root            | localhost:5639  | xxxx | Sleep   |    275 |                        | NULL             |<br>| 515 | root            | localhost:13576 | xxxx   | Sleep   |  45170 |                        | NULL             |<br>| 516 | root            | localhost:13578 | xxxx   | Sleep   |  45170 |                        | NULL             |<br>+-----+-----------------+-----------------+-------+---------+--------+------------------------+------------------+<br>6 rows in set (0.00 sec)<br><br>mysql&gt; explain for connection 516;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; explain for connection 508;<br>ERROR 3012 (HY000): EXPLAIN FOR CONNECTION command is supported only for SELECT/UPDATE/INSERT/DELETE/REPLACE<br></code></pre></td></tr></table></figure><h3 id="explain-table-name"><a href="#explain-table-name" class="headerlink" title="explain table_name"></a>explain table_name</h3><p><code>explain table_name</code> = <code>show columns from table_name</code> = <code>describe table_name</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain trb1;<br>+-----------+-------------+------+-----+---------+----------------+<br>| Field     | Type        | Null | Key | Default | Extra          |<br>+-----------+-------------+------+-----+---------+----------------+<br>| ID        | int(11)     | NO   | PRI | NULL    | auto_increment |<br>| name      | varchar(50) | YES  |     | NULL    |                |<br>| purchased | date        | YES  |     | NULL    |                |<br>+-----------+-------------+------+-----+---------+----------------+<br>3 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>explain的用处其实就是让MySQL告诉你某一个SQL查询执行时，优化器会怎么优化它，存储引擎会采用怎样的表连接方式，采用哪些索引，执行该SQL必须扫描的行数量（估计数），和其他可以用于SQL优化的信息。通过获取这些信息，我们就可以发现一个SQL语句执行慢的原因，并作出合理的优化。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL日期格式化</title>
    <link href="/database/mysql/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/database/mysql/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>参考文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format">MySQL官方文档</a></p><table class="dataintable" border="0"><tbody><tr><td>类型</td><td>格式</td><td>解释</td><td><p>示例（2020-09-04&nbsp;20:03:07.12345 星期五）</p></td></tr><tr><td rowspan="2">年</td><td><span style="color: #ff0000;">%Y</span></td><td>年，4 位</td><td>2020</td></tr><tr><td>%y</td><td>年，2 位</td><td>20</td></tr><tr><td rowspan="4">月</td><td><span style="color: #ff0000;">%m</span></td><td>月，数值(00-12)</td><td>09</td></tr><tr><td><span style="color: #ff0000;">%c</span></td><td>月，数值(0-12)</td><td>9</td></tr><tr><td>%M</td><td>英文月名</td><td>September</td></tr><tr><td>%b</td><td>英文月名（缩写）</td><td>Sep</td></tr><tr><td rowspan="4">日</td><td><span style="color: #ff0000;">%d</span></td><td>天，数值(00-31)</td><td>04</td></tr><tr><td><span style="color: #ff0000;">%e</span></td><td>天，数值(0-31)</td><td>4</td></tr><tr><td>%j</td><td>天 (001-366)</td><td>248</td></tr><tr><td>%D</td><td>带有英文后缀的月中的天</td><td>4th</td></tr><tr><td rowspan="3">星期</td><td>%W</td><td>星期名</td><td>Friday</td></tr><tr><td>%a</td><td>缩写星期名</td><td>Fri</td></tr><tr><td>%w</td><td>周的天 （0=星期日, 6=星期六）</td><td>5</td></tr><tr><td rowspan="2">时间</td><td><span style="color: #ff0000;">%T</span></td><td>时间，24-小时 (hh:mm:ss)</td><td>20:03:07</td></tr><tr><td>%r</td><td>时间，12-小时（hh:mm:ss AM 或 PM）</td><td>08:03:07 PM</td></tr><tr><td rowspan="4">小时</td><td><span style="color: #ff0000;">%H</span></td><td>小时 (00-23)</td><td>20</td></tr><tr><td>%k</td><td>小时 (0-23)</td><td>20</td></tr><tr><td><span style="color: #ff0000;">%h /&nbsp;%I</span></td><td>小时 (01-12)，和%h应该没区别</td><td>08</td></tr><tr><td>%l</td><td>小时 (1-12)</td><td>8</td></tr><tr><td>分钟</td><td>%i</td><td>分钟，数值(00-59)</td><td>03</td></tr><tr><td>秒</td><td>%S /&nbsp;%s</td><td>秒(00-59)，大小写应该没区别，似乎是某些历史原因导致</td><td>07</td></tr><tr><td>上下午</td><td>%p</td><td>AM 或 PM</td><td>PM</td></tr><tr><td>微妙</td><td>%f</td><td>微秒</td><td>123456</td></tr><tr><td rowspan="2">第n周</td><td>%U</td><td>周 (00-53) 星期日是一周的第一天</td><td><p>SELECT DATE_FORMAT('1999-01-03', '%U');</p><p>-&gt;&nbsp;01</p></td></tr><tr><td>%u</td><td>周 (00-53) 星期一是一周的第一天</td><td><p>SELECT DATE_FORMAT('1999-01-03', '%U');</p><p>-&gt;&nbsp;00</p></td></tr><tr><td rowspan="4">年，周</td><td>%V</td><td>周 (01-53) 星期日是一周的第一天，与 %X 使用</td><td><p><span class="token keyword">SELECT <span class="token function">DATE_FORMAT<span class="token punctuation">(<span class="token string">'1999-01-01'<span class="token punctuation">, <span class="token string">'%X %V'<span class="token punctuation">)<span class="token punctuation">;</span></span></span></span></span></span></span></span></p><p><span class="token keyword"><span class="token function"><span class="token punctuation"><span class="token string"><span class="token punctuation"><span class="token string"><span class="token punctuation"><span class="token punctuation">-&gt; 1998 52（1999年1月1日为星期五，属于1998年的最后一周）</span></span></span></span></span></span></span></span></p><p><span class="token keyword">SELECT&nbsp;<span class="token function">DATE_FORMAT<span class="token punctuation">(<span class="token string">'1999-01-03'<span class="token punctuation">,&nbsp;<span class="token string">'%X %V'<span class="token punctuation">)<span class="token punctuation">;</span></span></span></span></span></span></span></span></p><p><span class="token keyword">-&gt;&nbsp;1999 01（1999年1月3日为星期日，属于1999年的第一周）</span></p></td></tr><tr><td>%v</td><td>周 (01-53) 星期一是一周的第一天，与 %x 使用</td><td><p>&nbsp;SELECT DATE_FORMAT('1999-01-03', '%x %v');</p><p>-&gt;&nbsp;1998 53（1999年1月3日为星期日，属于1998年的最后一周）</p><p>SELECT DATE_FORMAT('1999-01-04', '%x %v');</p><p>-&gt; 1999 01（1999年1月4日为星期一，属于1999年的第一周）</p></td></tr><tr><td>%X</td><td>年，其中的星期日是周的第一天，4 位，与 %V 使用</td><td>见上方</td></tr><tr><td>%x</td><td>年，其中的星期一是周的第一天，4 位，与 %v 使用</td><td>见上方</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中的exists与in的使用</title>
    <link href="/database/mysql/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/database/mysql/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>该文章总结各种博客文章，再加上自己的理解形成的。</p><p><font color="Red">结论：</font></p><p><font color="Red">子查询表大的用exists，子查询表小的用in。</font></p><p><strong>1、exists的用法。</strong></p><p>（1）exists子语句返回的是true或者false，当exists中子语句能查询出任意记录行时返回true，查不到任何记录时返回false。exists子语句查询出来的记录行没有任何用，因此很多时候用select 1就行，只需要判断是否能查询出记录即可。</p><p>（2）对于外表查询出来的记录，每条记录都会当作exists的条件去查询exists中的子语句，当exists子语句为false时，该条数据则会被丢弃。因此exists子语句中可以有外表的字段和表名。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * FROM MYSQL.help_keyword where help_keyword_id &lt; 5;<br>+-----------------+--------------+<br>| help_keyword_id | name         |<br>+-----------------+--------------+<br>|               0 | HELP_DATE    |<br>|               1 | HELP_VERSION |<br>|               2 | DEFAULT      |<br>|               3 | SERIAL       |<br>|               4 | VALUE        |<br>+-----------------+--------------+<br>5 rows in set (0.00 sec)<br>-- 首先help_keyword表查询出来的5条记录<br><br>mysql&gt; select * from mysql.help_keyword hk where hk.help_keyword_id &lt; 5 and exists(select 1 from mysql.help_relation hr where hr.help_keyword_id = hk.help_keyword_id);<br>+-----------------+--------------+<br>| help_keyword_id | name         |<br>+-----------------+--------------+<br>|               0 | HELP_DATE    |<br>|               1 | HELP_VERSION |<br>|               2 | DEFAULT      |<br>|               3 | SERIAL       |<br>|               4 | VALUE        |<br>+-----------------+--------------+<br>5 rows in set (0.00 sec)<br>-- 加上exists语句后，每条记录都要当作exists的条件去执行select 1 from mysql.help_relation hr where hr.help_keyword_id = hk.help_keyword_id。如第一条记录hk.help_keyword_id = 0，则查询select 1 from mysql.help_relation hr where hr.help_keyword_id = 0，如下。可以查询出数据，因此exists返回true，因此在help_keyword表中help_keyword_id = 0的这条记录是合法的。<br>mysql&gt; select 1 from mysql.help_relation hr where hr.help_keyword_id = 0;<br>+---+<br>| 1 |<br>+---+<br>| 1 |<br>+---+<br>1 row in set (0.00 sec)<br><br>-- 同样对于剩余四条记录都要执行exists子语句，都能查询出记录，因此这四条记录都是合法的。<br>-- 若将exists子语句中的条件修改为如下的100000，而不是外表的字段值，则exists子语句永远不能查出记录，exists子语句返回false，因此这五条记录都会被过滤掉。<br>mysql&gt; select * from mysql.help_keyword hk where hk.help_keyword_id &lt; 5 and exists(select 1 from mysql.help_relation hr where hr.help_keyword_id = 100000);<br>Empty set (0.00 sec)<br></code></pre></td></tr></table></figure><p>（3）not exists和exists正好相反。当子语句能查询出任意记录时，exists返回true，此时not exists就是false；当子语句不能查询出任意记录时，exists返回false，而not exists就是true；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 还是上面那个例子，换成not exists后，对于每条外表查询出来的数据，not exists都为false，则外表五条记录都会被过滤掉。<br>mysql&gt; select * from mysql.help_keyword hk where hk.help_keyword_id &lt; 5 and not exists(select 1 from mysql.help_relation hr where hr.help_keyword_id = hk.help_keyword_id);<br>Empty set (0.00 sec)<br></code></pre></td></tr></table></figure><p>（4）从以上可以看出，外表查询出来的记录条数即为exists子语句的查询次数。</p><p><strong>2、in的用法</strong></p><p>（1）in和exists一样返回true或者false，用于判断某个或某几个字段是否存在于in的子语句查询记录中。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from mysql.help_keyword hk where hk.help_keyword_id &lt; 5 and hk.help_keyword_id in (select hr.help_keyword_id from mysql.help_relation hr);<br>+-----------------+--------------+<br>| help_keyword_id | name         |<br>+-----------------+--------------+<br>|               0 | HELP_DATE    |<br>|               1 | HELP_VERSION |<br>|               2 | DEFAULT      |<br>|               3 | SERIAL       |<br>|               4 | VALUE        |<br>+-----------------+--------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>（2）in和exists不一样的地方在于，无论外表查询记录为多少条，in子语句只会查询一次，并将结果缓存起来，然后对于遍历外表查询出来的记录，判断in语句是否成立。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select hr.help_keyword_id from mysql.help_relation hr; -- 首先会把该条语句查询出来的记录缓存起来<br>+-----------------+<br>| help_keyword_id |<br>+-----------------+<br>|               0 |<br>|               1 |<br>......<br>|             710 |<br>|             710 |<br>+-----------------+<br>1635 rows in set (0.00 sec)<br>-- 然后遍历外表查询出来的五条数据，依次判断hk.help_keyword_id是否存在于缓存记录中。<br></code></pre></td></tr></table></figure><p>（3）in相当于用or连接的=判断。<font color="Red">因此in前面的字段是可以使用索引的。</font>如下key字段都为primarykey。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- mysql.help_category表有如下索引<br>mysql&gt; show index from mysql.help_category;<br>+---------------+------------+----------+--------------+------------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table         | Non_unique | Key_name | Seq_in_index | Column_name      | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+---------------+------------+----------+--------------+------------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| help_category |          0 | PRIMARY  |            1 | help_category_id | A         |          44 |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>| help_category |          0 | name     |            1 | name             | A         |          44 |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>+---------------+------------+----------+--------------+------------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>2 rows in set (0.00 sec)<br><br>-- 因此以下两条语句都使用了key_name为name的索引。<br>mysql&gt; explain select * from mysql.help_category hc where hc.name in (&#x27;Contents&#x27;, &#x27;Help Metadata&#x27;, &#x27;Data Types&#x27;);<br>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+<br>| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |<br>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+<br>|  1 | SIMPLE      | hc    | NULL       | range | name          | name | 192     | NULL |    3 |   100.00 | Using where |<br>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+<br>1 row in set, 1 warning (0.00 sec)<br><br>mysql&gt; explain select * from mysql.help_category hc where hc.name = &#x27;Contents&#x27; or hc.name = &#x27;Help Metadata&#x27; or hc.name = &#x27;Data Types&#x27;;<br>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+<br>| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |<br>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+<br>|  1 | SIMPLE      | hc    | NULL       | range | name          | name | 192     | NULL |    3 |   100.00 | Using where |<br>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>3、exists和in的区别</strong></p><p>区别在于：in子语句只查询了一次，但是in的子语句会遍历整张help_relation表（遍历了1635次）；exists子语句会查询五次，但是每次查询都有where条件，where条件中<strong>可能</strong>会使用到索引，因此每次查询可能不用遍历整张表。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 前提假设：假设true<br>-- 情景1：<br>-- 假设A表：一共100条记录，有主键字段aid，通过主键aid查询记录只需要遍历索引树1次。<br>-- 假设B表：一共10000000条记录，有主键bid，字段aid，字段aid设置了索引，假设通过该索引进行查询时平均需要遍历索引树10次。<br>select * from A where exists (select 1 from B where B.aid = A.aid);<br>-- exists子语句遍历次数：100 * 10 = 1000，整条语句遍历次数：1000 + 100（判断100次ture or false） = 1100。<br>select * from A where aid in (select aid from B);<br>-- in子语句遍历次数：10000000，整条语句遍历次数：10000000 + 1（通过主键aid只需要遍历1次） = 10000001。<br><br>-- 情景2：<br>-- 假设A表：一共10000000条记录，有主键字段aid，通过主键aid查询记录只需要遍历索引树10次。<br>-- 假设B表：一共100条记录，有主键bid，字段aid，字段aid设置了索引，假设通过该索引进行查询时平均需要遍历索引树2次。<br>select * from A where exists (select 1 from B where B.aid = A.aid);<br>-- exists子语句遍历次数：10000000 * 2 = 20000000，整条语句遍历次数：20000000 + 10000000（判断这么多次true or false）<br>select * from A where aid in (select aid from B);<br>-- in子语句遍历次数：100，整条语句遍历次数：100 + 10（通过主键aid只需要遍历10次） = 110。<br></code></pre></td></tr></table></figure><p>情景1可以发现in语句虽然只查询一次，但是会遍历整张表，当B表很大时，in的效率会非常低，也更占用空间。情景2可以发现当A表很大时，虽然exists子语句只需要遍历2次，但是由于外表很大，导致整个查询过程中exists会遍历很多次，导致exists的效率很低。因此，当子查询表远大于外表时用exists，子查询表远小于外表时用in。无论时外表还是子查询里面的内表都要善用索引。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>learn-git</title>
    <link href="/Git/learngit/learn-git/"/>
    <url>/Git/learngit/learn-git/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir &lt;dir&gt; // 创建空文件夹目录<br><br>cd &lt;dir&gt; // 把路径转到目标目录<br><br>pwd // 显示当前目录<br><br>git config --list // 当前库配置列表<br><br>git config --global --list // 全局配置列表<br><br>git config --global user.name = &lt;name&gt; // 设置全局的用户名<br><br>git config --global user.email = &lt;email&gt; // 设置全局的邮箱<br><br>git init // 把当前目录初始化为一个可管理的资源库<br><br>git add &lt;file&gt; // 向资源库中新增一个文件<br><br>git add -f &lt;file&gt; // 想资源库中强制新增一个文件，忽略.gitignore文件中跳过的文件<br><br>git add -A // 将所有变化添加到暂存区中<br><br>git add -u // 将更新的内容和删除的文件添加到暂存区，新建的文件不会被添加到暂存区中<br><br>git add . // 网上很多人说不能将删除的文件添加暂存区，但是测试是可以的，同时也可以将更新的内容和新建的文件增加到暂存区，不知道这个和-A有什么区别，我选择用-A<br><br>git status // 资源库当前状态，是否有修改<br><br>git diff // 查看修改的内容<br><br>git commit -m &lt;description&gt; // 提交，description为本次提交的说明<br><br>git log // 查看每次修改的日志<br><br>git reset --hard head^ // 回到当前上一个版本，^的数量代表回退版本的数量，要回退特别多可以用<br><br>git reset --hard head~10 // 回退10个版本<br><br>git reest --hard &lt;commit id&gt; // 前往&lt;commit id&gt;的特定版本，可以回退也可以前进，commit id没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。一般git hash窗口别关掉，可以看到之前提交。比如一次提交，其id为commitA，如果后来撤销了commitA，但是现在又想恢复commitA看看commit A的修改内容，就可以找到commitA的commit-id恢复就行，但是如果这个窗口删掉了，就不能重新应用commitA的提交了。<br><br>cat &lt;file&gt; // 打印文件内容<br><br>git reflog // 显示每次提交记录的情况<br><br>git restore &lt;file&gt; // 将head版本的文件恢复到工作区<br><br>git restore --staged &lt;file&gt; // 把暂存区的修改撤销掉（unstage）<br><br>git rm &lt;file&gt; // 从资源库中移除文件，同样需要commit<br><br>rm &lt;file&gt; // 从本地删除文件<br><br>ssh-keygen -t rsa -C &quot;youremail@example.com&quot; // 为本地git创建一个SSH Key，windows用户在user\.ssh中找到id_rsa和id_rsa.pub，分别是私钥和公钥，公钥可以告诉别人，私钥不能泄露出去；在github中新增这个密钥，就可以实现本地git仓库和github的传输<br><br>ssh -T git@github.com // 测试密钥是否有用<br><br>git remote add origin &lt;url&gt; // 将本地仓库添加到github远程仓库，origin是远程仓库的默认名称<br><br>git pull origin master --allow-unrelated-histories // 如果远程库已经有内容了，要把本地库上传到github，则要先把代码拉到本地库融合解决冲突，然后执行下面的提交<br><br>git push -u origin master // 将本地仓库的所有内容推送到远程库上，第一次要加“-u”，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以不用加“-u”。<br><br>git clone &lt;url&gt; // 从github上复制代码文件夹到本地仓库，支持ssh协议和https协议<br><br>git remote -v // 查看远程仓库连接，头单词为仓库名<br><br>git remote show &lt;name&gt; // 查看远程name库的信息<br><br>git remote remove &lt;name&gt; // 断开&lt;name&gt;远程库连接<br><br>git push origin --delete &lt;name&gt; // 删除远程库origin中的&lt;name&gt;分支<br><br>git branch -a // 查看远程仓库分支<br><br>git branch // 查看分支<br><br>git branch &lt;name&gt; // 创建新分支<br><br>git switch &lt;name&gt; // 切换到另一个分支<br><br>git switch -c &lt;name&gt; // 创建并切换到另一个分支<br><br>git merge &lt;name&gt; // 将name分支的内容合并到当前分支，默认Fast-forward模式下是直接把指向master的指针指向dev<br><br>git merge --no-ff &lt;name&gt; // 将name分支的内容强制以非快速模式合并到当前分支<br><br>git branch -d &lt;name&gt; // 将name分支删除，若该分支没有被合并，会删除失败，提示你要合并，如果不想合并，见下一行代码<br><br>git branch -D &lt;name&gt; // 危险操作！将name分支强制删除，不会提示有没有被合并<br><br>git log --graph --abbrev-commit --decorate --format=format:&#x27;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)&#x27; --all // 查看分支日志，--graph参数可以看日志图<br><br>git stash // 将当前工作区保存另外一个区域（不是暂存区），将head版本的内容恢复到工作区<br><br>git stash list // 查看stash区域的列表，是一个栈类型的区域，先进先出，最新进入stash区域的修改的序号为0，其他所有修改序号+1<br><br>git stash apply &lt;stash@&#123;id&#125;&gt; // 将stash区域序号为id的修改恢复到工作区，若不加&lt;stash@&#123;id&#125;&gt;，则默认id=0<br><br>git stash drop &lt;stash@&#123;id&#125;&gt; // 将stash区域序号为id的修改删除，若不加&lt;stash@&#123;id&#125;&gt;，则默认id=0<br><br>git stash pop // 将stash区域序号为0的修改恢复到工作区，同时删除该stash修改。<br><br>git cherry-pick &lt;commit-id&gt; // 将提交id为commit-id的修改应用于当前分支，比如当前在dev分支下开发新功能，突然发现master分支有一个bug，这个bug在dev分支同时也存在，可以将dev分支下的工作区先用stash保存，再切换到master分支，将bug修复，再将该修复的提交同时应用于dev分支，这样两个分支的bug都修复了，再用git stash pop就可以恢复原dev工作区的内容<br><br>git branch --set-upstream-to=origin/&lt;githubbranch&gt; &lt;localgitbranch&gt; // 将本地分支&lt;localgitbranch&gt;和远程库origin的&lt;githubbranch&gt;分支建立链接，这样git pull拉代码时，就不会因为master之外的其他分支没有链接导致拉代码失败。如：git branch --set-upstream-to=origin/dev dev<br><br>git branch --set-upstream &lt;localgitbranch&gt; origin/&lt;githubbranch&gt; // 同上，建议用这种，和下面这个代码一起记，方便一些<br><br>git switch -c &lt;localgitbranch&gt; origin/&lt;githubbranch&gt; // 在本地创建和远程分支对应的分支，应该是会自动链接到远程分支上。<br><br>多人协作通常的模式是：<br>1、有一个远程库，你先拉下代码（如dev分支），若你本地对应的分支的提交记录的更新程序&gt;=远程库分支的提交记录，则是拉不下来代码的，会一直显示已经是最新的了。<br>2、在本地新建自己的开发分支（如dev2）做自己的开发。<br>2、等自己的开发完成后，将自己的开发分支dev2合并到本地dev中。<br>3、用git push origin dev将开发完成的代码推到远程库dev分支。<br>4、如果失败，看github上的dev分支的提交记录，是不是比你本地的dev新。如是则再要拉一遍代码git pull origin dev，如有冲突在本地解决冲突，然后就可以推到远程库。<br><br>git tag &lt;name&gt; // 给当前分支的上一次提交打标签，标签名字为name<br><br>git tag -a &lt;name&gt; &lt;commit-id&gt; -m &lt;message&gt;  // 用-a指定标签名&lt;name&gt;，用-m指定标签信息&lt;massage&gt;，以此给提交ID为&lt;commit-id&gt;的提交打标签，&lt;commit-id&gt;不用打双引号<br><br>git tag // 显示所有分支的所有标签<br><br>git show &lt;name&gt; // 显示名为&lt;name&gt;的tag的详细内容<br><br>git push origin &lt;name&gt; // 把名为&lt;name&gt;的标签推送到远程库origin，&lt;name&gt;标签必须是本地库已经打过的标签<br><br>git push origin --tags // 推送所有未推送的标签到远程库origin<br><br>git tag -d &lt;name&gt; // 删除名为&lt;name&gt;的标签<br><br>git push origin :refs/tags/&lt;name&gt; // 删除远程标签有两部操作：1、执行上一段代码，删除本地标签；2、执行本段代码，将远程的名为&lt;name&gt;的tag删除<br></code></pre></td></tr></table></figure><p>.gitignore文件：在仓库根目录新建该文件，在文件中添加你想忽略添加到库中的文件，git就不会把这个文件添加到库中。但是如果你之前这个文件已经在库中了，要先把本地文件剪切至其他文件夹，删除库中的该文件，提交之后，再把文件剪切回来，git status命令就不会提示这个文件untracked。添加忽略的文件夹只需要这样添加：/folder</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
