<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport">
	
	<!-- title -->
	
	<title>
	
		docker | 
	 
	Yury&#39;s Blog
	</title>
	
	<!-- keywords,description -->
	 
		<meta name="description" content="blog of usual study" />
	

	<!-- favicon -->
	
	<link rel="shortcut icon" href="/favicon.ico">
	


	<!-- search -->
	<script>
		var searchEngine = "https://www.google.com/search?q=";
		if(typeof searchEngine == "undefined" || searchEngine == null || searchEngine == ""){
			searchEngine = "https://www.google.com/search?q=";
		}
		var homeHost = "";
		if(typeof homeHost == "undefined" || homeHost == null || homeHost == ""){
			homeHost = window.location.host;
		}
	</script>


	
<link rel="stylesheet" href="/css/main.css">

	
<link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/styles/darcula.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css">


	
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/highlight.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/npm/jquery-pjax@2.0.1/jquery.pjax.min.js"></script>

	
<script src="/js/main.js"></script>

	
		
<script src="https://cdn.jsdelivr.net/npm/leancloud-storage/dist/av-min.js"></script>

		
<script src="https://cdn.jsdelivr.net/npm/valine@1.3.10/dist/Valine.min.js"></script>

	
	
<meta name="generator" content="Hexo 5.4.0"><link rel="alternate" href="/atom.xml" title="Yury's Blog" type="application/atom+xml">
</head>

<body>
	<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?3efe99c287df5a1d6f0d02d187e403c1";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

<header id="header">
    <a id="title" href="/" class="logo">Yury's Blog</a>

	<ul id="menu">
		<li class="menu-item">
			<a href="/about" class="menu-item-link">ABOUT</a>
		</li>
	
		<li class="menu-item">
			<a href="/tags" class="menu-item-link">标签</a>
		</li>
	

	
		<li class="menu-item">
			<a href="/categories" class="menu-item-link">分类</a>
		</li>
	

		<li class="menu-item">
			<a href="https://github.com/yury757" class="menu-item-link" target="_blank">
				<i class="fa fa-github fa-2x"></i>
			</a>
		</li>
	</ul>
</header>

	
<div id="sidebar">
	<button id="sidebar-toggle" class="toggle" ><i class="fa fa-arrow-right " aria-hidden="true"></i></button>
	
	<div id="site-toc">
		<input id="search-input" class="search-input" type="search" placeholder="按回车全站搜索">
		<div id="tree">
			

			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Git
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										learngit
									</a>
									
							<ul>
								<li class="file">
									<a href="/Git/learngit/learn-git">
										learn-git
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										bigdata
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										clickhouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/clickhouse/clickhouse">
										clickhouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hadoop
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hadoop/hadoop-study">
										hadoop-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hbase
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hbase/HBase-study">
										HBase-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										kafka
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/kafka/kafka">
										kafka
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										zookeeper
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/zookeeper/zookeeper-study">
										zookeeper-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										computer-science
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Computer-Networking
									</a>
									
							<ul>
								<li class="file">
									<a href="/computer-science/Computer-Networking/Computer-Networking">
										Computer-Networking
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										database
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mysql
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL中的exists与in的使用
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8">
										MySQL中的exists与in的使用
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL备份-Linux版
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88">
										MySQL备份-linux版
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL日期格式化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96">
										MySQL日期格式化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL查询执行计划详解-explain
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain">
										MySQL查询执行计划详解-explain
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										《高性能MySQL》
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第1章-MySQL架构与历史
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2">
										第一章-MySQL架构与历史
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第2章-MySQL基准测试
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC2%E7%AB%A0-MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">
										第二章 MySQL基准测试
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第3章-服务器性能剖析
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC3%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90">
										第三章-服务器性能剖析
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第4章-Schema与数据类型优化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC4%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96">
										第四章-Schema与数据类型优化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第5章-创建高性能的索引
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC5%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95">
										第五章-创建高性能的索引
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										postgresql
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/postgresql/postgresql">
										postgresql
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										JVM
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/JVM/jvm-1.8">
										jvm-1.8
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										SSM-Build
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/SSM-Build/SSM-Build">
										SSM-Build
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_JUC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_JUC/Java_JUC-study">
										Java_JUC-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_NIO
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_NIO/Java_NIO-study">
										Java_NIO-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mybatis
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/mybatis/mybatis-study">
										mybatis-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springMVC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springMVC/SpringMVC-Study">
										SpringMVC-Study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springboot
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springboot/springboot-study">
										springboot-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										spring
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/spring/Spring-study">
										Spring-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										linux
									</a>
									
							<ul>
								<li class="file">
									<a href="/linux/linux%E5%91%BD%E4%BB%A4">
										linux命令
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										operating-support
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										docker
									</a>
									
							<ul>
								<li class="file active">
									<a href="/operating-support/docker/docker">
										docker
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										project
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										flink_data_warehouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/project/flink_data_warehouse/flink_data_warehouse">
										flink_data_warehouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
		</div>
	</div>
</div>

	<!-- 引入正文 -->
	<div id="content">
		<h1 id="article-title">

	docker
</h1>
<div class="article-meta">
	
	<span>Yury</span>
	<span>2020-10-10 00:00:00</span>
		<div id="article-categories">
    
		<span>Categories：</span>
            
                
                    <span>
                        <i class="fa fa-folder" aria-hidden="true">
                        <a href="/categories/docker/">docker</a>
                        </i>
                      
                    </span>
                
            
    

    
		<span>Tags：</span>
            
    
		</div>

</div>

<div id="article-content">
	<h2 id="一、docker安装"><a href="#一、docker安装" class="headerlink" title="一、docker安装"></a>一、docker安装</h2><p>参见<a target="_blank" rel="noopener" href="https://docs.docker.com/engine/">官方文档</a>。</p>
<pre><code class="shell"># 卸载原来的docker
sudo apt remove docker \
    docker.io \
    docker-engine

# 安装允许仓库使用https的依赖包
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

# 安装GPG密钥
curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -

# 向sources.list中添加Docker软件源（感觉设置ubuntu全局软件源镜像为国内镜像，可能可以不做这一步）
sudo add-apt-repository \
    &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;

# 下载安装docker-ce（社区版）
sudo apt install docker-ce docker-ce-cli containerd.io

# 设置dockerhub镜像，和linux的apt安装软件要设置镜像一样，国外网站比较慢，用国内的镜像源很快
cd /etc/docker # 如果没有docker文件夹，则自建一个docker文件夹
vi daemon.json # 修改这个文件，如果没有则自建一个文件，写入以下值。
&#123;
    &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]
&#125;
:wq # 保存退出
systemctl restart docker # 重启docker服务

# 运行hello-world
sudo docker run hello-world

# 查看docker本地镜像包有哪些
sudo docker images

# docker的默认工作路径为
cd /var/lib/docker
</code></pre>
<h2 id="二、docker原理"><a href="#二、docker原理" class="headerlink" title="二、docker原理"></a>二、docker原理</h2><h3 id="docker通信"><a href="#docker通信" class="headerlink" title="docker通信"></a>docker通信</h3><p>客户端和服务器之间的通信</p>
<p><img src="/images/docker%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="docker客户端服务器"></p>
<p>外网和docker的通信</p>
<p><img src="/images/docker%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84.png" alt="docker端口映射"></p>
<p>docker容器之间的通信</p>
<p><img src="/images/docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1.png" alt="docker容器之间的通信"></p>
<h3 id="docker为什么比VM加载快？"><a href="#docker为什么比VM加载快？" class="headerlink" title="docker为什么比VM加载快？"></a>docker为什么比VM加载快？</h3><p>docker是在宿主机OS内核的基础上运行的，不用重新加载OS内核；而VM是抽象了一个OS内核，每次启动都要重新加载新的OS内核，所以慢。</p>
<p><img src="/images/docker%E7%BB%93%E6%9E%84%E5%92%8CVM%E7%BB%93%E6%9E%84.png" alt="docker结构和VM结构"></p>
<p><img src="/images/docker%E5%92%8CVM%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="docker和VM的区别"></p>
<h2 id="三、docker命令"><a href="#三、docker命令" class="headerlink" title="三、docker命令"></a>三、docker命令</h2><h3 id="docker帮助命令"><a href="#docker帮助命令" class="headerlink" title="docker帮助命令"></a>docker帮助命令</h3><pre><code class="shell">docker version            # docker版本信息
docker info               # docker系统的具体信息
docker [command] --help   # 查看某个命令的帮助
</code></pre>
<p>docker命令行帮助文档：<a target="_blank" rel="noopener" href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p>
<h3 id="docker镜像命令"><a href="#docker镜像命令" class="headerlink" title="docker镜像命令"></a>docker镜像命令</h3><pre><code class="shell">docker images [OPTIONS] [REPOSITORY[:TAG]]  # 查看所有镜像
docker search [OPTIONS] TERM                # 搜索镜像
docker search --filter stars=3000 mysql     # 搜索mysql，带筛选参数，=3000其实是大于3000的意思
docker pull [OPTIONS] NAME[:TAG|@DIGEST]    # 下载镜像
docker rmi [OPTIONS] IMAGE [IMAGE...]       # 删除镜像，按ID删除
docker rmi $(docker images -aq)             # 删除所有镜像，$()里面放的是变量
</code></pre>
<h3 id="docker容器命令"><a href="#docker容器命令" class="headerlink" title="docker容器命令"></a>docker容器命令</h3><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><pre><code class="shell">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]       # 在一个新的容器中运行这个镜像（的命令）

# 常用参数使用方式如下：
--name=&quot;name01&quot;         # 给容器命名
-d                      # 后台方式运行
-it                     # 以交互方式运行，进入容器查看内容
# 如：docker run -it centos /bin/bash # 以交互方式运行容器，运行参数为/bin/bash
-p                      # 指定容器端口，有以下四种方式
    -p ip主机端口:容器端口
    -p 主机端口:容器端口（常用）
    -p 容器端口
    容器端口
-P                      # 大写的P，随机指定端口
</code></pre>
<p>坑：docker使用-d后台运行，必须要有一个前台进程，若没有前台进程，docker发现没有应用，就会自动停止这个容器。</p>
<p>docker run -d centos这个命令虽然以后台方式运行，但是没有前台控制台进程，docker会自动停止这个容器；</p>
<p>docker run -d -it centos这个命令以后台方式运行，且有控制命令台，只不过控制命令台也在后台运行，因此docker启动这个容器后不会自动停止这个容器。</p>
<p>此外，第一个容器停止了之后无法重新启动，因为根源上就没有前台进程；而第二个容器手动停止后，是可以再次启动的，因此有前台进程。</p>
<h4 id="列举容器"><a href="#列举容器" class="headerlink" title="列举容器"></a>列举容器</h4><pre><code class="shell">docker ps [OPTIONS]             # 列举容器，默认显示当前正在运行的容器
docker ps -a                    # 列举所有容器，包括历史运行过的容器
</code></pre>
<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><pre><code class="shell">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]        # 进入容器并以COMMAND命令开启一个新的进程
docker attach [OPTIONS] CONTAINER                       # 进入容器并跳到正在执行的那个进程
</code></pre>
<h4 id="退出容器-以交互方式进入容器后的退出"><a href="#退出容器-以交互方式进入容器后的退出" class="headerlink" title="退出容器(以交互方式进入容器后的退出)"></a>退出容器(以交互方式进入容器后的退出)</h4><pre><code class="shell">exit                # 退出并停止容器
ctrl + P + Q        # 退出但不停止容器
</code></pre>
<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><pre><code class="shell">docker rm [OPTIONS] CONTAINER [CONTAINER...]        # 删除容器，默认不能删除正在运行的容器，按ID删除
-f                                                  # 强制删除，可以删除正在运行的容器
docker rm -f $(docker ps -aq)                       # 删除所有容器
</code></pre>
<h4 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h4><pre><code class="shell">docker start       # 启动容器
docker restart     # 重启容器
docker stop        # 停止容器
docker kill        # 杀死容器
</code></pre>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre><code class="shell">docker logs [OPTIONS] CONTAINER         # 查看日志
</code></pre>
<h4 id="查看容器内的进程"><a href="#查看容器内的进程" class="headerlink" title="查看容器内的进程"></a>查看容器内的进程</h4><pre><code class="shell">docker top CONTAINER [ps OPTIONS]       # 查看容器内的进程，CONTAINER为容器ID
</code></pre>
<h4 id="查看容器的元数据"><a href="#查看容器的元数据" class="headerlink" title="查看容器的元数据"></a>查看容器的元数据</h4><pre><code class="shell">docker inspect [OPTIONS] NAME|ID [NAME|ID...]       # 查看容器的元数据
</code></pre>
<h4 id="拷贝文件或文件夹"><a href="#拷贝文件或文件夹" class="headerlink" title="拷贝文件或文件夹"></a>拷贝文件或文件夹</h4><pre><code class="shell">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-      # 从容器拷贝至宿主机
docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH      # 从宿主机拷贝至容器
</code></pre>
<h3 id="docker命令小结"><a href="#docker命令小结" class="headerlink" title="docker命令小结"></a>docker命令小结</h3><p><img src="/images/docker%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93.png" alt="docker命令小结"></p>
<h3 id="docker命令练习"><a href="#docker命令练习" class="headerlink" title="docker命令练习"></a>docker命令练习</h3><h4 id="使用docker安装一个Nginx"><a href="#使用docker安装一个Nginx" class="headerlink" title="使用docker安装一个Nginx"></a>使用docker安装一个Nginx</h4><pre><code class="shell">docker search nginx --filter stars=3000           # 找到我们需要的image，也可以去官网上找
docker pull nginx                                 # 下载nginx
docker run -p 3344:80 --name nginx01 -d nginx     # 启动nginx，-p为端口映射参数，--name命名，-d为后台运行（该程序可以不需要前台进程）
curl localhost:3344                               # 结果如下的html页面
docker exec -it nginx01 /bin/bash                 # 进入容器
whereis nginx
# nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx
cd /etc/nginx
ls
# conf.d    fastcgi_params    koi-utf  koi-win  mime.types  modules  nginx.conf  scgi_params    uwsgi_params  win-utf
</code></pre>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Welcome to nginx!&lt;/title&gt;
&lt;style&gt;
    body &#123;
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    &#125;
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;
&lt;p&gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&lt;/p&gt;

&lt;p&gt;For online documentation and support please refer to
&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;
Commercial support is available at
&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;
</code></pre>
<h4 id="使用docker安装一个tomcat"><a href="#使用docker安装一个tomcat" class="headerlink" title="使用docker安装一个tomcat"></a>使用docker安装一个tomcat</h4><pre><code class="shell">docker search --filter stars=300 tomcat
docker pull tomcat
docker run -d -p 3355:8080 --name tomcat01 tomcat
docker exec -it tomcat01 /bin/bash                      # 进入了tomcat所在的容器
cd /usr/local/tomcat
cp -r webapps.dist/* webapps                            # 20210102，官方默认的tomcat是不带webapps这个文件夹的，可以从webapps.dist文件夹里面的所有文件拷贝到一个新建的webapps文件下，就可以了
^p ^q                                                   # 退出容器
curl localhost:3355                                     # 结果如下html所示（省略了body）
</code></pre>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;title&gt;Apache Tomcat/9.0.41&lt;/title&gt;
        &lt;link href=&quot;favicon.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-icon&quot; /&gt;
        &lt;link href=&quot;tomcat.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;div&gt;...省略&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="四、docker镜像"><a href="#四、docker镜像" class="headerlink" title="四、docker镜像"></a>四、docker镜像</h2><p>1、镜像是分层下载的，各个镜像之间的层可以共享，各个层的ID为其加密的一个唯一ID。</p>
<p>2、对于一个容器的所有修改，不是修改原来的层，而是会形成一个新的层，push到docker hub后只是在原来的层上面新加了一层，技术原理很像git。</p>
<h2 id="五、docker数据卷"><a href="#五、docker数据卷" class="headerlink" title="五、docker数据卷"></a>五、docker数据卷</h2><p>将容器内的数据<font color="Red">挂载</font>到宿主机上，实现数据同步。<font color="Red">这种同步是双向绑定，即任意一方的修改都会同步到另一方。同时这种同步不需要启动容器，容器未启动时，在宿主机的修改也会同步到容器中。</font></p>
<p><img src="/images/docker%E5%AE%B9%E5%99%A8%E5%8D%B7%E6%8A%80%E6%9C%AF.png" alt="docker容器卷技术"></p>
<h3 id="制定路径挂载"><a href="#制定路径挂载" class="headerlink" title="制定路径挂载"></a>制定路径挂载</h3><p><font color="Red">主机目录地址位置的值一定要以/开头，才是指定路径挂载</font></p>
<pre><code class="shell">docker run -it -v 主机目录地址:容器内目录地址

# 示例
docker run -it -v /home/yuyr757/Documents/testdocker:/home/testdocker centos /bin/bash
</code></pre>
<h3 id="练习：安装mysql并实现数据持久化"><a href="#练习：安装mysql并实现数据持久化" class="headerlink" title="练习：安装mysql并实现数据持久化"></a>练习：安装mysql并实现数据持久化</h3><pre><code class="shell"># 启动一个mysql容器，绑定了两个文件夹同步
docker run -p 3310:3306 -v /home/yuyr757/Documents/mysql/conf:/etc/mysql/conf.d -v /home/yuyr757/Documents/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 -d mysql

# 在外部通过3310端口访问mysql服务器，可以进入数据库
mysql -u root -proot -h 192.168.141.128 -P 3310

# 创建一个数据库
create table test;
create table test_table(id int unsigned auto_increment primary key, value varchar(20));

# 在linux宿主机和linux容器里面的数据文件夹都可以看到数据文件已经创建了。
# 在linux宿主机删除容器后会发现数据文件依旧存在！！
docker rm -f mysql01
root@yuyr757:/home/yuyr757/Documents/mysql/data# ls
 auto.cnf        binlog.index      client-key.pem       ibdata1      &#39;#innodb_temp&#39;        private_key.pem   sys
 binlog.000001   ca-key.pem       &#39;#ib_16384_0.dblwr&#39;   ib_logfile0   mysql                public_key.pem    test
 binlog.000002   ca.pem           &#39;#ib_16384_1.dblwr&#39;   ib_logfile1   mysql.ibd            server-cert.pem   undo_001
 binlog.000003   client-cert.pem   ib_buffer_pool       ibtmp1        performance_schema   server-key.pem    undo_002
</code></pre>
<h3 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h3><p><font color="Red">具名挂载（常用）</font>：<code>-v name:container_path</code>，name为挂在的卷名称，container_path为容器内路径，这种方式挂载的宿主机路径为：<code>/var/lib/docker/volumes/$&#123;name&#125;/_data</code>文件夹内。</p>
<p><font color="Red">匿名挂载</font>：<code>-v container_path</code>，-v后面只有一个路径，则是匿名挂载，匿名挂载的宿主机路径和上面一致，只是name为匿名ID而已。</p>
<pre><code class="shell"># 匿名挂载示例如下
docker run -P -d --name nginx02 -v /etc/nginx nginx

# 通过inspect查看元数据
docker inspect nginx02

# 里面有一个Mounts的Type为colume即为数据卷，可以看到其name为一串加密的ID
&quot;Mounts&quot;: [
&#123;
&quot;Type&quot;: &quot;volume&quot;,
&quot;Name&quot;: &quot;c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2&quot;,
&quot;Source&quot;: &quot;/var/lib/docker/volumes/c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2/_data&quot;,
&quot;Destination&quot;: &quot;/etc/nginx&quot;,
&quot;Driver&quot;: &quot;local&quot;,
&quot;Mode&quot;: &quot;&quot;,
&quot;RW&quot;: true,
&quot;Propagation&quot;: &quot;&quot;
&#125;
],

# 查看数据卷
docker volume ls
# DRIVER    VOLUME NAME
# local     c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2

# 查看卷的元数据
docker volume inspect c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2
[
    &#123;
        &quot;CreatedAt&quot;: &quot;2021-01-03T14:46:37+08:00&quot;,
        &quot;Driver&quot;: &quot;local&quot;,
        &quot;Labels&quot;: null,
        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2/_data&quot;,
        &quot;Name&quot;: &quot;c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2&quot;,
        &quot;Options&quot;: null,
        &quot;Scope&quot;: &quot;local&quot;
    &#125;
]
</code></pre>
<pre><code class="shell"># 具名挂载示例如下
docker run -P -d --name nginx03 -v juming-nginx:/etc/nginx nginx

docker inspect nginx03
&quot;Mounts&quot;: [
    &#123;
        &quot;Type&quot;: &quot;volume&quot;,
        &quot;Name&quot;: &quot;juming-nginx&quot;,
        &quot;Source&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,
        &quot;Destination&quot;: &quot;/etc/nginx&quot;,
        &quot;Driver&quot;: &quot;local&quot;,
        &quot;Mode&quot;: &quot;z&quot;,
        &quot;RW&quot;: true,
        &quot;Propagation&quot;: &quot;&quot;
    &#125;
],

docker volume ls
# DRIVER    VOLUME NAME
# local     c2c1a7a82624858a64db52998aa17b2bc68b92be1fd6a5ec1ce39f238935b8a2
# local     juming-nginx

docker volume inspect juming-nginx
[
    &#123;
        &quot;CreatedAt&quot;: &quot;2021-01-03T14:55:23+08:00&quot;,
        &quot;Driver&quot;: &quot;local&quot;,
        &quot;Labels&quot;: null,
        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,
        &quot;Name&quot;: &quot;juming-nginx&quot;,
        &quot;Options&quot;: null,
        &quot;Scope&quot;: &quot;local&quot;
    &#125;
]
</code></pre>
<h3 id="数据卷权限"><a href="#数据卷权限" class="headerlink" title="数据卷权限"></a>数据卷权限</h3><p>-v后面的容器目录还跟了一个<code>:ro</code>或<code>:rw</code>，默认是<code>:rw</code>。</p>
<p><code>:ro</code>：readonly，即容器内的绑定的那个目录是只读的，无法在容器内修改，只能在宿主机修改。</p>
<p><code>:rw</code>：readwrite，即容器内绑定的那个目录有读写权限。</p>
<p>如下：</p>
<pre><code class="shell">docker run -P -d --name nginx04 -v juming-nginx04:/etc/nginx:ro nginx
docker exec -it nginx04 /bin/bash
cd /etc/nginx
mkdir test
# mkdir: cannot create directory &#39;test&#39;: Read-only file system
</code></pre>
<h3 id="挂载数据卷的第二种方式"><a href="#挂载数据卷的第二种方式" class="headerlink" title="挂载数据卷的第二种方式"></a>挂载数据卷的第二种方式</h3><p>在构建image时即把需要挂载的卷路径写上，启动时即会自动挂载卷。如protainer的官方镜像就会自动挂载两个卷。</p>
<h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>容器之间可以同步数据，即为数据卷容器。</p>
<p><img src="/images/docker%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8.png"></p>
<pre><code class="shell">docker run --volumes-from [container]
</code></pre>
<h2 id="六、DockerFile"><a href="#六、DockerFile" class="headerlink" title="六、DockerFile"></a>六、DockerFile</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>DockerFIle是用来构建docker镜像的命令行脚本文件。就像装双系统或装虚拟机时，要做一个镜像，把一系列装系统时要加入系统的软件或需要执行的命令放到镜像中。</p>
<p>1、每一个指令都是大写</p>
<p>2、每一个指令都会提交一个新的镜像层</p>
<p>如ubuntu镜像的dockerfile脚本如下：</p>
<pre><code class="shell">FROM scratch
ADD ubuntu-bionic-core-cloudimg-amd64-root.tar.gz /
RUN set -xe \
    &amp;&amp; echo &#39;#!/bin/sh&#39; &gt; /usr/sbin/policy-rc.d \
    &amp;&amp; echo &#39;exit 101&#39; &gt;&gt; /usr/sbin/policy-rc.d \
    &amp;&amp; chmod +x /usr/sbin/policy-rc.d \
    &amp;&amp; dpkg-divert --local --rename --add /sbin/initctl \
    &amp;&amp; cp -a /usr/sbin/policy-rc.d /sbin/initctl \
    &amp;&amp; sed -i &#39;s/^exit.*/exit 0/&#39; /sbin/initctl \
    &amp;&amp; echo &#39;force-unsafe-io&#39; &gt; /etc/dpkg/dpkg.cfg.d/docker-apt-speedup \
    &amp;&amp; echo &#39;DPkg::Post-Invoke &#123; &quot;rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true&quot;; &#125;;&#39; &gt; /etc/apt/apt.conf.d/docker-clean \
    &amp;&amp; echo &#39;APT::Update::Post-Invoke &#123; &quot;rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true&quot;; &#125;;&#39; &gt;&gt; /etc/apt/apt.conf.d/docker-clean \
    &amp;&amp; echo &#39;Dir::Cache::pkgcache &quot;&quot;; Dir::Cache::srcpkgcache &quot;&quot;;&#39; &gt;&gt; /etc/apt/apt.conf.d/docker-clean \
    &amp;&amp; echo &#39;Acquire::Languages &quot;none&quot;;&#39; &gt; /etc/apt/apt.conf.d/docker-no-languages \
    &amp;&amp; echo &#39;Acquire::GzipIndexes &quot;true&quot;; Acquire::CompressionTypes::Order:: &quot;gz&quot;;&#39; &gt; /etc/apt/apt.conf.d/docker-gzip-indexes \
    &amp;&amp; echo &#39;Apt::AutoRemove::SuggestsImportant &quot;false&quot;;&#39; &gt; /etc/apt/apt.conf.d/docker-autoremove-suggests
RUN [ -z &quot;$(apt-get indextargets)&quot; ]
RUN mkdir -p /run/systemd &amp;&amp; echo &#39;docker&#39; &gt; /run/systemd/container

CMD [&quot;/bin/bash&quot;]
</code></pre>
<h3 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h3><p>可见参考如下博客：<a target="_blank" rel="noopener" href="https://www.cnblogs.com/nuccch/p/10828666.html">https://www.cnblogs.com/nuccch/p/10828666.html</a></p>
<pre><code class="shell">docker history [image]             # 查看某个镜像构建的所有历史过程，很像git log
</code></pre>
<p>CMD命令和ENTRYPOINT的区别：</p>
<p>CMD只会执行最后一条CMD命令，且docker run的参数会覆盖CMD中的参数；</p>
<p>ENTRYPOINT所有命令都会执行，且docker run的参数会追加到ENTRYPOINT命令后面。</p>
<h2 id="七、docker网络"><a href="#七、docker网络" class="headerlink" title="七、docker网络"></a>七、docker网络</h2><h3 id="docker网络基础"><a href="#docker网络基础" class="headerlink" title="docker网络基础"></a>docker网络基础</h3><p>docker网络和vmware虚拟机的网络相似，docker默认使用网桥虚拟网络。</p>
<p>docker容器与宿主机之间、docker容器之间都是通过docker0这个路由器来通信的。</p>
<p>docker网络模型如下：</p>
<p><img src="/images/docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1.png"></p>
<p><img src="/images/docker%E5%AE%B9%E5%99%A8%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1.png"></p>
<h3 id="docker网络命令"><a href="#docker网络命令" class="headerlink" title="docker网络命令"></a>docker网络命令</h3><pre><code class="shell">docker network COMMAND

# 列举所有网络
docker network ls

# 查看某个网络详情
docker network inspect [network_id]

# 创建一个自定义网络
docker network create

# 查看linex的端口映射/转发
iptables -t nat -L -n
</code></pre>
<h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><blockquote>
<p>问题：在微服务中，通过是通过服务名称访问服务的，如果一个mysql服务挂了，重启一个mysql的docker服务后，ip地址就可能换了，因此如果可以通过docker的名称就能访问到docker服务就好了。</p>
</blockquote>
<p>–link可以解决，但不推荐。推荐使用自定义网络。</p>
<h4 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h4><ul>
<li>bridge：桥接（docker默认）</li>
<li>none：不使用网络</li>
<li>host：主机模式，和宿主机共享网络</li>
<li>container：容器网络连通（用的少）</li>
</ul>
<pre><code class="shell"># 直接启动容器时，其实会有一个默认参数--net bridge如下，即使用docker默认的桥接网络
docker run -d -P --name tomcat01 --net bridge tomcat

# 创建一个自定义网络
# --driver：网络模式
# --subnet：子网范围
# 192.168.0.0/16可用的子网为192.168.0.2-192.168.255.255
# 192.168.0.0/24可用的子网为192.168.0.2-192.168.0.255
# --gateway：网关地址，所有子网和网络中其他地址通信都要通过该地址来路由
docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet

# 查看网络
docker network ls
# NETWORK ID     NAME      DRIVER    SCOPE
# 40b40bd10d88   bridge    bridge    local
# c76560fbd32a   host      host      local
# b7176c250a27   mynet     bridge    local # 这个就是我们新建的自定义网络
# 9cdc4457c126   none      null      local

# 将tomcat放在我们自己的网络中
docker run -d -P --name tomcat01 --net mynet tomcat
</code></pre>
<p><font color="Red">注意：使用自定义网络就可以直接使用容器名字ping通其他容器，不需要配置任何其他东西。而docker自带的网络docker0卻不具备这样的功能。</font></p>
<p>构建自定义网络还一个好处就是，可以把不同的服务集群部署在不同的网络下，保证了集群是安全的健康的。</p>
<h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><blockquote>
<p>两个不同网络之间的容器如何ping通？即一个容器使用docker0，另一个容器使用我们创建的自定义网络。都不在同一个网段下，无法通过各自的网关ping通，那这个如何做到呢？</p>
</blockquote>
<p>docker提供了一个方法，可以将容器连接到一个网络。</p>
<pre><code class="shell"># 将一个容器连接到另一个网络下
docker network connect [OPTIONS] NETWORK CONTAINER

# 使用docker0创建一个容器
docker run -d -P --name tomcat-default-01 tomcat

# 将tomcat-default-01容器和mynet网络打通
docker network connect mynet tomcat-default-01 # 命令结束后什么事情都没发生

# 查看mynet网络详情，会发现是直接把这个容器又挂在了mynet网络下
docker network inspect b7176c250a27
&quot;Containers&quot;: &#123;
     &quot;349c6846987344c00f2bd138698ceca3651a41add5456aebe6a2b8727955d7f8&quot;: &#123;
         &quot;Name&quot;: &quot;tomcat-default-01&quot;,
         &quot;EndpointID&quot;: &quot;fda6d449a211b053e084898d0e0b53008b0dc9e0735d18f29e1f7a59a2a4ae2b&quot;,
         &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,
         &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,
         &quot;IPv6Address&quot;: &quot;&quot;
     &#125;,
     &quot;fca88679607e20464de21c5fe0599e40fe221e534df766a4df27efd99ab66f6b&quot;: &#123;
         &quot;Name&quot;: &quot;tomcat01&quot;,
         &quot;EndpointID&quot;: &quot;c06c4eb1d7f29ed4ca8cc10a7ca79c2e3b993d787fc7e993e0baf026e7dfbace&quot;,
         &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,
         &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,
         &quot;IPv6Address&quot;: &quot;&quot;
     &#125;
&#125;,

# 查看tomcat-default-01容器详情，会发现它有两个网络
docker inspect tomcat-default-01
&quot;Networks&quot;: &#123;
    &quot;bridge&quot;: &#123;
        &quot;IPAMConfig&quot;: null,
        &quot;Links&quot;: null,
        &quot;Aliases&quot;: null,
        &quot;NetworkID&quot;: &quot;40b40bd10d8870bf241428acac690dcdda5e6a47a80f924da1027eecf84bf28d&quot;,
        &quot;EndpointID&quot;: &quot;ac4f9011bdc4a67fc3b1ce34b37687dc7ff7c38a5ab8f92467d1f69aa9c1b9e8&quot;,
        &quot;Gateway&quot;: &quot;172.17.0.1&quot;,
        &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,
        &quot;IPPrefixLen&quot;: 16,
        &quot;IPv6Gateway&quot;: &quot;&quot;,
        &quot;GlobalIPv6Address&quot;: &quot;&quot;,
        &quot;GlobalIPv6PrefixLen&quot;: 0,
        &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,
        &quot;DriverOpts&quot;: null
    &#125;,
    &quot;mynet&quot;: &#123;
        &quot;IPAMConfig&quot;: &#123;&#125;,
        &quot;Links&quot;: null,
        &quot;Aliases&quot;: [
            &quot;349c68469873&quot;
        ],
        &quot;NetworkID&quot;: &quot;b7176c250a272ee1db707007378b611d507fd92c46f7ef1f4e5049ae817019ad&quot;,
        &quot;EndpointID&quot;: &quot;fda6d449a211b053e084898d0e0b53008b0dc9e0735d18f29e1f7a59a2a4ae2b&quot;,
        &quot;Gateway&quot;: &quot;192.168.0.1&quot;,
        &quot;IPAddress&quot;: &quot;192.168.0.3&quot;,
        &quot;IPPrefixLen&quot;: 16,
        &quot;IPv6Gateway&quot;: &quot;&quot;,
        &quot;GlobalIPv6Address&quot;: &quot;&quot;,
        &quot;GlobalIPv6PrefixLen&quot;: 0,
        &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,
        &quot;DriverOpts&quot;: &#123;&#125;
    &#125;
&#125;
</code></pre>
<p><font color="Red">这种方式即是一个容器两个ip</font></p>
<p><img src="/images/docker%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%A1.png"></p>
<h2 id="八、实战：部署一个redis集群"><a href="#八、实战：部署一个redis集群" class="headerlink" title="八、实战：部署一个redis集群"></a>八、实战：部署一个redis集群</h2><p>需要部署的redis集群模型如下：</p>
<p><img src="/images/docker%E9%83%A8%E7%BD%B2redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%9E%8B.png"></p>
<pre><code class="shell"># 先建一个redis集群网络
docker network create --subnet 172.38.0.0/16 redis

# 通过脚本创建六个redis配置文件
for port in $(seq 1 6); \
do \
mkdir -p /home/yuyr757/Documents/redis/node-$&#123;port&#125;/conf
touch /home/yuyr757/Documents/redis/node-$&#123;port&#125;/conf/redis.conf
cat &lt;&lt; EOF &gt;/home/yuyr757/Documents/redis/node-$&#123;port&#125;/conf/redis.conf
port 6379
bind 0.0.0.0
cluster-enabled yes
cluster-config-file yes
cluster-node-timeout 5000
cluster-announce-ip 172.38.0.1$&#123;port&#125;
cluster-announce-port 6379
cluster-announce-bus-port 16379
appendonly yes
EOF
done

# 启动redis
for port in $(seq 1 6); \
do \
docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \
-v /home/yuyr757/Documents/redis/node-$&#123;port&#125;/data:/data \
-v /home/yuyr757/Documents/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \
-d --net redis --ip 172.38.0.1$&#123;port&#125; redis redis-server /etc/redis/redis.conf; \
done

# 进入redis-1
docker exec -it redis-1 /bin/bash

# 创建集群
redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1
# 以下是输出消息：
&lt;&lt;&#39;COMMENT&#39;
&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...
Master[0] -&gt; Slots 0 - 5460
Master[1] -&gt; Slots 5461 - 10922
Master[2] -&gt; Slots 10923 - 16383
Adding replica 172.38.0.15:6379 to 172.38.0.11:6379
Adding replica 172.38.0.16:6379 to 172.38.0.12:6379
Adding replica 172.38.0.14:6379 to 172.38.0.13:6379
M: 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379
   slots:[0-5460] (5461 slots) master
M: 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379
   slots:[5461-10922] (5462 slots) master
M: a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379
   slots:[10923-16383] (5461 slots) master
S: 476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379
   replicates a3b25de9426dd1d4143870a08740b481f0a2560f
S: c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379
   replicates 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee
S: 20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379
   replicates 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9
Can I set the above configuration? (type &#39;yes&#39; to accept): yes
&gt;&gt;&gt; Nodes configuration updated
&gt;&gt;&gt; Assign a different config epoch to each node
&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join
...
&gt;&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)
M: 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379
   slots:[0-5460] (5461 slots) master
   1 additional replica(s)
M: a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379
   slots:[10923-16383] (5461 slots) master
   1 additional replica(s)
M: 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379
   slots:[5461-10922] (5462 slots) master
   1 additional replica(s)
S: 476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379
   slots: (0 slots) slave
   replicates a3b25de9426dd1d4143870a08740b481f0a2560f
S: c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379
   slots: (0 slots) slave
   replicates 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee
S: 20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379
   slots: (0 slots) slave
   replicates 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9
[OK] All nodes agree about slots configuration.
&gt;&gt;&gt; Check for open slots...
&gt;&gt;&gt; Check slots coverage...
[OK] All 16384 slots covered.
COMMENT

# 进入redis-1
docker exec -it redis-1 /bin/bash

# 进入redis集群客户端
redis-cli -c

# 查看redis集群信息
127.0.0.1:6379&gt; cluster info
&lt;&lt;&#39;COMMENT&#39;
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:6
cluster_size:3
cluster_current_epoch:6
cluster_my_epoch:1
cluster_stats_messages_ping_sent:107
cluster_stats_messages_pong_sent:105
cluster_stats_messages_sent:212
cluster_stats_messages_ping_received:100
cluster_stats_messages_pong_received:107
cluster_stats_messages_meet_received:5
cluster_stats_messages_received:212
COMMENT

# 查看集群中的结点
127.0.0.1:6379&gt; cluster nodes
&lt;&lt;&#39;COMMENT&#39;
a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379@16379 master - 0 1610196549828 3 connected 10923-16383
52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379@16379 master - 0 1610196549324 2 connected 5461-10922
476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379@16379 slave a3b25de9426dd1d4143870a08740b481f0a2560f 0 1610196550000 3 connected
4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379@16379 myself,master - 0 1610196548000 1 connected 0-5460
c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379@16379 slave 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 0 1610196551341 1 connected
20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379@16379 slave 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 0 1610196550332 2 connected
COMMENT

# 测试redis
127.0.0.1:6379&gt; set a b
-&gt; Redirected to slot [15495] located at 172.38.0.13:6379
OK

# 停止redis-3
docker stop redis-3

# 在redis-1服务器上请求redis，在14服务器上相应了
127.0.0.1:6379&gt; get a
-&gt; Redirected to slot [15495] located at 172.38.0.14:6379
&quot;b&quot;

# 查看redis集群的结点信息，发现172.38.0.13已经fail了，本来作为从服务器的14服务器已经变成主服务器了。
172.38.0.14:6379&gt; cluster nodes
&lt;&lt;&#39;COMMENT&#39;
476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379@16379 myself,master - 0 1610197181000 7 connected 10923-16383
4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379@16379 master - 0 1610197183456 1 connected 0-5460
c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379@16379 slave 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 0 1610197182445 1 connected
52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379@16379 master - 0 1610197183000 2 connected 5461-10922
a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379@16379 master,fail - 1610197047513 1610197045000 3 connected
20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379@16379 slave 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 0 1610197183052 2 connected
COMMENT

# 再次启动redis-3
docker start redis-3

# 再次查看redis集群结点，发现redis-3服务器已经变从服务器了。
127.0.0.1:6379&gt; cluster nodes
52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 172.38.0.12:6379@16379 master - 0 1610197501795 2 connected 5461-10922
a3b25de9426dd1d4143870a08740b481f0a2560f 172.38.0.13:6379@16379 myself,slave 476e79e895cc6eecbb36634273031afdd737c534 0 1610197500000 7 connected
c3de87b8608fa93d28cf5059b08f0e58c5c0abb5 172.38.0.15:6379@16379 slave 4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 0 1610197500785 1 connected
476e79e895cc6eecbb36634273031afdd737c534 172.38.0.14:6379@16379 master - 0 1610197500000 7 connected 10923-16383
4b8d468f5abc19a98b4a6d22696e33e1b1de2eee 172.38.0.11:6379@16379 master - 0 1610197500000 1 connected 0-5460
20401be641326be8a2891c8215317d8c70064986 172.38.0.16:6379@16379 slave 52a3ef91ba1ac1bae92da386d8a1d48c319a95e9 0 1610197500583 2 connected
</code></pre>
<h2 id="九、实战：部署一个wordpress博客"><a href="#九、实战：部署一个wordpress博客" class="headerlink" title="九、实战：部署一个wordpress博客"></a>九、实战：部署一个wordpress博客</h2><pre><code class="shell">docker network create --driver bridge --subnet 192.0.0.0/16 --gateway 192.0.0.1 wordpressnetwork

docker run -d -P -e MYSQL_ROOT_PASSWORD=root --name mysql-for-wordpress -v /home/wordpress/mysql/data:/var/lib/mysql -v /home/wordpress/mysql/conf:/etc/mysql/conf.d --network wordpressnetwork mysql

# 进入数据库容器，建一个数据库用于wordpress用，名称为wordpress。
docker exec -it mysql-for-wordpress /bin/bash
mysql -u root -proot
create table wordpress;
exit;

docker run -d -P --name wordpress -v /home/wordpress/wordpress:/usr/share/wordpress --network wordpressnetwork wordpress
# 这一步可以直接加以下等参数，也可以在前台进入wordpress时设置
# -e WORDPRESS_DB_HOST=mysql-for-wordpress
# -e WORDPRESS_DB_USER=root
# -e WORDPRESS_DB_PASSWORD=root
# -e WORDPRESS_DB_NAME=wordpress
# -e WORDPRESS_TABLE_PREFIX=wp_
</code></pre>

</div>


    <div class="post-guide">
        <div class="item left">
            
              <a href="/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88">
                  <i class="fa fa-angle-left" aria-hidden="true"></i>
                  MySQL备份-Linux版
              </a>
            
        </div>
        <div class="item right">
            
              <a href="/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain">
                MySQL查询执行计划详解-explain
                <i class="fa fa-angle-right" aria-hidden="true"></i>
              </a>
            
        </div>
    </div>




<script>
	
	
</script>
	</div>
	<div id="footer">
	<p>
	©2019-<span id="footerYear"></span> 
	
	<br>
	Theme <a href="//github.com/wujun234/hexo-theme-tree" target="_blank">Tree</a>
	Powered by <a href="//hexo.io" target="_blank">Hexo</a>
	</p>
</div>
<script type="text/javascript"> 
	document.getElementById('footerYear').innerHTML = new Date().getFullYear() + '';
</script>
	<button id="totop-toggle" class="toggle"><i class="fa fa-angle-double-up" aria-hidden="true"></i></button>
</body>
</html>