<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yury&#39;s Note</title>
  
  
  <link href="https://yury757.github.io/atom.xml" rel="self"/>
  
  <link href="https://yury757.github.io/"/>
  <updated>2022-05-22T17:58:36.139Z</updated>
  <id>https://yury757.github.io/</id>
  
  <author>
    <name>Yury</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis</title>
    <link href="https://yury757.github.io/database/redis/redis/"/>
    <id>https://yury757.github.io/database/redis/redis/</id>
    <published>2022-05-02T16:00:00.000Z</published>
    <updated>2022-05-22T17:58:36.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、ACL"><a href="#一、ACL" class="headerlink" title="一、ACL"></a>一、ACL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">ACL &lt;subcommand&gt; [&lt;arg&gt; [value] [opt] ...].     # access control list，访问控制列表，可以结合subcommand子命令形成很多命令组合，主要用于权限访问相关命令。<br><br>如：<br>acl cat [&lt;category&gt;]     # 列举category目录下的所有命令，若未指定category，则列举所有category<br>acl users                                 # 展示所有用户<br>acl whoami                                # 展示当前用户<br>acl deluser &lt;username&gt; [&lt;username&gt; ...]   # 删除用户<br>acl getuser &lt;username&gt;                    # 获取用户详细信息<br>acl list                                  # 以配置文件格式展示所有用户详情<br>acl setuser &lt;username&gt; &lt;attribute&gt; [&lt;attribute&gt; ...]  # 新增或者修改用户属性<br>acl genpass [&lt;bits&gt;]                      # 生成一个指定位长度（默认256位）的伪随机密码，注意这个长度是位的长度而不是生成的密码的长度<br>acl load                                  # 从ACL文件中重新加载用户配置文件<br>acl save                                  # 将当前配置保存在ACL文件中<br>acl log [&lt;count&gt; | RESET]                 # 展示acl日志入口<br>acl help                                  # 显示acl命令帮助<br></code></pre></td></tr></table></figure><blockquote><p> 1、修改用户权限</p></blockquote><p><code>acl setuser &lt;username&gt; &lt;attribute&gt; [&lt;attribute&gt; ...]</code></p><p>该命令的attribute叫ACL RULE，ACL RULE分为两部分，一部分是命令访问权限相关（<code>Command rules</code>），另一部分是定义了用户状态（<code>User management rules</code>）</p><p>完整的使用方式参考：<code>[ACL SETUSER | Redis](https://redis.io/commands/acl-setuser/)</code></p><p>命令规则主要有：</p><ul><li><p><code>~&lt;pattern&gt;</code>：控制用户只能访问符合pattern模式的key</p></li><li><p><code>allkeys</code>：可以访问所有key，等于<code>~*</code></p></li><li><p><code>&amp;&lt;pattern&gt;</code>：控制用户只能访问符合pattern模式的发布/订阅channel</p></li><li><p><code>allchannels</code>：可以访问所有channel，，等于<code>&amp;*</code></p></li><li><p><code>+&lt;command&gt;</code>：为用户添加一个命令访问权限，即可以访问这个命令</p></li><li><p><code>-&lt;command&gt;</code>：为用户减少一个命令访问权限，即无法访问这个命令</p></li><li><p><code>allcommands</code>：用户可以访问所有命令</p></li><li><p><code>nocommands</code>：移除用户所有命令的访问权限，啥都干不了了</p></li><li><p><code>+@&lt;category&gt;</code>：为用户添加一个目录的访问权限，该目录下的所有命令都可以访问</p></li><li><p><code>-@&lt;category&gt;</code>：为用户减少一个目录的访问权限，该目录下的所有命令都无法访问</p></li></ul><p>用户状态规则主要有：</p><ul><li><code>on</code>：将用户设置为有效</li><li><code>off</code>：将用户设置为无效用户</li><li><code>&gt;mypassword</code>：为用户新增一个密码，输入方式为可读的明文。redis允许为一个用户设置多个密码</li><li><code>#hashedpassword</code>：为用户新增一个密码，输入方式为hash加密后的密文</li><li><code>&lt;mypassword</code>：为用户减少一个密码</li><li><code>!hashedpassword</code>：为用户减少一个密码，输入方式为hash加密后的密文</li><li><code>reset</code>：重置为空用户，即设置为off, without passwords，无法执行任何命令，也无法访问任何key</li></ul><p>开放权限用+，收回权限用-，对应的权限为<code>acl cat [&lt;category&gt;]</code>列举出来的目录或者命令</p><h2 id="二、数据库相关命令"><a href="#二、数据库相关命令" class="headerlink" title="二、数据库相关命令"></a>二、数据库相关命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">select &lt;index&gt;   # 切换数据库<br>dbsize           # 查看当前数据库的key的数量，O(1)时间复杂度<br>flushdb &lt;async|sync&gt;   # 清空当前库。默认参数是同步，6.2版本后，可以通过设置lazyfree-lazy-user-flush配置参数为yes，将该命令的默认参数调整为异步。异步清空时，只会删除执行命令的时间点之前的key，在那个时间点之后写入的key不受影响<br>flushall &lt;async|sync&gt;  # 清空所有库。参数同上。<br></code></pre></td></tr></table></figure><h2 id="三、key相关命令"><a href="#三、key相关命令" class="headerlink" title="三、key相关命令"></a>三、key相关命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">keys &lt;pattern&gt;    # 按照glob pattren，列举所有满足条件的key。<br><span class="hljs-meta">#</span><span class="bash"> 注意如果数据量很大，这个速度会很慢，O(N)时间复杂度，生产环境要尤其小心使用</span><br><span class="hljs-meta">#</span><span class="bash"> 在应用程序中应尽量避免使用keys，如果需要搜索key，应该考虑使用scan或者sets</span><br>exists &lt;key...&gt; [&lt;key&gt;...]   # 判断key...是否存在，返回值是存在的key的数量<br>type &lt;key&gt;                   # 查看key对应的value的类型<br>del &lt;key...&gt; [&lt;key&gt;...]      # 直接删除一个key，阻塞删除<br>unlink &lt;key...&gt; [&lt;key&gt;...]   # 从keyspace删除一个key，然后会在另一个线程异步删除实际内存中的key，非阻塞删除<br>expire &lt;key&gt; &lt;second&gt;        # 给key设置过期时间，单位秒<br>ttl &lt;key&gt;                    # 查看key的剩余过期时间，返回-1表示永不过期，返回-2表示已经过期了<br></code></pre></td></tr></table></figure><h2 id="四、常用数据类型"><a href="#四、常用数据类型" class="headerlink" title="四、常用数据类型"></a>四、常用数据类型</h2><h3 id="1、String"><a href="#1、String" class="headerlink" title="1、String"></a>1、String</h3><p><strong>（1）数据结构</strong></p><p>String底层是安全的二进制形式，这样String可以包含所有类型的数据。</p><p>String使用的数据结构叫<strong>简单动态字符串</strong>，相当于java的<code>List&lt;Character&gt;</code>。</p><p>String最大512兆个字节，对于ascii字符，一个字符占用一个字节，512兆就是也可以代表长度，但是对于中文，一个unicode中文字符占用3个字节，因此若包含非ascii字符，则最大长度小于512兆。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">set &lt;key&gt; &lt;value&gt;<br>get &lt;key&gt;<br>append &lt;key&gt; &lt;value&gt;<br>strlen &lt;key&gt;<br>setnx &lt;key&gt; &lt;value&gt;       # 重要！！只有在key不存在时，才设置成功，否则设置失败。多用于分布式锁<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 数值型字符串操作</span><br>incr &lt;key&gt;                # 使数字值增加1<br>decr &lt;key&gt;                # 使数字值减小1<br>incrby &lt;key&gt; &lt;increment&gt;  # 使数字值增加increment<br>decrby &lt;key&gt; &lt;increment&gt;  # 使数字值减小increment<br><span class="hljs-meta">#</span><span class="bash"> 由于redis是单线程存取，没有并发问题，因此这些命令本身就是原子性操作。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 批量操作，可以批量设置key以及获取key</span><br>mset &lt;key&gt; &lt;value&gt; [&lt;key&gt; &lt;value&gt; ...]<br>mget &lt;key&gt; [&lt;key&gt; ...]                        # 返回结果按照get的顺序展示<br>msetnx &lt;key&gt; &lt;value&gt; [&lt;key&gt; &lt;value&gt; ...]      # 注意！！该命令是原子操作，只要有一个key存在则全部失败。<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> range操作</span><br>getrange &lt;key&gt; &lt;start&gt; &lt;end&gt;                  # 获取字符串中[start, end]区间内的字符<br>setrange &lt;key&gt; &lt;offset&gt; &lt;value&gt;               # 从offset下标开始设置value<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 带货期时间的<span class="hljs-built_in">set</span></span><br>setex &lt;key&gt; &lt;second&gt; &lt;value&gt;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> get原值并<span class="hljs-built_in">set</span>新值</span><br>getset &lt;key&gt; &lt;value&gt;       # set新值，并返回原先的值<br></code></pre></td></tr></table></figure><h3 id="2、List"><a href="#2、List" class="headerlink" title="2、List"></a>2、List</h3><p><strong>（1）数据结构</strong></p><p>redis的List列表是<strong>双向链表</strong>，底层数据结构用<strong>压缩列表+链表</strong>实现，表现形式相当于java的<code>LinkedList&lt;String&gt;</code>。</p><p>两边存取的时间复杂度为O(1)，随机访问的时间复杂度为O(N)。</p><p>当list中没有任何元素时，key也会被移除。</p><p>List常用于获取最新数据、或者最近信息的业务场景，比如获取最近10条短信，获取最新资讯等等。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取长度，时间复杂度O(1)。若key不存在则返回0，若key不是list，则报错</span><br>llen &lt;key&gt;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> l表示从左边按顺序操作，r表示从右边按顺序操作</span><br>lpush/rpush &lt;key&gt; &lt;element&gt; [&lt;element&gt;...]    # 将元素push到列表中<br>lrange/rrange &lt;key&gt; &lt;start&gt; &lt;stop&gt;            # 获取列表中[start, stop]区间内的元素，stop若为-1表示所有<br>lpop/rpop &lt;key&gt; [count]                       # 移除count（默认值1）个数量的元素并按顺序返回这些元素<br>blpop/brpop &lt;key&gt; [&lt;key&gt;...] &lt;timeout&gt;        # 阻塞式地取出一个元素，直到超时或者元素出现。当timeout为0时，永久等待<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> rpoplpush，当需要将一个list按顺序移动到另外一个list上时，可以循环这么操作</span><br>rpoplpush &lt;source&gt; &lt;destination&gt;              # 对source执行rpop，并将取出来的元素对destination执行lpush<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 这里的l代表list，而不是left</span><br>lindex &lt;key&gt; &lt;index&gt;                          # 从左边根据下标index获取对应元素<br>lset &lt;key&gt; &lt;index&gt; &lt;value&gt;                    # 从左边将下标为index的元素替换成value<br>lrem &lt;key&gt; &lt;count&gt; &lt;element&gt;                  # 从左边移除count个element元素<br>ltrim &lt;key&gt; &lt;start&gt; &lt;stop&gt;                    # 从左到右，只保留[start, stop]区间内的元素<br>linsert &lt;key&gt; &lt;before/after&gt; &lt;pivot&gt; &lt;element&gt; # 从左边在扫描到的第一个pivot元素前面或后面插入element元素<br></code></pre></td></tr></table></figure><h3 id="3、Set"><a href="#3、Set" class="headerlink" title="3、Set"></a>3、Set</h3><p><strong>（1）数据结构</strong></p><p>redis的Set就是一个哈希表，底层数据结构叫<strong>字典</strong>，相当于java的<code>HashSet&lt;String&gt;</code>。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">sadd &lt;key&gt; &lt;member&gt; [&lt;member&gt;...]<br>smembers &lt;key&gt;                          # 获取set中的所有元素，返回顺序可能不是插入顺序<br>sismember &lt;key&gt; &lt;member&gt;                # 判断member是否存在于集合中<br>scard &lt;key&gt;                             # 获取集合中元素数量<br>srem &lt;key&gt; &lt;member&gt;  [&lt;member&gt;...]      # 删除指定元素<br><br>spop &lt;key&gt; [count]                      # 随机删除count个元素，并返回这些元素<br>srandmember &lt;key&gt; [count]               # 随机取出count个元素<br><br>smove &lt;key&gt; &lt;source&gt; &lt;destination&gt; &lt;member&gt; # 将元素member从source移动到destination集合中<br><br>sinter &lt;key&gt; [&lt;key&gt;...]                 # 取所有集合的交集，若只给定一个参数，则返回所有元素<br>sunion &lt;key&gt; [&lt;key&gt;...]                 # 取所有集合的并集，若只给定一个参数，则返回所有元素<br>sdiff &lt;key1&gt; [&lt;keyn&gt;...]                # 取key1中不存在于keyn里面的元素，若只给定一个参数，则返回所有元素<br></code></pre></td></tr></table></figure><h3 id="4、Hash"><a href="#4、Hash" class="headerlink" title="4、Hash"></a>4、Hash</h3><p><strong>（1）数据结构</strong></p><p>redis的Hash是一个哈希表，即value本身又是一个哈希表，相当于Java的<code>HashMap&lt;String, String&gt;</code>。数据结构为<strong>压缩列表</strong>和<strong>哈希表</strong>两种，当数量小时用压缩列表，当数量大时用哈希表。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">hset &lt;key&gt; &lt;field&gt; &lt;value&gt; [&lt;field&gt; &lt;value&gt;...]      # 等于hmset，hmset已经被弃用<br>hget &lt;key&gt; &lt;field&gt; [&lt;field&gt;...]                      # 等于hmget，hmget已经被弃用<br>hexists<br>hkeys<br>hvals<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重要操作</span><br>hincrby &lt;key&gt; &lt;field&gt; &lt;increment&gt;             # 给field增加increment<br>hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;                  # 只有field不存在时才set成功，否则set失败<br></code></pre></td></tr></table></figure><h3 id="5、Zset"><a href="#5、Zset" class="headerlink" title="5、Zset"></a>5、Zset</h3><p><strong>（1）数据结构</strong></p><p>Zset是指有序集合，即按照一定评分（score）排序后的Set，即Sorted Set。使用的数据结构是<strong>哈希表结合跳跃表</strong>，在哈希表中，field是对应的member，而value是对应的score，然后在此基础上建立一层跳跃表。</p><p>Zset常用于需要排序的业务场景，如获取热度前十的新闻等。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">zadd &lt;key&gt; &lt;score&gt; &lt;member&gt; [&lt;score&gt; &lt;member&gt;...]<br>zrange &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores]           # 获取排序在[min, max]区间内的元素<br>zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores]    # 获取score在[min, max]区间内的元素<br>zount &lt;key&gt; &lt;min&gt; &lt;max&gt;                         # 统计score在[min, max]区间内的元素数量<br>zrank &lt;key&gt; &lt;member&gt;                            # 获取member的排名，若score相同，则按照写入顺序获取排名<br><br>zrevrange &lt;key&gt; &lt;start&gt; &lt;stop&gt;                  # 反向，从大到小获取排序在[start, stop]区间内的元素<br>zrevrangebyscore &lt;key&gt; &lt;max&gt; &lt;min&gt; [withscores] # 反向，从大到小获取score在[min, max]区间内的元素<br><br>zincrby &lt;key&gt; &lt;increment&gt; &lt;member&gt;              # 给member的score加上increment，自动重新排序<br>zrem &lt;key&gt; &lt;member&gt; [&lt;member&gt;...]               # 删除member<br></code></pre></td></tr></table></figure><h3 id="6、Bitmaps"><a href="#6、Bitmaps" class="headerlink" title="6、Bitmaps"></a>6、Bitmaps</h3><p><strong>（1）数据结构</strong></p><p>Bitmaps位图，即只有0和1的一个数组，类似于java的<code>boolean[]</code>。c++的select底层就使用了bitmaps作为socket的存储结构。redis的bitmaps通过一个<strong>数字型字符串的位操作</strong>来实现，通过偏移量（偏移量从1开始）表示元素的位置。</p><p>之前说过String的最大大小为512MB，因此这里存储位时最多可以存储512MB*8个位。</p><p>bitmaps适用于只需要<strong>是/否</strong>两种值的业务场景，如用户是否是活跃用户，用户是否拥有某个功能的权限等。</p><p><strong>（2）常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">setbit &lt;key&gt; &lt;offset&gt; &lt;value&gt;<br>getbit &lt;key&gt; &lt;offset&gt;<br>bitcount &lt;key&gt; [&lt;start&gt; &lt;end&gt; &lt;bit/byte&gt;]      # 按位或按字节统计为1的位的数量<br><br>bitop &lt;operation&gt; &lt;destkey&gt; &lt;srckey&gt; [&lt;srckey&gt;...] # 按位操作，将结果写入destkey，因此这个destkey最好是不存在的新key<br><span class="hljs-meta">#</span><span class="bash"> 位操作：and按位与，or按位或，xor按位异或，not按位取反</span><br><span class="hljs-meta">#</span><span class="bash"> 其中当使用not时，srckey只能用一个</span><br></code></pre></td></tr></table></figure><h3 id="7、HyperLogLog"><a href="#7、HyperLogLog" class="headerlink" title="7、HyperLogLog"></a>7、HyperLogLog</h3><p><strong>（1）数据结构</strong></p><p>HyperLogLog是用于基数计数的一种数据类型。基数计数是指统计集合中不重复元素的数量。</p><p>HyperLogLog数据类型使用**HyperLogLog Counting(HLL)**实现，只做基数计算，不会保存元数据。采用稀疏矩阵存储，空间占用很小，仅仅在计数基数个数慢慢变大，稀疏矩阵占用空间渐渐超过了阈值时才会一次性转变成稠密矩阵，转变成稠密矩阵之后最高占用12K的内存空间。即每个HyperLogLog的key最高占用12K。</p><p>两个缺点：使用概率算法计算，存在标准误差；不保存原始数据，对需要使用原始数据的场景不友好。</p><p><strong>（2）命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pfadd &lt;key&gt; &lt;element&gt; [&lt;element&gt;...]<br>pfcount &lt;key&gt; [&lt;key&gt;...]                  # 统计基数计数<br>pfmerge &lt;destkey&gt; &lt;srckey&gt; [&lt;srckey&gt;...]  # 将srckey全部合并到新的destkey中<br></code></pre></td></tr></table></figure><h3 id="8、Geospecial-indexes"><a href="#8、Geospecial-indexes" class="headerlink" title="8、Geospecial indexes"></a>8、Geospecial indexes</h3><p><strong>（1）数据结构</strong></p><p>Geospecial是基于地理位置索引的一种数据类型。</p><p><strong>（2）命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">geoadd &lt;key&gt; &lt;longitude&gt; &lt;latitude&gt; &lt;member&gt;   # 添加一个元素的地理位置<br>geopos &lt;key&gt; &lt;member&gt;                          # 获取某个元素的地理位置<br>geodist &lt;key&gt; &lt;member1&gt; &lt;member2&gt; [m|km|ft|mi] # 获取两个元素之间地理位置的直线距离，后面那个参数表示单位，默认是米<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以longitude、latitude为中心，radius为半径，找出这个范围内的元素，并做一些其他统计操作</span><br>georadius &lt;key&gt; &lt;longitude&gt; &lt;latitude&gt; radius m|km|ft|mi [withcrood] [withdist] [withhash] [count count [any]] [asc|desc] [store key] [storedist key]<br></code></pre></td></tr></table></figure><h2 id="五、发布订阅"><a href="#五、发布订阅" class="headerlink" title="五、发布订阅"></a>五、发布订阅</h2><p>redis支持发布订阅（publish/subscribe）的消息通信模式。</p><p>类似于不支持历史消息、不能持久化的kafka，就像收音机，从打开的那一时刻开始接收后面的消息，前面的历史消息没有了。</p><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 发布者</span><br>publish &lt;channel&gt; &lt;message&gt;          # 向一个频道发布消息<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 订阅者</span><br>subscribe &lt;channel&gt; [&lt;channel&gt;...]   # 打开某个频道，接收后续消息<br></code></pre></td></tr></table></figure><h2 id="六、持久化"><a href="#六、持久化" class="headerlink" title="六、持久化"></a>六、持久化</h2><h3 id="1、RDB"><a href="#1、RDB" class="headerlink" title="1、RDB"></a>1、RDB</h3><p>RDB（Redis Database），在指定时间间隔将数据集快照存储到硬盘中，类似于MySQL的dump all操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">save              # 立即阻塞式执行持久化，会阻塞其他客户端的操作，不建议使用<br>bgsave            # 立即在后台执行持久化，生成子进程执行持久化最后向父进程返回消息<br></code></pre></td></tr></table></figure><p>触发后台进行持久化的redis.conf配置参数，若以下save配置被注释则不会自动持久化，只要有任意配置生效就会按规则自动持久化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">save 900 1       # 900秒（15分钟）内至少1个key值改变，则进行持久化<br>save 300 10      # 300秒（5分钟）内至少10个key值改变，则进行持久化<br>save 60 10000    # 60秒（1分钟）内至少10000个key值改变，则进行持久化<br><br>stop-writes-on-bgsave-error yes    # 后台持久化发生异常时则会拒绝执行写命令，这样做是为了让用户感知到这里发生了异常<br>rdbcompression yes                 # rdb文件是否进行压缩<br>rdbchecksum yes                    # 从第5个版本开始，rdb文件末尾放了一个CRC64的校验码，用于校验数据文件的完整性<br>dbfilename dump.rdb                # 备份的文件名，当redis启动时，会自动加载这个备份数据文件并加载到内存中。<br></code></pre></td></tr></table></figure><p>优点：</p><p>1、适合大规模的数据恢复。</p><p>2、如果业务对数据完整性和一致性要求不高，RDB是很好的选择。</p><p>缺点：</p><p>1、数据的完整性和一致性不高，因为RDB可能在最后一次备份时宕机了。</p><p>2、备份时占用内存，因为Redis 在备份时会独立创建一个子进程，将数据写入到一个临时文件（此时内存中的数据是原来的两倍哦），最后再将临时文件替换之前的备份文件。</p><h3 id="2、AOF"><a href="#2、AOF" class="headerlink" title="2、AOF"></a>2、AOF</h3><p>AOF（Append Only File），记录所有服务器接收到的写操作，并在服务器重新启动时重放这些操作，以重新构建数据集，类似于MySQL的binlog日志。</p><p>redis默认不开启AOF，需要手动开启。AOF相关配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">appendonly yes                     # 设置为yes开发AOF<br>appendfilename &quot;appendonly.aof&quot;    # aof日志文件名，redis启动时会自动加载该文件中的操作日志并在服务器中重放，生成数据。<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> appendfsync always        <span class="hljs-comment"># 记录时机，always表示每次写操作执行后都持久化，会损耗性能</span></span><br>appendfsync everysec        # everysec表示每秒进行一次持久化操作<br><span class="hljs-meta">#</span><span class="bash"> appendfsync no            <span class="hljs-comment"># no又操作系统决定什么时候进行持久化</span></span><br>                            # 使用everysec或always时，redis会启动一个子进程在后台进行磁盘IO操作。<br><br>no-appendfsync-on-rewrite no    # 自动重写aof文件机制。当aof文件增长一定大小的百分比时，就会调用BGREWRITEAOF重写日志文件<br>auto-aof-rewrite-percentage 100 # 需要达到的增长百分比<br>auto-aof-rewrite-min-size 64mb  # 增长百分比的基数<br></code></pre></td></tr></table></figure><h3 id="3、比较和建议"><a href="#3、比较和建议" class="headerlink" title="3、比较和建议"></a>3、比较和建议</h3><p>1、RDB适合用于冷备份，即每周、每月定时执行一次全量备份这种，可以不开启；而AOF类似于MySQL的binlog，最好开启并设置持久化时机为everysec，既能保证性能又可以保证较高的数据一致性，最多丢失1秒内的数据。</p><p>2、当dump.rdb文件和appendonly.aof文件同时存在时，redis启动时会加载aof文件</p><h2 id="七、java编程"><a href="#七、java编程" class="headerlink" title="七、java编程"></a>七、java编程</h2><h3 id="1、jedis"><a href="#1、jedis" class="headerlink" title="1、jedis"></a>1、jedis</h3><p>jedis基本是完全模拟redis-cli的命令实现的java端的redis客户端。其方法和redis-cli命令基本一致。jedis的使用略。</p><p>注意点：</p><p>1、jedis客户端是线程不安全的，意味着如果有多个线程通过同一个jedis客户端访问时，会出现socket和IO流方面的异常。因为在jedis底层一个jedis对象代表一个socket和一个IO流，多个线程使用同一个jedis代表多个线程使用同一个socket和同一个IO流，肯定会出现异常。因此应该使用<code>JedisPool</code>或<code>lettuce</code>。</p><h3 id="2、spring-data-redis"><a href="#2、spring-data-redis" class="headerlink" title="2、spring-data-redis"></a>2、spring-data-redis</h3><h4 id="（1）配置"><a href="#（1）配置" class="headerlink" title="（1）配置"></a>（1）配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- springboot --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- springboot redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- springboot集成redis pool需要这个依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.141.141</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.redis.database</span>=<span class="hljs-string">0</span><br><span class="hljs-meta">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">10</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">100ms</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-meta">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure><h4 id="（2）简单使用"><a href="#（2）简单使用" class="headerlink" title="（2）简单使用"></a>（2）简单使用</h4><p>redisTemplate对redis的几种数据类型分别封装了几种操作类型，如下：</p><table><thead><tr><th>redisTemplate方法</th><th>redis类型</th></tr></thead><tbody><tr><td>opsForValue</td><td>String</td></tr><tr><td>opsForHash</td><td>Hash</td></tr><tr><td>opsForCluster</td><td>对集群的操作</td></tr><tr><td>opsForList</td><td>List</td></tr><tr><td>opsForSet</td><td>Set</td></tr><tr><td>opsForGeo</td><td>Geo地理位置数据类型</td></tr><tr><td>opsForHyperLogLog</td><td>HyperLogLog</td></tr><tr><td>opsForStream</td><td>对流进行操作</td></tr><tr><td>opsForZSet</td><td>ZSet</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo4SpringBoot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CommandLineRunner</span> </span>&#123;<br><br>    <span class="hljs-meta">@Qualifier(&quot;redisTemplate&quot;)</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate template;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Demo4SpringBoot.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        template.opsForValue().set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>        String v1 = (String)template.opsForValue().get(<span class="hljs-string">&quot;k1&quot;</span>);<br>        System.out.println(v1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）序列化"><a href="#（3）序列化" class="headerlink" title="（3）序列化"></a>（3）序列化</h4><p>redisTemplate需要四个序列化器：</p><ul><li>keySerializer</li><li>valueSerializer</li><li>hashKeySerializer</li><li>hashValueSerializer</li></ul><p>若我们没指定序列化方式时，redisTemplate的四个序列化器都会使用默认的<code>JdkSerializationRedisSerializer</code>来进行序列化。</p><p><code>JdkSerializationRedisSerializer</code>的作用是将java对象序列化为二进制字节，基本无法在业务中使用，因此建议使用<code>StringRedisSerializer</code>，将所有key和value都手动序列化成string，然后由<code>StringRedisTemplate</code>写入redis。读取时，从redis读取到的所有value都是string，然后手动反序列化成自己想要的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo4SpringBoot2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CommandLineRunner</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource(name=&quot;stringRedisTemplate&quot;)</span><br>    <span class="hljs-keyword">private</span> RedisTemplate template;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Demo4SpringBoot.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>        <span class="hljs-keyword">int</span> v = <span class="hljs-number">12</span>;<br>        template.opsForValue().set(<span class="hljs-string">&quot;k1&quot;</span>, String.valueOf(v));<br>        String v1 = (String)template.opsForValue().get(<span class="hljs-string">&quot;k1&quot;</span>);<br>        System.out.println(v1);<br><br>        template.opsForValue().set(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>        String v2 = (String)template.opsForValue().get(<span class="hljs-string">&quot;k2&quot;</span>);<br>        System.out.println(v2);<br><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">20L</span>);<br>        template.opsForValue().set(<span class="hljs-string">&quot;k3&quot;</span>, mapper.writeValueAsString(user));<br>        String v3 = (String)template.opsForValue().get(<span class="hljs-string">&quot;k3&quot;</span>);<br>        User user2 = mapper.readValue(v3, User.class);<br>        System.out.println(user2);<br><br>        template.opsForHash().put(<span class="hljs-string">&quot;k4&quot;</span>, <span class="hljs-string">&quot;f1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>        template.opsForHash().put(<span class="hljs-string">&quot;k4&quot;</span>, <span class="hljs-string">&quot;f2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>        template.opsForHash().put(<span class="hljs-string">&quot;k4&quot;</span>, <span class="hljs-string">&quot;f3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>        Map&lt;Object, Object&gt; k4 = template.opsForHash().&lt;String, String&gt;entries(<span class="hljs-string">&quot;k4&quot;</span>);<br>        System.out.println(k4);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八、并发"><a href="#八、并发" class="headerlink" title="八、并发"></a>八、并发</h2><h3 id="1、事务介绍"><a href="#1、事务介绍" class="headerlink" title="1、事务介绍"></a>1、事务介绍</h3><p>redis的事务是一个单独的隔离操作：事务中的所有命令都会被序列化，按顺序地执行，在执行过程中不会被其他命令打断。主要用处是将多个命令串联在一起，防止被别的命令插队修改数据导致无法实现预期的操作。</p><p>类似于将多个命令按顺序打包成一个命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> redis-cli命令如下</span><br>multi      # 开启事务，相当于begin，开启后该客户端发送给服务器的命令会按顺序被打包起来，并不直接执行<br>exec       # 执行事务，先当与commit，将打包的命令依次执行，执行期间其他任何命令都会被阻塞<br>discard    # 抛弃事务，相当于rollback，主动抛弃所有打包的命令<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java代码如下</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        Jedis jedis = getJedis();<br>        Transaction multi = jedis.multi();<br>        <span class="hljs-keyword">try</span> &#123;<br>            multi.set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>            <span class="hljs-comment">// int a = 1 / 0;</span><br>            multi.set(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;all command queued&quot;</span>);<br>            multi.setnx(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;execute queued command&quot;</span>);<br>            List&lt;Object&gt; results = multi.exec();<br>            System.out.println(results);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            ex.printStackTrace();<br>            <span class="hljs-keyword">try</span> &#123;<br>                multi.discard();<br>            &#125;<span class="hljs-keyword">catch</span> (Exception ignored) &#123; &#125;<br>            System.out.println(<span class="hljs-string">&quot;all command discarded&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>出现异常时的几种情况：</p><p>1、multi后打包命令时出现异常（相当于编译时异常）：multi会自动结束，相当于手动调用了discard命令</p><p>2、exec执行中某个命令异常（相当于运行时异常）：<strong>出现异常的命令返回对应的异常值，不影响其他命令的执行</strong>。这一点和关系型数据库的事务差别很大，如在postgres中，在默认事务隔离级别下，事务在执行过程中若出现异常，后续语句都会被忽略，整个事务会自动回滚。</p><p>和关系型数据库的差异：</p><p>1、单独的隔离操作，所有命令依次执行，中间不会被别人打断。而关系型数据库的事务可以穿插执行，只是不同sql的锁机制不一样。</p><p>2、没有隔离级别的概念，redis事务执行exec之前不会实际执行，只有exec后才会真正执行。</p><p>3、不保证原子性，若一条命令运行失败，不影响其他被打包的命令。而关系型是数据库的事务是保证原子性的，要么全部成功，要么全部失败。</p><h3 id="2、并发冲突"><a href="#2、并发冲突" class="headerlink" title="2、并发冲突"></a>2、并发冲突</h3><p>redis中有一个key为10000元，一共有10000个消费线程，每个线程判断金额是否大于等于10元，若满足则消费10元，否则不消费。</p><p>如下，预期最后redis的key应该为0，但是若没有任何对redis进行加锁的机制，则这个程序运行的结果大概率是小于0的（也称“<strong>超卖问题</strong>”）。</p><p>解决方案：乐观锁或lua脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConsumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            Jedis jedis = getJedis();<br>            String a = jedis.get(<span class="hljs-string">&quot;a&quot;</span>);<br>            Integer v = Integer.valueOf(a);<br>            <span class="hljs-keyword">if</span> (v &gt;= <span class="hljs-number">10</span>) &#123;<br>                jedis.decrBy(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10L</span>);<br>            &#125;<br>            jedis.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> MyConsumer()).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、连接超时"><a href="#3、连接超时" class="headerlink" title="3、连接超时"></a>3、连接超时</h3><p>在高并发情况下，连接redis的客户端很多，但是redis有一个max_client，超过该数量时新客户端会进入等待状态，若等待超过一定时间就会超时。</p><p>解决方案：使用连接池。</p><h3 id="4、乐观锁和悲观锁"><a href="#4、乐观锁和悲观锁" class="headerlink" title="4、乐观锁和悲观锁"></a>4、乐观锁和悲观锁</h3><p>乐观锁是指：读加共享锁，对写进行CAS写。</p><p>悲观锁是指：读写都加排他锁，每次对这个key进行操作的只可能有一个客户端。</p><p>redis无法实现悲观锁，只能实现乐观锁，乐观锁是通过watch + multi组合实现的。</p><p><strong>乐观锁的实现</strong></p><p>watch命令：可以监控某些key，当事务在这些key上进行写操作时，若该key被其他命令修改，则该事务会被打断，事务执行exec时返回null或异常。</p><p>unwatch命令：取消对某些key的监控。</p><p>原理：watch命令会获取key的版本号，事务中对key进行的操作会对比watch时的版本号和现在的版本号，若不一样则事务会被打断。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">watch a<br>multi<br>decrby a 10<br>exec<br></code></pre></td></tr></table></figure><h3 id="5、秒杀案例实现"><a href="#5、秒杀案例实现" class="headerlink" title="5、秒杀案例实现"></a>5、秒杀案例实现</h3><h4 id="（1）通过乐观锁实现秒杀"><a href="#（1）通过乐观锁实现秒杀" class="headerlink" title="（1）通过乐观锁实现秒杀"></a>（1）通过乐观锁实现秒杀</h4><p>案例介绍：模拟2000个用户抢购1000个商品。java代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Transaction;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商品秒杀案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo6SecKill</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String redisHost = <span class="hljs-string">&quot;192.168.141.141&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> redisPort = <span class="hljs-number">6379</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String passWord = <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> JedisPool pool;<br>    <span class="hljs-keyword">static</span>&#123;<br>        JedisPoolConfig config = <span class="hljs-keyword">new</span> JedisPoolConfig();<br>        config.setMaxTotal(<span class="hljs-number">200</span>);                      <span class="hljs-comment">// 最大连接数量</span><br>        config.setBlockWhenExhausted(<span class="hljs-keyword">true</span>);           <span class="hljs-comment">// 当连接池没有连接可用时，是否等待</span><br>        config.setMaxWait(Duration.ofSeconds(<span class="hljs-number">10</span>));    <span class="hljs-comment">// 从连接池中获取连接时等待时间</span><br>        config.setMaxIdle(<span class="hljs-number">32</span>);                        <span class="hljs-comment">// 连接池中的连接最大空闲数量</span><br>        config.setTestOnBorrow(<span class="hljs-keyword">true</span>);                 <span class="hljs-comment">// 从连接池中获取连接时测试连接是否有效</span><br>        pool = <span class="hljs-keyword">new</span> JedisPool(<span class="hljs-keyword">new</span> JedisPoolConfig(), redisHost, redisPort, <span class="hljs-number">60000</span>, passWord);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> time1 = System.currentTimeMillis();<br>        doSecKill();<br>        System.out.println((System.currentTimeMillis() - time1) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSecKill</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 模拟2000个人来进行秒杀</span><br>        List&lt;Thread&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2000</span>; i++) &#123;<br>            list.add(<span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> SecKillThread(<span class="hljs-string">&quot;user&quot;</span> + i)));<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Thread thread : list) &#123;<br>            thread.start();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecKillThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SecKillThread</span><span class="hljs-params">(String userID)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.userID = userID;<br>        &#125;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String userID;    <span class="hljs-comment">// 用户id</span><br><br>        <span class="hljs-comment">// 执行秒杀的动作</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">final</span> Jedis jedis = pool.getResource();<br><br>            <span class="hljs-comment">// 1、监控库存</span><br>            jedis.watch(<span class="hljs-string">&quot;a&quot;</span>);<br><br>            <span class="hljs-comment">// 2、判断库存是否为null或小于等于0</span><br>            String total = jedis.get(<span class="hljs-string">&quot;a&quot;</span>);<br>            <span class="hljs-keyword">if</span> (total == <span class="hljs-keyword">null</span> || Integer.parseInt(total) &lt;= <span class="hljs-number">0</span>) &#123;<br>                pool.returnResource(jedis);<br>                System.out.println(userID + <span class="hljs-string">&quot; 秒杀已结束&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 3、判断用户是否重复秒杀，每个用户只能秒杀一次</span><br>            <span class="hljs-keyword">if</span> (jedis.sismember(<span class="hljs-string">&quot;exists&quot;</span>, userID)) &#123;<br>                pool.returnResource(jedis);<br>                System.out.println(userID + <span class="hljs-string">&quot; 已经秒杀过一次了，不能秒杀第二次了&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 4、秒杀过程</span><br>            Transaction multi = jedis.multi();<br>            multi.decrBy(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>            multi.sadd(<span class="hljs-string">&quot;exists&quot;</span>, userID);<br>            List&lt;Object&gt; results = multi.exec();<br>            <span class="hljs-keyword">if</span> (results == <span class="hljs-keyword">null</span> || results.size() == <span class="hljs-number">0</span>) &#123;<br>                pool.returnResource(jedis);<br>                System.out.println(userID + <span class="hljs-string">&quot; 秒杀失败&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀成功&quot;</span>);<br>            pool.returnResource(jedis);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>存在的问题：<strong>库存遗留问题</strong>。即一些用户第一次因为并发问题抢购失败，但是方法直接return了，当因为并发问题抢购失败的用户 &gt; 总商品数量 - 抢购成功的用户时，可能会存在部分商品没有卖掉的情况。</p><p>一种解决方案是，在外层套一个while循环，当没有抢购成功时，进行重试，代码如下。这种性能很差，不建议使用。</p><p>另一种解决方案就是使用lua脚本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecKillThread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SecKillThread2</span><span class="hljs-params">(String userID)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userID = userID;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String userID;    <span class="hljs-comment">// 用户id</span><br><br>    <span class="hljs-comment">// 执行秒杀的动作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">final</span> Jedis jedis = pool.getResource();<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 1、监控库存</span><br>            jedis.watch(<span class="hljs-string">&quot;a&quot;</span>);<br><br>            <span class="hljs-comment">// 2、判断库存是否为null或小于等于0</span><br>            String total = jedis.get(<span class="hljs-string">&quot;a&quot;</span>);<br>            <span class="hljs-keyword">if</span> (total == <span class="hljs-keyword">null</span> || Integer.parseInt(total) &lt;= <span class="hljs-number">0</span>) &#123;<br>                System.out.println(userID + <span class="hljs-string">&quot; 秒杀已结束&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 3、判断用户是否重复秒杀，每个用户只能秒杀一次</span><br>            <span class="hljs-keyword">if</span> (jedis.sismember(<span class="hljs-string">&quot;exists&quot;</span>, userID)) &#123;<br>                System.out.println(userID + <span class="hljs-string">&quot; 已经秒杀过一次了，不能秒杀第二次了&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 4、秒杀过程</span><br>            Transaction multi = jedis.multi();<br>            multi.decrBy(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>            multi.sadd(<span class="hljs-string">&quot;exists&quot;</span>, userID);<br>            List&lt;Object&gt; results = multi.exec();<br>            <span class="hljs-keyword">if</span> (results == <span class="hljs-keyword">null</span> || results.size() == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(userID + <span class="hljs-string">&quot; 秒杀失败，进行第&quot;</span> + ++n + <span class="hljs-string">&quot;次重试&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀成功&quot;</span>);<br>            pool.returnResource(jedis);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）通过lua脚本实现秒杀"><a href="#（2）通过lua脚本实现秒杀" class="headerlink" title="（2）通过lua脚本实现秒杀"></a>（2）通过lua脚本实现秒杀</h4><p>lua脚本其实就是另外一种事务的实现，lua脚本内的命令都是一组打包好的命令。</p><p>通过lua脚本实现秒杀代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecKillThread3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String secKillScripts = <span class="hljs-string">&quot;local function secKill(userID)\n&quot;</span> +<br>            <span class="hljs-string">&quot;    local exists = redis.call(\&quot;sismember\&quot;, \&quot;exists\&quot;, userID);\n&quot;</span> +<br>            <span class="hljs-string">&quot;    if tonumber(exists) == 1 then return 3 end;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    local current = redis.call(\&quot;get\&quot;, \&quot;a\&quot;);\n&quot;</span> +<br>            <span class="hljs-string">&quot;    if current == nil then return 2 end;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    if tonumber(current) &lt;= 0 then return 0 end;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    redis.call(\&quot;decr\&quot;, \&quot;a\&quot;);\n&quot;</span> +<br>            <span class="hljs-string">&quot;    redis.call(\&quot;sadd\&quot;, \&quot;exists\&quot;, userID);\n&quot;</span> +<br>            <span class="hljs-string">&quot;    return 1;\n&quot;</span> +<br>            <span class="hljs-string">&quot;end\n&quot;</span> +<br>            <span class="hljs-string">&quot;return secKill(KEYS[1]);&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SecKillThread3</span><span class="hljs-params">(String userID)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userID = userID;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String userID;    <span class="hljs-comment">// 用户id</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Jedis jedis = pool.getResource();<br><br>        String sha1 = jedis.scriptLoad(secKillScripts);<br>        Object r = jedis.evalsha(sha1, <span class="hljs-number">1</span>, userID);<br>        String result = String.valueOf(r);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;0&quot;</span>.equals(result)) &#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀失败&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(result)) &#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;2&quot;</span>.equals(result)) &#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀已结束&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;3&quot;</span>.equals(result))&#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 已经秒杀过一次了，不能秒杀第二次&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(userID + <span class="hljs-string">&quot; 秒杀返回值异常&quot;</span>);<br>        &#125;<br>        pool.returnResource(jedis);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="九、缓存相关问题"><a href="#九、缓存相关问题" class="headerlink" title="九、缓存相关问题"></a>九、缓存相关问题</h2><h3 id="1、缓存穿透"><a href="#1、缓存穿透" class="headerlink" title="1、缓存穿透"></a>1、缓存穿透</h3><p>用户恶意访问一个不存在的key，redis中不存在，数据库也不存在，因此每次查询都会将请求穿透到数据库层，对数据库造成压力。</p><p>解决方案：</p><ul><li>为不存在的key也在redis中缓存一个null value，并设置TTL，表示不存在该key，防止请求穿透到数据库</li><li>在访问数据之前加一层布隆过滤器。我们将数据库key按照一定的hash算法计算对应的byte放入布隆过滤器中，这样布隆过滤器可以快速判断该key是否存在，当存在则放行，当不存在则拒绝请求。</li></ul><p>布隆过滤器是基于概率的判断，当它认为这个key存在时，其实是大概率存在，而不是一定存在，当它认为这个key不存在时，则一定不存在。</p><h3 id="2、缓存雪崩"><a href="#2、缓存雪崩" class="headerlink" title="2、缓存雪崩"></a>2、缓存雪崩</h3><p>redis服务在同一段时间大量key同时失效，或者redis宕机，导致所有请求都打到数据库层，对数据库造成压力。</p><p>解决方案：</p><ul><li>对不同的key的失效时间加一个随机值，让这些key在一段时间内慢慢失效，而不是同时失效。</li><li>使用redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多层缓存</li></ul><h3 id="3、缓存击穿"><a href="#3、缓存击穿" class="headerlink" title="3、缓存击穿"></a>3、缓存击穿</h3><p>客户端在访问一个热点key时，该key突然失效，导致这些处理线程都去数据库获取数据重建缓存，从而对数据库造成压力。</p><p>解决方案：</p><ul><li>互斥锁，即对重建缓存这个过程进行加锁，只能有一个线程来执行这个操作，其他线程必须等待那个线程完成。</li></ul><p>互斥锁工作流程：</p><ul><li>0ms，线程1，查询redis未命中，获取互斥锁成功</li><li>0ms，线程2，查询redis未命中，获取互斥锁失败，等待50ms</li><li>0ms，线程1，查询数据库，重建缓存。</li><li>50ms，线程2，等待结束，重试查询redis，仍然未命中，获取互斥锁依然失败，等待50ms</li><li>100ms，线程2，等待结束，重试查询redis，仍然未命中，获取互斥锁依然失败，等待50ms</li><li>150ms，线程2，等待结束，重试查询redis，仍然未命中，获取互斥锁依然失败，等待50ms</li><li>200ms，线程1，重建redis缓存成功，返回数据。耗时200ms</li><li>200ms，线程2，等待结束，重试查询redis，命中缓存，返回数据。</li></ul><p>互斥锁实现：使用setnx实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、ACL&quot;&gt;&lt;a href=&quot;#一、ACL&quot; class=&quot;headerlink&quot; title=&quot;一、ACL&quot;&gt;&lt;/a&gt;一、ACL&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java-文件IO常用操作对比</title>
    <link href="https://yury757.github.io/java/java-%E6%96%87%E4%BB%B6IO%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%AF%B9%E6%AF%94/"/>
    <id>https://yury757.github.io/java/java-%E6%96%87%E4%BB%B6IO%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%AF%B9%E6%AF%94/</id>
    <published>2022-04-19T16:00:00.000Z</published>
    <updated>2022-05-10T16:49:17.027Z</updated>
    
    <content type="html"><![CDATA[<p>文件IO中，常用的方法如下方代码中的readMethod1~8方法所示。</p><p>测试了2.5M读100次、100M读3次、250M读1次三种情况，耗时（单位：毫秒）如下：</p><table><thead><tr><th></th><th>2.5M读100次</th><th>2.5M读100次</th><th>100M读3次</th><th>100M读3次</th><th>250M读1次</th><th>250M读1次</th></tr></thead><tbody><tr><td></td><td>普通</td><td>HDFS</td><td>普通</td><td>HDFS</td><td>普通</td><td>HDFS</td></tr><tr><td>method1，一次性全部读取</td><td>635</td><td>1604</td><td>976</td><td>965</td><td>1270</td><td>482</td></tr><tr><td>method2，ByteArrayOutputStream+byte[]</td><td>616</td><td>5759</td><td>669</td><td>5135</td><td>843</td><td>4375</td></tr><tr><td>method3，InputStreamReader+char[8192]+StringWriter</td><td>1236</td><td>5097</td><td>1454</td><td>4370</td><td>1167</td><td>3976</td></tr><tr><td>method4，InputStreamReader+BufferedReader(char[8192])</td><td>1565</td><td>4556</td><td>1986</td><td>4763</td><td>1608</td><td>3230</td></tr><tr><td>method5，bufferedReader+stream</td><td>1414</td><td>4167</td><td>62546</td><td>140485</td><td>-</td><td>-</td></tr><tr><td>method6，bufferedReader+stream+parallel</td><td>1941</td><td>4526</td><td>OOM</td><td>OOM</td><td>OOM</td><td>OOM</td></tr><tr><td>method7，Deque&lt;byte[8196]&gt;</td><td>628</td><td>5331</td><td>761</td><td>4456</td><td>669</td><td>3321</td></tr><tr><td>method8，ByteBuffer(2048)+LineBuffer</td><td>1910</td><td>5325</td><td>2310</td><td>4426</td><td>2300</td><td>3575</td></tr></tbody></table><p>个人思考：</p><p>1、普通文件系统，使用char[]作为中间缓冲（method3~6），速度都比较慢，因为java的string底层是byte[]，先转成char[]，又转回byte[]，会消耗多余的时间。</p><p>2、使用method6使用parallel并不能提升性能，因为底层InputStreamReader是加锁的，IO是不能并行的。</p><p>3、HDFS不会用，使用最朴素的连接方式，肯定是那里有问题，才会导致IO速度这么慢。但是好像一次性全部读取HDFS的速度，会随着文件的增大而相对更快。</p><p>4、最后method7是google guava库中的一种读取全部字符串的方法，脑洞大开，性能都还不错。</p><p>5、method3、4、5、6、8都是一行一行读取的模式，适用于需要对每一行进行后续处理的情况。</p><p>6、谨慎对读取全部字符串这种批作业使用流处理方式，速度很慢，parallel的甚至直接OOM。</p><p>7、总结下来，如果是读取文件中全部字符串，method2 和 method7都是比较不错的方式；如果是需要一行一行处理，则可能还是method4的BufferedReader性能更好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury;<br><br><span class="hljs-keyword">import</span> com.google.common.io.ByteStreams;<br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.file.tfile.ByteArray;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FileSystem fileSystem;<br>    <span class="hljs-keyword">static</span> &#123;<br>        Configuration configuration = <span class="hljs-keyword">new</span> Configuration();<br>        configuration.set(<span class="hljs-string">&quot;fs.defaultFS&quot;</span>, <span class="hljs-string">&quot;hdfs://myubuntu1:8020&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileSystem = FileSystem.get(configuration);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;测试普通文件系统：&quot;</span>);<br>        testReadMethod(<span class="hljs-keyword">new</span> InputStreamBuilder(<span class="hljs-string">&quot;NORMAL&quot;</span>, <span class="hljs-string">&quot;C:/Users/yury/Desktop/size100M.txt&quot;</span>), <span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;=====================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;测试HDFS文件系统：&quot;</span>);<br>        testReadMethod(<span class="hljs-keyword">new</span> InputStreamBuilder(<span class="hljs-string">&quot;HDFS&quot;</span>, <span class="hljs-string">&quot;/test1/size100M.txt&quot;</span>), <span class="hljs-number">3</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputStreamBuilder</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> String type;<br>        <span class="hljs-keyword">private</span> String fileName;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InputStreamBuilder</span><span class="hljs-params">(String type, String fileName)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.type = type;<br>            <span class="hljs-keyword">this</span>.fileName = fileName;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> InputStream <span class="hljs-title">getInputStream</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            <span class="hljs-keyword">switch</span> (type) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;NORMAL&quot;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FileInputStream(fileName);<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;HDFS&quot;</span>:<br>                    <span class="hljs-keyword">return</span> fileSystem.open(<span class="hljs-keyword">new</span> Path(fileName));<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;unkonw file system&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testReadMethod</span><span class="hljs-params">(InputStreamBuilder builder, <span class="hljs-keyword">int</span> n)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">long</span> time1 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod1(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time2 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method1，耗时：&quot;</span> + (time2 - time1) + <span class="hljs-string">&quot; 直接读取&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time3 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod2(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time4 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method2，耗时：&quot;</span> + (time4 - time3) + <span class="hljs-string">&quot; ByteArrayOutputStream+byte[]&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time5 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod3(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time6 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method3，耗时：&quot;</span> + (time6 - time5) + <span class="hljs-string">&quot; InputStreamReader+char[8192]+StringWriter&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time7 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod4(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time8 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method4，耗时：&quot;</span> + (time8 - time7) + <span class="hljs-string">&quot; InputStreamReader+BufferedReader(char[8192])&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time9 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            readMethod5(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time10 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method5，耗时：&quot;</span> + (time10 - time9) + <span class="hljs-string">&quot; bufferedReader+stream&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time11 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod6(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time12 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method6，耗时：&quot;</span> + (time12 - time11) + <span class="hljs-string">&quot; bufferedReader+stream+parallel&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time13 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod7(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time14 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method7，耗时：&quot;</span> + (time14 - time13) + <span class="hljs-string">&quot; Deque&lt;byte[8196]&gt;&quot;</span>);<br><br>        <span class="hljs-keyword">long</span> time15 = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            readMethod8(builder.getInputStream());<br>        &#125;<br>        <span class="hljs-keyword">long</span> time16 = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;method8，耗时：&quot;</span> + (time16 - time15) + <span class="hljs-string">&quot; ByteBuffer(2048)+LineBuffer&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一次性全部读取</span><br><span class="hljs-comment">     * 不建议使用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod1</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[inputStream.available()];<br>        <span class="hljs-keyword">int</span> size = inputStream.read(bytes);<br>        String s = <span class="hljs-keyword">new</span> String(bytes, <span class="hljs-number">0</span>, size, StandardCharsets.UTF_8);<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用ByteArrayOutputStream+自定义缓冲区，缓冲区大小可以依据文件大小而定</span><br><span class="hljs-comment">     * 本质：ByteArrayOutputStream在write数据时，会检测容量是否满足需求，若不满足需求则会扩容，直到InputStream读取完毕</span><br><span class="hljs-comment">     * 最佳实践：可以使用new ByteArrayOutputStream(inputStream.available()); 这样可以避免扩容时产生的时间损耗；同时按照大小调整缓冲区大小。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod2</span><span class="hljs-params">(InputStream inputStream)</span><span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream(inputStream.available());<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="hljs-number">0</span>) &#123;<br>            byteArrayOutputStream.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        String s = byteArrayOutputStream.toString(StandardCharsets.UTF_8);<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        byteArrayOutputStream.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用StringWriter+org.apache.commons.io.IOUtils.copy</span><br><span class="hljs-comment">     * 本质：该copy方法使用的InputStreamReader，每次读取char[8192]作为缓冲区，然后while循环写入StringBuffer</span><br><span class="hljs-comment">     * InputStreamReader是将字节流按照编码转换为字符流，read方法是按编码来读取字符，而不是读取字节。</span><br><span class="hljs-comment">     * StringWriter底层是StringBuffer，StringBuffer底层还是byte[]，若超过初始设定的长度，则进行扩容</span><br><span class="hljs-comment">     * 关键代码：AbstractStringBuilder的683行append(char str[], int offset, int len)方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod3</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        StringWriter writer = <span class="hljs-keyword">new</span> StringWriter();<br>        IOUtils.copy(inputStream, writer, StandardCharsets.UTF_8);<br>        String s = writer.toString();<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        writer.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用BufferedReader+while</span><br><span class="hljs-comment">     * 本质：BufferedReader是建立再InputStreamReader之上，读取char[8192]作为缓冲区</span><br><span class="hljs-comment">     * readLine()方法则是将缓冲区上的字符按换行符处理成一行字符串后返回，若缓冲区读完了还没有换行符则继续读取下一批char[8192]</span><br><span class="hljs-comment">     * BufferedReader.readLine()适用于一行一行，并有后续操作的需求，而不是读取整个文件到字符串中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod4</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(reader);<br>        String s;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">while</span> ((s = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>            sb.append(s).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        s = sb.toString();<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        bufferedReader.close();<br>        reader.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用bufferedReader+stream</span><br><span class="hljs-comment">     * 本质：lines()方法返回一个Stream，该流的数据由迭代器生成，迭代器方法还是readList()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod5</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(reader);<br>        String s = bufferedReader.lines().collect(Collectors.joining(System.lineSeparator()));<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        bufferedReader.close();<br>        reader.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用bufferedReader+stream+parallel</span><br><span class="hljs-comment">     * 同上，只是使用parallel并行计算</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod6</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br>        BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(reader);<br>        String s = bufferedReader.lines().parallel().collect(Collectors.joining(System.lineSeparator()));<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        bufferedReader.close();<br>        reader.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用google的guava</span><br><span class="hljs-comment">     * 本质：独树一帜，不使用缓冲区，而是使用Deque&lt;byte[8196]&gt;作为接收byte的数据区，等全部接收完毕后，再整合成一个完整的byte[]</span><br><span class="hljs-comment">     * 注意guava 27.0版本的该方法还是beta方法，可能会存在潜在风险</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod7</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String s = <span class="hljs-keyword">new</span> String(ByteStreams.toByteArray(inputStream), StandardCharsets.UTF_8);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用google的guava的CharStreams.readLines()方法</span><br><span class="hljs-comment">     * 本质：以ByteBuffer(2048)为缓冲区读取字符流，并使用LineBuffer作为行缓冲，底层是StringBuilder</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readMethod8</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(inputStream);<br>        List&lt;String&gt; stringList = CharStreams.readLines(reader);<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (String s : stringList) &#123;<br>            sb.append(s).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        String s = sb.toString();<br><span class="hljs-comment">//        System.out.println(s.length());</span><br>        reader.close();<br>        inputStream.close();<br>        <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文件IO中，常用的方法如下方代码中的readMethod1~8方法所示。&lt;/p&gt;
&lt;p&gt;测试了2.5M读100次、100M读3次、250M读1次三种情况，耗时（单位：毫秒）如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;2.5M读100</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>socket入门学习</title>
    <link href="https://yury757.github.io/computer-science/Computer-Networking/socket/"/>
    <id>https://yury757.github.io/computer-science/Computer-Networking/socket/</id>
    <published>2022-04-14T16:00:00.000Z</published>
    <updated>2022-05-02T13:41:12.650Z</updated>
    
    <content type="html"><![CDATA[<p>本学习笔记基于ubuntu18+cpp14中socket代码，学习socket。</p><p>最权威的文档：man命令。</p><h2 id="1、socket是什么"><a href="#1、socket是什么" class="headerlink" title="1、socket是什么"></a>1、socket是什么</h2><p>socket是一个**<font color="Red">文件描述符（file descriptor）</font>**，可以通过设置DOMAIN、TYPE、PROTOCOL来创建不同类型的socket。</p><p>linux将网络IO抽象为对文件的IO，socket就是网络IO的一个通道或者接口。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// &lt;sys/socket.h&gt;</span><br><br><span class="hljs-comment">/* Create a new socket of type TYPE in domain DOMAIN, using</span><br><span class="hljs-comment">   protocol PROTOCOL.  If PROTOCOL is zero, one is chosen automatically.</span><br><span class="hljs-comment">   Returns a file descriptor for the new socket, or -1 for errors.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">socket</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __domain, <span class="hljs-keyword">int</span> __type, <span class="hljs-keyword">int</span> __protocol)</span> __THROW</span>;<br></code></pre></td></tr></table></figure><h3 id="（1）DOMAIN"><a href="#（1）DOMAIN" class="headerlink" title="（1）DOMAIN"></a>（1）DOMAIN</h3><p>DOMAIN是指地址簇，或者协议簇，表示不同类型的<strong>地址识别方式</strong>。如下所示有这么多种地址簇。</p><p>最常用的就是TCP/IP协议簇，即<code>PF_INET</code>，或<code>AF_INET</code>；以及IPV6协议簇，<code>PF_INET6</code>，或<code>AF_INET6</code>。</p><p>protocol family和address family本质上是同一种分类，只是为了适配不同的系统才形成两类宏名。在linux上我们一般用<code>AF</code>这一套。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Protocol families.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_UNSPEC0<span class="hljs-comment">/* Unspecified.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_LOCAL1<span class="hljs-comment">/* Local to host (pipes and file-domain).  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_UNIXPF_LOCAL <span class="hljs-comment">/* POSIX name for PF_LOCAL.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_FILEPF_LOCAL <span class="hljs-comment">/* Another non-standard name for PF_LOCAL.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_INET2<span class="hljs-comment">/* IP protocol family.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_AX253<span class="hljs-comment">/* Amateur Radio AX.25.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IPX4<span class="hljs-comment">/* Novell Internet Protocol.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_APPLETALK5<span class="hljs-comment">/* Appletalk DDP.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_NETROM6<span class="hljs-comment">/* Amateur radio NetROM.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_BRIDGE7<span class="hljs-comment">/* Multiprotocol bridge.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ATMPVC8<span class="hljs-comment">/* ATM PVCs.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_X259<span class="hljs-comment">/* Reserved for X.25 project.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_INET610<span class="hljs-comment">/* IP version 6.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ROSE11<span class="hljs-comment">/* Amateur Radio X.25 PLP.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_DECnet12<span class="hljs-comment">/* Reserved for DECnet project.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_NETBEUI13<span class="hljs-comment">/* Reserved for 802.2LLC project.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_SECURITY14<span class="hljs-comment">/* Security callback pseudo AF.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_KEY15<span class="hljs-comment">/* PF_KEY key management API.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_NETLINK16</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ROUTEPF_NETLINK <span class="hljs-comment">/* Alias to emulate 4.4BSD.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_PACKET17<span class="hljs-comment">/* Packet family.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ASH18<span class="hljs-comment">/* Ash.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ECONET19<span class="hljs-comment">/* Acorn Econet.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ATMSVC20<span class="hljs-comment">/* ATM SVCs.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_RDS21<span class="hljs-comment">/* RDS sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_SNA22<span class="hljs-comment">/* Linux SNA Project */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IRDA23<span class="hljs-comment">/* IRDA sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_PPPOX24<span class="hljs-comment">/* PPPoX sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_WANPIPE25<span class="hljs-comment">/* Wanpipe API sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_LLC26<span class="hljs-comment">/* Linux LLC.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IB27<span class="hljs-comment">/* Native InfiniBand address.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_MPLS28<span class="hljs-comment">/* MPLS.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_CAN29<span class="hljs-comment">/* Controller Area Network.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_TIPC30<span class="hljs-comment">/* TIPC sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_BLUETOOTH31<span class="hljs-comment">/* Bluetooth sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IUCV32<span class="hljs-comment">/* IUCV sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_RXRPC33<span class="hljs-comment">/* RxRPC sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ISDN34<span class="hljs-comment">/* mISDN sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_PHONET35<span class="hljs-comment">/* Phonet sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_IEEE80215436<span class="hljs-comment">/* IEEE 802.15.4 sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_CAIF37<span class="hljs-comment">/* CAIF sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_ALG38<span class="hljs-comment">/* Algorithm sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_NFC39<span class="hljs-comment">/* NFC sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_VSOCK40<span class="hljs-comment">/* vSockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_KCM41<span class="hljs-comment">/* Kernel Connection Multiplexor.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_QIPCRTR42<span class="hljs-comment">/* Qualcomm IPC Router.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_SMC43<span class="hljs-comment">/* SMC sockets.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PF_MAX44<span class="hljs-comment">/* For now..  */</span></span><br><br><span class="hljs-comment">/* Address families.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_UNSPECPF_UNSPEC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_LOCALPF_LOCAL</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_UNIXPF_UNIX</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_FILEPF_FILE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_INETPF_INET</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_AX25PF_AX25</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IPXPF_IPX</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_APPLETALKPF_APPLETALK</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_NETROMPF_NETROM</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_BRIDGEPF_BRIDGE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ATMPVCPF_ATMPVC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_X25PF_X25</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_INET6PF_INET6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ROSEPF_ROSE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_DECnetPF_DECnet</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_NETBEUIPF_NETBEUI</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_SECURITYPF_SECURITY</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_KEYPF_KEY</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_NETLINKPF_NETLINK</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ROUTEPF_ROUTE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_PACKETPF_PACKET</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ASHPF_ASH</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ECONETPF_ECONET</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ATMSVCPF_ATMSVC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_RDSPF_RDS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_SNAPF_SNA</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IRDAPF_IRDA</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_PPPOXPF_PPPOX</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_WANPIPEPF_WANPIPE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_LLCPF_LLC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IBPF_IB</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_MPLSPF_MPLS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_CANPF_CAN</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_TIPCPF_TIPC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_BLUETOOTHPF_BLUETOOTH</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IUCVPF_IUCV</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_RXRPCPF_RXRPC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ISDNPF_ISDN</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_PHONETPF_PHONET</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_IEEE802154PF_IEEE802154</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_CAIFPF_CAIF</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_ALGPF_ALG</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_NFCPF_NFC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_VSOCKPF_VSOCK</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_KCMPF_KCM</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_QIPCRTRPF_QIPCRTR</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_SMCPF_SMC</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> AF_MAXPF_MAX</span><br></code></pre></td></tr></table></figure><h3 id="（2）TYPE"><a href="#（2）TYPE" class="headerlink" title="（2）TYPE"></a>（2）TYPE</h3><p>TYPE是指socket传输类型，表示不同的<strong>传输层类型</strong>，如下所示。</p><ul><li>SOCK_STREAM，即有序的、可靠的、基于连接的字节流。（TCP）</li><li>SOCK_DGRAM，面向无连接的，不可靠，固定最大长度数据包。（UDP）</li><li>SOCK_RAW，原始socket数据包，需要手动解析数据包格式并作出对应处理。可以理解为TCP/UDP一种封装好了的数据包格式，而RAW则需要自己封装或解析数据包。</li><li>SOCK_PACKET，直接从网络链路层获取数据并处理数据，如MySQL、postgresql数据库连接的各种驱动就是这种网络连接方式。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Types of sockets.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> __<span class="hljs-title">socket_type</span></span><br><span class="hljs-class">&#123;</span><br>  SOCK_STREAM = <span class="hljs-number">1</span>,<span class="hljs-comment">/* Sequenced, reliable, connection-based</span><br><span class="hljs-comment">   byte streams.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_STREAM SOCK_STREAM</span><br>  SOCK_DGRAM = <span class="hljs-number">2</span>,<span class="hljs-comment">/* Connectionless, unreliable datagrams</span><br><span class="hljs-comment">   of fixed maximum length.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_DGRAM SOCK_DGRAM</span><br>  SOCK_RAW = <span class="hljs-number">3</span>,<span class="hljs-comment">/* Raw protocol interface.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_RAW SOCK_RAW</span><br>  SOCK_RDM = <span class="hljs-number">4</span>,<span class="hljs-comment">/* Reliably-delivered messages.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_RDM SOCK_RDM</span><br>  SOCK_SEQPACKET = <span class="hljs-number">5</span>,<span class="hljs-comment">/* Sequenced, reliable, connection-based,</span><br><span class="hljs-comment">   datagrams of fixed maximum length.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_SEQPACKET SOCK_SEQPACKET</span><br>  SOCK_DCCP = <span class="hljs-number">6</span>,<span class="hljs-comment">/* Datagram Congestion Control Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_DCCP SOCK_DCCP</span><br>  SOCK_PACKET = <span class="hljs-number">10</span>,<span class="hljs-comment">/* Linux specific way of getting packets</span><br><span class="hljs-comment">   at the dev level.  For writing rarp and</span><br><span class="hljs-comment">   other similar things on the user level. */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_PACKET SOCK_PACKET</span><br><br>  <span class="hljs-comment">/* Flags to be ORed into the type parameter of socket and socketpair and</span><br><span class="hljs-comment">     used for the flags parameter of paccept.  */</span><br><br>  SOCK_CLOEXEC = <span class="hljs-number">02000000</span>,<span class="hljs-comment">/* Atomically set close-on-exec flag for the</span><br><span class="hljs-comment">   new descriptor(s).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_CLOEXEC SOCK_CLOEXEC</span><br>  SOCK_NONBLOCK = <span class="hljs-number">00004000</span><span class="hljs-comment">/* Atomically mark descriptor(s) as</span><br><span class="hljs-comment">   non-blocking.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOCK_NONBLOCK SOCK_NONBLOCK</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="（3）PROTOCAL"><a href="#（3）PROTOCAL" class="headerlink" title="（3）PROTOCAL"></a>（3）PROTOCAL</h3><p>PROTOCAL表示最终socket通信协议类型（= 网络层协议 + 传输层协议）。基于IP协议簇包括的协议类型如下。</p><p>如果选择0，用于TCP的虚拟协议，则操作系统会自动根据前两个参数选择一种协议。若自己填，却填错了，则无法创建socket。所以一般填0即可。</p><ul><li>IPPROTO_TCP，网络层使用IP协议，传输层使用TCP协议。</li><li>IPPROTO_TCP，网络层使用IP协议，传输层使用TCP协议。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Standard well-defined IP protocols.  */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">  &#123;</span><br>    IPPROTO_IP = <span class="hljs-number">0</span>,   <span class="hljs-comment">/* Dummy protocol for TCP.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IPIPPROTO_IP</span><br>    IPPROTO_ICMP = <span class="hljs-number">1</span>,   <span class="hljs-comment">/* Internet Control Message Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_ICMPIPPROTO_ICMP</span><br>    IPPROTO_IGMP = <span class="hljs-number">2</span>,   <span class="hljs-comment">/* Internet Group Management Protocol. */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IGMPIPPROTO_IGMP</span><br>    IPPROTO_IPIP = <span class="hljs-number">4</span>,   <span class="hljs-comment">/* IPIP tunnels (older KA9Q tunnels use 94).  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IPIPIPPROTO_IPIP</span><br>    IPPROTO_TCP = <span class="hljs-number">6</span>,   <span class="hljs-comment">/* Transmission Control Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_TCPIPPROTO_TCP</span><br>    IPPROTO_EGP = <span class="hljs-number">8</span>,   <span class="hljs-comment">/* Exterior Gateway Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_EGPIPPROTO_EGP</span><br>    IPPROTO_PUP = <span class="hljs-number">12</span>,   <span class="hljs-comment">/* PUP protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_PUPIPPROTO_PUP</span><br>    IPPROTO_UDP = <span class="hljs-number">17</span>,   <span class="hljs-comment">/* User Datagram Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_UDPIPPROTO_UDP</span><br>    IPPROTO_IDP = <span class="hljs-number">22</span>,   <span class="hljs-comment">/* XNS IDP protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IDPIPPROTO_IDP</span><br>    IPPROTO_TP = <span class="hljs-number">29</span>,   <span class="hljs-comment">/* SO Transport Protocol Class 4.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_TPIPPROTO_TP</span><br>    IPPROTO_DCCP = <span class="hljs-number">33</span>,   <span class="hljs-comment">/* Datagram Congestion Control Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_DCCPIPPROTO_DCCP</span><br>    IPPROTO_IPV6 = <span class="hljs-number">41</span>,     <span class="hljs-comment">/* IPv6 header.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_IPV6IPPROTO_IPV6</span><br>    IPPROTO_RSVP = <span class="hljs-number">46</span>,   <span class="hljs-comment">/* Reservation Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_RSVPIPPROTO_RSVP</span><br>    IPPROTO_GRE = <span class="hljs-number">47</span>,   <span class="hljs-comment">/* General Routing Encapsulation.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_GREIPPROTO_GRE</span><br>    IPPROTO_ESP = <span class="hljs-number">50</span>,      <span class="hljs-comment">/* encapsulating security payload.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_ESPIPPROTO_ESP</span><br>    IPPROTO_AH = <span class="hljs-number">51</span>,       <span class="hljs-comment">/* authentication header.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_AHIPPROTO_AH</span><br>    IPPROTO_MTP = <span class="hljs-number">92</span>,   <span class="hljs-comment">/* Multicast Transport Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_MTPIPPROTO_MTP</span><br>    IPPROTO_BEETPH = <span class="hljs-number">94</span>,   <span class="hljs-comment">/* IP option pseudo header for BEET.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_BEETPHIPPROTO_BEETPH</span><br>    IPPROTO_ENCAP = <span class="hljs-number">98</span>,   <span class="hljs-comment">/* Encapsulation Header.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_ENCAPIPPROTO_ENCAP</span><br>    IPPROTO_PIM = <span class="hljs-number">103</span>,   <span class="hljs-comment">/* Protocol Independent Multicast.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_PIMIPPROTO_PIM</span><br>    IPPROTO_COMP = <span class="hljs-number">108</span>,   <span class="hljs-comment">/* Compression Header Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_COMPIPPROTO_COMP</span><br>    IPPROTO_SCTP = <span class="hljs-number">132</span>,   <span class="hljs-comment">/* Stream Control Transmission Protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_SCTPIPPROTO_SCTP</span><br>    IPPROTO_UDPLITE = <span class="hljs-number">136</span>, <span class="hljs-comment">/* UDP-Lite protocol.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_UDPLITEIPPROTO_UDPLITE</span><br>    IPPROTO_MPLS = <span class="hljs-number">137</span>,    <span class="hljs-comment">/* MPLS in IP.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_MPLSIPPROTO_MPLS</span><br>    IPPROTO_RAW = <span class="hljs-number">255</span>,   <span class="hljs-comment">/* Raw IP packets.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IPPROTO_RAWIPPROTO_RAW</span><br>    IPPROTO_MAX<br>  &#125;;<br></code></pre></td></tr></table></figure><h3 id="（4）创建socket"><a href="#（4）创建socket" class="headerlink" title="（4）创建socket"></a>（4）创建socket</h3><p>若成功创建socket，则返回大于0的数字。创建失败则返回-1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 基于ipv4的TCP连接</span><br><span class="hljs-keyword">int</span> socket1 = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br>cout &lt;&lt; socket1 &lt;&lt; endl;<br><br><span class="hljs-comment">// 基于ipv4的UDP连接</span><br><span class="hljs-keyword">int</span> socket2 = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, IPPROTO_UDP);<br>cout &lt;&lt; socket2 &lt;&lt; endl;<br><br><span class="hljs-comment">// 基于ipv4的原始数据包</span><br><span class="hljs-keyword">int</span> socket3 = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_RAW, <span class="hljs-number">0</span>);<br>cout &lt;&lt; socket3 &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="2、创建socket地址"><a href="#2、创建socket地址" class="headerlink" title="2、创建socket地址"></a>2、创建socket地址</h2><p>以ipv4地址为例。sockaddr_in结构体即为socket地址，三个变量分别为：</p><ul><li>SOCKADDR_COMMON (sin_)，地址簇，即创建socket的第一个参数</li><li>in_port_t sin_port，端口，是一个2字节无符号整数（unsigned short int）。<ul><li>htons方法用于将unsigned short int型主机字节序的端口数字转换成网络传输需要的字节序的端口数字。</li></ul></li><li>struct in_addr sin_addr，具体ip地址，是一个4字节无符号整数（unsigned int）。<ul><li>htonl方法用于将unsigned int型主机字节序的端口数字转换成网络传输需要的字节序的端口数字。</li></ul></li></ul><p>常用地址如下：</p><ul><li>INADDR_LOOPBACK，本机回环地址，127.0.0.0</li><li>INADDR_ANY，接收任意收到的消息，0.0.0.0</li><li>INADDR_BROADCASE，广播地址，发动消息到任意主机，255.255.255.255</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Structure describing an Internet socket address.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span></span><br><span class="hljs-class">  &#123;</span><br>    __SOCKADDR_COMMON (sin_);<br>    <span class="hljs-keyword">in_port_t</span> sin_port;<span class="hljs-comment">/* Port number.  */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">sin_addr</span>;</span><span class="hljs-comment">/* Internet address.  */</span><br><br>    <span class="hljs-comment">/* Pad to size of `struct sockaddr&#x27;.  */</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> sin_zero[<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (struct sockaddr) -<br>   __SOCKADDR_COMMON_SIZE -<br>   <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (<span class="hljs-keyword">in_port_t</span>) -<br>   <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span> (struct in_addr)];<br>  &#125;;<br><br><span class="hljs-comment">/* Internet address.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">uint32_t</span> <span class="hljs-keyword">in_addr_t</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-keyword">in_addr_t</span> s_addr;<br>  &#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">__uint32_t</span> <span class="hljs-keyword">uint32_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">__uint32_t</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">uint32_t</span> <span class="hljs-title">htonl</span> <span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> __hostlong)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">uint16_t</span> <span class="hljs-title">htons</span> <span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> __hostshort)</span></span><br><span class="hljs-function">     __THROW __<span class="hljs-title">attribute__</span> <span class="hljs-params">((__const__))</span></span>;<br></code></pre></td></tr></table></figure><p>创建socket地址：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">sockaddr_in addr&#123;&#125;;<br>addr.sin_family = AF_INET;<br><span class="hljs-keyword">short</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">3000</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;转换前的端口为：&quot;</span> &lt;&lt; <span class="hljs-number">3000</span> &lt;&lt; <span class="hljs-string">&quot;，转换后的端口为：&quot;</span> &lt;&lt; port &lt;&lt; endl;<br>addr.sin_port = port;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> address = <span class="hljs-built_in">htonl</span>(INADDR_LOOPBACK);<br>cout &lt;&lt; <span class="hljs-string">&quot;转换前的地址为：&quot;</span> &lt;&lt; INADDR_LOOPBACK &lt;&lt; <span class="hljs-string">&quot;，转换后的地址为：&quot;</span> &lt;&lt; address &lt;&lt; endl;<br>addr.sin_addr.s_addr = address;<br></code></pre></td></tr></table></figure><h2 id="3、setsockopt"><a href="#3、setsockopt" class="headerlink" title="3、setsockopt"></a>3、setsockopt</h2><p>该方法用于设置socket选项，可选调用，也可以不调用该方法，使用默认选项。但通常来说启动其中的“复用端口号”选项可以开启，若不开启该选项，重启server端的socket程序时，会绑定端口错误，说端口正在被使用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Set socket FD&#x27;s option OPTNAME at protocol level LEVEL</span><br><span class="hljs-comment">   to *OPTVAL (which is OPTLEN bytes long).</span><br><span class="hljs-comment">   Returns 0 on success, -1 for errors.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">setsockopt</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __level, <span class="hljs-keyword">int</span> __optname,</span></span><br><span class="hljs-params"><span class="hljs-function">             <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *__optval, <span class="hljs-keyword">socklen_t</span> __optlen)</span> __THROW</span>;<br><br><span class="hljs-built_in">setsockopt</span>(welcome_socket, SOL_SOCKET, SO_REUSEADDR, &amp;enable, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br></code></pre></td></tr></table></figure><p>socket选项如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_DEBUG1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_REUSEADDR2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_TYPE3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_ERROR4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_DONTROUTE5</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_BROADCAST6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_SNDBUF7</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_RCVBUF8</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_SNDBUFFORCE32</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_RCVBUFFORCE33</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_KEEPALIVE9</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_OOBINLINE10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_NO_CHECK11</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_PRIORITY12</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_LINGER13</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_BSDCOMPAT14</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_REUSEPORT15</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SO_PASSCRED <span class="hljs-comment">/* powerpc only differs in these */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_PASSCRED16</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_PEERCRED17</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_RCVLOWAT18</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_SNDLOWAT19</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_RCVTIMEO20  <span class="hljs-comment">// 接收消息的超时时间</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SO_SNDTIMEO21  <span class="hljs-comment">// 发送消息的超时时间</span></span><br></code></pre></td></tr></table></figure><h2 id="4、server-socket创建"><a href="#4、server-socket创建" class="headerlink" title="4、server socket创建"></a>4、server socket创建</h2><p>socket表示网络IO的通道，服务器和客户端通信都需要创建socket，服务端接收连接，客户端发起连接。</p><p>创建服务端的socket，有以下步骤：</p><ul><li>创建服务端welcome socket，该socket专门用于接收连接而不会从该socket读取数据。</li><li>创建服务端地址结构体sockaddr_in</li><li>绑定端口并监听</li><li>接收连接，获取connection socket，该socket代表一个连接会话，可以从该socket中读取数据。</li><li>读取字节流，处理，写入输出字节流</li></ul><h3 id="（1）绑定、监听"><a href="#（1）绑定、监听" class="headerlink" title="（1）绑定、监听"></a>（1）绑定、监听</h3><p>将创建的socket绑定到创建的ip地址上。</p><p>其中需要将sockaddr_in强制转换为sockaddr指针再绑定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Give the socket FD the local address ADDR (which is LEN bytes long).  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bind</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, __CONST_SOCKADDR_ARG __addr, <span class="hljs-keyword">socklen_t</span> __len)</span></span><br><span class="hljs-function">     __THROW</span>;<br><br><span class="hljs-comment">/* Structure describing a generic socket address.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span></span><br><span class="hljs-class">  &#123;</span><br>    __SOCKADDR_COMMON (sa_);<span class="hljs-comment">/* Common data: address family and length.  */</span><br>    <span class="hljs-keyword">char</span> sa_data[<span class="hljs-number">14</span>];<span class="hljs-comment">/* Address data.  */</span><br>  &#125;;<br><br><span class="hljs-built_in">bind</span>(welcome_socket1, (struct sockaddr *) &amp;addr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr));<br></code></pre></td></tr></table></figure><p>开启对socket的监听，准备接受客户端连接。</p><p>N表示最大队列数，当程序已经接收到一个connection时，若还有其他客户端发起连接，则会进入队列中，当前连接处理结束后会直接从队列中取出下一个连接进行处理。超过该数字的连接将会被抛弃。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Prepare to accept connections on socket FD.</span><br><span class="hljs-comment">   N connection requests will be queued before further requests are refused.</span><br><span class="hljs-comment">   Returns 0 on success, -1 for errors.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">listen</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, <span class="hljs-keyword">int</span> __n)</span> __THROW</span>;<br><br><span class="hljs-built_in">listen</span>(welcome_socket1, <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><h3 id="（2）接收连接"><a href="#（2）接收连接" class="headerlink" title="（2）接收连接"></a>（2）接收连接</h3><p>在已经创建好的服务端socket上阻塞等待客户端连接。</p><ul><li><p>addr指针表示连接对方的地址，可以用INADDR_ANY表示任意地址，或者填如nullptr，也表示任意地址。若指定了某个地址，则只有该地址可以访问。</p></li><li><p>addr_len指针表示addr的sizeof。</p></li></ul><p>当接收到一个客户端连接时，该方法就返回一个整数，代表本次会话的连接socket。</p><p>注意这个连接socket和服务端socket不一样。服务端socket只用于接收新的连接，而连接socket</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Await a connection on socket FD.</span><br><span class="hljs-comment">   When a connection arrives, open a new socket to communicate with it,</span><br><span class="hljs-comment">   set *ADDR (which is *ADDR_LEN bytes long) to the address of the connecting</span><br><span class="hljs-comment">   peer and *ADDR_LEN to the address&#x27;s actual length, and return the</span><br><span class="hljs-comment">   new socket&#x27;s descriptor, or -1 for errors.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">accept</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __fd, __SOCKADDR_ARG __addr,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">socklen_t</span> *__restrict __addr_len)</span></span>;<br><br><span class="hljs-keyword">int</span> connection_socket = <span class="hljs-built_in">accept</span>(welcome_socket1, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br></code></pre></td></tr></table></figure><h3 id="（3）读取返回"><a href="#（3）读取返回" class="headerlink" title="（3）读取返回"></a>（3）读取返回</h3><p>从使用read方法可以从刚才得到的连接socket中读取字节流，可以用一个缓冲区接收该字节流。</p><p>经处理后，再将响应消息通过write方法，写入这个连接socket</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">read</span>(connection_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buffer);<br><span class="hljs-keyword">char</span>* response = <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-built_in">send</span>(connection_socket, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">close</span>(welcome_socket);<br><span class="hljs-built_in">close</span>(connection_socket);<br></code></pre></td></tr></table></figure><h3 id="（4）服务端完整代码"><a href="#（4）服务端完整代码" class="headerlink" title="（4）服务端完整代码"></a>（4）服务端完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-comment">// TCP连接</span><br>    <span class="hljs-keyword">int</span> welcome_socket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (welcome_socket &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;socket创建失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> enable = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">setsockopt</span>(welcome_socket, SOL_SOCKET, SO_REUSEADDR | SO_REUSEADDR, &amp;enable, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-comment">// 创建地址</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>&#123;</span>&#125;;<br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class="hljs-built_in">htons</span>(port);<br>    addr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr);<br><br>    <span class="hljs-comment">// 绑定并并监听</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(welcome_socket, (sockaddr*) &amp;addr, len) &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-comment">// listen的第二个参数n，表示最大队列数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(welcome_socket, <span class="hljs-number">10</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;监听失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">int</span> conn_socket = <span class="hljs-built_in">accept</span>(welcome_socket, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>        <span class="hljs-keyword">if</span> (conn_socket &lt; <span class="hljs-number">0</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;客户端连接失败&quot;</span>;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-built_in">read</span>(conn_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buffer);<br>        <span class="hljs-keyword">char</span>* response = <span class="hljs-string">&quot;OK&quot;</span>;<br>        <span class="hljs-built_in">send</span>(conn_socket, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">close</span>(conn_socket);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、client-socket创建"><a href="#5、client-socket创建" class="headerlink" title="5、client socket创建"></a>5、client socket创建</h2><p>创建client socket和server端的socket差异不大，只是没有welcome socket和client的区分，以及连接服务端的方法不是accept，而是connect。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">my_client</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* host, <span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> client_socket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (client_socket &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;客户端socket创建失败！&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">serverAddr</span>&#123;</span>&#125;;<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = <span class="hljs-built_in">htons</span>(port);<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-built_in">inet_pton</span>(AF_INET, host, &amp;serverAddr.sin_addr);<br>    <span class="hljs-keyword">if</span> (res &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;解析host失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    res = <span class="hljs-built_in">connect</span>(client_socket, (struct sockaddr *) &amp;serverAddr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(serverAddr));<br>    <span class="hljs-keyword">if</span> (res &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;连接服务器失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">char</span>* message = <span class="hljs-string">&quot;hello server, I&#x27;m client!&quot;</span>;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">send</span>(client_socket, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;消息发送失败&quot;</span> &lt;&lt; endl;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;消息已发送&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-built_in">read</span>(client_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buffer);<br>    <span class="hljs-built_in">close</span>(client_socket);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、fork-server"><a href="#6、fork-server" class="headerlink" title="6、fork server"></a>6、fork server</h2><p>以上说的tcp server只能处理一个连接，无法处理多个请求。想要处理多个请求，第一时间可以想到用多进程或多进线程，可以通过fork一个server进程来实现处理多请求。在以往的unix操作系统中，使用多线程的难度高于使用多进程，因此大多数c++程序员使用多进程而不是多线程来处理多任务。</p><p>代码如下。</p><ul><li><p><code>signal(SIGCHLD, SIG_IGN);</code>，忽略子进程的信号，子进程会交给操作系统内核来回收</p></li><li><p><code>fork()</code>，可以创建一个子进程，子进程使用的资源全部是从父进程复制的来。在子进程中该方法返回0，父进程中返回子进程的pid。</p></li></ul><p>这里不深入讨论fork和signal的细节。</p><p>题外话：postgres、linux上的oracle数据库的连接就是多进程的，而MySQL是多线程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fork_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-built_in">signal</span>(SIGCHLD, SIG_IGN); <span class="hljs-comment">// 忽略子进程的信号，子进程会交给操作系统内核来回收</span><br>    <span class="hljs-comment">// TCP连接</span><br>    <span class="hljs-keyword">int</span> welcome_socket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (welcome_socket &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;socket创建失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> enable = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">setsockopt</span>(welcome_socket, SOL_SOCKET, SO_REUSEADDR | SO_REUSEADDR, &amp;enable, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-comment">// 创建地址</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>&#123;</span>&#125;;<br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class="hljs-built_in">htons</span>(port);<br>    addr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr);<br><br>    <span class="hljs-comment">// 绑定并并监听</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(welcome_socket, (sockaddr*) &amp;addr, len) &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-comment">// listen的第二个参数n，表示最大队列数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(welcome_socket, <span class="hljs-number">10</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;监听失败&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">int</span> conn_socket = <span class="hljs-built_in">accept</span>(welcome_socket, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>        <span class="hljs-keyword">if</span> (conn_socket &lt; <span class="hljs-number">0</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;客户端连接失败&quot;</span>;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 如果该进程是父进程，收到一个connection，只需要fork一个子进程，将连接交给子进程来处理，自己可以回去继续接收连接</span><br>        <span class="hljs-keyword">if</span> (fork() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">// 以下是子进程操作</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-keyword">int</span> size = <span class="hljs-built_in">read</span>(conn_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>            <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, buffer, count++);<br>            <span class="hljs-keyword">char</span>* response = buffer;<br>            <span class="hljs-built_in">send</span>(conn_socket, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-built_in">close</span>(conn_socket);<br>        <span class="hljs-comment">// 子进程需要关闭welcome_socket，并结束进程</span><br>        <span class="hljs-built_in">close</span>(welcome_socket);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7、心跳"><a href="#7、心跳" class="headerlink" title="7、心跳"></a>7、心跳</h2><p>服务端对于一个已经建立好的连接，经常会设置接收消息的超时时间，即若超过这个时间没有消息到来时，就会断开该连接。</p><p>服务端设置超时时间只需要对connectin socket设置setsockopt即可，如下。</p><p>当服务端加上以下代码时，若客户端连接上后，超过10秒没有发送消息，服务端则会自动断开该连接。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 设置接收报文超时时间</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>&#123;</span>&#125;;<br>tv.tv_usec = <span class="hljs-number">0</span>;<br>tv.tv_sec = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">setsockopt</span>(conn_socket, SOL_SOCKET, SO_RCVTIMEO, &amp;tv, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(tv));<br></code></pre></td></tr></table></figure><p>而客户端为了保证一直保持连接状态，就需要定时向服务端发送心跳包。可以简单通过fork一个客户端进程来时间定时发送心跳包。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 若为子进程，则无限循环每过5秒发送发送心跳包。</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-built_in">send</span>(client_socket, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>] = &#123;&#125;;<br>        <span class="hljs-built_in">read</span>(client_socket, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buffer);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">5</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时服务端也需要对收到的消息进行额外处理。若为心跳包，则不进行业务处理，而是直接返回一个success。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 简单设定心跳报文为一个字符0，则当服务端收到心跳报文，不进行业务处理，只返回可以只返回一个成功消息即可。</span><br><span class="hljs-keyword">if</span> (size == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">strcmp</span>(buffer, <span class="hljs-string">&quot;0&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;heart beat!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">char</span>* response = <span class="hljs-string">&quot;success&quot;</span>;<br>    <span class="hljs-built_in">send</span>(conn_socket, response, <span class="hljs-built_in">strlen</span>(response), <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">close</span>(conn_socket);<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8、select"><a href="#8、select" class="headerlink" title="8、select"></a>8、select</h2><h3 id="（1）介绍"><a href="#（1）介绍" class="headerlink" title="（1）介绍"></a>（1）介绍</h3><p>前面说的server socket每次只能处理一个客户端连接，当有多个客户端尝试请求服务器时，会以队列的形式一个一个处理。因此要处理多个客户端的连接，可以使用<strong>select</strong>命令。</p><p>select命令允许监控多个socket，当这些socket都没有事件发生时，select被阻塞，当任意一个socket变为活动状态时就会返回对应socket数字，当select的返回值为-1时，则表示产生异常。</p><p>select命令使用的结构体是<code>fd_set</code>，即socket要放在这个结构体中，才能被监控到。该默认大小是128个字节，结构体底层使用bitmap，128个字节对应1024位，每个位代表一个socket，因此最多可以记录1024个socket情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* fd_set for select and pselect.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-comment">/* XPG4.2 requires this member name.  Otherwise avoid the name</span><br><span class="hljs-comment">       from the global namespace.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __USE_XOPEN</span><br>    __fd_mask fds_bits[__FD_SETSIZE / __NFDBITS];<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __FDS_BITS(set) ((set)-&gt;fds_bits)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    __fd_mask __fds_bits[__FD_SETSIZE / __NFDBITS];<br><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> __FDS_BITS(set) ((set)-&gt;__fds_bits)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>  &#125; fd_set;<br></code></pre></td></tr></table></figure><p>对<code>fd_set</code>数据结构的操作方法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">fd_set read_fd;<br><br><span class="hljs-comment">// 清空fd_set</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;read_fd);  <br><br><span class="hljs-comment">// 往fd_set中新增一个文件描述符，即将bitmap对应位置的值设置为1</span><br><span class="hljs-built_in">FD_SET</span>(master_sock, &amp;read_fd);   <br><br><span class="hljs-comment">// 从fd_set中移除一个文件描述符，即将bitmap对应位置的值设置为0</span><br><span class="hljs-built_in">FD_CLR</span>(master_sock, &amp;read_fd); <br><br><span class="hljs-comment">// 如果一个文件描述符中发生了一些事件，则返回1，否则返回0。该事件可以是新连接、可读事件、可写事件等等。</span><br><span class="hljs-built_in">FD_ISSET</span>(master_sock, &amp;readfds); <br></code></pre></td></tr></table></figure><p>select函数如下：</p><ul><li>返回值 &gt; 1，即活跃的socket</li><li>返回值 = 0，超时</li><li>返回值 = -1，出现异常</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Check the first NFDS descriptors each in READFDS (if not NULL) for read</span><br><span class="hljs-comment">   readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS</span><br><span class="hljs-comment">   (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out</span><br><span class="hljs-comment">   after waiting the interval specified therein.  Returns the number of ready</span><br><span class="hljs-comment">   descriptors, or -1 for errors.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">select</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __nfds, fd_set *__restrict __readfds,</span></span><br><span class="hljs-params"><span class="hljs-function">   fd_set *__restrict __writefds,</span></span><br><span class="hljs-params"><span class="hljs-function">   fd_set *__restrict __exceptfds,</span></span><br><span class="hljs-params"><span class="hljs-function">   struct timeval *__restrict __timeout)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="（2）流程"><a href="#（2）流程" class="headerlink" title="（2）流程"></a>（2）流程</h3><p>使用select常用轮询的方式：</p><p>1、先创建一个welcome_socket准备接收连接，创建一个数组<code>int client_socket[30]</code>用于存放收到的socket。</p><p>2、清空fd_set，将welcome_socket放入fd_set中监控，将client_socket中已有的连接放入fd_set中进行监控</p><p>3、先判断welcome是否有活动。若有活动，则创建新连接，并加入到client_socket数组中。</p><p>4、再循环client_socket依次判断这里面的所有socket是否有活动。若有活动则进行IO读写。若发现已经断开连接，则从client_socket中移除。</p><p>5、重复步骤2。</p><h3 id="（3）完整实现"><a href="#（3）完整实现" class="headerlink" title="（3）完整实现"></a>（3）完整实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">select_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> opt = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">int</span> welcome_socket , addrlen , new_socket , client_socket[<span class="hljs-number">30</span>] ,<br>            max_clients = <span class="hljs-number">30</span> , activity, i , valread , sd;<br>    <span class="hljs-keyword">int</span> max_sd, count = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">address</span> &#123;</span> &#125;;<br><br>    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1025</span>];  <span class="hljs-comment">//data buffer of 1K</span><br><br>    <span class="hljs-comment">//set of socket descriptors</span><br>    fd_set readfds;<br><br>    <span class="hljs-comment">//a message</span><br>    <span class="hljs-keyword">char</span> *message = <span class="hljs-string">&quot;ECHO Daemon v1.0 \r\n&quot;</span>;<br><br>    <span class="hljs-comment">//initialise all client_socket[] to 0 so not checked</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_clients; i++)<br>    &#123;<br>        client_socket[i] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//create a master socket</span><br>    <span class="hljs-keyword">if</span>( (welcome_socket = <span class="hljs-built_in">socket</span>(AF_INET , SOCK_STREAM , <span class="hljs-number">0</span>)) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;socket failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">//set master socket to allow multiple connections ,</span><br>    <span class="hljs-comment">//this is just a good habit, it will work without this</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-built_in">setsockopt</span>(welcome_socket, SOL_SOCKET, SO_REUSEADDR, (<span class="hljs-keyword">char</span> *)&amp;opt,<br>                   <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(opt)) &lt; <span class="hljs-number">0</span> )<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;setsockopt&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">//type of socket created</span><br>    address.sin_family = AF_INET;<br>    address.sin_addr.s_addr = INADDR_ANY;<br>    address.sin_port = <span class="hljs-built_in">htons</span>( port );<br><br>    <span class="hljs-comment">//bind the socket to localhost port 8888</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(welcome_socket, (struct sockaddr *)&amp;address, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(address))&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;bind failed&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Listener on port %d \n&quot;</span>, port);<br><br>    <span class="hljs-comment">//try to specify maximum of 3 pending connections for the master socket</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(welcome_socket, <span class="hljs-number">3</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;listen&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">//accept the incoming connection</span><br>    addrlen = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(address);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Waiting for connections ...&quot;</span>);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-comment">//clear the socket set</span><br>        <span class="hljs-built_in">FD_ZERO</span>(&amp;readfds);<br><br>        <span class="hljs-comment">//add master socket to set</span><br>        <span class="hljs-built_in">FD_SET</span>(welcome_socket, &amp;readfds);<br>        max_sd = welcome_socket;<br><br>        <span class="hljs-comment">//add child sockets to set</span><br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span> ; i &lt; max_clients ; i++)<br>        &#123;<br>            <span class="hljs-comment">//socket descriptor</span><br>            sd = client_socket[i];<br><br>            <span class="hljs-comment">//if valid socket descriptor then add to read list</span><br>            <span class="hljs-keyword">if</span>(sd &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">FD_SET</span>( sd , &amp;readfds);<br><br>            <span class="hljs-comment">//highest file descriptor number, need it for the select function</span><br>            <span class="hljs-keyword">if</span>(sd &gt; max_sd)<br>                max_sd = sd;<br>        &#125;<br><br>        <span class="hljs-comment">//wait for an activity on one of the sockets , timeout is NULL ,</span><br>        <span class="hljs-comment">//so wait indefinitely</span><br>        activity = <span class="hljs-built_in">select</span>( max_sd + <span class="hljs-number">1</span> , &amp;readfds , <span class="hljs-literal">nullptr</span> , <span class="hljs-literal">nullptr</span> , <span class="hljs-literal">nullptr</span>);<br><br>        <span class="hljs-keyword">if</span> ((activity &lt; <span class="hljs-number">0</span>) &amp;&amp; (errno!=EINTR))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select error&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//If something happened on the master socket ,</span><br>        <span class="hljs-comment">//then its an incoming connection</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(welcome_socket, &amp;readfds))<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((new_socket = <span class="hljs-built_in">accept</span>(welcome_socket,<br>                                     (struct sockaddr *)&amp;address, (<span class="hljs-keyword">socklen_t</span>*)&amp;addrlen))&lt;<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;accept&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>            &#125;<br><br>            <span class="hljs-comment">//inform user of socket number - used in send and receive commands</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;New connection , socket fd is %d , ip is : %s , port : %d\n&quot;</span>,<br>                   new_socket , <span class="hljs-built_in">inet_ntoa</span>(address.sin_addr) , <span class="hljs-built_in">ntohs</span>(address.sin_port));<br><br>            <span class="hljs-comment">//send new connection greeting message</span><br>            <span class="hljs-keyword">if</span>( <span class="hljs-built_in">send</span>(new_socket, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>) != <span class="hljs-built_in">strlen</span>(message) )<br>            &#123;<br>                <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;send&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome message sent successfully&quot;</span>);<br><br>            <span class="hljs-comment">//add new socket to array of sockets</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_clients; i++)<br>            &#123;<br>                <span class="hljs-comment">//if position is empty</span><br>                <span class="hljs-keyword">if</span>( client_socket[i] == <span class="hljs-number">0</span> )<br>                &#123;<br>                    client_socket[i] = new_socket;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Adding to list of sockets as %d\n&quot;</span> , i);<br><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//else its some IO operation on some other socket</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_clients; i++)<br>        &#123;<br>            sd = client_socket[i];<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>( sd , &amp;readfds))<br>            &#123;<br>                <span class="hljs-comment">//Check if it was for closing , and also read the</span><br>                <span class="hljs-comment">//incoming message</span><br>                <span class="hljs-keyword">if</span> ((valread = <span class="hljs-built_in">read</span>( sd , buffer, <span class="hljs-number">1024</span>)) == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-comment">//Somebody disconnected , get his details and print</span><br>                    <span class="hljs-built_in">getpeername</span>(sd , (struct sockaddr*)&amp;address , \<br>                        (<span class="hljs-keyword">socklen_t</span>*)&amp;addrlen);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Host disconnected , ip %s , port %d \n&quot;</span> ,<br>                           <span class="hljs-built_in">inet_ntoa</span>(address.sin_addr) , <span class="hljs-built_in">ntohs</span>(address.sin_port));<br><br>                    <span class="hljs-comment">//Close the socket and mark as 0 in list for reuse</span><br>                    <span class="hljs-built_in">close</span>( sd );<br>                    client_socket[i] = <span class="hljs-number">0</span>;<br>                &#125;<br><br>                <span class="hljs-comment">//Echo back the message that came in</span><br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">//set the string terminating NULL byte on the end</span><br>                    <span class="hljs-comment">//of the data read</span><br>                    buffer[valread] = <span class="hljs-string">&#x27;r&#x27;</span>;<br>                    buffer[valread + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>, buffer, count++);<br>                    <span class="hljs-built_in">send</span>(sd , buffer , <span class="hljs-built_in">strlen</span>(buffer) , <span class="hljs-number">0</span> );<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（4）优缺点"><a href="#（4）优缺点" class="headerlink" title="（4）优缺点"></a>（4）优缺点</h3><p>优点：</p><ul><li><p>IO复用</p></li><li><p>适用于并发量小的场景，性能强</p></li></ul><p>缺点：</p><ul><li>支持的文件描述符只有1024。由于采用轮询的方式，因此调大该数值的意义不大。</li><li>只要连接没有关闭，即使没有活动，也会被遍历到，每次都要遍历所有socket，连接数越多性能越差。</li><li>每次循环之前需要拷贝socket</li></ul><h3 id="（5）pselect"><a href="#（5）pselect" class="headerlink" title="（5）pselect"></a>（5）pselect</h3><p>pselect和select基本一样，在select的基础上有两处变化：</p><ul><li>timeout结构体从timeval（秒+微秒）改成了timespec（秒+纳秒）</li><li>新增了一个__sigmask信号掩码参数</li></ul><p>嗯，不太懂。</p><h3 id="（6）注意点"><a href="#（6）注意点" class="headerlink" title="（6）注意点"></a>（6）注意点</h3><ul><li>select对于没有结束的事件，在下一次轮询中还会继续活跃。比如第一次read指定长度的buffer，但是客户端发送的数据包很大，一个buffer没有读完，因此在下一次循环中该socket依然是活跃的，可以继续从socket中读取数据。</li><li>select本质上是针对文件描述符的，因此也可以多个文件的读写进行IO复用，但很少这样用。</li></ul><h2 id="9、poll"><a href="#9、poll" class="headerlink" title="9、poll"></a>9、poll</h2><p>poll和select在本质上没有区别，也是管理多个socket然后进行轮询，根据socket的状态进行处理。</p><p>poll使用的数据结构是<code>pollfd</code>，一个封装了socket的机构体。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Data structure describing a polling request.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-comment">// socket</span><br>    <span class="hljs-keyword">int</span> fd;<span class="hljs-comment">/* File descriptor to poll.  */</span><br>    <span class="hljs-comment">// 用户注册的需要监听的事件</span><br>    <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> events;<span class="hljs-comment">/* Types of events poller cares about.  */</span><br>    <span class="hljs-comment">// 实际在socket上发生的事件</span><br>    <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> revents;<span class="hljs-comment">/* Types of events that actually occurred.  */</span><br>  &#125;;<br></code></pre></td></tr></table></figure><p>事件共有以下几种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 常用事件</span><br><span class="hljs-comment">/* Event types that can be polled for.  These bits may be set in `events&#x27;</span><br><span class="hljs-comment">   to indicate the interesting event types; they will appear in `revents&#x27;</span><br><span class="hljs-comment">   to indicate the status of the file descriptor.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLIN0x001<span class="hljs-comment">/* There is data to read.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLPRI0x002<span class="hljs-comment">/* There is urgent data to read.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLOUT0x004<span class="hljs-comment">/* Writing now will not block.  */</span></span><br><br><span class="hljs-comment">// revents事件如下，revents事件不能用于events，用于表示socket状态</span><br><span class="hljs-comment">/* Event types always implicitly polled for.  These bits need not be set in</span><br><span class="hljs-comment">   `events&#x27;, but they will appear in `revents&#x27; to indicate the status of</span><br><span class="hljs-comment">   the file descriptor.  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLERR0x008<span class="hljs-comment">/* Error condition.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLHUP0x010<span class="hljs-comment">/* Hung up.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POLLNVAL0x020<span class="hljs-comment">/* Invalid polling request.  */</span></span><br></code></pre></td></tr></table></figure><p>poll方法从一个pollfd数组中，获取出和用户注册的事件一致的一个socket。poll方法如下：</p><ul><li>返回值 = 1，即活跃的socket</li><li>返回值 = 0，超时</li><li>返回值 = -1，出现异常</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Poll the file descriptors described by the NFDS structures starting at</span><br><span class="hljs-comment">   FDS.  If TIMEOUT is nonzero and not -1, allow TIMEOUT milliseconds for</span><br><span class="hljs-comment">   an event to occur; if TIMEOUT is -1, block until an event occurs.</span><br><span class="hljs-comment">   Returns the number of file descriptors with events, zero if timed out,</span><br><span class="hljs-comment">   or -1 for errors.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">poll</span> <span class="hljs-params">(struct pollfd *__fds, <span class="hljs-keyword">nfds_t</span> __nfds, <span class="hljs-keyword">int</span> __timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>poll代码和select也差不多，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">poll_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> MAX_CONNECTION = <span class="hljs-number">1024</span>;<br>    <span class="hljs-keyword">int</span> max_fd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>&#123;</span>&#125;;<br>    <span class="hljs-keyword">int</span> addr_len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr);<br>    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">char</span> response[<span class="hljs-number">1024</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">int</span> welcome_socket = <span class="hljs-built_in">create_welcome_socket</span>(port);<br>    cout &lt;&lt; <span class="hljs-string">&quot;welcome_socket:&quot;</span> &lt;&lt; welcome_socket &lt;&lt; endl;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span>[<span class="hljs-title">MAX_CONNECTION</span>];</span><br>    <span class="hljs-comment">// 初始化，将fd设置为-1</span><br>    <span class="hljs-comment">// 对于poll函数，若fd为-1，则会被忽略</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_CONNECTION; i++) fds[<span class="hljs-number">0</span>].fd = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">// 初始化welcome_socket</span><br>    fds[welcome_socket].fd = welcome_socket;<br>    <span class="hljs-comment">// 为welcome_socket注册可读事件</span><br>    fds[welcome_socket].events = POLLIN;<br>    max_fd = welcome_socket;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">int</span> activity = <span class="hljs-built_in">poll</span>(fds, max_fd + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span> (activity &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;poll error!\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= max_fd; ++i) &#123;<br>            pollfd f = fds[i];<br>            <span class="hljs-keyword">if</span> (f.fd == <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (f.revents != POLLIN) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (f.fd == welcome_socket) &#123;<br>                <span class="hljs-comment">// 处理welcome_socket</span><br>                <span class="hljs-comment">// (struct sockaddr *)&amp;addr, (socklen_t *)(sizeof(addr))</span><br>                <span class="hljs-keyword">int</span> new_connection = <span class="hljs-built_in">accept</span>(welcome_socket, (struct sockaddr *)&amp;addr, (<span class="hljs-keyword">socklen_t</span>*)&amp;addr_len);<br>                <span class="hljs-keyword">if</span> (new_connection &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;accept error!\n&quot;</span>);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                cout &lt;&lt; <span class="hljs-string">&quot;new socket:&quot;</span> &lt;&lt; new_connection &lt;&lt; endl;<br>                <span class="hljs-comment">//inform user of socket number - used in send and receive commands</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;New connection , socket:%d , ip:%s , port:%d\n&quot;</span>,<br>                       new_connection , <span class="hljs-built_in">inet_ntoa</span>(addr.sin_addr) , <span class="hljs-built_in">ntohs</span>(addr.sin_port));<br>                fds[new_connection].fd = new_connection;<br>                fds[new_connection].events = POLLIN;<br>                max_fd = <span class="hljs-built_in">max</span>(max_fd, new_connection);<br>                f.events = POLLIN;<br>                cout &lt;&lt; <span class="hljs-string">&quot;max_fd:&quot;</span> &lt;&lt; max_fd &lt;&lt; endl;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;fd:&quot;</span> &lt;&lt; f.fd &lt;&lt; endl;<br>                <span class="hljs-keyword">if</span> (f.revents == POLLIN) &#123;<br>                    <span class="hljs-comment">// 处理读事件</span><br>                    <span class="hljs-keyword">int</span> size = <span class="hljs-built_in">read</span>(f.fd, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>                    <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-built_in">getpeername</span>(f.fd, (struct sockaddr *)&amp;addr, (<span class="hljs-keyword">socklen_t</span>*)&amp;addr_len);<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;client disconnected, ip:%s, port:%d\n&quot;</span>,<br>                               <span class="hljs-built_in">inet_ntoa</span>(addr.sin_addr) , <span class="hljs-built_in">ntohs</span>(addr.sin_port));<br>                        <span class="hljs-keyword">if</span> (max_fd == f.fd) &#123;<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = max_fd - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">0</span>; --j) &#123;<br>                                <span class="hljs-keyword">if</span> (fds[j].fd != <span class="hljs-number">-1</span>) &#123;<br>                                    max_fd = fds[j].fd;<br>                                    <span class="hljs-keyword">break</span>;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;max_fd:&quot;</span> &lt;&lt; max_fd &lt;&lt; endl;<br>                        <span class="hljs-built_in">close</span>(f.fd);<br>                        f.fd = <span class="hljs-number">-1</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收消息%d:%s\n&quot;</span>, count++, buffer);<br>                        buffer[size] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>                        size = <span class="hljs-built_in">send</span>(f.fd, buffer, <span class="hljs-built_in">strlen</span>(buffer), <span class="hljs-number">0</span>);<br>                        <span class="hljs-keyword">if</span> (size &lt; <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write error!\n&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-comment">// 将该socket重新注册监听可读事件</span><br>                        f.events = POLLIN;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>poll的缺点：</p><ul><li>没有避免拷贝socket这个环节</li><li>依然采用轮询的方式，连接数越多性能越差</li></ul><h2 id="10、epoll"><a href="#10、epoll" class="headerlink" title="10、epoll"></a>10、epoll</h2><h3 id="（1）简介"><a href="#（1）简介" class="headerlink" title="（1）简介"></a>（1）简介</h3><p>为解决以上select和poll轮询的缺点，epoll出现了。</p><p>epoll的本质不是主动轮询找到活跃的fd，而是使用系统内核在每个fd上的回调函数实现的。即当有fd活跃时，会触发系统内核的一个callback函数，加入到Ready队列中，并通知应用程序来处理这个事件。因此应用程序只要无限循环处理这个Ready队列中的fd即可。</p><p>epoll的两种工作模式：</p><ul><li>level triggered：水平触发，即当一个fd就绪时，内核会通知你，并且直到该fd事件完全结束。假如你读取了一部分数据，还剩一部分数据没读取，内核会继续通知这个事件。select和poll都是这种工作模式。支持block和no-block socket。</li><li>edge triggered：边缘触发，即当一个fd就绪时，内核会通知你，直到你做了某些操作导致这个fd不再时就绪状态，比如读取了一半数据的fd，并不是就绪状态，后面内核就不再通知这个事件了。除非下一次IO又开始了。只支持non-block socket。这种方式会导致代码变得复杂，并且容易丢失数据。</li></ul><p>man文档是这样举例的：</p><p>当一个IO事件如下时，若该fd注册到epoll中使用的是edge triggered时，下面第5步不会是就绪状态，而是阻塞状态。尽管在fd中还有可用数据。同时客户端会一直等待服务器针对这次IO的响应消息。但如果注册到epoll中使用的是level triggered时，第5步则会是就绪状态，即内核还会继续通知应用程序该fd事件。</p><ul><li>1.将一个read fd注册到epoll实例上</li><li>2.read fd对应的客户端发送一个2kb的数据包给read fd</li><li>3.epoll_wait就绪（解除阻塞）并且返回对应的fd给应用程序</li><li>4.应用程序只读取了1kb的数据</li><li>5.由于事件未结束，因此下一次调用epoll_wait函数时也是就绪状态。</li></ul><h3 id="（2）epoll使用的结构体和系统调用"><a href="#（2）epoll使用的结构体和系统调用" class="headerlink" title="（2）epoll使用的结构体和系统调用"></a>（2）epoll使用的结构体和系统调用</h3><p>结构体：</p><ul><li>epoll_event：epoll适用的事件结构体，events属性表示具体事件类型，data又是一个结构体，fd就是该事件对应的socket</li></ul><p>函数：</p><ul><li><p>epoll_create：创建一个epoll实例，需要将其他socket与之关联在一起</p></li><li><p>epoll_create1：同epoll_create，去掉了size参数，加上了flags参数</p></li><li><p>epoll_ctl：对epoll_fd进行操作，op参数为操作类型，可以新增、删除、修改一个普通fd的绑定关系。</p></li><li><p>epoll_wait：等待与epoll_fd绑定的fd上的事件，当有事件发生时解除阻塞，并返回事件数量</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">uint32_t</span> events;<span class="hljs-comment">/* Epoll events */</span><br>  <span class="hljs-keyword">epoll_data_t</span> data;<span class="hljs-comment">/* User data variable */</span><br>&#125; __EPOLL_PACKED;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">epoll_data</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">void</span> *ptr;<br>  <span class="hljs-keyword">int</span> fd;<br>  <span class="hljs-keyword">uint32_t</span> u32;<br>  <span class="hljs-keyword">uint64_t</span> u64;<br>&#125; <span class="hljs-keyword">epoll_data_t</span>;<br><br><span class="hljs-comment">/* Creates an epoll instance.  Returns an fd for the new instance.</span><br><span class="hljs-comment">   The &quot;size&quot; parameter is a hint specifying the number of file</span><br><span class="hljs-comment">   descriptors to be associated with the new instance.  The fd</span><br><span class="hljs-comment">   returned by epoll_create() should be closed with close().  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">epoll_create</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __size)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Same as epoll_create but with an FLAGS parameter.  The unused SIZE</span><br><span class="hljs-comment">   parameter has been dropped.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">epoll_create1</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __flags)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Manipulate an epoll instance &quot;epfd&quot;. Returns 0 in case of success,</span><br><span class="hljs-comment">   -1 in case of error ( the &quot;errno&quot; variable will contain the</span><br><span class="hljs-comment">   specific error code ) The &quot;op&quot; parameter is one of the EPOLL_CTL_*</span><br><span class="hljs-comment">   constants defined above. The &quot;fd&quot; parameter is the target of the</span><br><span class="hljs-comment">   operation. The &quot;event&quot; parameter describes which events the caller</span><br><span class="hljs-comment">   is interested in and any associated user data.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">epoll_ctl</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __epfd, <span class="hljs-keyword">int</span> __op, <span class="hljs-keyword">int</span> __fd,</span></span><br><span class="hljs-params"><span class="hljs-function">      struct epoll_event *__event)</span> __THROW</span>;<br><br><span class="hljs-comment">/* Valid opcodes ( &quot;op&quot; parameter ) to issue to epoll_ctl().  */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EPOLL_CTL_ADD 1<span class="hljs-comment">/* Add a file descriptor to the interface.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EPOLL_CTL_DEL 2<span class="hljs-comment">/* Remove a file descriptor from the interface.  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EPOLL_CTL_MOD 3<span class="hljs-comment">/* Change file descriptor epoll_event structure.  */</span></span><br><br><span class="hljs-comment">/* Wait for events on an epoll instance &quot;epfd&quot;. Returns the number of</span><br><span class="hljs-comment">   triggered events returned in &quot;events&quot; buffer. Or -1 in case of</span><br><span class="hljs-comment">   error with the &quot;errno&quot; variable set to the specific error code. The</span><br><span class="hljs-comment">   &quot;events&quot; parameter is a buffer that will contain triggered</span><br><span class="hljs-comment">   events. The &quot;maxevents&quot; is the maximum number of events to be</span><br><span class="hljs-comment">   returned ( usually size of &quot;events&quot; ). The &quot;timeout&quot; parameter</span><br><span class="hljs-comment">   specifies the maximum wait time in milliseconds (-1 == infinite).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This function is a cancellation point and therefore not marked with</span><br><span class="hljs-comment">   __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">epoll_wait</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> __epfd, struct epoll_event *__events,</span></span><br><span class="hljs-params"><span class="hljs-function">       <span class="hljs-keyword">int</span> __maxevents, <span class="hljs-keyword">int</span> __timeout)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="（3）epoll代码流程"><a href="#（3）epoll代码流程" class="headerlink" title="（3）epoll代码流程"></a>（3）epoll代码流程</h3><p>1、创建welcome_socket，将welcome_socket设置为非阻塞</p><p>2、使用epoll_create1方法创建一个epoll_fd</p><p>3、将welcome_socket和epoll_fd绑定</p><p>4、调用epoll_wait方法，获取对应的时间数量nfds</p><p>5、0-nfds循环，对事件进行处理，若为welcome_socket则获取连接socket，设置为非阻塞，绑定epoll_fd；若为连接socket则执行IO</p><h3 id="（4）完整代码"><a href="#（4）完整代码" class="headerlink" title="（4）完整代码"></a>（4）完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">make_socket_non_blocking</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> sfd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> flags, s;<br><br>    flags = <span class="hljs-built_in">fcntl</span> (sfd, F_GETFL, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (flags == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span> (<span class="hljs-string">&quot;fcntl&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    flags |= O_NONBLOCK;<br>    s = <span class="hljs-built_in">fcntl</span> (sfd, F_SETFL, flags);<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span> (<span class="hljs-string">&quot;fcntl&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">epoll_server</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> MAX_CONNECTION = <span class="hljs-number">10</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">ev</span>&#123;</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> *<span class="hljs-title">events</span>;</span><br>    <span class="hljs-keyword">int</span> conn_sock, nfds, epollfd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>&#123;</span>&#125;;<br>    <span class="hljs-keyword">int</span> addr_len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(addr);<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>    events = <span class="hljs-keyword">static_cast</span>&lt;epoll_event *&gt;(<span class="hljs-built_in">calloc</span>(MAX_CONNECTION, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ev)));<br>    <span class="hljs-keyword">int</span> welcome_socket = <span class="hljs-built_in">create_welcome_socket</span>(port);<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-built_in">make_socket_non_blocking</span>(welcome_socket);<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">abort</span>();<br><br>    epollfd = <span class="hljs-built_in">epoll_create1</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (epollfd == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_create1&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    ev.events = EPOLLIN;<br>    ev.data.fd = welcome_socket;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, welcome_socket, &amp;ev) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_ctl: listen_sock&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        nfds = <span class="hljs-built_in">epoll_wait</span>(epollfd, events, MAX_CONNECTION, <span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span> (nfds == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_wait&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nfds; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (events[i].data.fd == welcome_socket) &#123;<br>                conn_sock = <span class="hljs-built_in">accept</span>(welcome_socket, (struct sockaddr *) &amp;addr, (<span class="hljs-keyword">socklen_t</span> *)&amp;addr_len);<br>                <span class="hljs-keyword">if</span> (conn_sock == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;accept&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>                &#125;<br>                <span class="hljs-built_in">make_socket_non_blocking</span>(conn_sock);<br>                ev.events = EPOLLIN | EPOLLET;<br>                ev.data.fd = conn_sock;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, conn_sock, &amp;ev) == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_ctl: conn_sock&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">int</span> done = <span class="hljs-number">0</span>;<br><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>                &#123;<br>                    <span class="hljs-keyword">ssize_t</span> size;<br>                    <span class="hljs-keyword">char</span> *buffer[<span class="hljs-number">1024</span>];<br>                    <span class="hljs-built_in">getpeername</span>(events[i].data.fd, (struct sockaddr *)&amp;addr, (<span class="hljs-keyword">socklen_t</span>*)&amp;addr_len);<br>                    size = <span class="hljs-built_in">read</span> (events[i].data.fd, buffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buffer));<br>                    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">-1</span>)<br>                    &#123;<br>                        <span class="hljs-comment">/* If errno == EAGAIN, that means we have read all</span><br><span class="hljs-comment">                           data. So go back to the main loop. */</span><br>                        <span class="hljs-keyword">if</span> (errno != EAGAIN)<br>                        &#123;<br>                            <span class="hljs-built_in">perror</span> (<span class="hljs-string">&quot;read&quot;</span>);<br>                            done = <span class="hljs-number">1</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-comment">/* End of file. The remote has closed the</span><br><span class="hljs-comment">                           connection. */</span><br>                        done = <span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到消息[%d] [ip:%s] [port:%d] - %s\n&quot;</span>,<br>                           count++, <span class="hljs-built_in">inet_ntoa</span>(addr.sin_addr) , <span class="hljs-built_in">ntohs</span>(addr.sin_port), buffer);<br>                    <span class="hljs-comment">/* Write the buffer to standard output */</span><br>                    s = <span class="hljs-built_in">send</span>(events[i].data.fd, buffer, size, <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">if</span> (s == <span class="hljs-number">-1</span>)<br>                    &#123;<br>                        <span class="hljs-built_in">perror</span> (<span class="hljs-string">&quot;write&quot;</span>);<br>                        <span class="hljs-built_in">abort</span> ();<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (done)<br>                &#123;<br>                    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Closed connection on descriptor %d\n&quot;</span>,<br>                            events[i].data.fd);<br><br>                    <span class="hljs-comment">/* Closing the descriptor will make epoll remove it</span><br><span class="hljs-comment">                       from the set of descriptors which are monitored. */</span><br>                    <span class="hljs-built_in">close</span> (events[i].data.fd);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本学习笔记基于ubuntu18+cpp14中socket代码，学习socket。&lt;/p&gt;
&lt;p&gt;最权威的文档：man命令。&lt;/p&gt;
&lt;h2 id=&quot;1、socket是什么&quot;&gt;&lt;a href=&quot;#1、socket是什么&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常用组件端口号</title>
    <link href="https://yury757.github.io/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
    <id>https://yury757.github.io/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E7%AB%AF%E5%8F%A3%E5%8F%B7/</id>
    <published>2022-04-04T16:00:00.000Z</published>
    <updated>2022-05-23T13:40:41.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用组件端口号"><a href="#常用组件端口号" class="headerlink" title="常用组件端口号"></a>常用组件端口号</h1><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><p>2181：客户端连接</p><p>2888：follower与leader的rpc通信</p><p>3888：选举</p><h3 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h3><p>9870：web管理页面</p><p>8088：yarn的web管理页面</p><p>9000：hdfs客户端连接，<code>hdfs://myubuntu1:9000</code></p><h3 id="hbase"><a href="#hbase" class="headerlink" title="hbase"></a>hbase</h3><p>16010：web管理页面</p><p>8080：REST web服务</p><h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><p>9092：客户端连接</p><h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><p>8081：web管理页面</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>3306：客户端连接</p><h3 id="postgresql"><a href="#postgresql" class="headerlink" title="postgresql"></a>postgresql</h3><p>5432：客户端连接</p><h3 id="clickhouse"><a href="#clickhouse" class="headerlink" title="clickhouse"></a>clickhouse</h3><p>8123：http访问数据库端口，java程序、数据库IDE连接clickhouse时用这个</p><p>9003：tcp访问数据库端口，clickhouse-client客户端访问时使用的端口</p><p>9004：使用MySQL客户端连接clickhouse数据库时使用的端口</p><p>9009：replica之间通信使用的端口</p><p>9100：gRPC协议端口</p><h2 id="服务器运维"><a href="#服务器运维" class="headerlink" title="服务器运维"></a>服务器运维</h2><h3 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h3><p>3000：web页面访问</p><p>账户密码默认都是admin</p><h3 id="prometheus"><a href="#prometheus" class="headerlink" title="prometheus"></a>prometheus</h3><p>9090：web访问端口</p><p>9100：node_exporter的指标web访问端口，需要独立额外启动node_exporter</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用组件端口号&quot;&gt;&lt;a href=&quot;#常用组件端口号&quot; class=&quot;headerlink&quot; title=&quot;常用组件端口号&quot;&gt;&lt;/a&gt;常用组件端口号&lt;/h1&gt;&lt;h2 id=&quot;大数据&quot;&gt;&lt;a href=&quot;#大数据&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="java" scheme="https://yury757.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java常用配置</title>
    <link href="https://yury757.github.io/java/java%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://yury757.github.io/java/java%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2021-12-24T16:00:00.000Z</published>
    <updated>2022-08-09T13:42:00.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、pom"><a href="#1、pom" class="headerlink" title="1、pom"></a>1、pom</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.report.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.report.outputEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 将dependencies打包到jar包中 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- jar包插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span> <span class="hljs-comment">&lt;!-- 以下文件不打包 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.config<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span> <span class="hljs-comment">&lt;!-- 是否要把依赖jar包加入到manifest中 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span> <span class="hljs-comment">&lt;!-- 指定依赖jar包从classpath下指定路径查找 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>net.yury.Test<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span> <span class="hljs-comment">&lt;!-- 指定main方法所在类 --&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">Class-Path</span>&gt;</span>config/<span class="hljs-tag">&lt;/<span class="hljs-name">Class-Path</span>&gt;</span> <span class="hljs-comment">&lt;!-- 指定配置文件从classpath下的指定路径查找 --&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 下面两个插件配置，可以执行一次，将所有jar包和配置文件拿到，部署到服务器后，就可以删掉了 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 将依赖jar包从maven仓库复制到指定目录的插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-lib<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>target/lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">excludeTransitive</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">excludeTransitive</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">stripVersion</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">stripVersion</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">includeScope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">includeScope</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 将配置文件从类文件中复制到指定目录的插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-config-file<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>process-resources<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-resources<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/target/config/<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.config<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、springboot"><a href="#2、springboot" class="headerlink" title="2、springboot"></a>2、springboot</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8888</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">static-locations:</span> <span class="hljs-string">classpath:/static,classpath:/public,classpath:/resources,classpath:/META-INF/resources</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/resources/*.html</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># database</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/flinkcdc?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=GMT%2B8&amp;rewriteBatchedStatements=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-comment"># druid</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 最大等待时间，配置获取连接等待超时，时间单位都是毫秒ms</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 最大活跃连接</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 最小空闲连接</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 初始化大小</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 配置一个连接在池中最小生存的时间</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">300000</span> <span class="hljs-comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接</span><br>      <span class="hljs-attr">test-on-borrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">test-on-return:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">20</span> <span class="hljs-comment"># 最大PSCache连接</span><br>      <span class="hljs-attr">use-global-data-source-stat:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">connection-properties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span> <span class="hljs-comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br>      <span class="hljs-attr">filter:</span> <span class="hljs-comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计</span><br>        <span class="hljs-attr">stat:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">wall:</span> <span class="hljs-comment"># wall用于防火墙</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">log4j2:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">web-stat-filter:</span> <span class="hljs-comment"># 配置StatFilter</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 默认为false，设置为true启动</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class="hljs-attr">stat-view-servlet:</span> <span class="hljs-comment"># 配置StatViewServlet</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">&quot;/druid/*&quot;</span><br>        <span class="hljs-attr">allow:</span> <span class="hljs-string">localhost</span> <span class="hljs-comment"># ip白名单</span><br>        <span class="hljs-attr">deny:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span> <span class="hljs-comment"># ip黑名单</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">root</span> <span class="hljs-comment"># 账号密码</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否可以重置</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span><span class="hljs-string">:9092,192.168.141.142:9092,192.168.141.143:9092</span><br>    <span class="hljs-attr">producer:</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 发送失败时，重试的次数</span><br>      <span class="hljs-attr">batch-size:</span> <span class="hljs-number">16384</span> <span class="hljs-comment"># 批量发送时的大小，byte，默认16k</span><br>      <span class="hljs-attr">buffer-memory:</span> <span class="hljs-number">33554432</span> <span class="hljs-comment"># 缓冲区大小，byte，默认32M</span><br>      <span class="hljs-attr">acks:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 生产者确定服务器接收消息的策略</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">default-group</span> <span class="hljs-comment"># 组id</span><br>      <span class="hljs-attr">enable-auto-commit:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 自动提交</span><br>      <span class="hljs-attr">auto-offset-reset:</span> <span class="hljs-string">earliest</span><br>      <span class="hljs-attr">max-poll-records:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 批量提取提取时，一次性提取的大小</span><br><br><span class="hljs-comment"># mybatis</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">net.yury.pojo</span><br><br><span class="hljs-comment"># redis</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-comment"># 连接超时时间</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1m</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 开发环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-attr">mysql:</span><br>  <span class="hljs-attr">ipPort:</span> <span class="hljs-string">localhost:3306</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 测试环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">mysql:</span><br>  <span class="hljs-attr">ipPort:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span><span class="hljs-string">:3306</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 生产环境</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span><br><span class="hljs-attr">mysql:</span><br>  <span class="hljs-attr">ipPort:</span> <span class="hljs-string">xxxx:xxxx</span><br><span class="hljs-comment"># 启动时指定对应环境：java -jar test.jar --spring.profiles.active=test</span><br></code></pre></td></tr></table></figure><h2 id="2、spring-mybatis"><a href="#2、spring-mybatis" class="headerlink" title="2、spring-mybatis"></a>2、spring-mybatis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 1.关联数据库配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 2.配置数据库连接池 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库基本信息配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filters&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;filters&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最大并发连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;maxActive&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 初始化连接数量 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;initialSize&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;maxWait&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最小空闲连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;minIdle&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;timeBetweenEvictionRunsMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;minEvictableIdleTimeMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;validationQuery&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;validationQuery&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testWhileIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;testWhileIdle&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnBorrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;testOnBorrow&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnReturn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;testOnReturn&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxOpenPreparedStatements&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;maxOpenPreparedStatements&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 打开removeAbandoned功能 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;removeAbandoned&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;removeAbandoned&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 1800秒，也就是30分钟 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;removeAbandonedTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;removeAbandonedTimeout&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logAbandoned&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;logAbandoned&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 3.配置sqlSessionFactory --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 4.配置dao接口扫描，动态生成接口的实现类（动态代理自动生成，不用自己写实现类），并注入IOC容器中 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory，这里不能用ref，因为他要注入的是一个string，而不是一个sqlSessionFactory对象 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 要扫描的包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;net.yury.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 5.声明式事务管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 6.结合AOP实现事务织入 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置事务通知的的类：需要导入tx命名空间 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvisor&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- name：给哪些方法配置事务，propagation：配置事务的传播特性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;select*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 7.配置事务的切入点 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* net.yury.dao.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvisor&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointCut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、spring-mvc"><a href="#4、spring-mvc" class="headerlink" title="4、spring-mvc"></a>4、spring-mvc</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启映射器和适配器的注解支持 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 并添加Jackson支持，它可以自动把RestController方法返回的对象封装成json字符串，并解决json乱码问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 静态资源过滤 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 扫描包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;net.yury.controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;net.yury.service&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 登录拦截器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net.yury.interceptor.LoginInterceptor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 文件上传配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最大上传大小，单位为b（字节），10485760b = 10Mb --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5、log4j2"><a href="#5、log4j2" class="headerlink" title="5、log4j2"></a>5、log4j2</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RoutingTest&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logFilename&quot;</span>&gt;</span>D:/tmp/test.log<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filePattern&quot;</span>&gt;</span>D:/tmp/test-%d&#123;MM-dd-yy&#125;-%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logPattern&quot;</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%-5p] [%t] [%l] - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;logPattern&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Routing</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Routing&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$$&#123;sd:type&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Route</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Rolling-$&#123;sd:type&#125;&quot;</span></span><br><span class="hljs-tag">                                 <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;logFilename&#125;&quot;</span></span><br><span class="hljs-tag">                                 <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;filePattern&#125;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;logPattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">PatternLayout</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">policies</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;25 MB&quot;</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">policies</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Audit&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Routing</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Routing&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6、springboot-logback"><a href="#6、springboot-logback" class="headerlink" title="6、springboot-logback"></a>6、springboot-logback</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATH&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;BASE_DIR&#125;/logs&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_FILE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;LOG_PATH&#125;/project-name.log&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%-5p] [%t] [%l] - %m%n&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>20MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>1GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、pom&quot;&gt;&lt;a href=&quot;#1、pom&quot; class=&quot;headerlink&quot; title=&quot;1、pom&quot;&gt;&lt;/a&gt;1、pom&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://yury757.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>jetbrains系列IDE推荐设置</title>
    <link href="https://yury757.github.io/jetbrains%E7%B3%BB%E5%88%97IDE%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE/"/>
    <id>https://yury757.github.io/jetbrains%E7%B3%BB%E5%88%97IDE%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-12-20T16:00:00.000Z</published>
    <updated>2022-01-02T07:00:14.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jetbrains系列IDE推荐设置"><a href="#jetbrains系列IDE推荐设置" class="headerlink" title="jetbrains系列IDE推荐设置"></a>jetbrains系列IDE推荐设置</h2><p>1、Editor - Files Encoding，修改为utf-8</p><p>2、Editor - Code Style - 对应语言，设置tab size为4个空格</p><p>3、Editor - Code Style，设置Line Separator为\n</p><p>4、Appearance &amp; Behavior - System Settings，设置取消勾选Reopen projects on startup，并且设置在新窗口打开新项目。</p><p>5、Build, Execution, Deployment - Build Tools - Maven/Gradle，设置自定义的maven设置（仅限java）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;jetbrains系列IDE推荐设置&quot;&gt;&lt;a href=&quot;#jetbrains系列IDE推荐设置&quot; class=&quot;headerlink&quot; title=&quot;jetbrains系列IDE推荐设置&quot;&gt;&lt;/a&gt;jetbrains系列IDE推荐设置&lt;/h2&gt;&lt;p&gt;1、Edit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL迁移数据目录</title>
    <link href="https://yury757.github.io/database/mysql/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/"/>
    <id>https://yury757.github.io/database/mysql/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/</id>
    <published>2021-12-10T16:00:00.000Z</published>
    <updated>2021-12-11T15:39:17.732Z</updated>
    
    <content type="html"><![CDATA[<p>Linux版本：Ubuntu18.04</p><p>MySQL版本：8.0.26</p><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>首先要搞清楚MySQL的配置文件在哪里。</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/option-files.html">MySQL :: MySQL 8.0 Reference Manual :: 4.2.2.2 Using Option Files</a></p><p>大概意思是，说明了windows和Linux下MySQL读取配置文件的顺序，我们只要找到几个常用配置文件即可。</p><p>windows下的配置文件在：<code>C:\%PROGRAMDIR%\MySQL\MySQL 8.0 Server\my.ini</code>这个文件中。</p><p><code>%PROGRAMDIR%</code>是指windows安装时的数据目录，在中文版本中的windows系统中，这个目录经常是<code>ProgramData</code>，而在英文版本的windows系统中，这个目录经常是<code>Program Files</code>。</p><p>Linux下的配置文件在：<code>/etc/mysql/my.cnf</code>或<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>（不同MySQL和Linux版本，配置文件不一样）</p><h2 id="2、数据迁移"><a href="#2、数据迁移" class="headerlink" title="2、数据迁移"></a>2、数据迁移</h2><p>找到配置文件后，配置文件中指定了数据目录<code>datadir</code>。</p><p>windows下只要将这个值修改为自己想要的新目录，然后将原数据目录复制过去即可。</p><p>Linux中，同样修改datadir的值，但是复制文件时<font color="Red">一定要注意权限</font>！一般要加上<code>-p</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -rp /var/lib/mysql/* /disk4/mysql/data/<br></code></pre></td></tr></table></figure><p>此外新目录的创建后也要将这个目录拥有者改成MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown -R mysql:mysql /disk4/mysql/<br></code></pre></td></tr></table></figure><p>最后，还要修改<font color="Red"><code>/etc/apparmor.d/usr.sbin.mysqld</code></font>这个文件（如果有的话），这个文件限制了Linux系统中某个程序可以访问的目录。如果没有修改这个东西，则会报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Can&#x27;t create test file /disk4/mysql/data/mysqld_tmp_file_case_insensitive_test.lower<br></code></pre></td></tr></table></figure><p>在原来的旧数据目录下加上自己修改的新目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/disk4/mysql/ r,<br>/disk4/mysql/** rwk,<br></code></pre></td></tr></table></figure><p>重启apparmor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/inid.d/apparmor restart<br></code></pre></td></tr></table></figure><p>其中还要一个问题会导致上面说的无法在新目录下创建新文件，即启用了<font color="Red">selinux</font>，将这个东西关闭即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 临时关闭selinux</span><br>setenforce 0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 永久关闭selinux</span><br>vi /etc/selinux/config<br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h2 id="3、重启"><a href="#3、重启" class="headerlink" title="3、重启"></a>3、重启</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> windows 管理员模式下</span><br>net restart mysql<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Linux</span><br>systemctl restart mysql<br></code></pre></td></tr></table></figure><p>Linux下如果重启失败，可以查看报错信息，上面说的配置文件中有一个<code>log-error</code>文件路径，报错信息就在这个文件中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux版本：Ubuntu18.04&lt;/p&gt;
&lt;p&gt;MySQL版本：8.0.26&lt;/p&gt;
&lt;h2 id=&quot;1、配置文件&quot;&gt;&lt;a href=&quot;#1、配置文件&quot; class=&quot;headerlink&quot; title=&quot;1、配置文件&quot;&gt;&lt;/a&gt;1、配置文件&lt;/h2&gt;&lt;p&gt;首先要搞清</summary>
      
    
    
    
    <category term="database" scheme="https://yury757.github.io/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>clickhouse</title>
    <link href="https://yury757.github.io/bigdata/clickhouse/clickhouse/"/>
    <id>https://yury757.github.io/bigdata/clickhouse/clickhouse/</id>
    <published>2021-11-20T16:00:00.000Z</published>
    <updated>2022-01-02T06:53:14.626Z</updated>
    
    <content type="html"><![CDATA[<p>clickhouse版本：21.7.3.14</p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>基于<strong>列存储</strong>的数据库，使用C++编写，主要用于<strong>在线分析处理查询</strong>（OLAP），能够使用<strong>SQL查询</strong>实时生成分析报告。</p><p>列式存储的优点：</p><ul><li>对于列的聚合、计数等统计操作由于行式数据库</li><li>由于某一列的数据类型是一样的，在数据压缩上效率更高，压缩比更大，缓存cache也有更大的发挥空间</li></ul><p>列式存储的缺点：插入、更新速度比行式数据库更慢</p><h3 id="2、高吞吐写入能力"><a href="#2、高吞吐写入能力" class="headerlink" title="2、高吞吐写入能力"></a>2、高吞吐写入能力</h3><p>clickhouse采用类<strong>LSM Tree</strong>的结构，数据写入后定期在后台compation。clickhouse在导入数据时全部都是<strong>顺序append写入</strong>，写入后数据段不可更改，在后台compation时也是多个段merge sort后顺序写回磁盘。顺序写的特性，充分利用了磁盘的吞吐能力。</p><h3 id="3、数据分区和线程级并行"><a href="#3、数据分区和线程级并行" class="headerlink" title="3、数据分区和线程级并行"></a>3、数据分区和线程级并行</h3><p>clickhouse将数据划分为多个partition，每个partition再进一步划分为多个index granularity（索引粒度），然后通过多个线程分别处理其中一部分来实现并行数据处理。这种设计下，单条query就可以利用整机所有的CPU资源。对于大量数据的查询也能够化整为零的并行处理。</p><p><font color="Red">缺点：由于一条SQL就会占用所有cpu，因此对于qps高的业务并不适合。</font></p><h3 id="4、使用场景"><a href="#4、使用场景" class="headerlink" title="4、使用场景"></a>4、使用场景</h3><p>不适用于初始数据存储，而适用于最后的宽表存储，用来查询用。</p><p>适用于clickhouse的业务：具有复杂统计逻辑的查询sql，需要查询大量数据的sql，并发量低</p><p>适用于hbase的业务：业务很简单的查询，一般就是key-value一一对应的查询，并发量高</p><p>clickhouse还有一个特点就是，<font color="Red">单表查询速度及其快，但是多表join操作比较慢</font>，在了解join原理后，可以通过优化sql来优化join速度。</p><h2 id="二、安装部署"><a href="#二、安装部署" class="headerlink" title="二、安装部署"></a>二、安装部署</h2><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><h4 id="（1）ulimit"><a href="#（1）ulimit" class="headerlink" title="（1）ulimit"></a>（1）ulimit</h4><p>linux取消一些系统资源限制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看系统资源限制</span><br>ulimit -a<br><span class="hljs-meta">#</span><span class="bash"> open files                      (-n) 1024</span><br><span class="hljs-meta">#</span><span class="bash"> max user processes              (-u) 7625</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改系统资源限制</span><br>sudo vi /etc/security/limits.conf<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 加上以下配置</span><br>* soft nofile 65535<br>* hard nofile 65535<br>* soft nproc  131072<br>* hard nproc  131072<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 有些linux系统在/etc/security/limit.d目录下面还有20-npric.conf或90-npric.conf</span><br><span class="hljs-meta">#</span><span class="bash"> 这两个配置会把limits.conf配置覆盖了，所以如果有的话这两个也要加上以上配置</span><br>sudo vi /etc/security/limits.d/20-nproc.conf<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改之后不需要重启，重新登录该用户即可，再查看<span class="hljs-built_in">ulimit</span> -a是否修改成功</span><br></code></pre></td></tr></table></figure><h4 id="（2）SELINUX"><a href="#（2）SELINUX" class="headerlink" title="（2）SELINUX"></a>（2）SELINUX</h4><p>sentos取消SELINUX（linux的security enforce）</p><p>SELINUX并不是安装里所有linux都会有，没有SELINUX不需要执行以下修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看security enfore</span><br>getenforce<br><br>sudo vi /etc/selinux/config<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将SELINUX修改为disabled</span><br>SELINUX=disabled<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重启永久生效，输入以下命令临时生效</span><br>setenforce 0<br></code></pre></td></tr></table></figure><h4 id="（3）版本"><a href="#（3）版本" class="headerlink" title="（3）版本"></a>（3）版本</h4><p>clickhouse版本更新比较快</p><p>20.6.3 新增explain，类似于MySQL的explain</p><p>20.8 新增同步MySQL功能等</p><p>我们使用的版本是21.7.3.14</p><h3 id="2、下载安装"><a href="#2、下载安装" class="headerlink" title="2、下载安装"></a>2、下载安装</h3><p>下载地址：<a href="https://repo.clickhouse.com/deb/stable/main/">Index of /clickhouse/deb/stable/main/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/yury/clickhouse<br><br>wget https://repo.clickhouse.com/deb/stable/main/clickhouse-common-static_21.7.3.14_amd64.deb<br>wget https://repo.clickhouse.com/deb/stable/main/clickhouse-client_21.7.3.14_all.deb<br>wget https://repo.clickhouse.com/deb/stable/main/clickhouse-server_21.7.3.14_all.deb<br><span class="hljs-meta">#</span><span class="bash"> 下面这个包是带有调试信息的包，可以不装</span><br>wget https://repo.clickhouse.com/deb/stable/main/clickhouse-common-static-dbg_21.7.3.14_amd64.deb<br><br>sudo dpkg -i *.deb<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 一路yyy，最后要输入一个默认用户的密码，可以设置密码，也可以直接回车不设置密码</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装成功后，软件被安装到目录下，lib目录在/var/lib/clickhouse/</span><br></code></pre></td></tr></table></figure><h3 id="3、常用路径"><a href="#3、常用路径" class="headerlink" title="3、常用路径"></a>3、常用路径</h3><p>bin目录：<code>/usr/bin/</code></p><p>服务器安装目录：<code>/etc/clickhouse-server/</code></p><p>客户端安装目录：<code>/etc/clickhouse-client/</code></p><p>配置文件目录：<code>/etc/clickhouse-server/</code>，所有其他配置目录都可以在这个配置文件中设置</p><p>日志目录：<code>/var/log/clickhouse-server/clickhouse-server.log</code></p><p>报错日志目录：<code>/var/log/clickhouse-server/clickhouse-server.err.log</code></p><p>依赖目录：<code>/var/lib/clickhouse/</code></p><p>数据目录：<code>/var/lib/clickhouse/</code>，即config.xml配置文件中path标签下</p><p>临时文件目录：<code>/var/lib/clickhouse/tmp/</code>，即config.xml配置文件中tmp_path标签下</p><h3 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h3><p><font color="Red">config.xml中的配置是服务器配置，比如上面说的数据目录、日志目录都在这个配置中，而user.xml则是程序运行参数配置，如cpu、内存在这个里面配置。</font></p><p>config.xml配置文档：<a href="https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings/">Server Settings | ClickHouse Documentation</a></p><p>user.xml配置文档：<a href="https://clickhouse.com/docs/en/operations/settings/settings/">Settings | ClickHouse Documentation</a></p><p>修改一个配置，使得其他ip地址也可以访问clickhouse服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vi /etc/clickhouse-server/config.xml<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将下面这个配置取消注释</span><br>&lt;listen_host&gt;::&lt;/listen_host&gt;<br></code></pre></td></tr></table></figure><p><font color="Red">此外再把tcp_port端口改为9003，因为默认的9000端口很容易被其他应用使用，比如hadoop就使用了9000端口。此外用，clickhosue-client连接时用tcp连接，而使用其他连接，比如datagrip或java，都是用的http连接，注意端口的使用。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tcp_port</span>&gt;</span>9003<span class="hljs-tag">&lt;/<span class="hljs-name">tcp_port</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、简单使用"><a href="#5、简单使用" class="headerlink" title="5、简单使用"></a>5、简单使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动</span><br>sudo clickhouse start<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看服务器运行状态</span><br>sudo clickhouse status<br><span class="hljs-meta">#</span><span class="bash"> /var/run/clickhouse-server/clickhouse-server.pid file exists and contains pid = 7116.</span><br><span class="hljs-meta">#</span><span class="bash"> The process with pid = 7116 is running.</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭</span><br>sudo clickhouse stop<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重启</span><br>sudo clickhouse restart<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 常加-m参数，这样可以在sql语句中使用换行，否则要用分号分隔</span><br><span class="hljs-meta">#</span><span class="bash"> -h参数为服务器host，默认是localhost</span><br><span class="hljs-meta">#</span><span class="bash"> --port参数为tcp端口，默认是9000</span><br>clickhouse-client -m -h myubuntu1 --port 9003<br></code></pre></td></tr></table></figure><p>clickhouse-client还有一个快捷方式的参数query：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">clickhouse-client -m -h 192.168.141.141 --port 9003 --query &quot;show databases;&quot;<br>default<br>system<br></code></pre></td></tr></table></figure><p>clickhouse语法比较像MySQL，在某些语法上clickhouse区分大小写，比如数据类型UInt、String，以及表引擎MergeTree等等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br>use <span class="hljs-keyword">default</span>;<br><span class="hljs-keyword">show</span> tables;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test2(<br>    id UInt32,<br>    create_time Datetime <span class="hljs-keyword">default</span> now(),<br>    name String,<br>    age UInt8,<br>    money <span class="hljs-type">Decimal</span>(<span class="hljs-number">24</span>,<span class="hljs-number">6</span>) TTL create_time <span class="hljs-operator">+</span> <span class="hljs-type">interval</span> <span class="hljs-number">10</span> <span class="hljs-keyword">SECOND</span><br>)engine<span class="hljs-operator">=</span>MergeTree<br><span class="hljs-keyword">primary</span> key(id)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>(id, name);<br></code></pre></td></tr></table></figure><p>使用shell命令快速写一个批量插入100万条数据sql文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in &#123;1..1000&#125;; do<br>echo -n &quot;insert into default.test2(id, name, age, money) values (1, &#x27;小明&#x27;, 14, 2000)&quot; &gt;&gt; test.sql;<br>for j in &#123;1..1000&#125;; do echo -n &quot;,($&#123;i&#125;$&#123;j&#125;, &#x27;小明$&#123;i&#125;$&#123;j&#125;&#x27;, $&#123;i&#125;$&#123;j&#125;, $&#123;i&#125;$&#123;j&#125;2000)&quot; &gt;&gt; test.sql; done;<br>echo &quot;;&quot; &gt;&gt; test.sql;<br>done;<br></code></pre></td></tr></table></figure><p>执行sql文件（速度贼快）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clickhouse-client -m -h 192.168.141.141 --port 9003 --multiquery &lt; ./test.sql<br></code></pre></td></tr></table></figure><p>执行几个group查询（速度贼快）</p><p><font color="Red">注意，这里substring也是按照字节数来算长度的。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>), <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>), <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">select</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-keyword">as</span> flag, <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> (id <span class="hljs-operator">%</span> <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>文档：<a href="https://clickhouse.com/docs/en/sql-reference/data-types/">Introduction | ClickHouse Documentation</a></p><h3 id="1、整形"><a href="#1、整形" class="headerlink" title="1、整形"></a>1、整形</h3><p>（1）有符号整型</p><table><thead><tr><th>clickhouse类型</th><th>范围</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>Int8</td><td>-128 : 127 (2^7)</td><td>tinyint</td></tr><tr><td>Int16</td><td>-32768 : 32767(2^15)</td><td>smallint</td></tr><tr><td>Int32</td><td>-2147483648 : 2147483647 (2^31)</td><td>int</td></tr><tr><td>Int64</td><td>-9223372036854775808 : 9223372036854775807 (2^63)</td><td>bigint</td></tr><tr><td>Int128</td><td>-2^127 : 2^127-1</td><td>无</td></tr><tr><td>Int256</td><td>-2^255 : 2^255-1</td><td>无</td></tr></tbody></table><p>（2）无符号整形</p><p>UInt8、UInt16、UInt32、UInt64，UInt128、UInt256，范围分别是0 : (2^n)-1。</p><p>128位和256位的一般用不到。</p><p>clickhouse没有布尔类型，官方建议用UInt8来存储，0代表false，1代表true。</p><h3 id="2、浮点型"><a href="#2、浮点型" class="headerlink" title="2、浮点型"></a>2、浮点型</h3><table><thead><tr><th>clichouse类型</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>Float32</td><td>float</td></tr><tr><td>Float64</td><td>double</td></tr></tbody></table><h3 id="3、Decimal"><a href="#3、Decimal" class="headerlink" title="3、Decimal"></a>3、Decimal</h3><table><thead><tr><th>clickhouse类型</th><th>整数位+小数位</th><th>小数位</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>Decimal(P,S)</td><td>P</td><td>S</td><td>decimal(P,S)</td></tr><tr><td>Decimal32(S)</td><td>9</td><td>S</td><td>decimal(9,S)</td></tr><tr><td>Decimal64(S)</td><td>18</td><td>S</td><td>decimal(18,S)</td></tr><tr><td>Decimal128(S)</td><td>38</td><td>S</td><td>decimal(38,S)</td></tr><tr><td>Decimal128(S)</td><td>76</td><td>S</td><td>decimal(76,S)</td></tr></tbody></table><p>不同位数长度的Decimal进行运算时，最终结果的位数长度是最大的那个。</p><h3 id="4、字符串类型"><a href="#4、字符串类型" class="headerlink" title="4、字符串类型"></a>4、字符串类型</h3><table><thead><tr><th>clickhouse</th><th>字节长度</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>String</td><td>无限制</td><td>varchar、所有text、所有blob</td></tr><tr><td>FixedString(N)</td><td>N</td><td>char(N)</td></tr></tbody></table><p>FixedString(N)类型，<font color="Red">这个N是字节长度，而不是字符长度</font>。当存入字符的字节长度小于N时，会用空字节（<code>\0</code>）补齐。一般很少用FixedString(N)，就像MySQL很少使用char(N)一样。</p><p><font color="Red">clickhouse没有编码的概念，即它存储字符串时是以二进制的形式存储。clickhosue在计算长度时，length函数是计算编码后字节的长度，lengthUTF8函数才是计算字符的长度，且只有一个计算UTF8编码的函数，因此服务器一定要使用utf-8编码。</font></p><p>clickhouse还有一个专门的存储UUID的类型：<strong>UUID</strong>，以及生成UUID的函数<code>generateUUIDv4()</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_uuid (x UUID, y String) ENGINE<span class="hljs-operator">=</span>TinyLog<br></code></pre></td></tr></table></figure><h3 id="5、日期类型"><a href="#5、日期类型" class="headerlink" title="5、日期类型"></a>5、日期类型</h3><table><thead><tr><th>clickhouse类型</th><th>字节长度</th><th>时间范围</th><th>对应MySQL类型</th></tr></thead><tbody><tr><td>Date</td><td>2</td><td>1970-01-01至2148-12-31</td><td></td></tr><tr><td>Date32</td><td></td><td>1925-01-01至2283-11-11</td><td></td></tr><tr><td>DateTime([timezone])</td><td></td><td>1970-01-01 00:00:00至2105-12-31 23:59:59</td><td>timestamp</td></tr><tr><td>DateTime64(precision, [timezone])</td><td></td><td>1925-01-01 00:00:00至2283-11-11 23:59:59</td><td></td></tr><tr><td>Interval</td><td></td><td>无，是一个时间长度含义</td><td>interval</td></tr></tbody></table><p>timezone是指时区，默认使用配置文件中设置的时区，或者操作系统时区。</p><p>precision是指秒后面的时间精度。</p><p>Interval的使用和MySQL的interval类型一样使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> now() <span class="hljs-operator">+</span> <span class="hljs-type">interval</span> <span class="hljs-number">4</span> <span class="hljs-keyword">DAY</span> <span class="hljs-operator">+</span> <span class="hljs-type">interval</span> <span class="hljs-number">3</span> <span class="hljs-keyword">HOUR</span>;<br>┌─plus(plus(now(), toIntervalDay(<span class="hljs-number">4</span>)), toIntervalHour(<span class="hljs-number">3</span>))─┐<br>│                                    <span class="hljs-number">2021</span><span class="hljs-number">-11</span><span class="hljs-number">-26</span> <span class="hljs-number">01</span>:<span class="hljs-number">15</span>:<span class="hljs-number">52</span> │<br>└────────────────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><h3 id="6、枚举类型"><a href="#6、枚举类型" class="headerlink" title="6、枚举类型"></a>6、枚举类型</h3><table><thead><tr><th>clickhouse类型</th><th>枚举值个数</th><th>MySQL类型</th></tr></thead><tbody><tr><td>Enum8（别名：Enum）</td><td>256</td><td>enum</td></tr><tr><td>Enum16</td><td>65536</td><td>enum</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_enum<br>(<br>    x Enum(<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;world&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>)<br>)<br>ENGINE <span class="hljs-operator">=</span> TinyLog<br></code></pre></td></tr></table></figure><p>clickhouse和MySQL在存储枚举值时，都是存储的对应的数值，而clickhouse是手动设置枚举值对应的数字值，MySQL则是系统设定的。</p><h3 id="7、LowCardinality"><a href="#7、LowCardinality" class="headerlink" title="7、LowCardinality"></a>7、LowCardinality</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">LowCardinality</span><span class="hljs-params">(data_type)</span></span><br></code></pre></td></tr></table></figure><p>该数据类型，将存储的值，设置字典索引，实际存储则存储其索引数字即可。</p><p>比如LowCardinality(String)类型字段，在insert了“小明”，“小红”，“小光”三个字符时，首先会创建一个字典，将这三个字符写入字典，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-string">&quot;小红&quot;</span>,<br>    <span class="hljs-number">3</span>: <span class="hljs-string">&quot;小光&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>key为索引序号，value为实际值。而实际存储在数据文件中，则是存储的其索引。</p><p><font color="Red">当value有很多重复值时，这种方式不仅可以节省很多存储空间，还可以加快读取速度，以及对该字段进行过滤、分组和某些查询的速度。</font></p><p><strong>值得一提的是，微软office2007版本的xlsx类型文件底层的字符串格式的存储也是采用这种方式，专门使用一个sharedString.xml来存储所有字符串，作为一个字典，而在主体的存储文件中使用索引。</strong></p><p>但是这种类型，写入速度会比一般普通类型写入慢一些，因此<strong>特别不建议在重复度很低的字段上使用这个类型</strong>。</p><p>这种类型和Enum比较类似，但是LowCadinality更加灵活，不仅可以存储String，还可以存储Date、DateTime，只要重复度很高，则可以使用这种类型。</p><h3 id="8、Nullable-T"><a href="#8、Nullable-T" class="headerlink" title="8、Nullable(T)"></a>8、Nullable(T)</h3><p>Nullable(T)，可为空的类型，如Nullable(Int8)是可为空值的Int8</p><p><font color="Red">使用Nullable会对性能产生影响，业务中可以用一些特殊字符或无意义的值来填充null，从而避免使用Nullable类型。</font></p><p>原因：1、Nullable会单独存一个文件；2、null无法使用索引。</p><p><font color="Red">注意：每种数据类型都会有自带的默认值，且不是null，如Int8的默认值是0，String的默认值是空字符串，DateTime的默认值是1970-01-01 08:00:00。如果需要为null，则需要使用Nullable(T)类型，Nullable的默认值则是null。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">use <span class="hljs-keyword">default</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test1(a Int8, b String, c DateTime, d Nullable(Int8), e Nullable(String) , f Nullable(DateTime))engine<span class="hljs-operator">=</span>TinyLog;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test1 <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;nihao&#x27;</span>, <span class="hljs-string">&#x27;2020-12-31&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;nihao&#x27;</span>, <span class="hljs-string">&#x27;2020-12-31&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test1 <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test1;<br>┌─a─┬─b─────┬───────────────────c─┬────d─┬─e─────┬───────────────────f─┐<br>│ <span class="hljs-number">1</span> │ nihao │ <span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> │    <span class="hljs-number">1</span> │ nihao │ <span class="hljs-number">2020</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> │<br>│ <span class="hljs-number">0</span> │       │ <span class="hljs-number">1970</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">08</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ  │                ᴺᵁᴸᴸ │<br>└───┴───────┴─────────────────────┴──────┴───────┴─────────────────────┘<br></code></pre></td></tr></table></figure><p>判断是否为null的格式如下，如果不是Nullable类型，则没有.null这个字段，会报错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test1 <span class="hljs-keyword">where</span> d.null <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>┌─a─┬─b─┬───────────────────c─┬────d─┬─e────┬────f─┐<br>│ <span class="hljs-number">0</span> │   │ <span class="hljs-number">1970</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">08</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ │<br>└───┴───┴─────────────────────┴──────┴──────┴──────┘<br></code></pre></td></tr></table></figure><h3 id="9、其他类型"><a href="#9、其他类型" class="headerlink" title="9、其他类型"></a>9、其他类型</h3><p>Array(T)，数组</p><p>AggregateFunction和SimpleAggregateFunction，比较重要，可以在表引擎那里再理解</p><p>Nested，类似于c++的struct</p><p>Tuple，即可以存不同数据类型的Array</p><p>Expression，存储了lamdba表达式</p><p>Set，集合，不可重复</p><p>Nothing，官方解释，此数据类型的唯一目的是表示不需要值的情况，好像没啥用</p><p>IPV4，ipv4专用类型，基于UInt32存储</p><p>IPV6，ipv6专用类型</p><p>GEO，坐标类型，包括Point、Ring、Polygon、MultiPolygon</p><p>Map(K, V)，映射表类型</p><h3 id="10、特殊值"><a href="#10、特殊值" class="headerlink" title="10、特殊值"></a>10、特殊值</h3><p>此外clickhouse还有一些特殊值，如<code>Inf</code>、<code>-Inf</code>和<code>NaN</code>，即<code>infinity</code>、<code>negative infinity</code>和非数字类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-operator">/</span> <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> a, <span class="hljs-number">-1</span> <span class="hljs-operator">/</span> <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> b, <span class="hljs-number">0</span> <span class="hljs-operator">/</span> <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> c;<br>┌───a─┬────b─┬───c─┐<br>│ inf │ <span class="hljs-operator">-</span>inf │ nan │<br>└─────┴──────┴─────┘<br></code></pre></td></tr></table></figure><h3 id="11、相关函数"><a href="#11、相关函数" class="headerlink" title="11、相关函数"></a>11、相关函数</h3><table><thead><tr><th>函数名</th><th>含义</th></tr></thead><tbody><tr><td>toTypeName(field)</td><td>获field字段的类型</td></tr><tr><td>cast(value, T) or cast(value as T)</td><td>将value强制转换为T类型</td></tr><tr><td>extract(part from date)</td><td>从日期中获取年、月、日</td></tr><tr><td>uniq(field)</td><td>取distinct</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">cast</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;Int8&#x27;</span>) <span class="hljs-keyword">as</span> x, toTypeName(x) <span class="hljs-keyword">as</span> type;<br>┌─x─┬─type─┐<br>│ <span class="hljs-number">1</span> │ Int8 │<br>└───┴──────┘<br><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">DAY</span> <span class="hljs-keyword">from</span> now());<br>┌─toDayOfMonth(now())─┐<br>│                  <span class="hljs-number">21</span> │<br>└─────────────────────┘<br></code></pre></td></tr></table></figure><h2 id="四、表引擎"><a href="#四、表引擎" class="headerlink" title="四、表引擎"></a>四、表引擎</h2><p>文档：<a href="https://clickhouse.com/docs/en/engines/table-engines/">Introduction | ClickHouse Documentation</a></p><p>表引擎决定了：</p><ul><li>数据存储的方式和位置，写到哪里以及从哪里读取数据</li><li>支持哪些查询，以及如何支持（有一些特殊的查询需要特殊的表引擎才能支持）</li><li>并发数据访问</li><li>索引的使用</li><li>是否可以使用多线程执行（有些引擎，在查询一条sql时会多线程执行）</li><li>数据复制参数</li></ul><p>表引擎有<strong>集成引擎、日志系列引擎、MergeTree系列引擎和一些特殊引擎</strong>。</p><h3 id="1、集成引擎"><a href="#1、集成引擎" class="headerlink" title="1、集成引擎"></a>1、集成引擎</h3><p>集成引擎主要是为了继承其他组件而使用的，比如集成MySQL、jdbc、kafka等。集成的本质就是，将MySQL等源数据和clickhouse表做<strong>一层映射</strong>，然后就可以直接用clickhouse查询源数据。</p><h3 id="2、日志系列引擎"><a href="#2、日志系列引擎" class="headerlink" title="2、日志系列引擎"></a>2、日志系列引擎</h3><p>日志引擎是为了需要快速写一些小表（小于100万）而使用的引擎，就像名字一样，多用于日志存储。</p><p>如TinyLog，以列文件的形式保存在磁盘上，<strong>不支持索引，没有并发控制</strong>。一般保存少量数据，生产环境很少使用。</p><h3 id="3、特殊引擎"><a href="#3、特殊引擎" class="headerlink" title="3、特殊引擎"></a>3、特殊引擎</h3><p>很多，具体见官方文档。</p><p>如Memory，内存引擎，将数据以未经压缩的形式直接存储在内存中，<strong>不支持索引，读写操作不会阻塞，简单查询性能非常高</strong>！</p><h3 id="4、MergeTree系列（重要！！）"><a href="#4、MergeTree系列（重要！！）" class="headerlink" title="4、MergeTree系列（重要！！）"></a>4、MergeTree系列（重要！！）</h3><p>文档：<a href="https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/">Introduction | ClickHouse Documentation</a></p><h4 id="（1）MergeTree合并树"><a href="#（1）MergeTree合并树" class="headerlink" title="（1）MergeTree合并树"></a>（1）MergeTree合并树</h4><p>这种表引擎在建表时，必须要加order by。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db.]table_name [<span class="hljs-keyword">ON</span> CLUSTER cluster]<br>(<br>    name1 [type1] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr1] [TTL expr1],<br>    name2 [type2] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr2] [TTL expr2],<br>    ...<br>    INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,<br>    INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2,<br>    ...<br>    PROJECTION projection_name_1 (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">COLUMN</span> LIST EXPR<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>] [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>]),<br>    PROJECTION projection_name_2 (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">COLUMN</span> LIST EXPR<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>] [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>])<br>) ENGINE <span class="hljs-operator">=</span> MergeTree()<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> expr<br>[<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> expr]<br>[<span class="hljs-keyword">PRIMARY</span> KEY expr]<br>[SAMPLE <span class="hljs-keyword">BY</span> expr]<br>[TTL expr<br>    [<span class="hljs-keyword">DELETE</span><span class="hljs-operator">|</span><span class="hljs-keyword">TO</span> DISK <span class="hljs-string">&#x27;xxx&#x27;</span><span class="hljs-operator">|</span><span class="hljs-keyword">TO</span> VOLUME <span class="hljs-string">&#x27;xxx&#x27;</span> [, ...] ]<br>    [<span class="hljs-keyword">WHERE</span> conditions]<br>    [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> key_expr [<span class="hljs-keyword">SET</span> v1 <span class="hljs-operator">=</span> aggr_func(v1) [, v2 <span class="hljs-operator">=</span> aggr_func(v2) ...]] ] ]<br>[SETTINGS name<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>, ...]<br></code></pre></td></tr></table></figure><p><strong>表底层存储文件夹和文件介绍：</strong></p><p><font color="Red">分区是按文件夹存储的，一个分区一个文件夹</font>，文件夹的名称为<code>分区id_最小分区块编号_最大分区块编号_合并层级</code></p><p>分区id生成规则：</p><ul><li>没有设置分区，则默认生成一个all目录作为数据分区</li><li>整形分区，以该整形值的字符串形式作为分区id</li><li>日期分区，分区id为日期的yyyymmdd形式</li><li>其他分区，如String、Float等，以其128位hash值为分区id</li></ul><p>最小分区块编号：分区的最小分区编号，适用于分区合并</p><p>最大分区块编号：分区的最大分区编号，适用于分区合并</p><p>合并层级：被合并的次数。<font color="Red">插入数据时，并不会直接将数据插入到对应分区中，而是会生成一个临时分区，等服务器空闲或者一段时间后，再将临时分区合并到原有的分区文件中。和hbase的regionserver类似</font></p><p><strong>通过手动执行<code>optimize table xxx final</code>可以手动进行数据合并。</strong></p><p><strong>目录文件内各文件介绍：</strong></p><ul><li>bin文件：数据文件</li><li>mrk文件：标记文件，标记文件在idx索引文件和bin文件之间起到了桥梁作用，一般记录列的offset，用于加速查询。以mrk2结尾的文件，表示该表启动了自适应索引间隔。</li><li>primary.idx文件：主键索引文件，用于加快查询效率</li><li>minmax_create_time.idx：分区键的最大值最小值</li><li>checksum.txt：校验文件，用于校验各个文件的正确性。存放各个文件的size和hash值。</li><li>count.txt：记录了该表的总数据量</li><li>columns.txt：记录了该表的列信息</li><li>default_compression_codec.txt：记录了数据文件中使用的压缩编码器</li><li>partition.dat：记录了分区信息</li></ul><p><strong>主键索引</strong></p><p>clickhouse的主键索引<strong>并不是唯一索引。主键索引是稀疏索引</strong>，即并不是将这一列的所有值建索引，而是一部分值，查找时通过类似于二分查找的方式确定数据所在区间，再扫描这个区间找到对应的值。</p><p>索引有一个index granularity，即索引稀疏粒度，即稀疏索引记录值时每次跳过的行数，默认值为8192。粒度越细，索引数据量存储的越大，查询效率越高；粒度越粗，索引数据量越小，查询效率越低。当很多重复值时，需要适当提高粒度。</p><p><strong>order by（MergeTree系列引擎最重要的字段）</strong></p><p>主键索引是稀疏索引，这种索引的查找方式需要排序，因此表必须有一个字段进行了排序，这就是为什么order by是MergeTree引擎的必选信息。<font color="Red">主键字段必须是order by的前缀字段</font>，原因和MySQL可以使用最左前缀字段作为索引原因一样。</p><p><strong>二级索引（数据跳跃索引）</strong></p><p>老版本需要设置<code>set allow_experimental_data_skipping_indices = 1</code>开启。</p><p>v20.1.2.4及以后，这个参数已经被删除了</p><p>二级索引的原理：以索引粒度为单位，记录每个区间的最大值和最小值，当以这个字段为条件查询时，只需要比较值是否落在这个区间就行（比较两次），若落在这个区间内，再做区间扫描，否则直接跳过。</p><p><strong>TTL</strong></p><p>数据过期时间，用于管理该数据的生命周期，到期删除。</p><p>有字段级别的TTL和表级别的TTL。字段级别只是删除这一个字段，表级别是删除整行数据。</p><h4 id="（2）ReplacingMergeTree"><a href="#（2）ReplacingMergeTree" class="headerlink" title="（2）ReplacingMergeTree"></a>（2）ReplacingMergeTree</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db.]table_name [<span class="hljs-keyword">ON</span> CLUSTER cluster]<br>(<br>    name1 [type1] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr1],<br>    name2 [type2] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr2],<br>    ...<br>) ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree([ver])<br>[<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> expr]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> expr]<br>[<span class="hljs-keyword">PRIMARY</span> KEY expr]<br>[SAMPLE <span class="hljs-keyword">BY</span> expr]<br>[SETTINGS name<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>, ...]<br></code></pre></td></tr></table></figure><p>完全继承了MergeTree，只是多了一个<strong>去重功能，根据order by字段进行去重</strong>。</p><p>去重要删除哪些数据：<font color="Red">建表语句中ReplacingMergeTree([ver])的ver字段值最大的那一条数据被保留，其他数据被删除。没指定这个字段，则按插入顺序来，保留最后的一条数据，类似于<code>upsert</code>。</font></p><p>去重时机：并不是实时去重，而是在合并分区时进行去重，即保证<strong>最终一致性</strong>。</p><p>去重范围：在同一分区内去重，并不是全表内去重。</p><p><strong>这个引擎在实际生产环境中最常用</strong>，通常ver字段都是业务中的插入时间字段，或者其他数据版本控制字段。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> default.test3<br>(<br>    `id` UInt32,<br>    `name` String,<br>    `money` <span class="hljs-type">Decimal</span>(<span class="hljs-number">18</span>, <span class="hljs-number">6</span>)<br>)<br>ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (id, name)<br>SETTINGS index_granularity <span class="hljs-operator">=</span> <span class="hljs-number">8192</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test3 <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test3 <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">2000</span>);<br>optimize <span class="hljs-keyword">table</span> test3;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test3;<br></code></pre></td></tr></table></figure><h4 id="（3）SummingMergeTree"><a href="#（3）SummingMergeTree" class="headerlink" title="（3）SummingMergeTree"></a>（3）SummingMergeTree</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db.]table_name [<span class="hljs-keyword">ON</span> CLUSTER cluster]<br>(<br>    name1 [type1] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr1],<br>    name2 [type2] [<span class="hljs-keyword">DEFAULT</span><span class="hljs-operator">|</span>MATERIALIZED<span class="hljs-operator">|</span>ALIAS expr2],<br>    ...<br>) ENGINE <span class="hljs-operator">=</span> SummingMergeTree([columns])<br>[<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> expr]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> expr]<br>[SAMPLE <span class="hljs-keyword">BY</span> expr]<br>[SETTINGS name<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>, ...]<br></code></pre></td></tr></table></figure><p>在MergeTree的基础上，提供了“<strong>预聚合</strong>”的功能，且<strong>根据order by字段进行sum聚合</strong>。</p><p>聚合后其他字段怎么办：对columns字段进行sum，其他字段保留最早的那一条，即最早插入的那一条。</p><p>聚合范围：在同一分区内进行聚合。</p><p>聚合时机：并不是实时聚合，而是在合并分区时进行聚合。</p><h3 id="5、ReplacatedMergeTree系列"><a href="#5、ReplacatedMergeTree系列" class="headerlink" title="5、ReplacatedMergeTree系列"></a>5、ReplacatedMergeTree系列</h3><p>该系列表引擎用于副本备份，MergeTree系列的所有子引擎都有对应的ReplacetedMergeTree引擎，如ReplacetedReplacingMergeTree等。</p><h2 id="五、SQL语法"><a href="#五、SQL语法" class="headerlink" title="五、SQL语法"></a>五、SQL语法</h2><p>只介绍和标准sql不一样的地方</p><h3 id="1、Update和Delete"><a href="#1、Update和Delete" class="headerlink" title="1、Update和Delete"></a>1、Update和Delete</h3><p>clickhosue提供update和delete的功能，但没有这两个关键字，即不能直接使用delete或update语句，而是提供了一类称为Mutation的查询，是Alter的一种。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除一条数据</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test2 <span class="hljs-keyword">delete</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br><br><span class="hljs-comment">-- 更新一条数据</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test2 update age <span class="hljs-operator">=</span> <span class="hljs-number">99</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>和普通的OLTP数据库不一样，Mutation语句是一种很重的操作，而且不支持事务。<font color="Red">原因在于每次操作都要放弃目标数据的原有分区，重新建分区，旧分区被打上逻辑上的失效标记，只有分区合并的时候，才会删除旧分区旧数据。因此要尽量做批量的变更，避免做频繁的小变更。</font></p><p>实现高性能的update和delete思路：</p><p>表结构额外新增两个字段：<code>isvalid</code>，0表示无效，1表示有效；<code>version</code>，表示数据版本号，最大为最新数据</p><p>更新：插入一条<code>version = max(version) + 1</code>的数据即可</p><p>删除：插入一条<code>isvalid = 0</code>的数据即可</p><p>查询：每次查询条件都要加上<code>version = max(version) and isvalid = 1</code></p><p>问题：数据膨胀，需要定期清理过期数据，并对数据分区做合并</p><h3 id="2、Join"><a href="#2、Join" class="headerlink" title="2、Join"></a>2、Join</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> test2.id, <span class="hljs-built_in">sum</span>(test3.money) <span class="hljs-keyword">from</span> test2, test3 <span class="hljs-keyword">where</span> test2.id <span class="hljs-operator">=</span> test3.id <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> test2.id;<br></code></pre></td></tr></table></figure><p>clickhouse的join原理：将右表（test3）加载到内存中，再和左表一条一条匹配。</p><p><font color="Red">因此这里最好不要将大表写到右边</font>，这一点和MySQL的“小表驱动大表”不一样。</p><h3 id="3、函数"><a href="#3、函数" class="headerlink" title="3、函数"></a>3、函数</h3><p>窗口函数，21.7.3.14版本还处于实验中，需要使用的话，要将一个设置打开：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> allow_experimental_window_functions <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>自定义函数，不支持。</p><p>multiif(cond_1, then_1, cond_2, then_2, …)，类似于case when。</p><h3 id="4、group"><a href="#4、group" class="headerlink" title="4、group"></a>4、group</h3><p>group增加了with rollup、with cube、with totals用于统计不同维度的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- rollup是从右至左依次减少一个维度进行统计</span><br><span class="hljs-keyword">group</span> A, B <span class="hljs-keyword">with</span> <span class="hljs-keyword">rollup</span> <span class="hljs-operator">=</span> <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, <span class="hljs-keyword">null</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span><br><br><span class="hljs-comment">-- cube是排列组合的维度统计</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B <span class="hljs-keyword">with</span> <span class="hljs-keyword">cube</span> <span class="hljs-operator">=</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, <span class="hljs-keyword">null</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> B, <span class="hljs-keyword">null</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span><br><br><span class="hljs-comment">-- total是额外加上统计总计值</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B <span class="hljs-keyword">with</span> totals <span class="hljs-operator">=</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> A, B<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-keyword">as</span> flag, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> flag2, <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span>, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">with</span> <span class="hljs-keyword">rollup</span>;<br><br><span class="hljs-keyword">select</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-keyword">as</span> flag, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> flag2, <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span>, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">with</span> <span class="hljs-keyword">cube</span>;<br><br><span class="hljs-keyword">select</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-keyword">as</span> flag, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> flag2, <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> test2 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id <span class="hljs-operator">%</span> <span class="hljs-number">2</span>, <span class="hljs-built_in">substring</span>(name, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">with</span> totals;<br></code></pre></td></tr></table></figure><h2 id="六、副本写入（备份、高可用）"><a href="#六、副本写入（备份、高可用）" class="headerlink" title="六、副本写入（备份、高可用）"></a>六、副本写入（备份、高可用）</h2><p>clickhouse副本类似于MySQL的replicate，备份用。对应的表引擎为ReplicatedMergeTree。</p><p>依赖zookeeper，没有主次之分。</p><p><img src="/images/%E5%89%AF%E6%9C%AC%E5%86%99%E5%85%A5.png"></p><p>配置的两种方式：</p><p>1、修改<code>/etc/clickhouse/config.xml</code>配置文件中的zookeeper配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">zookeeper</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example1<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example2<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example3<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">zookeeper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、在<code>/etc/clickhouse-server/config.d/</code>目录下新增一个<code>metrika.xml</code>文件，按照<code>config.xml</code>中zookeeper的配置样式写入自己的配置，再添加一个<code>include_from</code>标签和一个带有<code>incl</code>属性的<code>zookeeper</code>标签，引入这个配置文件。该文件的配置会覆盖<code>config.xml</code>中zookeeper的配置。</p><p>以这种方式创建xml文件不要忘了<font color="Red">用户权限</font>，将文件owner设置为clickhouse:clickhouse</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown clickhouse:clickhouse metrika.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- metrika.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">zookeeper</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example1<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example2<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example3<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">zookeeper</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- config.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">zookeeper</span> <span class="hljs-attr">incl</span>=<span class="hljs-string">&quot;zookeeper-servers&quot;</span> <span class="hljs-attr">optional</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include_from</span>&gt;</span>/etc/clickhouse-server/config.d/metrika.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include_from</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、分片集群"><a href="#七、分片集群" class="headerlink" title="七、分片集群"></a>七、分片集群</h2><p>副本是指备份，每个服务器都有全量数据（就像复制了一个服务器一样，所以叫replicate）。</p><p>分片集群是指分布式，将一份数据切片，分布到不同服务器上，每次查询需要将任务分发到各个服务器中，最后汇总结果（类似于map-reduce）。</p><p>分片集群对应的表引擎为Distributed。</p><h3 id="1、集群写入"><a href="#1、集群写入" class="headerlink" title="1、集群写入"></a>1、集群写入</h3><p>以3分片，2副本为例。</p><p><img src="/images/%E9%9B%86%E7%BE%A4%E5%86%99%E5%85%A5.png"></p><p>distribute hdp1类似于一个master（以下为了方便，简称为master），并不实际存储数据，而是起一个控制器和数据分发的作用。下面的hdp1-hdp6类似于worker，存储数据。客户端发送写入命令，master将接收到的数据发送给下面的worker写入数据。</p><p>问题：每个副本都要由master亲自分发数据吗？</p><p>internal_replication参数，</p><ul><li>true，表示master只将数据分发给分片，每个副本的数据写入有对应的分片进行内部复制</li><li>false，表示每个副本的数据写入也由master亲自分发，而不是由分片内部复制</li></ul><p>一般来说都会把这个参数设置为true，原因：</p><ul><li>副本服务器也要master来分发的话，会对master造成压力，写入效率会降低</li><li>对副本的分发过程中如果出现异常，则可能造成分片和对应的副本数据不一致</li><li>每一层只负责自己的事，master是为分布式而产生了，并不是为副本而产生的，因此master不太应该管副本的备份工作。</li></ul><h3 id="2、集群读取"><a href="#2、集群读取" class="headerlink" title="2、集群读取"></a>2、集群读取</h3><p><img src="/images/%E9%9B%86%E7%BE%A4%E8%AF%BB%E5%8F%96.png"></p><p>errors_count，即读取时发生错误的次数，每次发生错误会记录在对应的服务器中，读取时会选择错误次数更小的副本读取。</p><h3 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h3><p>同样可以将这个配置写在默认配置文件config.xml中，也可以在外部文件中加配置再在config.xml中引入。</p><p>在<code>/etc/clickhouse-server/config.xml</code>中加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">include_from</span>&gt;</span>/etc/clickhouse-server/config.d/metrika-shard.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include_from</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>/etc/clickhouse-server/config.d/metrika-shard.xml</code>配置如下：</p><p>注意同样别忘了文件的用户权限。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">remote_servers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">perftest_1shards_3replicas</span>&gt;</span><span class="hljs-comment">&lt;!-- 集群名称，可以修改 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">internal_replication</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">internal_replication</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest01j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest02j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">internal_replication</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">internal_replication</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest03j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest04j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">internal_replication</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">internal_replication</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest05j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>example-perftest06j.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>9000<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">perftest_1shards_3replicas</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">remote_servers</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">zookeeper</span>&gt;</span><span class="hljs-comment">&lt;!-- 有几台服务器就需要几台zookeeper，按照以上需求，要写六台，这里省略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>zoo01.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>zoo02.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>zoo03.yandex.ru<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>2181<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">zookeeper</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_1_1<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="Red">macros用于建表时识别分片和副本，shard为分片名称，replica为副本名称，这个配置每台服务器上都要单独配置。</font></p><p>可以自定义配置，这里配置的含义是：<code>rep_&#123;a&#125;_&#123;b&#125;</code>，a表示分片编号，b表示副本编号。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第1个分片，第1个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_1_1<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第1个分片，第2个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>01<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_1_2<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第2个分片，第1个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>02<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_2_1<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第2个分片，第2个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>02<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_2_2<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第3个分片，第1个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>03<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_3_1<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">macros</span>&gt;</span><span class="hljs-comment">&lt;!-- 第3个分片，第2个副本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">shard</span>&gt;</span>03<span class="hljs-tag">&lt;/<span class="hljs-name">shard</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">replica</span>&gt;</span>rep_3_2<span class="hljs-tag">&lt;/<span class="hljs-name">replica</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">macros</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="Red">默认配置文件config.xml中官方也给我们配好了几个示例集群的配置，可以参考上面的配置以及配置说明。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">myubuntu1 :) <span class="hljs-keyword">show</span> clusters;<br><br><span class="hljs-keyword">SHOW</span> CLUSTERS<br><br>Query id: <span class="hljs-number">1</span>d87a0a9<span class="hljs-number">-9e49</span><span class="hljs-number">-498</span>d<span class="hljs-operator">-</span>b097<span class="hljs-operator">-</span>c22a23530d2e<br><br>┌─cluster──────────────────────────────────────┐<br>│ test_cluster_two_shards                      │<br>│ test_cluster_two_shards_internal_replication │<br>│ test_cluster_two_shards_localhost            │<br>│ test_shard_localhost                         │<br>│ test_shard_localhost_secure                  │<br>│ test_unavailable_shard                       │<br>└──────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><h3 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h3><h4 id="（1）建表"><a href="#（1）建表" class="headerlink" title="（1）建表"></a>（1）建表</h4><p><strong>先建本地表：</strong></p><p>即创建之前说的worker，存储数据用的本地表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_cluster_table <span class="hljs-keyword">on</span> cluster test_shard_localhost(<br>    id UInt8,<br>    name String,<br>    create_time Datetime <span class="hljs-keyword">default</span> now()<br>)<br>engine <span class="hljs-operator">=</span> ReplicatedMergeTree(<span class="hljs-string">&#x27;clickhouse/tables/&#123;shard&#125;/test_cluster_table&#x27;</span>, <span class="hljs-string">&#x27;&#123;replica&#125;&#x27;</span>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (id, name);<br><br>Query id: <span class="hljs-number">86</span>b73340<span class="hljs-number">-2</span>c9d<span class="hljs-number">-42</span>a1<span class="hljs-number">-97e2</span><span class="hljs-operator">-</span>f99d8d388f0e<br><br>┌─host────────────┬─port─┬─status─┬─error─┬─num_hosts_remaining─┬─num_hosts_active─┐<br>│ <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span> │ <span class="hljs-number">9003</span> │      <span class="hljs-number">0</span> │       │                   <span class="hljs-number">0</span> │                <span class="hljs-number">0</span> │<br>└─────────────────┴──────┴────────┴───────┴─────────────────────┴──────────────────┘<br><br><span class="hljs-number">1</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> set. Elapsed: <span class="hljs-number">0.111</span> sec.<br></code></pre></td></tr></table></figure><p>test_shard_localhost为集群名称</p><p>{shard}和{replica}都是配置文件中macros导入，不用自己填。</p><p><strong>再创建分布式表：</strong></p><p>即创建之前说的master</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_cluster_table_all <span class="hljs-keyword">on</span> cluster test_shard_localhost(<br>    id UInt8,<br>    name String,<br>    create_time Datetime <span class="hljs-keyword">default</span> now()<br>)<br>engine<span class="hljs-operator">=</span>Distributed(test_shard_localhost, <span class="hljs-keyword">default</span>, test_cluster_table, hiveHash(id));<br><br>Query id: <span class="hljs-number">69</span>a6f496<span class="hljs-operator">-</span>e916<span class="hljs-number">-47</span>ac<span class="hljs-operator">-</span>ae0b<span class="hljs-number">-636</span>c9244bc90<br><br>┌─host────────────┬─port─┬─status─┬─error─┬─num_hosts_remaining─┬─num_hosts_active─┐<br>│ <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.141</span> │ <span class="hljs-number">9003</span> │      <span class="hljs-number">0</span> │       │                   <span class="hljs-number">0</span> │                <span class="hljs-number">0</span> │<br>└─────────────────┴──────┴────────┴───────┴─────────────────────┴──────────────────┘<br><br><span class="hljs-number">1</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> set. Elapsed: <span class="hljs-number">0.114</span> sec.<br></code></pre></td></tr></table></figure><p>test_shard_localhost为集群名称</p><p>default为数据库名</p><p>test_cluster_table为刚才创建的本地表名</p><p>hiveHash(id)，hiveHash表示采用什么算法分片，id表示用哪个字段分片。</p><h4 id="（2）使用"><a href="#（2）使用" class="headerlink" title="（2）使用"></a>（2）使用</h4><p>分布式表不存储数据，为每个本地表的逻辑汇总表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 从分布式表插入数据，本地表可以看到</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_cluster_table_all <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, now());<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_cluster_table;<br><br><span class="hljs-comment">-- 从本地表插入，从分布式表也可以看得到</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_cluster_table <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, now());<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_cluster_table_all;<br></code></pre></td></tr></table></figure><p>本地表只能看到本服务器上存储的数据分片，无法看到其他服务器上存储的数据分片，而分布式表可以看到所有数据。</p><p>因此一般不用将本地表暴露给用户写入，统一从分布式表做增删改查。</p><h2 id="八、进阶语法"><a href="#八、进阶语法" class="headerlink" title="八、进阶语法"></a>八、进阶语法</h2><h3 id="1、explain"><a href="#1、explain" class="headerlink" title="1、explain"></a>1、explain</h3><p>20.6.3.28及以后版本才有explain功能。</p><p>官方文档：<a href="https://clickhouse.com/docs/en/sql-reference/statements/explain/">EXPLAIN | ClickHouse Documentation</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN [AST <span class="hljs-operator">|</span> SYNTAX <span class="hljs-operator">|</span> PLAN <span class="hljs-operator">|</span> PIPELINE] [setting <span class="hljs-operator">=</span> <span class="hljs-keyword">value</span>, ...] <span class="hljs-keyword">SELECT</span> ... [FORMAT ...]<br></code></pre></td></tr></table></figure><p>EXPLAIN SYNTAX …可以看到系统给你优化后的语法。</p><p>比如上面那个join的sql，通过系统优化后的sql语句如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain syntax <span class="hljs-keyword">select</span> test2.id, <span class="hljs-built_in">sum</span>(test3.money) <span class="hljs-keyword">from</span> test3, test2 <span class="hljs-keyword">where</span> test2.id <span class="hljs-operator">=</span> test3.id <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> test2.id;<br><br>┌─explain─────────────────────┐<br>│ <span class="hljs-keyword">SELECT</span>                      │<br>│     id,                     │<br>│     <span class="hljs-built_in">sum</span>(test3.money)        │<br>│ <span class="hljs-keyword">FROM</span> test2                  │<br>│ <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>              │<br>│ (                           │<br>│     <span class="hljs-keyword">SELECT</span>                  │<br>│         id,                 │<br>│         money               │<br>│     <span class="hljs-keyword">FROM</span> test3              │<br>│ ) <span class="hljs-keyword">AS</span> test3 <span class="hljs-keyword">ON</span> id <span class="hljs-operator">=</span> test3.id │<br>│ <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> test3.id         │<br>│ <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> id                 │<br>└─────────────────────────────┘<br></code></pre></td></tr></table></figure><p>但这里优化后的结果不对，是因为id没有加上test2表名，并且where条件也是多余的，手动修改为如下sql，对比原始sql执行速度，优化后的sql性能确实提升了一些。</p><p><font color="Red">千万不要盲目相信explain syntax后的结果，可能会让你得不偿失。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    test2.id,<br>    <span class="hljs-built_in">sum</span>(test3.money)<br><span class="hljs-keyword">FROM</span> test2<br><span class="hljs-keyword">ALL</span> <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br>(<br>    <span class="hljs-keyword">SELECT</span><br>        id,<br>        money<br>    <span class="hljs-keyword">FROM</span> test3<br>) <span class="hljs-keyword">AS</span> test3 <span class="hljs-keyword">ON</span> test2.id <span class="hljs-operator">=</span> test3.id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> test2.id;<br></code></pre></td></tr></table></figure><p>老版本没有explain语法，要查看执行计划，可以在进入客户端时，加上<code>--send_logs_level=trade &lt;&lt;&lt; &quot;sql&quot;</code>，然后去看日志即可。</p><h3 id="2、optimize"><a href="#2、optimize" class="headerlink" title="2、optimize"></a>2、optimize</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">OPTIMIZE <span class="hljs-keyword">TABLE</span> [db.]name [<span class="hljs-keyword">ON</span> CLUSTER cluster] [<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">partition</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PARTITION</span> ID <span class="hljs-string">&#x27;partition_id&#x27;</span>] [<span class="hljs-keyword">FINAL</span>] [DEDUPLICATE [<span class="hljs-keyword">BY</span> expression]]<br></code></pre></td></tr></table></figure><p>optimize功能是触发一个表数据的合并。只能用于MergeTree系列表引擎、Buffer表引擎和MaterializedView表引擎。</p><p>触发数据合并的意思是，例如在一个ReplacingMergeTree表执行，则会执行一个任务，按order by指定的字段去重；又例如在SummingMergeTree表执行，则会执行一个任务，按照order by指定字段进行聚合，对SummingMergeTree指定字段进行sum计算，其他字段保留最新数据。<font color="Red">即将数据初始化，或重新整理分区数据。</font></p><p>如果指定了<code>FINAL</code>，则会强制执行数据合并，即使所有数据都在一个分区，或者已经有并发的合并正在进行。</p><h2 id="九、常用配置"><a href="#九、常用配置" class="headerlink" title="九、常用配置"></a>九、常用配置</h2><h3 id="1、CPU"><a href="#1、CPU" class="headerlink" title="1、CPU"></a>1、CPU</h3><table><thead><tr><th>位置</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>user.xml</td><td>background_pool_size</td><td>表引擎相关的后台线程池大小，常用于merge任务。默认值为16，允许的情况下可以调整称服务器的逻辑线程数据。</td></tr><tr><td>user.xml</td><td>background_schedule_pool_size</td><td>后台任务线程池大小，常用于副本数据备份、kafka流、DNS缓存更新。默认值128。</td></tr><tr><td>user.xml</td><td>background_distributed_schedule_pool_size</td><td>后台任务线程池大小，常用于分布式数据发送。默认值为16。</td></tr><tr><td>config.xml</td><td>max_concurrent_queries</td><td>最大并发请求数，默认设置为100，建议不超过300。</td></tr><tr><td>user.xml</td><td>max_threads</td><td>单个查询使用的最大线程数，默认值为cpu物理核心数。这个值越低，查询时占用的内存越低。</td></tr></tbody></table><h3 id="2、内存"><a href="#2、内存" class="headerlink" title="2、内存"></a>2、内存</h3><table><thead><tr><th>位置</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>user.xml</td><td>max_memory_usage</td><td>单次查询使用的最大内存。默认值为10G左右。</td></tr><tr><td>user.xml</td><td>max_bytes_before_external_groupby</td><td>当使用groupby时内存占用超过最大内存时，将数据写入磁盘做缓存进行groupby时大小。一般可以设置为max_memory_usage的一半。</td></tr><tr><td>user.xml</td><td>max_bytes_before_external_sort</td><td>当使用sort时内存占用超过最大内存时，将数据写入磁盘作为临时缓存进行sort时的大小。一般可以设置为max_memory_usage的一半。</td></tr><tr><td>config.xml</td><td>max_table_size_to_drop</td><td>drop table时，允许删除的表的最大大小，表大小超过这个值时删除表不被允许。设置为0时，认为没有限制。</td></tr></tbody></table><h2 id="十、查询优化"><a href="#十、查询优化" class="headerlink" title="十、查询优化"></a>十、查询优化</h2><h3 id="1、单表优化"><a href="#1、单表优化" class="headerlink" title="1、单表优化"></a>1、单表优化</h3><h4 id="（1）prewhere"><a href="#（1）prewhere" class="headerlink" title="（1）prewhere"></a>（1）prewhere</h4><p>只能用于MergeTree系列表引擎。</p><p>prewhere执行时，会直接扫描过滤条件中的列，将数据过滤后，再将需要的字段补全。</p><p>当查询列明显多于过滤列时，可以使用prewhere，降低IO。</p><p><code>optimize_move_to_prewhere</code>参数是在有需要的时候自动将where优化成prewhere，默认是打开的。即这个参数打开时，不需要手动写prewhere，系统会在有需要的时候自动优化成prewhere去查询。</p><p>部分情况下，不会自动优化成prewhere：</p><ul><li>使用常用表达式</li><li>使用默认值的alias类型的字段</li><li>包含了arrayJOIN，globalIn，globalNotIn，indexHint的查询</li><li>select字段和where字段相同</li><li>使用了主键字段</li></ul><p><font color="Red">有需要时，还是自己手动使用prewhere好，别太依赖系统的优化。</font></p><h4 id="（2）sample"><a href="#（2）sample" class="headerlink" title="（2）sample"></a>（2）sample</h4><p>只能用于MergeTree系列表引擎。</p><p>采样。不会对所有数据执行查询，而是对特定部分数据（样本）进行查询。</p><p>且这个样本并不是严格精确的数据量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 约10%样本查询</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> test<br>sample <span class="hljs-number">0.1</span>;<br><br><span class="hljs-comment">-- 当比例值远大于1时，这个含义便会转换为数据条数据，如这里采样至少10000条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> test<br>sample <span class="hljs-number">10000</span>;<br><br><span class="hljs-comment">-- 加上offset表示跳过前面部分数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> test<br>sample <span class="hljs-number">0.1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><p>和limit的区别在于，limit是严格精确的数据量，而sample并不是严格的数据量。同时sample可以用在where、group和orderby前面。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    Title,<br>    <span class="hljs-built_in">count</span>() <span class="hljs-operator">*</span> <span class="hljs-number">10</span> <span class="hljs-keyword">AS</span> PageViews<br><span class="hljs-keyword">FROM</span> hits_distributed<br>SAMPLE <span class="hljs-number">0.1</span><br><span class="hljs-keyword">WHERE</span><br>    CounterID <span class="hljs-operator">=</span> <span class="hljs-number">34</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Title<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> PageViews <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><p>在一些特殊情况下，可以使用sample：</p><ul><li>业务需要查询延迟很低，但无法通过优化来降低延迟，且对具体结果的精确性不太讲究，可以使用近似结果</li><li>只想大致查看数据的分布以及数据质量</li></ul><h4 id="（3）orderby"><a href="#（3）orderby" class="headerlink" title="（3）orderby"></a>（3）orderby</h4><p>order by不要单独使用，结合where和limit一起使用。</p><p>一般排序后很少需要完整排序的结果，因此可以加一个limit。加limit和不加limit的效率还是有些差距的。</p><h4 id="（4）虚拟列"><a href="#（4）虚拟列" class="headerlink" title="（4）虚拟列"></a>（4）虚拟列</h4><p>clickhouse中<font color="Red">尽量不要使用虚拟列</font>，很消耗性能。可以在服务端或者其他地方处理数据，不要在clickhouse中使用虚拟列来处理数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a<span class="hljs-operator">/</span>b <span class="hljs-keyword">from</span> test;<br><span class="hljs-keyword">select</span> a, b <span class="hljs-keyword">from</span> test;<br></code></pre></td></tr></table></figure><h3 id="2、多表关联"><a href="#2、多表关联" class="headerlink" title="2、多表关联"></a>2、多表关联</h3><p>数据集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -O https://datasets.clickhouse.com/hits/partitions/hits_v1.tar<br>tar xvf hits_v1.tar -C /var/lib/clickhouse # path to ClickHouse data directory<br><span class="hljs-meta">#</span><span class="bash"> check permissions on unpacked data, fix <span class="hljs-keyword">if</span> required</span><br><br>curl -O https://datasets.clickhouse.com/visits/partitions/visits_v1.tar<br>tar xvf visits_v1.tar -C /var/lib/clickhouse # path to ClickHouse data directory<br><span class="hljs-meta">#</span><span class="bash"> check permissions on unpacked data, fix <span class="hljs-keyword">if</span> required</span><br><br>sudo service clickhouse-server restart<br></code></pre></td></tr></table></figure><p>clickhouse建表时没有like语法，因此使用以下语法创建一个张和hits_v1一样表结构的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> hits_test<br>ENGINE <span class="hljs-operator">=</span> MergeTree<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> toYYYYMM(EventDate)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (CounterID, EventDate, intHash32(UserID))<br>SAMPLE <span class="hljs-keyword">BY</span> intHash32(UserID)<br>SETTINGS index_granularity <span class="hljs-operator">=</span> <span class="hljs-number">8192</span><br><span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="（1）用in代替join"><a href="#（1）用in代替join" class="headerlink" title="（1）用in代替join"></a>（1）用in代替join</h4><p>但是in的使用场景很有限，而且使用时要特别注意查询结果，因为join是笛卡尔积，右表有重复数据的话，结果集可能不止一条，而使用in的话，右表有重复数据对于左表来说是没关系的。</p><h4 id="（2）大表在左，小表在右"><a href="#（2）大表在左，小表在右" class="headerlink" title="（2）大表在左，小表在右"></a>（2）大表在左，小表在右</h4><p>和MySQL或其他行式数据库不一样，clickhouse在使用join时，需要将大表作为主表，小表作为被关联的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 内存不足，直接报错</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.visits_v1 b <span class="hljs-keyword">join</span> datasets.hits_v1 a <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID <span class="hljs-keyword">where</span> a.CounterID <span class="hljs-operator">&gt;</span> <span class="hljs-number">100000</span>;<br><br><span class="hljs-comment">-- 3.751秒，可以执行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 a <span class="hljs-keyword">join</span> datasets.visits_v1 b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID <span class="hljs-keyword">where</span> a.CounterID <span class="hljs-operator">&gt;</span> <span class="hljs-number">100000</span>;<br></code></pre></td></tr></table></figure><h4 id="（3）先过滤再关联"><a href="#（3）先过滤再关联" class="headerlink" title="（3）先过滤再关联"></a>（3）先过滤再关联</h4><p>对于查询大数据量的sql，先过滤再关联，可以减少扫描的数据量，提升一点效率。即先对某一个表写where条件，形成一个子查询，再用子查询来关联，效率会比直接关联然后统一写where条件来的高。</p><p>使用先过滤再关联还有一个好处在于，如果过滤条件是右表，则可以减少将数据加载到内存的量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1.999秒，效率低</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 a <span class="hljs-keyword">join</span> datasets.visits_v1 b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID <span class="hljs-keyword">where</span> a.EventDate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2014-03-17&#x27;</span>;<br><br><span class="hljs-comment">-- 1.772秒，效率高</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 <span class="hljs-keyword">where</span> EventDate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2014-03-17&#x27;</span>) a <span class="hljs-keyword">join</span> datasets.visits_v1 b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID;<br><br><span class="hljs-comment">-- 2.509秒，占用内存峰值1.91G</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 a <span class="hljs-keyword">join</span> datasets.visits_v1 b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID <span class="hljs-keyword">where</span> b.StartDate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2014-03-17&#x27;</span>;<br><br><span class="hljs-comment">-- 2.478秒，占用内存峰值1.7G</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> hits_test<br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> datasets.hits_v1 a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> CounterID <span class="hljs-keyword">from</span> datasets.visits_v1 <span class="hljs-keyword">where</span> StartDate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2014-03-17&#x27;</span>) b <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID;<br></code></pre></td></tr></table></figure><h4 id="（4）分布式表用GLOBAL"><a href="#（4）分布式表用GLOBAL" class="headerlink" title="（4）分布式表用GLOBAL"></a>（4）分布式表用GLOBAL</h4><p>以3分片为例，hits_v1表为分布式表，visits_v1为普通表，以下查询为例。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hits_v1 perwhere CounterID <span class="hljs-operator">&gt;</span> <span class="hljs-number">1000</span>) a <span class="hljs-keyword">join</span> visits_v1 b <span class="hljs-keyword">on</span> <span class="hljs-keyword">on</span> a.CounterID <span class="hljs-operator">=</span> b.CounterID;<br></code></pre></td></tr></table></figure><p>分布式表在join时，每台服务器都会将右表加载到各自服务器的内存中，然后进行匹配。不使用GLOBAL时，需要查3次右表；使用GLOBAL，可以只进行1次查询，并分发到其他节点。如果此时右表也是分布式表的话，不适用GLOBAL就会查9次；使用GLOBAL只需要查3次。这就是<code>查询放大</code>。</p><h4 id="（5）使用字典表"><a href="#（5）使用字典表" class="headerlink" title="（5）使用字典表"></a>（5）使用字典表</h4><p>Dictionary。</p><p><a href="https://clickhouse.com/docs/en/sql-reference/dictionaries/internal-dicts/">https://clickhouse.com/docs/en/sql-reference/dictionaries/internal-dicts/</a></p><h3 id="3、其他优化"><a href="#3、其他优化" class="headerlink" title="3、其他优化"></a>3、其他优化</h3><h4 id="（1）写入数据时先排序。"><a href="#（1）写入数据时先排序。" class="headerlink" title="（1）写入数据时先排序。"></a>（1）写入数据时先排序。</h4><p>因为写入数据时，数据不会直接分配到实际所在的那个分区，而是会先临时放在一个新的分区。无序的数据会产生大量的新分区，merge时会产生性能问题。</p><h4 id="（2）关注CPU"><a href="#（2）关注CPU" class="headerlink" title="（2）关注CPU"></a>（2）关注CPU</h4><p>cpu负载在50%时，会对查询性能会产生影响；cpu负载超过70%时，会出现大范围超时情况。因此不要以为在单次查询时性能很好就以为在实际生产环境中没有问题，放到生产环境中的查询sql要尽量优化好。</p><h2 id="十一、一致性"><a href="#十一、一致性" class="headerlink" title="十一、一致性"></a>十一、一致性</h2><p>clickhouse只能保证<font color="Red">最终一致性</font>！如ReplacingMergeTree的删除重复数据的功能，只会在进行数据合并时进行，即在不确定的时候后台进行。因此平时使用时，<font color="Red">不能保证没有重复数据</font>。问题：如何保证查询时数据的一致性。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_replacing_mt(<br>    user_id UInt64,<br>    score String,<br>    deleted UInt8 <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>,<br>    create_time DateTime <span class="hljs-keyword">default</span> toDateTime(<span class="hljs-number">0</span>)<br>)engine<span class="hljs-operator">=</span>ReplacingMergeTree(create_time)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> user_id;<br><br><span class="hljs-comment">-- 写入数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_replacing_mt(user_id, score)<br><span class="hljs-keyword">with</span> (<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>]<br>) <span class="hljs-keyword">as</span> dict<br><span class="hljs-keyword">select</span> number <span class="hljs-keyword">as</span> user_id, dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">7</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> score<br><span class="hljs-keyword">from</span> numbers(<span class="hljs-number">10000000</span>);<br><br><span class="hljs-comment">-- 修改数据（其实还是写入数据）</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_replacing_mt(user_id, score, create_time)<br><span class="hljs-keyword">with</span> (<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;BB&#x27;</span>, <span class="hljs-string">&#x27;CC&#x27;</span>, <span class="hljs-string">&#x27;DD&#x27;</span>, <span class="hljs-string">&#x27;EE&#x27;</span>, <span class="hljs-string">&#x27;FF&#x27;</span>, <span class="hljs-string">&#x27;GG&#x27;</span>]<br>) <span class="hljs-keyword">as</span> dict<br><span class="hljs-keyword">select</span> number <span class="hljs-keyword">as</span> user_id, dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">7</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> score, now() <span class="hljs-keyword">as</span> create_time<br><span class="hljs-keyword">from</span> numbers(<span class="hljs-number">500000</span>);<br><br><span class="hljs-comment">-- 查询数据量，为10500000条，并没有立即去重</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> test_replacing_mt;<br></code></pre></td></tr></table></figure><h3 id="1、手动optimize（错误）"><a href="#1、手动optimize（错误）" class="headerlink" title="1、手动optimize（错误）"></a>1、手动optimize（错误）</h3><p>每次执行完insert都手动进行optimize。</p><p>绝对不可取！！手动optimize只能空闲时间进行。</p><h3 id="2、手动通过sql实现"><a href="#2、手动通过sql实现" class="headerlink" title="2、手动通过sql实现"></a>2、手动通过sql实现</h3><p>通过设置一些特殊字段，如<code>deleted</code>控制该条数据是否被删除掉了，<code>create_time</code>控制该条数据的创建时间。</p><p>然后查询<code>create_time</code>为最新的，且<code>deleted</code>为0的数据，即可实现手动去重。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>    user_id,<br>    argMax(score, create_time) <span class="hljs-keyword">as</span> score,<br>    argMax(deleted, create_time) <span class="hljs-keyword">as</span> deleted,<br>    <span class="hljs-built_in">max</span>(create_time) <span class="hljs-keyword">as</span> ctime<br><span class="hljs-keyword">from</span> test_replacing_mt<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id<br><span class="hljs-keyword">having</span> deleted <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>以上面sql做一个普通视图，并在这个视图上查询数据，则可以查询到最新的有效数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> test_replacing_mt_view <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span><br>    user_id,<br>    argMax(score, create_time) <span class="hljs-keyword">as</span> score,<br>    argMax(deleted, create_time) <span class="hljs-keyword">as</span> deleted,<br>    <span class="hljs-built_in">max</span>(create_time) <span class="hljs-keyword">as</span> ctime<br><span class="hljs-keyword">from</span> test_replacing_mt<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id<br><span class="hljs-keyword">having</span> deleted <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 在视图上进行查询</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> test_replacing_mt_view;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_replacing_mt_view <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>删除数据则通过插入一条<code>deleted = 0 and create_time = now()</code>的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_replacing_mt <span class="hljs-keyword">values</span>(<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-number">1</span>, now());<br><br><span class="hljs-comment">-- 再次查询test_replacing_mt_view，发现没有数据返回</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_replacing_mt_view <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 9999999条数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> test_replacing_mt_view;<br></code></pre></td></tr></table></figure><p>注：</p><ul><li>argMax(field1, field2)：按照field2的最大值取field1的值。</li></ul><h3 id="3、通过FINAL查询"><a href="#3、通过FINAL查询" class="headerlink" title="3、通过FINAL查询"></a>3、通过FINAL查询</h3><p>在sql语句中写final只支持ReplacingMergeTree和SummingMergeTree，因为这两个表引擎在合并数据时需要聚合，普通的MergeTree表引擎合merge时不需要聚合。</p><p>final的作用是根据order by指定的字段，查询版本号最新的一条数据。</p><p>20.5.2.7-stable版本之前是单线程进行，速度很慢，老版本不建议使用。后面新版本支持多线程，并且可以通过<code>max_final_threads</code>参数控制单个final查询的线程数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 当然deleted还是要加的</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_replacing_mt <span class="hljs-keyword">final</span> <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">100</span> <span class="hljs-keyword">and</span> deleted <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 如果不加deleted字段，可以看到最新版本的数据是那条deleted为1的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_replacing_mt <span class="hljs-keyword">final</span> <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>┌─user_id─┬─score─┬─deleted─┬─────────create_time─┐<br>│     <span class="hljs-number">100</span> │ AA    │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">13</span>:<span class="hljs-number">27</span>:<span class="hljs-number">54</span> │<br>└─────────┴───────┴─────────┴─────────────────────┘<br></code></pre></td></tr></table></figure><h3 id="4、结论"><a href="#4、结论" class="headerlink" title="4、结论"></a>4、结论</h3><p>由于clickhouse对update和delete的操作不友善，因此在实际生产环境中最好加上这么几个字段：</p><p><code>create_time</code>：数据创建时间</p><p><code>deleted</code>：该数据是否被删除了，1代表是，0代表没有删除</p><p>或者使用</p><p><code>isvalid</code>：该条数据是否有效，1代表有效数据，0代表无效数据，即和<code>deleted</code>作用相反。</p><p>如果是新版本，则可以在使用final查询和自定义视图的方式之间权衡，对比两种方式的效率以及对数据库造成的压力，选择最适合的方式。注意并不一定是所有表都要用一种方式，可能有些数据使用自定义视图合适，而有些数据使用final合适。</p><p>如果是旧版本，final无法设置多线程，导致效率很低，则还是选择自定义视图的方式来实现吧。</p><p>其次，每天在空闲时间定时进行数据合并。</p><p>最后，如果以上方式效率都很低，但是某个业务对于查询出来的数据的准确定并不讲究，则可以不进行去重。</p><h2 id="十二、物化视图（MaterializedView）"><a href="#十二、物化视图（MaterializedView）" class="headerlink" title="十二、物化视图（MaterializedView）"></a>十二、物化视图（MaterializedView）</h2><p>普通视图只保存查询逻辑，并不保存数据。而物化视图会保存数据，即<font color="Red">真正创建一张隐藏表来存储数据</font>，当原始表数据插入数据时，新数据会按照物化视图的逻辑生成最新的数据。</p><p><strong>优点</strong>：快！当需要查询一些聚合的操作时，使用原始数据进行聚合查询可能会比较慢，但是可以通过物化视图将聚合数据加载到一张表中，然后直接查物化视图中的数据，速度就可想而知很快了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> MATERIALIZED <span class="hljs-keyword">VIEW</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db.]table_name [<span class="hljs-keyword">ON</span> CLUSTER] [<span class="hljs-keyword">TO</span>[db.]name] [ENGINE <span class="hljs-operator">=</span> engine] [POPULATE] <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> ...<br></code></pre></td></tr></table></figure><ul><li><p>TO：隐藏表名，如果不加的话，默认为<code>.inner_id.xxxxxxxx</code></p></li><li><p>POPULATE：创建后会对数据进行初始化，即执行视图逻辑，并将所有数据写入隐藏表。生产环境不建议加，如果需要历史数据，可以手动insert。</p></li></ul><h3 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建原始数据表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_score(<br>    user_id UInt64,<br>    subject String,<br>    score String,<br>    isvalid UInt8 <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>,<br>    create_time DateTime <span class="hljs-keyword">default</span> toDateTime(<span class="hljs-number">0</span>)<br>)engine<span class="hljs-operator">=</span>ReplacingMergeTree(create_time)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (user_id, subject);<br><br><span class="hljs-comment">-- 写入初始化数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_score(user_id, subject, score, create_time)<br><span class="hljs-keyword">with</span><br>(<br>    <span class="hljs-keyword">select</span> <span class="hljs-keyword">range</span>(<span class="hljs-number">1000</span>)<br>) <span class="hljs-keyword">as</span> user_dict,<br>(<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>]<br>) <span class="hljs-keyword">as</span> score_dict,<br>(<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>]<br>) <span class="hljs-keyword">as</span> subject_dict,<br>(<br>    <span class="hljs-keyword">select</span> [<span class="hljs-string">&#x27;2021-12-11 15:00:00&#x27;</span>, <span class="hljs-string">&#x27;2021-12-10 15:00:00&#x27;</span>, <span class="hljs-string">&#x27;2021-12-09 15:00:00&#x27;</span>]<br>) <span class="hljs-keyword">as</span> ctime_dict<br><span class="hljs-keyword">select</span><br>    user_dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">1000</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> user_id,<br>    subject_dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">3</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> subject,<br>    score_dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">7</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> score,<br>    ctime_dict[rand()<span class="hljs-operator">%</span><span class="hljs-number">3</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> create_time<br><span class="hljs-keyword">from</span> numbers(<span class="hljs-number">100000</span>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> user_id, subject;<br><br><span class="hljs-comment">-- 创建物化视图，业务逻辑：将每个user_id的成绩记录成json格式，写入score_json字段</span><br><span class="hljs-keyword">create</span> materialized <span class="hljs-keyword">view</span> test_score_mv<br>engine<span class="hljs-operator">=</span>ReplacingMergeTree(create_time)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (user_id)<br><span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> user_id, score_json, isvalid, create_time<br><span class="hljs-keyword">from</span> (<br>    <span class="hljs-keyword">select</span><br>        user_id,<br>        <span class="hljs-string">&#x27;&#123;&#x27;</span> <span class="hljs-operator">||</span> arrayStringConcat(groupArray(<span class="hljs-string">&#x27;&quot;&#x27;</span> <span class="hljs-operator">||</span> subject <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;&quot;:&quot;&#x27;</span> <span class="hljs-operator">||</span> score <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;&quot;&#x27;</span>), <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">as</span> score_json,<br>        <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> isvalid,<br>        <span class="hljs-built_in">max</span>(ctime) <span class="hljs-keyword">as</span> create_time<br>    <span class="hljs-keyword">from</span> (<br>        <span class="hljs-keyword">select</span><br>            user_id,<br>            subject,<br>            argMax(score, create_time) <span class="hljs-keyword">as</span> score,<br>            argMax(isvalid, create_time) <span class="hljs-keyword">as</span> isvalid,<br>            <span class="hljs-built_in">max</span>(create_time) <span class="hljs-keyword">as</span> ctime<br>        <span class="hljs-keyword">from</span> test_score<br>        <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id, subject<br>        <span class="hljs-keyword">having</span> isvalid <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    ) <span class="hljs-keyword">as</span> tmp1<br>    <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id<br>) <span class="hljs-keyword">as</span> tmp2;<br></code></pre></td></tr></table></figure><p>记录这个创建时间，初始化数据时可以通过筛选小于这个创建时间来初始化。</p><p>由于内存限制，初始化时，可以一批一批来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">clickhouse-client -m -h 192.168.141.141 --port 9003 --query &quot;select user_id from test_score group by user_id order by user_id format CSV;&quot; &gt; test_score.csv<br><br>while read user_id; do echo &quot;$&#123;user_id&#125;&quot;; clickhouse-client -m -h 192.168.141.141 --port 9003 --query &quot;\<br>insert into test_score_mv \<br>select \<br>    user_id, \<br>    &#x27;&#123;&#x27; || arrayStringConcat(groupArray(&#x27;\&quot;&#x27; || subject || &#x27;\&quot;:\&quot;&#x27; || score || &#x27;\&quot;&#x27;), &#x27;,&#x27;) || &#x27;&#125;&#x27; as score_json, \<br>    1 as isvalid, \<br>    max(create_time) as create_time \<br>from test_score \<br>final \<br>where user_id = $&#123;user_id&#125; \<br>group by user_id \<br>&quot;; done &lt; test_score.csv;<br></code></pre></td></tr></table></figure><p>测试插入新数据到<code>hits_test</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 测试插入前，可以查询历史数据是否成功插入到物化视图中</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_score_mv <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> subject <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;语文&#x27;</span>;<br><br>┌─user_id─┬─score_json────────────────────────────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EE&quot;,&quot;语文&quot;:&quot;EEE&quot;,&quot;英语&quot;:&quot;F&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">17</span>:<span class="hljs-number">54</span>:<span class="hljs-number">16</span> │<br>└─────────┴───────────────────────────────────────┴─────────┴─────────────────────┘<br><br><span class="hljs-comment">-- 插入一条数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_score <span class="hljs-keyword">values</span> (<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;EEE&#x27;</span>, <span class="hljs-number">1</span>, now());<br><br><span class="hljs-comment">-- 再次查询物化视图，是有数据的，但是只有最新数据的group。</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_score_mv <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> subject <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;语文&#x27;</span>;<br>┌─user_id─┬─score_json─────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EEE&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">18</span>:<span class="hljs-number">31</span>:<span class="hljs-number">53</span> │<br>└─────────┴────────────────┴─────────┴─────────────────────┘<br>┌─user_id─┬─score_json────────────────────────────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EE&quot;,&quot;语文&quot;:&quot;EEE&quot;,&quot;英语&quot;:&quot;F&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">17</span>:<span class="hljs-number">54</span>:<span class="hljs-number">16</span> │<br>└─────────┴───────────────────────────────────────┴─────────┴─────────────────────┘<br></code></pre></td></tr></table></figure><p>测试更新数据（实际业务场景中不建议用update语句，这里只用作测试）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">optimize <span class="hljs-keyword">table</span> test_score;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test_score update score <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AAA&#x27;</span> <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 发现物化视图数据并没有修改</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_score_mv <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>┌─user_id─┬─score_json─────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EEE&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">18</span>:<span class="hljs-number">31</span>:<span class="hljs-number">53</span> │<br>└─────────┴────────────────┴─────────┴─────────────────────┘<br>┌─user_id─┬─score_json────────────────────────────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EE&quot;,&quot;语文&quot;:&quot;EEE&quot;,&quot;英语&quot;:&quot;F&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">17</span>:<span class="hljs-number">54</span>:<span class="hljs-number">16</span> │<br>└─────────┴───────────────────────────────────────┴─────────┴─────────────────────┘<br></code></pre></td></tr></table></figure><p>测试删除数据（实际业务场景中不建议用update语句，这里只用作测试）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test_score <span class="hljs-keyword">delete</span> <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- 发现物化视图数据同样没有修改</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test_score_mv <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>┌─user_id─┬─score_json─────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EEE&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">18</span>:<span class="hljs-number">31</span>:<span class="hljs-number">53</span> │<br>└─────────┴────────────────┴─────────┴─────────────────────┘<br>┌─user_id─┬─score_json────────────────────────────┬─isvalid─┬─────────create_time─┐<br>│       <span class="hljs-number">0</span> │ &#123;&quot;数学&quot;:&quot;EE&quot;,&quot;语文&quot;:&quot;EEE&quot;,&quot;英语&quot;:&quot;F&quot;&#125; │       <span class="hljs-number">1</span> │ <span class="hljs-number">2021</span><span class="hljs-number">-12</span><span class="hljs-number">-11</span> <span class="hljs-number">17</span>:<span class="hljs-number">54</span>:<span class="hljs-number">16</span> │<br>└─────────┴───────────────────────────────────────┴─────────┴─────────────────────┘<br></code></pre></td></tr></table></figure><p><font color="Red">clickhouse的物化视图更像是触发器，且只对新增的部分数据有效，对历史数据，或update操作或delete操作都是无效的。物化视图功能有限，对于上面这种业务逻辑，是不适用的。</font></p><h3 id="2、简单聚合业务"><a href="#2、简单聚合业务" class="headerlink" title="2、简单聚合业务"></a>2、简单聚合业务</h3><p>简单聚合，如sum、max、min、count等业务，可以使用物化视图来实现。</p><p>物化视图使用的隐藏表不使用默认的，而是我们自己定义的表，具体如下：</p><p>业务介绍：统计每个设备出现的次数和最大值、最小值、平均值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 基础数据表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> counter (<br>  <span class="hljs-keyword">when</span> DateTime <span class="hljs-keyword">DEFAULT</span> now(),<br>  device UInt32,<br>  <span class="hljs-keyword">value</span> Float32<br>) ENGINE<span class="hljs-operator">=</span>MergeTree<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> toYYYYMM(<span class="hljs-keyword">when</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (device, <span class="hljs-keyword">when</span>);<br><br><span class="hljs-comment">-- 物化视图物理表，以天为单位做预聚合</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> counter_daily (<br>  <span class="hljs-keyword">day</span> DateTime,<br>  device UInt32,<br>  count UInt64,<br>  max_value_state AggregateFunction(max, Float32),<br>  min_value_state AggregateFunction(min, Float32),<br>  avg_value_state AggregateFunction(avg, Float32)<br>)<br>ENGINE <span class="hljs-operator">=</span> SummingMergeTree()<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> tuple()<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (device, <span class="hljs-keyword">day</span>);<br><br><span class="hljs-comment">-- 物化视图</span><br><span class="hljs-keyword">CREATE</span> MATERIALIZED <span class="hljs-keyword">VIEW</span> counter_daily_mv<br><span class="hljs-keyword">TO</span> counter_daily<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span><br>    toStartOfDay(<span class="hljs-keyword">when</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">day</span>,<br>    device,<br>    <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> count,<br>    maxState(<span class="hljs-keyword">value</span>) <span class="hljs-keyword">AS</span> max_value_state,<br>    minState(<span class="hljs-keyword">value</span>) <span class="hljs-keyword">AS</span> min_value_state,<br>    avgState(<span class="hljs-keyword">value</span>) <span class="hljs-keyword">AS</span> avg_value_state<br><span class="hljs-keyword">FROM</span> counter<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">when</span> <span class="hljs-operator">&gt;=</span> toDate(<span class="hljs-string">&#x27;2019-01-01 00:00:00&#x27;</span>)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> device, <span class="hljs-keyword">day</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> device, <span class="hljs-keyword">day</span>;<br><br><span class="hljs-comment">-- 查询</span><br><span class="hljs-keyword">SELECT</span><br>  device,<br>  <span class="hljs-built_in">sum</span>(count) <span class="hljs-keyword">AS</span> count,<br>  maxMerge(max_value_state) <span class="hljs-keyword">AS</span> max,<br>  minMerge(min_value_state) <span class="hljs-keyword">AS</span> min,<br>  avgMerge(avg_value_state) <span class="hljs-keyword">AS</span> avg<br><span class="hljs-keyword">FROM</span> counter_daily_mv<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> device<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> device <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><p>物化视图的物理表使用的是SummingMergeTree表引擎，且定义三个状态函数。</p><p>物化视图则像一个触发器，将新插入的数据转换为以天为单位的状态写入物理表中。</p><p>最后查询时需要指定对应的聚合类型，获取对应的聚合值。</p><h3 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h3><ul><li>历史状态可用的业务，比如上面说的sum等聚合。但是对于历史状态不可用的聚合，比如中位数、方差等，无法通过简单使用物化视图或预聚合来实现。</li><li>数据过滤</li><li>当作触发器来用</li><li>流数据处理</li><li><font color="Red">重排序。</font>即基础数据表只能有一个排序字段，但是如果某个业务想要以其他字段排序或group查询效率很低，则可以新建一个以其他字段为order by的物化视图，再将基础数据表的指定数据插入到物化视图中。这种玩法本质是为了做两张表。且一张表是另外一个张表的子集，则可以通过一个sql往两张表写入数据。</li></ul><h2 id="十三、MaterializeMySQL引擎"><a href="#十三、MaterializeMySQL引擎" class="headerlink" title="十三、MaterializeMySQL引擎"></a>十三、MaterializeMySQL引擎</h2><p>MaterializeMySQL引擎是一个<strong>库引擎</strong>，作用是直接将MySQL的数据变化通过流的形式同步到clickhouse中，底层原理和flinkcdc、canal一样都是基于binlog实现的。</p><p>MySQL配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">default-authentication-plugin=mysql_native_password # 需要用这种密码验证方式<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 如果配置了主从，则要加上以下配置</span><br>gtid-mode=on # 主从切换时保证数据一致性<br>enforce-gtid-consistency=1 # 强一致性<br>log-slave-updates=1 # 从服务器日志记录<br></code></pre></td></tr></table></figure><p>clickhouse配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> allow_experimental_database_materialize_mysql<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-comment">-- 当前版本这个配置是关闭的</span><br></code></pre></td></tr></table></figure><p>创建对应的数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- MySQL中创建新数据库和表</span><br><span class="hljs-keyword">create</span> database testck;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> testck.test1(<br>    seq <span class="hljs-type">bigint</span> auto_increment <span class="hljs-keyword">primary</span> key<br>)<span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8mb4;<br><br><span class="hljs-comment">-- clickhouse创建以下数据库</span><br><span class="hljs-keyword">create</span> database testck engine<span class="hljs-operator">=</span>MaterializeMySQL(<span class="hljs-string">&#x27;192.168.141.141:3306&#x27;</span>, <span class="hljs-string">&#x27;testck&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意，通过MaterializeMySQL同步的数据库表必须要有主键，不然会报错。</p><p>如果你的的密码认证插件是从<code>caching_sha2_password</code>临时修改成<code>mysql_native_password</code>的话，你还<font color="Red">需要修改mysql.user表中的<code>plugin</code>字段修改为<code>mysql_native_password</code></font>。不然查询clickhouse的数据时会报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Code: 100. DB::Exception: Received from myubuntu1:9003. DB::Exception: Access denied for user root.<br></code></pre></td></tr></table></figure><p>同步后，会自动生成对应的clickhouse表，如下。</p><p>MySQL的主键 = clickhouse的order by，并且自动加上了<code>_sign</code>和<code>_version</code>字段。</p><p><code>_sign</code>字段：数据是否有效的标识，1代表有效数据，-1代表无效数据，即被删除了的数据。</p><p><code>_version</code>字段：数据版本号，每次执行MySQL的sql语句，转换为clickhouse的一条sql语句插入的数据版本号都是相同的。clickhouse内部应该维护了一个最大版本号，最新sql语句写入的数据会使用这个最大版本号，使用完之后再让这个最大版本号+1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">┌─statement──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐<br>│ <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> testck.test1<br>(<br>    `seq` Int64,<br>    `_sign` Int8 MATERIALIZED <span class="hljs-number">1</span>,<br>    `_version` UInt64 MATERIALIZED <span class="hljs-number">1</span>,<br>    INDEX _version _version TYPE minmax GRANULARITY <span class="hljs-number">1</span><br>)<br>ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree(_version)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> intDiv(seq, <span class="hljs-number">18446744073709551</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> tuple(seq)<br>SETTINGS index_granularity <span class="hljs-operator">=</span> <span class="hljs-number">8192</span> │<br>└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>MySQL的增删改操作都会通过一定的方式转换为clickhouse的insert操作。</p><ul><li>MySQL insert = clickhouse的<code>insert with _sign = 1</code>的语句。</li><li>MySQL update = clickhouse的<code>insert with _sign = -1</code>和<code>insert with _sign = 1</code>的两条语句。</li><li>MySQL delete = clickhouse的<code>insert with _sign = -1</code>的语句。</li></ul><h2 id="十四、常见问题"><a href="#十四、常见问题" class="headerlink" title="十四、常见问题"></a>十四、常见问题</h2><p><a href="https://help.aliyun.com/document_detail/162815.html">常见问题排查 (aliyun.com)</a></p><h2 id="十五、监控和备份"><a href="#十五、监控和备份" class="headerlink" title="十五、监控和备份"></a>十五、监控和备份</h2><h3 id="1、监控"><a href="#1、监控" class="headerlink" title="1、监控"></a>1、监控</h3><p>Promethseus + Grafana</p><p>Promethseus：<a href="http://promethseus.io/download">promethseus.io</a></p><p>Grafana：<a href="https://grafana.com/Grafana/download">Download Grafana | Grafana Labs</a></p><h3 id="2、备份"><a href="#2、备份" class="headerlink" title="2、备份"></a>2、备份</h3><p>手动：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 备份到freeze目录下</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name FREEZE [<span class="hljs-keyword">PARTITION</span> partition_expr] [<span class="hljs-keyword">WITH</span> NAME <span class="hljs-string">&#x27;backup_name&#x27;</span>]<br><br><span class="hljs-comment">-- 从detach目录下恢复</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name ATTACH <span class="hljs-keyword">PARTITION</span><span class="hljs-operator">|</span>PART partition_expr<br></code></pre></td></tr></table></figure><p>自动：</p><p><a href="https://github.com/AlexAkulov/clickhouse-backup">GitHub - AlexAkulov/clickhouse-backup: Tool for easy ClickHouse backup and restore with cloud storages support</a>（小心使用，可能有版本兼容问题。）</p><h2 id="N、一些不同寻常的点（坑）"><a href="#N、一些不同寻常的点（坑）" class="headerlink" title="N、一些不同寻常的点（坑）"></a>N、一些不同寻常的点（坑）</h2><p>（1）普通类型的默认值不为null，都有各自的默认值，具体见Nullable类型说明。</p><p>（2）clickhouse的primary key是可以重复的，有需要的话得手动将其设置为unique。</p><p>（3）ReplacingMergeTree的聚合并不是实时的，每次查询都需要手动聚合去重。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;clickhouse版本：21.7.3.14&lt;/p&gt;
&lt;h2 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h2&gt;&lt;h3 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class</summary>
      
    
    
    
    <category term="bigdata" scheme="https://yury757.github.io/categories/bigdata/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://yury757.github.io/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yury757.github.io/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-11-05T16:00:00.000Z</published>
    <updated>2022-05-29T15:40:39.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h2><ul><li>创建型模式：将对象的创建和使用分离<ul><li>单例、原型、工厂方法、抽象工厂、建造者</li></ul></li><li>结构性模式：用于描述如何将类和对象按某种布局组成更大的结构<ul><li>代理、适配器、桥接、装饰、外观、享元、组合</li></ul></li><li>行为型模式：用于描述类或对象之间怎样相互协调共同完成单个对象无法单独完成的操作<ul><li>模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器</li></ul></li></ul><h2 id="二、创建者模式"><a href="#二、创建者模式" class="headerlink" title="二、创建者模式"></a>二、创建者模式</h2><h3 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h3><h4 id="（1）饿汉式"><a href="#（1）饿汉式" class="headerlink" title="（1）饿汉式"></a>（1）饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton singleton = <span class="hljs-keyword">new</span> Singleton();<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）懒汉式-双重检查锁"><a href="#（2）懒汉式-双重检查锁" class="headerlink" title="（2）懒汉式-双重检查锁"></a>（2）懒汉式-双重检查锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (singleton != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;不能重复创建对象&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 创建对象的业务代码</span><br>        <span class="hljs-comment">// ... </span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-keyword">null</span>) &#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">readResolve</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）懒汉式-静态内部类"><a href="#（3）懒汉式-静态内部类" class="headerlink" title="（3）懒汉式-静态内部类"></a>（3）懒汉式-静态内部类</h4><p>原理：静态内部类只有在使用时才会被加载，不使用时不会加载该类的字节码，因此可用达到懒汉式的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> first = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!first) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;不能重复创建对象&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 创建对象的业务代码</span><br>        <span class="hljs-comment">// ... </span><br>        first = <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Holder.singleton;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Holder</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton singleton = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）枚举方式"><a href="#（4）枚举方式" class="headerlink" title="（4）枚举方式"></a>（4）枚举方式</h4><p>枚举方式属于饿汉式，JVM加载后就会加载该类的字节码文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    singleton;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h3><p>对象的创建不是直接创建，而是将你想创建的类型或属性交给工厂factory，由抽象工厂来创建对象并返回给你。这样你只和抽象工厂对象耦合，而和各种对象解耦。</p><p>常用场景：将需要创建的类型属性放入配置文件中，再在工厂类中加载对应指定配置文件中的属性，就可以完成对象的创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] ... args)</span> </span>&#123;<br>    AnimalPark park = <span class="hljs-keyword">new</span> AnimalPark();<br>    AnimalFactory factory = <span class="hljs-keyword">new</span> DogFactory();<br>    Animal animal = park.getAnimal(factory);<br>    System.out.println(animal.getName());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnimalPark</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">watchAnimal</span><span class="hljs-params">(AnimalFactory factory)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> factory.getAnimal();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AnimalFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">getAnimal</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dog&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DogFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AnimalFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getAnimal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Dog();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cat&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AnimalFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getAnimal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Cat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、分类&quot;&gt;&lt;a href=&quot;#一、分类&quot; class=&quot;headerlink&quot; title=&quot;一、分类&quot;&gt;&lt;/a&gt;一、分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建型模式：将对象的创建和使用分离&lt;ul&gt;
&lt;li&gt;单例、原型、工厂方法、抽象工厂、建造者&lt;/li&gt;
&lt;/ul&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://yury757.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>kafka</title>
    <link href="https://yury757.github.io/bigdata/kafka/kafka/"/>
    <id>https://yury757.github.io/bigdata/kafka/kafka/</id>
    <published>2021-11-02T16:00:00.000Z</published>
    <updated>2021-11-07T05:20:47.412Z</updated>
    
    <content type="html"><![CDATA[<p>kafka版本：2.12_2.8.1（2.12为scale版本，2.8.1为kafka版本，3.0以上的版本不需要依赖zookeeper）</p><p>zookeeper版本：3.6.3</p><h2 id="单机部署使用"><a href="#单机部署使用" class="headerlink" title="单机部署使用"></a>单机部署使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br>wget https://mirrors.tuna.tsinghua.edu.cn/apache/kafka/2.8.1/kafka_2.12-2.8.1.tgz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar -xvzf kafka_2.12-2.8.1.tgz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置环境变量 sudo vi /etc/profile</span><br>export KAFKA_HOME=/home/yury/kafka_2.12-2.8.1<br>export PATH=$&#123;PATH&#125;:$&#123;KAFKA_HOME&#125;/bin<br>source /etc/profile<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以 /kafka_2.12-2.8.1 为根目录</span><br><span class="hljs-meta">#</span><span class="bash"> 修改配置 vi server.properties 取下以下配置的注释，并修改称以下值</span><br>zookeeper.connect=192.168.141.141:2181<br>log.dirs=$&#123;KAFKA_HOME&#125;/tmp/kafka-logs<br>listeners=PLAINTEXT://192.168.141.141:9092<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动zookeeper</span><br>skServer.sh start<br>skServer.sh status # 查看状态：Mode: standalone<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 写一个快速启动命令放到bin目录下 vi bin/start-kafka.sh 并写入</span><br><span class="hljs-meta">$</span><span class="bash">&#123;KAFKA_HOME&#125;/bin/kafka-server-start.sh <span class="hljs-variable">$&#123;KAFKA_HOME&#125;</span>/config/server.properties --daemon</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动kafka</span><br>start-kafka.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> jps命令</span><br>3010 Jps<br>2578 Kafka<br>2046 QuorumPeerMain<br></code></pre></td></tr></table></figure><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 新增topic</span><br>bin/kafka-topics.sh --bootstrap-server 192.168.141.141:9092 --create --topic test_topic<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看topic</span><br>bin/kafka-topics.sh  --bootstrap-server 192.168.141.141:9092 --describe --topic test_topic<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除topic</span><br>bin/kafka-topics.sh --bootstrap-server 192.168.141.141:9092 --delete --topic test_topic<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 生产数据</span><br>bin/kafka-console-producer.sh --bootstrap-server 192.168.141.141:9092 --topic test_topic<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 消费数据</span><br>bin/kafka-console-consumer.sh --bootstrap-server 192.168.141.141:9092 --topic test_topic --from-beginning<br></code></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="1、broker"><a href="#1、broker" class="headerlink" title="1、broker"></a>1、broker</h3><p>一个broker即为一个kafka服务器。</p><h3 id="2、partition分区"><a href="#2、partition分区" class="headerlink" title="2、partition分区"></a>2、partition分区</h3><p>分区，即一个topic会分为多个区域存储数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;kafka版本：2.12_2.8.1（2.12为scale版本，2.8.1为kafka版本，3.0以上的版本不需要依赖zookeeper）&lt;/p&gt;
&lt;p&gt;zookeeper版本：3.6.3&lt;/p&gt;
&lt;h2 id=&quot;单机部署使用&quot;&gt;&lt;a href=&quot;#单机部署使用&quot; clas</summary>
      
    
    
    
    <category term="kafka" scheme="https://yury757.github.io/categories/kafka/"/>
    
    <category term="bigdata" scheme="https://yury757.github.io/categories/kafka/bigdata/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://yury757.github.io/linux/linux%E5%91%BD%E4%BB%A4/"/>
    <id>https://yury757.github.io/linux/linux%E5%91%BD%E4%BB%A4/</id>
    <published>2021-10-31T16:00:00.000Z</published>
    <updated>2022-04-04T18:48:32.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、刚安装好后的root用户的密码是随机的，需要修改密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo passwd<br>[sudo] paasword for yury: # 然后输入当前用户yury的密码<br>New password: # 输入root用户的新密码<br>Retype new password: # 重新输入<br></code></pre></td></tr></table></figure><p>2、修改主机名（如需要的话）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vi /etc/hostname<br></code></pre></td></tr></table></figure><p>3、用户相关</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换到root用户</span><br>su<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 新增一个名为XXX的用户</span><br>useradd XXX<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 为XXX用户设置密码</span><br>passwd XXX<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 退出root用户</span><br>exit<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除用户xxx</span><br>sudo deluser xxx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除用户xxx及其home里面的文件夹</span><br>sudo deluser --remove-home xxx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改用户名的流程很复杂，且容易使系统奔溃，因此在不是精通linux的情况下最好别修改用户名</span><br><br></code></pre></td></tr></table></figure><p>4、关机重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 重启</span><br>reboot<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关机</span><br>poweroff<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭系统，不关闭电源</span><br>halt<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 或者使用</span><br>shutdown --[reboot | halt | poweroff] [now | 20:35 | 10]<br><span class="hljs-meta">#</span><span class="bash"> now是指立即操作，20:35是指在这个时间点操作，10是指10分钟后操作</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 取消定时关机</span><br>shutdown -c<br></code></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1、sudo表示用管理员模式执行</p><p>2、命令后面若带有参数，一般短参数前加“-”，长参数前加“–”，但有些例外，看语言风格。</p><p>3、apt软件包默认下载路径为：/var/cache/apt/archives。apt软件包默认安装路径为：/usr/share</p><p>4、常用命令：</p><ul><li>clear</li><li>sudo：允许本用户以其他用户（默认为超级管理员用户）的安全权限来运行某个命令或程序，即superuser do</li></ul><h2 id="shell语法"><a href="#shell语法" class="headerlink" title="shell语法"></a>shell语法</h2><p>1、读取文本文件，循环每一行数据，将数据作为参数执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 方法1</span><br>for a in `cat hello.txt`; do echo &quot;$&#123;a&#125; 123&quot;; done;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 方法2</span><br>while read a; do echo &quot;$&#123;a&#125; 123&quot;; done &lt; hello.txt;<br><br>while read user_id; do echo &quot;$&#123;user_id&#125;&quot;; clickhouse-client -m -h 192.168.141.141 --port 9003 --query &quot;insert into test_score_mv select user_id, subject, argMax(score, create_time) as score, argMax(isvalid, create_time) as isvalid, max(create_time) as ctime from test_score where user_id = $&#123;user_id&#125; and create_time &lt;= &#x27;2021-12-11 15:01:00&#x27; group by user_id, subject&quot;; done &lt; test_score.csv;<br></code></pre></td></tr></table></figure><h2 id="系统相关信息"><a href="#系统相关信息" class="headerlink" title="系统相关信息"></a>系统相关信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> cpu和内存使用情况</span><br>top<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看内存</span><br>free<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看系统时区</span><br>timedatectl status<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置系统时区</span><br>timedatectl set-timezone &quot;Asia/Shanghai&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看linux内核版本</span><br>cat /proc/version<br>uname -a<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看linux系统版本</span><br>lsb_release -a<br>cat /etc/issue<br></code></pre></td></tr></table></figure><h2 id="apt相关"><a href="#apt相关" class="headerlink" title="apt相关"></a>apt相关</h2><p>apt search XXX：搜索软件包</p><p>apt show XXX：显示软件包详情</p><p>apt install XXX：安装某个软件</p><p>apt depends XXX：查询该包使用的依赖包</p><p>apt rdepends XXX：查看该包被哪些包依赖</p><p>apt remove XXX：卸载某个软件（保留配置文件）</p><p>apt –purge remove XXX：卸载某个软件（删除配置文件）</p><p>apt autoremove XXX：自动清理不再使用的依赖和库文件</p><p>apt list –upgradeable：显示可升级的软件包</p><p>apt list –installed：显示已安装的软件包</p><p>apt update：<font color="Red">更新apt仓库包索引</font></p><p>apt upgrade：<font color="Red">更新已安装的软件到最新版本</font></p><p>apt dist-upgrade：升级系统到最新版本</p><h2 id="软件源镜像"><a href="#软件源镜像" class="headerlink" title="软件源镜像"></a>软件源镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 备份软件源配置</span><br>sudo cp -v /etc/apt/sources.list /etc/apt/sources.list.backup<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改权限使得这个文件可以编辑</span><br>sudo chmod 777 /etc/apt/sources.list<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改sources.list文件，可以把里面的内容删光，重新写入以下内容即可</span><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb http://archive.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse<br>deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb http://archive.ubuntu.com/ubuntu/ focal-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>注意不同的ubuntu版本，sources.list里面的内容不一样，如ubuntu 20是focal，18和16又是另外的。</p><p>最后更新一下软件源仓库即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br></code></pre></td></tr></table></figure><blockquote><p>安装openssh-server</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install openssh-server<br></code></pre></td></tr></table></figure><p>安装了这个后就可以通过其他主机使用ssh命令远程连接这个服务器。</p><h2 id="用户、主机相关"><a href="#用户、主机相关" class="headerlink" title="用户、主机相关"></a>用户、主机相关</h2><h2 id="恢复模式"><a href="#恢复模式" class="headerlink" title="恢复模式"></a>恢复模式</h2><p>重启服务器，进入系统的时候按住shift，即可进入一个选项界面，依次选择：</p><ol><li><p>Unbuntu高级选项</p></li><li><p>recovery mode</p></li></ol><p>进入恢复菜单后，可以根据需要选择。</p><blockquote><p> 修改root用户密码</p></blockquote><p>先选择<code>grub</code>，进入之后按enter，然后回到这个界面，再选择<code>root</code>，进入root的shell命令行后，使用<code>passwd root</code>命令即可修改root用户的密码。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>Ubuntu 17.10及以后的版本使用Netplan（<code>/etc/netplan</code>）作为网络管理工具。以前的版本使用ifconfig和<code>/etc/network/interfaces</code>这个配置文件配置网络。以下对Netplan进行配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入到配置文件夹</span><br>cd /etc/netplan<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入后可能有一个或多个yaml文件，文件名视系统版本不定，我这里只有一个文件，因此直接配置这一个文件即可，如下</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># this is the network written by &#x27;subiquity&#x27;</span><br><span class="hljs-attr">network:</span><br>  <span class="hljs-attr">ethernets:</span><br>    <span class="hljs-attr">ens33:</span><br>      <span class="hljs-attr">addresses:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.142</span><span class="hljs-string">/24</span><br>      <span class="hljs-attr">gateway4:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.141</span><span class="hljs-number">.1</span><br>      <span class="hljs-attr">nameservers:</span><br>        <span class="hljs-attr">addresses:</span> [<span class="hljs-number">223.5</span><span class="hljs-number">.5</span><span class="hljs-number">.5</span>, <span class="hljs-number">223.6</span><span class="hljs-number">.6</span><span class="hljs-number">.6</span>] <span class="hljs-comment"># 阿里域名服务器</span><br>        <span class="hljs-attr">search:</span> []<br>  <span class="hljs-attr">version:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><blockquote><p>属性解释</p></blockquote><ul><li>version：版本</li><li>renderer：设备类型（如networkd），以上我这里没有出现</li><li>ethernets：配置网络，在我这里只有一个网络<code>ens33</code>，这是默认的网络。每个网络可以设置以下属性：<ul><li>dhcp4：使用dhcp服务器自动分配ip和dns，可以填<code>yes</code>或<code>no</code>，使用dhcp服务器后这里再设置ip好像就没用了，没试过</li><li>addresses：静态局域网地址，可以配置多个</li><li>gateway4：默认网关</li><li>nameservers：域名服务器，可以在这个属性下面的addresses属性里面设置多个域名服务器。search属性shows your search domains，不是很明白，可以不用设置。</li></ul></li></ul><p>保存后，应用修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo netplan apply<br></code></pre></td></tr></table></figure><h2 id="环境变量相关"><a href="#环境变量相关" class="headerlink" title="环境变量相关"></a>环境变量相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 列出所有已设置的环境变量</span><br>env<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 引用变量名为XXX的变量值，最好加上大括号，好习惯</span><br><span class="hljs-meta">$</span><span class="bash">&#123;XXX&#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看变量XXX的值</span><br>echo $&#123;XXX&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置环境变量，在相应的profile文件中添加环境变量</span><br><span class="hljs-meta">#</span><span class="bash"> 1、设置用户环境变量，在对应的用户文件夹下的profile</span><br>vi /home/yury/.profile<br><span class="hljs-meta">#</span><span class="bash"> 在最下面增加以下代码，设置一个变量名为AAA1的环境变量，其值为BBB1</span><br>export AAA1=BBB1<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 2、设置系统环境变量，在/etc/profile下</span><br>vi /etc/profile<br>export AAA2=BBB2<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 在环境变量中使用引用，将这个路径添加到PATH环境变量末尾</span><br>export PATH=$&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 最后，重新加载用户或系统环境变量，即不需要重启就可以使环境变量生效</span><br>source /home/yury/.profile<br>source /etc/profile<br></code></pre></td></tr></table></figure><h2 id="文件与目录相关"><a href="#文件与目录相关" class="headerlink" title="文件与目录相关"></a>文件与目录相关</h2><p>cd /：跳转到根目录</p><p>cd /XXX：跳转到/XXX目录，父目录为root，而不是当前目录</p><p>cd XXX：跳转到当前目录下的XXX目录中</p><p>cd <del>：跳转到</del>目录，~为/home/AAA，AAA为你的用户名</p><p>ls：列出该目录下的所有文件夹和文件</p><p>touch AAA.TXT：创建AAA.TXT文件</p><p>mkdir AAA：在当前目录下继续创建/AAA目录，创建目录时不能写成/AAA，而可以写成AAA/；且只能创建一层目录，不能mkdir AAA/BBB这样创建多层目录</p><p>rm AAA.TXT：删除AAA.TXT文件</p><p>rmdir AAA：删除AAA文件夹</p><p>rm -rf AAA：强制删除AAA文件夹</p><h2 id="java相关（版本jdk8）"><a href="#java相关（版本jdk8）" class="headerlink" title="java相关（版本jdk8）"></a>java相关（版本jdk8）</h2><p>使用apt安装java后安装路径：/usr/lib/jvm/java-8-openjdk-amd64（8为你的java版本，该文件夹名根据你安装的java包名来定）。注：把java安装文件放到/usr/local下面并设置好环境变量，则所有用户都可以使用这个java环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 配置JAVA_HOME环境变量</span><br>export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 配置PATH环境变量</span><br>export PATH=$PATH:$JAVA_HOME/bin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使环境变量马上生效，不需要重启</span><br>source ~/.bashrc<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 切换java版本</span><br>update-alternatives --config java<br></code></pre></td></tr></table></figure><h2 id="下载、解压"><a href="#下载、解压" class="headerlink" title="下载、解压"></a>下载、解压</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> curl和wget都可以下载，可这样简单区分使用：curl用于较复杂的不仅仅是下载的web场景，而wget适用于快速且不用担心其他参数的下载</span><br>curl https://github.com/ziyaddin/xampp/archive/master.zip -L -o MyFilename.zip<br>wget https://github.com/ziyaddin/xampp/archive/master.zip<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar xzvf xxxxxxxxx.tar.gz<br></code></pre></td></tr></table></figure><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看所有服务</span><br>systemctl statuc<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看某个服务的状态</span><br>systemctl status mysql.service<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 禁止开机启动</span><br>d<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 停止已启动的服务</span><br>sudo systemctl stop mysql.service<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动服务</span><br>systemctl start mysql.service<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭防火墙</span><br>systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><h2 id="磁盘相关"><a href="#磁盘相关" class="headerlink" title="磁盘相关"></a>磁盘相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看磁盘情况</span><br>df -hT<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 进入磁盘分区情况</span><br>fdisk -l<br><br>Disk /dev/fd0: 1.4 MiB, 1474560 bytes, 2880 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: dos<br>Disk identifier: 0x90909090<br><br>Device     Boot      Start        End    Sectors  Size Id Type<br>/dev/fd0p1      2425393296 4850786591 2425393296  1.1T 90 unknown<br>/dev/fd0p2      2425393296 4850786591 2425393296  1.1T 90 unknown<br>/dev/fd0p3      2425393296 4850786591 2425393296  1.1T 90 unknown<br>/dev/fd0p4      2425393296 4850786591 2425393296  1.1T 90 unknown<br><br><br>Disk /dev/sda: 60 GiB, 64424509440 bytes, 125829120 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: gpt<br>Disk identifier: A006A120-A37D-4375-8C47-BF69799EA710<br><br>Device        Start       End  Sectors Size Type<br>/dev/sda1      2048      4095     2048   1M BIOS boot<br>/dev/sda2      4096   2101247  2097152   1G Linux filesystem<br>/dev/sda3   2101248  41940991 39839744  19G Linux filesystem<br>/dev/sda4  41940992 125829086 83888095  40G Linux filesystem<br><br><br>Disk /dev/mapper/ubuntu--vg-ubuntu--lv: 19 GiB, 20396900352 bytes, 39837696 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 对某个分区进行管理</span><br>fdisk /dev/sda4<br></code></pre></td></tr></table></figure><h3 id="1、磁盘管理下的常用命令"><a href="#1、磁盘管理下的常用命令" class="headerlink" title="1、磁盘管理下的常用命令"></a>1、磁盘管理下的常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">m # 显示帮助页面<br>p # 查看分区列表<br>d # 删除分区<br>n # 新建分区<br>q # 不保存直接退出<br>w # 保存并退出<br></code></pre></td></tr></table></figure><h3 id="2、磁盘基本知识"><a href="#2、磁盘基本知识" class="headerlink" title="2、磁盘基本知识"></a>2、磁盘基本知识</h3><p><img src="/images/%E7%A3%81%E7%9B%98%E7%BB%93%E6%9E%84.png"></p><p>platter：盘片，即图中一个个的盘，一个盘片有上下两个盘面</p><p>head：磁头，即图中在盘片上滑动的磁头，一个盘片有上下两个盘面，因此对应两个磁头</p><p>sector：扇区，相当于图中的一条一条的弧，<font color="Red">是磁盘存取的基本单位</font>，1个sector可以是512个byte或4096个byte。</p><p>track：磁道，相当于图中的一个圆</p><p>cylinder：磁柱，相当于图中的一个圆柱形（不同盘片同一磁道组成的圆柱形），磁柱数等于一个盘面上的磁道数。</p><p>block：数据块，<font color="Red">是文件系统存取的最小单位</font>，在Windows下如NTFS等文件系统中叫做簇；在Linux下如Ext4等文件系统中叫做块（block）。每个簇或者块可以包括2、4、8、16、32、64…2的n次方个扇区。</p><p>一个block最多仅能容纳一个文件（即不存在多个文件同一个block的情况）。如果一个文件比block小，他也会占用一个block，因而block中空余的空间会浪费掉。而一个大文件，可以占多个甚至数十个成百上千万的block。</p><p><font color="Red">磁盘容量 = 磁头数 * 磁柱（磁道）数 * 每个磁道的扇区数 * 每个扇区的字节数</font></p><h3 id="3、新建分区流程"><a href="#3、新建分区流程" class="headerlink" title="3、新建分区流程"></a>3、新建分区流程</h3><p>本流程适用于vmware station对服务器进行扩容。</p><ul><li>关闭服务器，在vmware station上的服务器设置中，将硬盘扩展到你需要的大小。</li><li>重新进入服务器，<code>fdisk -l</code>命令查看分区列表，找到磁盘<code>/dev/sda</code>，<code>fdisk /dev/sda</code>命令对该磁盘设备进行管理。</li><li>键入<code>n</code>命令新建分区，后面如果提示选择extended或者primary partition，则选择primary partition。</li><li>然后提示输入分区编号，一般使用提示的默认编号，或者直接回车。</li><li>然后提示输入First cylinder（或sector），即新建的分区的起始cylinder（或sector）编号为多少，一般使用默认（最小）即可。</li><li>最后提示输入Last cylinder（或sector），即新建的分区的截止cylinder（或sector）编号为多少，一般使用默认（最大）即可。</li><li>以上三步有需要可以按自己的需求来选择</li><li>键入<code>w</code>命令保存设置</li><li><code>fdisk -l</code>，查看新分区是否生成：</li><li><code>mkfs.ext4 /dev/sda4</code>，命令格式化（格式化会清除数据）分区，sda4为你之前输入的新分区编号，ext4为文件系统类型</li><li><code>mkdir disk4</code>，在根目录下创建一个空文件夹，<code>mount /dev/sda4 /disk4</code>，将新分区挂载到新建的文件夹下</li><li><code>echo &#39;/dev/sda4 /disk4 ext4 defaults 0 0&#39; &gt;&gt; /etc/fstab</code>，将这个挂载动作写入一个文件中，保证每次启动服务器时会自动将这个分区挂载到这个disk4目录。</li><li><code>reboot</code>，重启服务器，<code>df -hT</code>，查看磁盘情况</li></ul><h3 id="4、分区扩容流程"><a href="#4、分区扩容流程" class="headerlink" title="4、分区扩容流程"></a>4、分区扩容流程</h3><p>不建议在Linux系统盘所在分区进行扩容，小心丢失数据。且必须有未分区的磁盘用于扩容。</p><ul><li><code>df –hT</code>和<code>fdisk -l</code>命令查看磁盘情况和分区情况</li><li><code>umount /dev/sda4</code>，卸载需要扩容的磁盘挂载的分区</li><li><code>fdisk /dev/sda4</code>，对需要扩容的磁盘分区进行管理</li><li><code>d</code>，删除分区</li><li><code>n</code>，新建分区，然后按新建分区的流程设置分区大小</li><li><code>w</code>，保存设置</li><li><code>e2fsck -f /dev/sda4</code>，检查扩容的分区是否ok</li><li><code>resize2fs /dev/sda4</code>，扩容</li><li><code>mount /dev/sda4 /disk4</code>，挂载</li><li><code>df -hT</code>和<code>reboot</code>，查看磁盘情况并重启服务器</li></ul><h2 id="service、systemctl相关"><a href="#service、systemctl相关" class="headerlink" title="service、systemctl相关"></a>service、systemctl相关</h2><p>首先我们得搞清楚你的linux服务器的system manager是谁。一般有<code>SysVinit system manager</code>和<code>Systemd system manage</code>这两种。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pstree | head -n 5 # 运行这个命令，若输出`systemd`则说明是第二种，若输出`init`则说明是第一种。<br></code></pre></td></tr></table></figure><h3 id="1、systemd系统"><a href="#1、systemd系统" class="headerlink" title="1、systemd系统"></a>1、systemd系统</h3><h4 id="（1）列举所有service"><a href="#（1）列举所有service" class="headerlink" title="（1）列举所有service"></a>（1）列举所有service</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl list-units --type=service # 查看所有正在运行、或者失败了的units service<br><br>systemctl list-units --type=service --all # 查看所有untis service<br><br>systemctl list-unit-files --type=service # 查看已安装了的所有service<br></code></pre></td></tr></table></figure><p>list-units和list-unit-files的区别，linux中man命令对他们的解释如下：</p><blockquote><p>list-units：</p><p>List units that systemd <strong>currently has in memory</strong>. This includes units that are either referenced directly or through a dependency, units that are pinned by applications programmatically, or units that were active in the past and have failed. By default only units which are active, have pending jobs, or have failed are shown; this can be changed with option –all. If one or more PATTERNs are specified, only units matching one of them are shown. The units that are shown are additionally filtered by –type= and –state= if those options are specified.</p><p>list-unit-files：</p><p>List unit files <strong>installed on the system</strong>, in combination with their enablement state (as reported by is-enabled). If one or more PATTERNs are specified, only unit files whose name matches one of them are shown (patterns matching unit file system paths are not supported).</p></blockquote><p>即一个是当前已经加载在内存中的，要么被直接引用或者依赖或者，被其他应用程序固定了，或者曾经启用过但是失败了。另外一个是系统中安装了的。</p><p>linux系统在查找已安装了的service时，会按照以下路径加载service：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">System Unit Search Path:<br>/etc/systemd/system.control/*<br>/run/systemd/system.control/*<br>/run/systemd/transient/*<br>/run/systemd/generator.early/*<br>/etc/systemd/system/*<br>/etc/systemd/systemd.attached/*<br>/run/systemd/system/*<br>/run/systemd/systemd.attached/*<br>/run/systemd/generator/*<br>...<br>/lib/systemd/system/*<br>/run/systemd/generator.late/*<br><br>User Unit Search Path:<br>~/.config/systemd/user.control/*<br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/user.control/*</span><br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/transient/*</span><br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/generator.early/*</span><br>~/.config/systemd/user/*<br>/etc/systemd/user/*<br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/user/*</span><br>/run/systemd/user/*<br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/generator/*</span><br>~/.local/share/systemd/user/*<br>...<br>/usr/lib/systemd/user/*<br><span class="hljs-meta">$</span><span class="bash">XDG_RUNTIME_DIR/systemd/generator.late/*</span><br></code></pre></td></tr></table></figure><p>service的所有状态包括：active, inactive, activating, deactivating, failed, not-found, dead</p><h4 id="（2）注册service"><a href="#（2）注册service" class="headerlink" title="（2）注册service"></a>（2）注册service</h4><p>注册service即只要在对应的加载路径下放入<code>xxx.service</code>脚本即可，然后启动这个脚本即可。这个路径一般就用<code>/etc/systemd/system/</code>或者<code>/lib/systemd/system/</code>下面，比如MySQL的service脚本就是放在后者路径下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Grafana Server<br>After=network-online.target<br><br>[Service]<br>Type=simple  # 服务类型，如果执行程序是linux的可运行文件，则填入simple；如果执行命令是shell脚本方式，则填入forking。<br>User=yury    # 启动用户<br>Group=yury   # 启用的用户组<br><span class="hljs-meta">#</span><span class="bash"> Restart=on-failure <span class="hljs-comment"># 重启策略</span></span><br><span class="hljs-meta">#</span><span class="bash"> RestartSec=30      <span class="hljs-comment"># 重启时间</span></span><br>RuntimeDirectory=/disk4/grafana/grafana-8.4.5/<br><span class="hljs-meta">#</span><span class="bash"> ExecStart为启动命令</span><br>ExecStart=/disk4/grafana/grafana-8.4.5/bin/grafana-server --homepath=/disk4/grafana/grafana-8.4.5/<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后运行<code>systemctl enable grafana.service</code>就可以设置grafana开启服务器后自动启动。</p><p>再比如zookeeper的.service脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Zookeeper Server<br>After=network-online.target<br><br>[Service]<br>Type=forking<br>RuntimeDirectory=/disk4/zookeeper/zookeeper-3.6.3<br>ExecStart=/disk4/zookeeper/zookeeper-3.6.3/bin/zkServer.sh start<br>ExecStop=/disk4/zookeeper/zookeeper-3.6.3/bin/zkServer.sh stop<br>ExecReload=/disk4/zookeeper/zookeeper-3.6.3/bin/zkServer.sh restart<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>但是这样的话，启动后就是以root用户运行，增加User又无法启动。所以目前暂时没找到以普通用户启动的方法。</p><h3 id="2、SysVinit系统"><a href="#2、SysVinit系统" class="headerlink" title="2、SysVinit系统"></a>2、SysVinit系统</h3><h4 id="（1）列举所有service-1"><a href="#（1）列举所有service-1" class="headerlink" title="（1）列举所有service"></a>（1）列举所有service</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service --status-all # <br></code></pre></td></tr></table></figure><p>输出内容左侧的符号意思如下：</p><ul><li><strong>+</strong> : means that the service is <strong>running</strong>;</li><li><strong>–</strong> : means that the service is <strong>not running</strong> at all;</li><li><strong>?</strong> : means that Ubuntu <strong>was not able to tell</strong> if the service is running or not.</li></ul><p>还一种列举所有service的方法是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l /etc/init.d/*<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;1、刚安装好后的root用户的密码是随机的，需要修改密码：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="linux" scheme="https://yury757.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>flink_data_warehouse</title>
    <link href="https://yury757.github.io/project/flink_data_warehouse/flink_data_warehouse/"/>
    <id>https://yury757.github.io/project/flink_data_warehouse/flink_data_warehouse/</id>
    <published>2021-10-29T16:00:00.000Z</published>
    <updated>2022-01-02T06:45:28.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flink：1.12.0</p><p>java：1.8</p><h2 id="一、实时数仓简介"><a href="#一、实时数仓简介" class="headerlink" title="一、实时数仓简介"></a>一、实时数仓简介</h2><h3 id="1、分层介绍"><a href="#1、分层介绍" class="headerlink" title="1、分层介绍"></a>1、分层介绍</h3><ul><li>ODS，数据采集层，采集原始数据、日志、业务数据等</li><li>DWD，对ODS层的数据进行初步处理，并根据业务逻辑进行分流</li><li>DIM，维度数据，存储一些<strong>元数据信息</strong>，放在hbase</li><li>DWM，对于DWD数据对象进行进一步加工，常常是DWD和DIM进行关联，形成宽表</li><li>DWS，对DWM数据根据某个主题进行轻度聚合，进行主题宽表，放在clickhouse</li><li>ADS，把DWS层数据根据可视化需求进行筛选聚合，不存储，而是直接查询，形成一个接口</li></ul><h3 id="2、实时计算和离线计算"><a href="#2、实时计算和离线计算" class="headerlink" title="2、实时计算和离线计算"></a>2、实时计算和离线计算</h3><p><strong>实时计算</strong>：输入数据可以以流的方式一个个输入并进行处理，即并不知道全部数据有多大，来一个处理一个。适合运算时间短、计算量级较小的业务。比如当前商品库存，当一个顾客下单后，需要实时对库存数据进行实时处理。</p><p><strong>离线计算</strong>：计算之前已经知道全部的输入数据，且输入数据并不会发生变化。这种业务一般运算时间长、计算量较大，需要放在后台离线计算。比如计算上个月的网站访问量、去年某商品的销售额。</p><p><strong>即席查询</strong>：临时的业务，可能是老板为了装逼临时分派给你的查询任务。</p><p>Presto：当场计算（基于内存速度块）</p><p>Kylin：预计算（提前算好），多维分析（各个维度组合的结果都帮你算好）</p><h3 id="3、需求"><a href="#3、需求" class="headerlink" title="3、需求"></a>3、需求</h3><ul><li>日常统计报表或分析图实时数据变化</li><li>实时数据展示</li><li>数据预警或提示</li><li>实时推荐系统</li></ul><h2 id="一、数据采集（ODS）"><a href="#一、数据采集（ODS）" class="headerlink" title="一、数据采集（ODS）"></a>一、数据采集（ODS）</h2><p>ODS：Operation Data Store，数据准备区。</p><p>功能：采集原始数据、日志和业务数据，写入kafka</p><p>kafka topic：ods_base_log</p><h2 id="二、初步处理及分流（DWD）"><a href="#二、初步处理及分流（DWD）" class="headerlink" title="二、初步处理及分流（DWD）"></a>二、初步处理及分流（DWD）</h2><p>DWD：data warehouse details，细节数据层。</p><p>功能：主要对ODS数据层做一些数据清洗、规范化以及分流的操作。</p><ul><li><p>数据清洗：剔除非法值、脏数据等</p></li><li><p>数据分流：按照不同的业务需求，将数据拆分，输出到下游的kafka的不同topic中。</p></li></ul><p><font color="Red">重点：需要分流的逻辑一般以某种形式写在配置中，而不能在代码中写死。</font></p><p><font color="Red">而在实际工作中，这一层一般会通过搭一个平台来实现动态增加或减少分流逻辑。</font></p><p><font color="Red">实现原理就是将分流逻辑配置在数据库中，再将数据库中这个配置表通过flinkcdc生成一个广播流，将这个广播流和ods流连接合并，就可以根据配置实现动态分流。</font></p><h2 id="三、维度数据（DIM）"><a href="#三、维度数据（DIM）" class="headerlink" title="三、维度数据（DIM）"></a>三、维度数据（DIM）</h2><p>DIM：Dimension，维度数据，一般就是一些业务基本信息的数据，包含：</p><p>高基数维度数据：用户资料、商品资料等业务相关的基本信息。</p><p>低基数维度数据：配置表、数据字典等，如业务相关枚举值及其含义等。</p><blockquote><p>问：维度数据为什么不放在redis，而放在hbsae？</p></blockquote><p>答：有些维度表会随时间扩大，比如用户信息，放redis太占内存，一些在可预见的未来不会膨胀的维度数据实际上是可以放redis的。（该问题一般不能从持久化的角度来回答，实际场景下，肯定会有数据库作为持久化存储）</p><blockquote><p>问：维度数据为什么不直接取数据库，而是取hbase？</p></blockquote><p>答：数据库一般是业务本身要用来做增删改查的，大数据处理和分析模块再请求数据库，会对数据库造成压力。</p><h2 id="四、数据中间层（DWM）"><a href="#四、数据中间层（DWM）" class="headerlink" title="四、数据中间层（DWM）"></a>四、数据中间层（DWM）</h2><p>DWM：Data WareHouse Middle，数据中间层，即从DWD到DWS中间，会有很多复用的部分，将这些可复用的部分的数据加工提出出来作为一层，避免重复劳动。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Flink：1.12.0&lt;/p&gt;
&lt;p&gt;java：1.8&lt;/p&gt;
&lt;h2 id=&quot;一、实时数仓简介&quot;&gt;&lt;a href=&quot;#一、实时数仓简介&quot;</summary>
      
    
    
    
    <category term="bigdata" scheme="https://yury757.github.io/categories/bigdata/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM-1.8-memory-and-garbage-collect</title>
    <link href="https://yury757.github.io/java/JVM/jvm-1.8/"/>
    <id>https://yury757.github.io/java/JVM/jvm-1.8/</id>
    <published>2021-09-19T16:00:00.000Z</published>
    <updated>2021-10-06T07:29:23.639Z</updated>
    
    <content type="html"><![CDATA[<p>JVM版本：HotSpot 1.8</p><p>推荐书籍：</p><ul><li>《The Java Virtual Machine Specification》（<a href="https://docs.oracle.com/javase/specs/jvms/se8/jvms8.pdf">The Java® Virtual Machine Specification (oracle.com)</a>）</li><li>《深入理解java虚拟机——JVM高级特性与最佳实践》</li></ul><h2 id="一、JVM简介"><a href="#一、JVM简介" class="headerlink" title="一、JVM简介"></a>一、JVM简介</h2><h3 id="1、JVM是什么"><a href="#1、JVM是什么" class="headerlink" title="1、JVM是什么"></a>1、JVM是什么</h3><p>狭义上来说，JVM是java运行的平台。</p><p>广义上来说，It is the component of the technology responsible for its hardware- and operating system independence, the small size of its compiled code, and its ability to protect users from malicious programs. 即JVM是一个操作系统或硬件与用户程序之间的一个接口或平台，这个接口可以使用户的程序与不同的操作系统或硬件独立开，只要程序运行在这个平台上，就可以对不同的操作系统或硬件进行相同的操作，就像一个虚拟的计算机，可以执行一系列的虚拟计算机指令。</p><p>虚拟机分为两类：</p><ul><li>系统虚拟机，虚拟一个操作系统的运行环境（模拟硬件），如VMWare，是操作系统的运行环境，可以安装window、Linux等。</li><li>程序虚拟机，虚拟一个普通应用程序的运行环境（模拟软件），如JVM，是二进制字节码的运行环境。</li></ul><p>java SE架构：<a href="https://docs.oracle.com/javase/8/docs/">Java Platform Standard Edition 8 Documentation (oracle.com)</a>，JVM处于最底层，即java的运行环境。</p><h3 id="2、JVM厂商"><a href="#2、JVM厂商" class="headerlink" title="2、JVM厂商"></a>2、JVM厂商</h3><p>JVM和JVM规范（JVM Specification）不一样，JVM规范是一套规范，并不是JVM本身，而JVM是基于这套规范的实现，java官网上的JVM只是Oracle（Sun）对JVM规范的一个实现版本，不过还有其他厂商实现的JVM，如：</p><ul><li><p>Oracle HotSpot（<a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a>）（里面有很多历史，可以了解一下）</p></li><li><p>Microsoft OpenJDK（<a href="https://www.microsoft.com/openjdk">Microsoft Build of OpenJDK</a>）</p></li><li><p>Alibaba Dragonwell（<a href="https://developer.aliyun.com/opensource/project/alibabadragonwell">开发者平台_开发者中心 (aliyun.com)</a>）</p></li><li><p>Azul OpenJDK（<a href="https://www.azul.com/downloads/azure-only/">Azure Only Downloads - Azul | Better Java Performance, Superior Java Support</a>）</p></li><li><p>Red Hat OpenJDK（<a href="https://developers.redhat.com/products/openjdk/download">OpenJDK Download | Red Hat Developer</a>）</p></li><li><p>Amazon Corretto（<a href="https://aws.amazon.com/cn/corretto/">Amazon Corretto-OpenJDK 的免费多平台发行版-AWS云服务</a>）</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Oracle</span><br>java version &quot;13.0.2&quot; 2020-01-14<br>Java(TM) SE Runtime Environment (build 13.0.2+8)<br>Java HotSpot(TM) 64-Bit Server VM (build 13.0.2+8, mixed mode, sharing)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Microsoft</span><br>openjdk version &quot;11.0.12&quot; 2021-07-20<br>OpenJDK Runtime Environment Microsoft-25199 (build 11.0.12+7)<br>OpenJDK 64-Bit Server VM Microsoft-25199 (build 11.0.12+7, mixed mode)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Alibaba</span><br>openjdk version &quot;1.8.0_302&quot;<br>OpenJDK Runtime Environment (Alibaba Dragonwell 8.8.8) (build 1.8.0_302-b01)<br>OpenJDK 64-Bit Server VM (Alibaba Dragonwell 8.8.8) (build 25.302-b01, mixed mode)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 不同的Linux发行版会提供OpenJDK或其变体作为系统默认的JVM实现</span><br>openjdk version &quot;1.8.0_292&quot;<br>OpenJDK Runtime Environment (build 1.8.0_292-8u292-b10-0ubuntu1~18.04-b10)<br>OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)<br></code></pre></td></tr></table></figure><h3 id="3、跨语言平台"><a href="#3、跨语言平台" class="headerlink" title="3、跨语言平台"></a>3、跨语言平台</h3><p>JVM是一个跨语言的平台，只要对应的编译器按照一定的规范（JSR-292）能生成JVM可以识别的字节码文件，就可以运行其他语言的程序，而不仅仅是java。</p><p>因此java的强大之处并不在于java语言本身，而更在于JVM的强大。</p><p><img src="/images/JVM%E8%B7%A8%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%8F%B0.png"></p><h3 id="4、JVM整体结构"><a href="#4、JVM整体结构" class="headerlink" title="4、JVM整体结构"></a>4、JVM整体结构</h3><p>JVM主要分为三个区域：</p><ul><li>类加载子系统</li><li>运行时数据区</li><li>执行引擎</li></ul><p><img src="/images/JVM%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84.png"></p><h3 id="5、java代码执行流程"><a href="#5、java代码执行流程" class="headerlink" title="5、java代码执行流程"></a>5、java代码执行流程</h3><ul><li>java编译器（如javac）编译成.class字节码文件（前端编译器）<ul><li>词法分析</li><li>语法分析</li><li>语法/抽象语法树</li><li>语义分析</li><li>注解抽象语法树</li><li>字节码生成器</li></ul></li><li>JVM<ul><li>类加载</li><li>字节码校验</li><li>解释器，逐行将字节码翻译成机器指令，解析执行</li><li>JIT编译器（后端编译器），对字节码整体进行编译再执行，区别在于JIT会缓存一些热点代码等，优化执行效率</li></ul></li></ul><p><font color="Red">注意：解释器和JIT编译器属于JVM的执行引擎下，可以共存，但是不会同时运行，JIT编译器和解释器只能选其中一种来执行，但是并不是在JVM的整个生命周期内只能选一种运行，而是可以切换运行，根据当前要执行的代码的特征，JVM会选择其中一种来执行。</font></p><h3 id="6、class文件反编译"><a href="#6、class文件反编译" class="headerlink" title="6、class文件反编译"></a>6、class文件反编译</h3><p>通过javap命令可以对.class文件进行反编译，查看字节码指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs shell">javap -v Demo01.class<br><br>Classfile /D:/Adocument/Java/JVM/out/production/c1-memory-and-garbage-collect/net/yury/demo/Demo01.class<br>  Last modified 2021-9-20; size 580 bytes<br>  MD5 checksum fa60e763603ba1e3f645376ecc25e0ac<br>  Compiled from &quot;Demo01.java&quot;<br>public class net.yury.demo.Demo01<br>  minor version: 0<br>  major version: 52<br>  flags: ACC_PUBLIC, ACC_SUPER<br>Constant pool:<br><span class="hljs-meta">   #</span><span class="bash">1 = Methodref          <span class="hljs-comment">#5.#23         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">   #</span><span class="bash">2 = Fieldref           <span class="hljs-comment">#24.#25        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">   #</span><span class="bash">3 = Methodref          <span class="hljs-comment">#26.#27        // java/io/PrintStream.println:(I)V</span></span><br><span class="hljs-meta">   #</span><span class="bash">4 = Class              <span class="hljs-comment">#28            // net/yury/demo/Demo01</span></span><br><span class="hljs-meta">   #</span><span class="bash">5 = Class              <span class="hljs-comment">#29            // java/lang/Object</span></span><br><span class="hljs-meta">   #</span><span class="bash">6 = Utf8               &lt;init&gt;</span><br><span class="hljs-meta">   #</span><span class="bash">7 = Utf8               ()V</span><br><span class="hljs-meta">   #</span><span class="bash">8 = Utf8               Code</span><br><span class="hljs-meta">   #</span><span class="bash">9 = Utf8               LineNumberTable</span><br><span class="hljs-meta">  #</span><span class="bash">10 = Utf8               LocalVariableTable</span><br><span class="hljs-meta">  #</span><span class="bash">11 = Utf8               this</span><br><span class="hljs-meta">  #</span><span class="bash">12 = Utf8               Lnet/yury/demo/Demo01;</span><br><span class="hljs-meta">  #</span><span class="bash">13 = Utf8               main</span><br><span class="hljs-meta">  #</span><span class="bash">14 = Utf8               ([Ljava/lang/String;)V</span><br><span class="hljs-meta">  #</span><span class="bash">15 = Utf8               args</span><br><span class="hljs-meta">  #</span><span class="bash">16 = Utf8               [Ljava/lang/String;</span><br><span class="hljs-meta">  #</span><span class="bash">17 = Utf8               a</span><br><span class="hljs-meta">  #</span><span class="bash">18 = Utf8               I</span><br><span class="hljs-meta">  #</span><span class="bash">19 = Utf8               b</span><br><span class="hljs-meta">  #</span><span class="bash">20 = Utf8               c</span><br><span class="hljs-meta">  #</span><span class="bash">21 = Utf8               SourceFile</span><br><span class="hljs-meta">  #</span><span class="bash">22 = Utf8               Demo01.java</span><br><span class="hljs-meta">  #</span><span class="bash">23 = NameAndType        <span class="hljs-comment">#6:#7          // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="hljs-meta">  #</span><span class="bash">24 = Class              <span class="hljs-comment">#30            // java/lang/System</span></span><br><span class="hljs-meta">  #</span><span class="bash">25 = NameAndType        <span class="hljs-comment">#31:#32        // out:Ljava/io/PrintStream;</span></span><br><span class="hljs-meta">  #</span><span class="bash">26 = Class              <span class="hljs-comment">#33            // java/io/PrintStream</span></span><br><span class="hljs-meta">  #</span><span class="bash">27 = NameAndType        <span class="hljs-comment">#34:#35        // println:(I)V</span></span><br><span class="hljs-meta">  #</span><span class="bash">28 = Utf8               net/yury/demo/Demo01</span><br><span class="hljs-meta">  #</span><span class="bash">29 = Utf8               java/lang/Object</span><br><span class="hljs-meta">  #</span><span class="bash">30 = Utf8               java/lang/System</span><br><span class="hljs-meta">  #</span><span class="bash">31 = Utf8               out</span><br><span class="hljs-meta">  #</span><span class="bash">32 = Utf8               Ljava/io/PrintStream;</span><br><span class="hljs-meta">  #</span><span class="bash">33 = Utf8               java/io/PrintStream</span><br><span class="hljs-meta">  #</span><span class="bash">34 = Utf8               println</span><br><span class="hljs-meta">  #</span><span class="bash">35 = Utf8               (I)V</span><br>&#123;<br>  public net.yury.demo.Demo01();<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=1, locals=1, args_size=1<br>         0: aload_0<br>         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>         4: return<br>      LineNumberTable:<br>        line 3: 0<br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            0       5     0  this   Lnet/yury/demo/Demo01;<br><br>  public static void main(java.lang.String[]);<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=2, locals=4, args_size=1<br>         0: iconst_4<br>         1: istore_1<br>         2: iconst_3<br>         3: istore_2<br>         4: iload_1<br>         5: iload_2<br>         6: iadd<br>         7: istore_3<br>         8: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>        11: iload_1<br>        12: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V<br>        15: return<br>      LineNumberTable:<br>        line 5: 0<br>        line 6: 2<br>        line 7: 4<br>        line 8: 8<br>        line 9: 15<br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            0      16     0  args   [Ljava/lang/String;<br>            2      14     1     a   I<br>            4      12     2     b   I<br>            8       8     3     c   I<br>&#125;<br>SourceFile: &quot;Demo01.java&quot;<br></code></pre></td></tr></table></figure><p>JVM是基于栈的架构，不同CPU架构不同，因此不能基于寄存器来设计。</p><h3 id="7、JVM生命周期"><a href="#7、JVM生命周期" class="headerlink" title="7、JVM生命周期"></a>7、JVM生命周期</h3><ul><li><strong>启动</strong>：Java虚拟机的启动是通过<strong>引导类加载器</strong>（bootstrap class loader）创建一个初始类（initial class）来完成的，这个初始类是由虚拟机的具体实现来指定的，不同实现版本的JVM的类可能不一样。</li><li><strong>执行</strong>：JVM执行的任务就是执行用户程序，即执行一个java程序，实际上是执行一个JVM进程，而用户程序只不过在这个进程上运行。</li><li><strong>退出</strong>：程序正常终止、异常或错误而终止、操作系统错误终止、某个线程调用Runtime类或System类的exit方法或其他方法手动终止程序等都会导致程序退出，程序终止则JVM也退出。</li></ul><h2 id="二、类加载子系统"><a href="#二、类加载子系统" class="headerlink" title="二、类加载子系统"></a>二、类加载子系统</h2><p>类加载子系统（class loader subsystem）负责加载.class字节码文件。</p><p>类加载过程分为一下几个步骤：加载、链接、初始化。</p><h3 id="1、加载"><a href="#1、加载" class="headerlink" title="1、加载"></a>1、加载</h3><ul><li>通过全限定类名获取定义此类的二进制流（本地文件，网络，<font color="Red">动态代理</font>，<font color="Red">JSP生成</font>）</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象（详见反射），作为方法区这个类的各种数据的访问入口</li></ul><h3 id="2、链接"><a href="#2、链接" class="headerlink" title="2、链接"></a>2、链接</h3><ul><li><strong>验证</strong>：验证class字节码文件是否符合当前JMV规范，保证类被正确地加载并不会危害JVM本身。主要有：文件格式验证、元数据验证、字节码验证、符号引用验证。</li><li><strong>准备</strong>：为变量分配内存，并设置该变量的默认值。用final static修饰的变量在编译成class文件时就会分配值，因而这种变量在这个阶段就会直接赋值。这里不会为示例变量分配初始化值，类变量会分配在方法区中，而实例变量是会随着对象一起分配到java堆中。</li><li><strong>解析</strong>：将内存池中的符号引用转换为直接引用。即比如我们引用了一个java.Lang.String类，会产生一个对这个类的符号引用，等其他类都准备好了之后，将符号引用转换为地址引用这样的直接引用。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。</li></ul><h3 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h3><p>这个初始化并不是初始化实例，而是类的初始化。</p><ul><li>执行类构造器方法&lt;clinit&gt;()的过程。此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。即执行所有static变量或static代码块相关的初始化操作，若没有这两类操作，则不会产生对应的&lt;clinit&gt;()方法。</li><li>初始化顺序是按照代码在源文件中的顺序执行</li><li>若该类具有父类，则必须先执行父类的&lt;clinit&gt;()方法，父类初始化完成后，才能初始化子类。</li><li>JVM必须保证一个类的&lt;clinit&gt;()方法在多线程中被同步加锁，保证只能被加载一次。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Runnable task = ()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;开始&quot;</span>);<br>            AnotherClass deadThread = <span class="hljs-keyword">new</span> AnotherClass();<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;结束&quot;</span>);<br>        &#125;;<br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(task, <span class="hljs-string">&quot;thread-1&quot;</span>);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(task, <span class="hljs-string">&quot;thread-2&quot;</span>);<br><br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnotherClass</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在初始化&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;初始化结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如以上代码执行时最多一个线程进入AnotherClass的static代码块去执行，要么是thread-1，要么是thread-2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">thread-<span class="hljs-number">1</span>开始<br>thread-<span class="hljs-number">2</span>开始<br>thread-<span class="hljs-number">1</span>正在初始化<br>thread-<span class="hljs-number">1</span>初始化结束<br>thread-<span class="hljs-number">1</span>结束<br>thread-<span class="hljs-number">2</span>结束<br></code></pre></td></tr></table></figure><h3 id="4、类加载器（重点）"><a href="#4、类加载器（重点）" class="headerlink" title="4、类加载器（重点）"></a>4、类加载器（重点）</h3><p>按被加载的被的类的类型划分，类加载分为一下几种：</p><ul><li>引导类加载器（Bootstrap ClassLoader）</li><li>扩展类加载器（Extension ClassLoader）</li><li>应用程序类加载器（Application ClassLoader）</li><li>用户自定义类加载器（意为用户自定义的<strong>类加载器</strong>，而不是<strong>用户自定义类</strong>的加载器，没有加载器这个东西，只有类加载器）</li></ul><p>而按照JVM的标准，后面三种都叫用户自定义类加载器。<font color="Red">所有直接或间接派生于ClassLoader的类加载器都是用户自定义类加载器</font>。如扩展类加载器（ExtClassLoader）间接继承了ClassLoader。</p><p>Launcher类是JVM的一个入口应用，后面可以看到扩展了加载器和应用程序类加载器都是Launcher类里面的内部类。</p><h4 id="（1）引导类加载器"><a href="#（1）引导类加载器" class="headerlink" title="（1）引导类加载器"></a>（1）引导类加载器</h4><p>引导类加载器为C/C++编写，用于引导java的核心类库（JAVA_HOME/jre/lib/rt.jar、resources.jar、sun.boot.class.path路径下的内容），用于提供JVM启动运行自身需要的类。</p><p><font color="Red">扩展类加载器和应用程序类加载器也是一个类，因此引导类加载器用于还用于加载这两个特殊的类。</font></p><p>出于安全考虑，Bootstrap类加载器只加载包含java、javax、sun等开头的类。</p><p>引导类加载器加载的类，调用getClassLoader()方法返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">import</span> com.sun.net.ssl.internal.ssl.Provider;<br><span class="hljs-keyword">import</span> sun.misc.Launcher;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03BootstrapClassLoader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;bootstrap引导类加载器加载的路径为：&quot;</span>);<br>        URL[] urLs = Launcher.getBootstrapClassPath().getURLs();<br>        <span class="hljs-keyword">for</span> (URL urL : urLs) &#123;<br>            System.out.println(urL.toString());<br>        &#125;<br>        ClassLoader classLoader = Provider.class.getClassLoader();<br>        System.out.println(classLoader);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">bootstrap引导类加载器加载的路径为：</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/resources.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/rt.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/sunrsasign.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/jsse.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/jce.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/charsets.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/lib/jfr.jar</span><br><span class="hljs-comment">file:/D:/Program%20Files%20(x86)/Java/jdk1.8.0_201/jre/classes</span><br><span class="hljs-comment">null</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="（2）扩展类加载器"><a href="#（2）扩展类加载器" class="headerlink" title="（2）扩展类加载器"></a>（2）扩展类加载器</h4><p>java语言编写，由sun.misc.Launcher$ExtClassLoader实现，继承于ClassLoader，该类由Bootstrap引导类加载器加载。</p><p>加载的类目录为指定的java.ext.dirs系统属性目录，若没指定则默认为JAVA_HOME/jre/lib/ext，当用户写了一个类放入这个目录下也会被加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">import</span> sun.security.ec.CurveDB;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04ExtClassLoader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String property = System.getProperty(<span class="hljs-string">&quot;java.ext.dirs&quot;</span>);<br>        System.out.println(property);<br><br>        ClassLoader classLoader = CurveDB.class.getClassLoader();<br>        System.out.println(classLoader);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">D:\Program Files (x86)\Java\jdk1.8.0_201\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext</span><br><span class="hljs-comment">sun.misc.Launcher$ExtClassLoader@4b67cf4d</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="（3）应用程序类加载器"><a href="#（3）应用程序类加载器" class="headerlink" title="（3）应用程序类加载器"></a>（3）应用程序类加载器</h4><p>应用程序类加载器也叫系统类加载器，java语言编写，由sun.misc.Launcher$AppClassLoader实现，继承于ClassLoader，该类由扩展类加载器加载。</p><p>加载的类的目录为指定的java.class.path系统属性目录。</p><p><font color="Red">该类加载器是java应用程序的默认类加载器，即java应用的类一般都是由这个类加载器加载的。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo05AppClassLoader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ClassLoader classLoader = Demo05AppClassLoader.class.getClassLoader();<br>        System.out.println(classLoader);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>总结如下：</p><p><img src="/images/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B.png"></p><h4 id="（4）用户自定义类加载器"><a href="#（4）用户自定义类加载器" class="headerlink" title="（4）用户自定义类加载器"></a>（4）用户自定义类加载器</h4><p>不适用以上三种类加载器，而是用户自定义一个类加载器，来加载需要加载的类。</p><p>为什么需要自定义类加载器？</p><ul><li>隔离加载类</li><li>修改类的加载方式</li><li>扩展加载源</li><li>防止源码泄露</li></ul><p>定义用户自定义类的两个方法：</p><ul><li>继承ClassLoader类，重写findClass方法，JDK1.2之前要重写loadClass方法</li><li>继承URLClassLoader类，按照需求重写部分方法</li><li>将URLClassLoader类作为一个参考模板，模仿重写一个适应自己需求的一个类</li></ul><h4 id="（5）获取类加载器的方式"><a href="#（5）获取类加载器的方式" class="headerlink" title="（5）获取类加载器的方式"></a>（5）获取类加载器的方式</h4><ul><li>Class.getClassLoader()</li><li>Thread.currentThread().getContextClassLoader()</li><li>ClassLoader.getSystemClassLoader()</li><li>DriverManager.getCallerCLassLoader()</li></ul><h3 id="5、双亲委派机制（重点）"><a href="#5、双亲委派机制（重点）" class="headerlink" title="5、双亲委派机制（重点）"></a>5、双亲委派机制（重点）</h3><p>JVM对class文件采用的是<font color="Red">按需加载</font>的方式加载，即在要用到这个类时才会将这个类加载进内存中生成class对象。而加载某个类时，JVM加载类时采用的是<font color="Red">双亲委派机制</font>，是一种任务委派模式。</p><p>双亲委派机制原理如下：</p><ul><li>当一个类加载器收到加载类的请求时，并不会自己去加载这个类，而是将这个请求委托给父类去加载</li><li>父类加载器收到加载请求后，会继续向上委托，最终到达Bootstrap ClassLoader</li><li>在这个递归的过程中，如果父类加载器完成了加载过程，则成功返回，否则才让子类加载器去完成类加载，知道这个类完成加载。</li></ul><p>注：“父类加载器“的断句为”<strong>父 类加载器</strong>“，还是一个类加载器，而不是父类的类加载器。类加载器可以通过调用getParent()方法获取其父类加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns the parent class loader for delegation. Some implementations may</span><br><span class="hljs-comment"> * use &lt;tt&gt;null&lt;/tt&gt; to represent the bootstrap class loader. This method</span><br><span class="hljs-comment"> * will return &lt;tt&gt;null&lt;/tt&gt; in such implementations if this class loader&#x27;s</span><br><span class="hljs-comment"> * parent is the bootstrap class loader.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ClassLoader <span class="hljs-title">getParent</span><span class="hljs-params">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">就像注释中说的，类加载器在任务委派方面是存在父子这种层次关系的，上面一节中讲到的不同类型的类加载器可以加载那些类，只是说明了它拥有加载这些类的能力，而不是说这些类一定由这个类加载器加载。而某个类最终由哪个类加载器加载，取决于可以加载这个类的最高级别的类加载器。</font></p><p>类加载器在任务委派方面的级别从高到低依次如下：</p><ul><li>Bootstrap ClassLoader</li><li>Extension ClassLoader</li><li>Application ClassLoader</li><li>UserDefined ClassLoader</li></ul><p>例如用户定义了一个java.lang.String类，而用户在使用这个类时，并不会找到用户定义的这个类，而是用了bootstrap classloader加载的rt.jar包下的java.lang.String类。因为通过双亲委派机制加载类时，加载任务不会直接进行，而是从最底层一直往上传递，最顶层的bootstrap classloader可以完成这个类的加载，于是直接完成了加载并返回class对象了，并不会将加载任务继续返还给子类加载器加载。代码略。</p><p>机制的优点：</p><ul><li>避免类被重复加载</li><li>保护程序安全，防止核心api被随意篡改</li></ul><h3 id="6、识别同一个类"><a href="#6、识别同一个类" class="headerlink" title="6、识别同一个类"></a>6、识别同一个类</h3><p>JVM中识别两个对象是否属于同一个类，包含以下两个校验：</p><ul><li>全限定类名是否相同</li><li>这两个对象的类是否由同一个类加载器加载的</li></ul><h3 id="7、类的主动使用和被动使用"><a href="#7、类的主动使用和被动使用" class="headerlink" title="7、类的主动使用和被动使用"></a>7、类的主动使用和被动使用</h3><p>主动使用包括：</p><ul><li>创建类实例</li><li>访问类或接口的静态变量，或对该静态变量进行赋值</li><li>调用类的静态方法</li><li>反射</li><li>初始化一个类的子类</li><li>JVM启动时被标明为启动类的类</li><li>JDK7开始提供的动态语言支持：java.lang.invoke.MethodHandler实例的解析结果</li></ul><p>除了以上几种情况为主动使用，其他均为被动使用。<font color="Red">类的被动使用不会导致类的初始化，即不会执行对应的&lt;clinit&gt;()方法</font>。</p><h2 id="三、运行时数据区"><a href="#三、运行时数据区" class="headerlink" title="三、运行时数据区"></a>三、运行时数据区</h2><h3 id="1、组成"><a href="#1、组成" class="headerlink" title="1、组成"></a>1、组成</h3><ul><li>方法区（JDK1.8叫元空间metaspace，或堆外内存）</li><li>JVM堆</li><li>程序计数器</li><li>本地方法栈</li><li>JVM栈</li></ul><p><font color="Red">其中方法区和JVM堆的生命周期和JVM进程的生命周期一样，而程序计数器、本地方法栈、JVM栈的生命周期和程序线程的生命周期一样，每有一个线程， 就会有一个自身的程序计数器、本地方法栈、JVM栈。</font></p><p><img src="/images/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png"></p><h3 id="2、线程"><a href="#2、线程" class="headerlink" title="2、线程"></a>2、线程</h3><p><font color="Red">在HotSpot JVM中，每个线程都与操作系统中的本地线程直接映射。java线程准备好时，操作系统中对应的本地线程也同时创建；java线程终止时，本地线程也会回收。</font></p><p><strong>普通线程</strong>：用户应用程序需要执行一定的工作而创建的工作线程。JVM虚拟机在所有普通线程终止时自动终止。</p><p><strong>守护线程</strong>：驻立在后台的线程，用于服务普通线程的线程，当JVM虚拟机准备终止时，守护线程才会终止。</p><p>HotSpot JVM中的守护线程主要有：</p><ul><li>JVM线程</li><li>周期任务线程</li><li>GC线程</li><li>编译线程</li><li>信号调度线程</li></ul><h3 id="3、程序计数器（PC寄存器）"><a href="#3、程序计数器（PC寄存器）" class="headerlink" title="3、程序计数器（PC寄存器）"></a>3、程序计数器（PC寄存器）</h3><p>英文全称：Program Counter Register。它是对CPU的寄存器的一种抽象模拟。</p><p>PC寄存器用来<font color="Red">存储指向下一条指令的地址</font>，也即将要执行的指令代码。由执行引擎读取下一条指令。它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。可以理解为数据库中的游标，或集合的迭代器。</p><p>线程私有，和线程的生命周期一致。</p><p><font color="Red">没有GC，且是唯一一个在JVM规范中没有规定任何OOM情况的区域。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo06PCRegister</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">int</span> k = i + j;<br>        String s = <span class="hljs-string">&quot;yury&quot;</span>;<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于上面这段代码反编译后的指令如下：</p><p><img src="/images/pc%E5%AF%84%E5%AD%98%E5%99%A8.png"></p><p><strong>问题1：为什么要用PC寄存器？</strong></p><p>因为CPU需要不断地在各个线程之间切换运行，需要有一个东西记录CPU需要运行的下一条指令的位置，不然CPU从其他线程切换回来不知道从哪里开始。</p><p><strong>问题2：PC寄存器为什么是线程私有的？</strong></p><p>因为PC寄存器是记录每个线程的下一条指令的位置，和线程相关，因此要每个线程独享一份PC寄存器。如果设计成公用的，则需要将对应线程的id也记录进去（即一种key-value形式的数据结构存储），而在创建线程和销毁线程时还要对这个数据结构进行操作，又涉及并发问题，稍显麻烦。而PC寄存器的占用内存及其小，因此设计成和线程绑定，随着线程生命周期创建或销毁，使用起来更方便。</p><h3 id="4、JVM栈"><a href="#4、JVM栈" class="headerlink" title="4、JVM栈"></a>4、JVM栈</h3><p>英文全称：Java Virtual Machine Stacks。</p><p><font color="Red">栈是运行时的单位，而堆是存储的单位。栈解决程序运行的问题，即程序如何运行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放，放在那里。</font></p><p><font color="Red">JVM栈内部存储的是一个个的栈帧，对应着一次次的方法调用，当前线程每调用一个方法，则将该方法入栈，栈顶元素即为正在运行的方法，当前方法运行结束后则栈顶元素出栈</font>。主管java程序的运行，每个栈帧中保存方法的局部变量、部分结果，并参与方法的调用和返回。</p><p>线程私有，和线程的生命周期一致。</p><p>不存在GC，但是存在OOM。</p><p>JVM允许JVM栈的大小是动态的或者固定不变的。若栈大小是固定的，则可能存在<strong>StackOverflowError</strong>异常；若栈大小是动态的，则可能存在<strong>OutOfMemoryError</strong>异常。</p><p><font color="Red">设置栈的大小</font>：在JVM参数设置里面加上<code>-Xss1024</code>即可设置栈空间的大小；默认单位是bytes，加上<code>k</code>则以kb为单位，同样加上<code>m</code>则以mb为单位。</p><h4 id="（1）栈帧"><a href="#（1）栈帧" class="headerlink" title="（1）栈帧"></a>（1）栈帧</h4><p>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据集。</p><p>在一个活动线程中，一个时间点上只可能有一个活动的栈帧，即栈顶栈帧，对应着当前正在运行的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo07JVMStackTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Demo07JVMStackTest demo = <span class="hljs-keyword">new</span> Demo07JVMStackTest();<br>        demo.test1();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        test2();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        test3();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如在运行以上代码时，通过debug手动控制程序的运行时，会发现每当进入一个方法时，下图的顶端方法就会变成当前方法。每执行完一个方法时，顶端方法就会移除。</p><p><img src="/images/stack%E6%B5%8B%E8%AF%95.png"></p><p>注意：不同线程中的所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另外一个线程的栈帧。即不同栈之间的栈帧时隔离的。</p><blockquote><p>返回类型</p></blockquote><p>函数有两种返回方式，一是正常返回，而是异常返回。这两种返回方式都会导致栈帧被弹出。</p><p>正常返回时，使用return指令，返回值会被传给下一个栈帧，接着当前栈帧就被JVM丢弃。返回值为void其实也有一个return。</p><p>异常返回时，抛出的异常会传给下一个栈帧去处理，如果下一个栈帧没有处理该异常，则继续往前抛，直到有一个函数可以处理这个异常。</p><blockquote><p>栈帧内部结构</p></blockquote><ul><li><p><font color="Red">局部变量表</font></p></li><li><p><font color="Red">操作数栈（或表达式栈）</font></p></li><li><p>动态链接（或指向运行时常量池的方法引用）</p></li><li><p>方法返回地址（或方法正常退出或异常退出的定义）</p></li><li><p>其他附加信息</p></li></ul><p><img src="/images/%E6%A0%88%E5%B8%A7.png"></p><h4 id="（2）局部变量表"><a href="#（2）局部变量表" class="headerlink" title="（2）局部变量表"></a>（2）局部变量表</h4><p>局部变量表（local variables），<font color="Red">定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，如字节码指令中的store、load等指令都会对局部变量表的操作</font>，这些数据类型包括基本数据类型、对象引用（reference），以及returnAddress类型。</p><p><font color="Red">局部变量表中最基本的存储单元是slot（变量槽）</font>。32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot。</p><ul><li>boolean、byte、short、char在存储之前都会被转换成int，占用一个slot</li><li>float为占用一个字节，故占用一个slot</li><li>long和double则占用两个slot</li><li>引用类型占用一个slot</li></ul><p>局部变量表是和线程绑定的，不存在线程安全的问题。</p><p><strong>局部变量表所需的容量大小是在编译器就确定下来了</strong>，并保存在方法的Code属性的locals数据项中，在方法运行期间是不会改变局部变量表的大小的。</p><p><font color="Red">局部变量表中的变量是重要的垃圾回收的根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。</font></p><p>如下这段代码，在javap命令下展示的局部变量表如下所示。locals即为局部变量表的容量（数字数组的长度），L开头表示引用类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo08Slot</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String res = test(args);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">test</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">long</span> a = <span class="hljs-number">1L</span>;<br>        <span class="hljs-keyword">double</span> b = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">float</span> c = <span class="hljs-number">3F</span>;<br>        <span class="hljs-keyword">int</span> d = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">short</span> e = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">byte</span> f = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">boolean</span> g = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">char</span> h = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        String i = <span class="hljs-string">&quot;123&quot;</span>;<br>        <span class="hljs-keyword">return</span> i + <span class="hljs-string">&quot;456&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public static java.lang.String test(java.lang.String[]);</span><br><span class="hljs-comment">    descriptor: ([Ljava/lang/String;)Ljava/lang/String;</span><br><span class="hljs-comment">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="hljs-comment">    Code:</span><br><span class="hljs-comment">      stack=2, locals=12, args_size=1</span><br><span class="hljs-comment">         0: lconst_1</span><br><span class="hljs-comment">         1: lstore_1</span><br><span class="hljs-comment">         2: ldc2_w        #3                  // double 2.0d</span><br><span class="hljs-comment">         5: dstore_3</span><br><span class="hljs-comment">         6: ldc           #5                  // float 3.0f</span><br><span class="hljs-comment">         8: fstore        5</span><br><span class="hljs-comment">        10: iconst_3</span><br><span class="hljs-comment">        11: istore        6</span><br><span class="hljs-comment">        13: iconst_4</span><br><span class="hljs-comment">        14: istore        7</span><br><span class="hljs-comment">        16: iconst_5</span><br><span class="hljs-comment">        17: istore        8</span><br><span class="hljs-comment">        19: iconst_1</span><br><span class="hljs-comment">        20: istore        9</span><br><span class="hljs-comment">        22: bipush        97</span><br><span class="hljs-comment">        24: istore        10</span><br><span class="hljs-comment">        26: ldc           #6                  // String 123</span><br><span class="hljs-comment">        28: astore        11</span><br><span class="hljs-comment">        30: new           #7                  // class java/lang/StringBuilder</span><br><span class="hljs-comment">        33: dup</span><br><span class="hljs-comment">        34: invokespecial #8                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="hljs-comment">        37: aload         11</span><br><span class="hljs-comment">        39: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="hljs-comment">        42: ldc           #10                 // String 456</span><br><span class="hljs-comment">        44: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="hljs-comment">        47: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="hljs-comment">        50: areturn</span><br><span class="hljs-comment">      LineNumberTable:</span><br><span class="hljs-comment">        line 8: 0</span><br><span class="hljs-comment">        line 9: 2</span><br><span class="hljs-comment">        line 10: 6</span><br><span class="hljs-comment">        line 11: 10</span><br><span class="hljs-comment">        line 12: 13</span><br><span class="hljs-comment">        line 13: 16</span><br><span class="hljs-comment">        line 14: 19</span><br><span class="hljs-comment">        line 15: 22</span><br><span class="hljs-comment">        line 16: 26</span><br><span class="hljs-comment">        line 17: 30</span><br><span class="hljs-comment">      LocalVariableTable:</span><br><span class="hljs-comment">        Start  Length  Slot  Name   Signature</span><br><span class="hljs-comment">            0      51     0  args   [Ljava/lang/String;</span><br><span class="hljs-comment">            2      49     1     a   J</span><br><span class="hljs-comment">            6      45     3     b   D</span><br><span class="hljs-comment">           10      41     5     c   F</span><br><span class="hljs-comment">           13      38     6     d   I</span><br><span class="hljs-comment">           16      35     7     e   S</span><br><span class="hljs-comment">           19      32     8     f   B</span><br><span class="hljs-comment">           22      29     9     g   Z</span><br><span class="hljs-comment">           26      25    10     h   C</span><br><span class="hljs-comment">           30      21    11     i   Ljava/lang/String;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>局部变量表在LocalVariableTable下，</p><ul><li>start：该局部变量开始生效的字节码行号</li><li>length：该局部变量开始生效的字节码行的数量，start + length一定等于该方法的总字节码行数</li><li>slot：占据的槽位的编号</li><li>name：局部变量名</li><li>signature：局部变量类型缩写</li></ul><p>最上面<code>Code：</code>下面的<code>locals</code>即为局部变量表的大小，而<code>stack</code>为操作数栈的长度。</p><p>LineNumberTable这个表指的是<strong>源代码中行号（冒号左边）</strong>和<strong>字节码行号（冒号右边）</strong>的对应关系</p><p><img src="/images/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8.png"></p><p><font color="Red">注意：非静态方法，会把对自身对象的引用this放在第0个位置的slot处作为“局部变量”，甚至方法的参数都要放在这个“局部变量”后面。而静态方法中，不会将自身对象的应用放到局部变量表中，因此在静态方法中使用this会报错。如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(<span class="hljs-keyword">long</span> i)</span> <span class="hljs-keyword">throws</span> FileNotFoundException </span>&#123;<br>    FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">this</span>.test2();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public java.lang.String test1(long) throws java.io.FileNotFoundException;</span><br><span class="hljs-comment">    descriptor: (J)Ljava/lang/String;</span><br><span class="hljs-comment">    flags: ACC_PUBLIC</span><br><span class="hljs-comment">    Code:</span><br><span class="hljs-comment">      stack=3, locals=4, args_size=2</span><br><span class="hljs-comment">         0: new           #12                 // class java/io/FileInputStream</span><br><span class="hljs-comment">         3: dup</span><br><span class="hljs-comment">         4: ldc           #13                 // String</span><br><span class="hljs-comment">         6: invokespecial #14                 // Method java/io/FileInputStream.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class="hljs-comment">         9: astore_3</span><br><span class="hljs-comment">        10: aload_0</span><br><span class="hljs-comment">        11: invokevirtual #15                 // Method test2:()V</span><br><span class="hljs-comment">        14: aload_0</span><br><span class="hljs-comment">        15: getfield      #16                 // Field name:Ljava/lang/String;</span><br><span class="hljs-comment">        18: areturn</span><br><span class="hljs-comment">      LineNumberTable:</span><br><span class="hljs-comment">        line 21: 0</span><br><span class="hljs-comment">        line 22: 10</span><br><span class="hljs-comment">        line 23: 14</span><br><span class="hljs-comment">      LocalVariableTable:</span><br><span class="hljs-comment">        Start  Length  Slot  Name   Signature</span><br><span class="hljs-comment">            0      19     0  this   Lnet/yury/demo/Demo09Method;</span><br><span class="hljs-comment">            0      19     1     i   J</span><br><span class="hljs-comment">           10       9     3 fileInputStream   Ljava/io/FileInputStream;</span><br><span class="hljs-comment">    Exceptions:</span><br><span class="hljs-comment">      throws java.io.FileNotFoundException</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p>slot的重复利用</p></blockquote><p>局部变量表中的slot槽位是可以重复利用的。当一个局部变量过了其作用域时，那么后面申明的局部变量可以利用前面过期的局部变量的slot槽位，以达到节省资源的作用。</p><p>如下，c和d利用了过期了的b的slot槽位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>    &#123;<br>        <span class="hljs-keyword">long</span> b = <span class="hljs-number">100L</span>;<br>        b = a;<br>    &#125;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> d = <span class="hljs-string">&#x27;a&#x27;</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public void test3();</span><br><span class="hljs-comment">    descriptor: ()V</span><br><span class="hljs-comment">    flags: ACC_PUBLIC</span><br><span class="hljs-comment">    Code:</span><br><span class="hljs-comment">      stack=2, locals=4, args_size=1</span><br><span class="hljs-comment">         0: iconst_0</span><br><span class="hljs-comment">         1: istore_1</span><br><span class="hljs-comment">         2: ldc2_w        #4                  // long 100l</span><br><span class="hljs-comment">         5: lstore_2</span><br><span class="hljs-comment">         6: iload_1</span><br><span class="hljs-comment">         7: i2l</span><br><span class="hljs-comment">         8: lstore_2</span><br><span class="hljs-comment">         9: iconst_0</span><br><span class="hljs-comment">        10: istore_2</span><br><span class="hljs-comment">        11: bipush        97</span><br><span class="hljs-comment">        13: istore_3</span><br><span class="hljs-comment">        14: return</span><br><span class="hljs-comment">      LineNumberTable:</span><br><span class="hljs-comment">        line 31: 0</span><br><span class="hljs-comment">        line 33: 2</span><br><span class="hljs-comment">        line 34: 6</span><br><span class="hljs-comment">        line 36: 9</span><br><span class="hljs-comment">        line 37: 11</span><br><span class="hljs-comment">        line 38: 14</span><br><span class="hljs-comment">      LocalVariableTable:</span><br><span class="hljs-comment">        Start  Length  Slot  Name   Signature</span><br><span class="hljs-comment">            6       3     2     b   J</span><br><span class="hljs-comment">            0      15     0  this   Lnet/yury/demo/Demo09Method;</span><br><span class="hljs-comment">            2      13     1     a   I</span><br><span class="hljs-comment">           11       4     2     c   I</span><br><span class="hljs-comment">           14       1     3     d   C</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="（3）操作数栈"><a href="#（3）操作数栈" class="headerlink" title="（3）操作数栈"></a>（3）操作数栈</h4><p><font color="Red">操作数栈（operand stack），即在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据的一个临时存储空间，主要用于保存一些指令需要用的临时数据。</font>如指令中的push、store、load等指令，都会对操作数栈进行操作。</p><p>JVM的执行引擎是基于栈的执行引擎，其中这里说的栈，就是操作数栈。</p><p>JVM操作数栈用数组来实现，操作数栈的大小在编译时即确定了，对操作数栈的操作只有入栈和出栈。</p><p>操作数栈中的任何一个元素的都可以是任意类型的java数据类型，只是占用的栈单位不一样：</p><ul><li>32位及以下的类型占用一个栈单位深度，以int类型存放</li><li>64位类型占用两个栈单位深度</li></ul><blockquote><p>指令分析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo10OperandStack</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span> m = <span class="hljs-number">15</span>;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">int</span> k = m + n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: bipush        <span class="hljs-number">15</span><br>         <span class="hljs-number">2</span>: istore_1<br>         <span class="hljs-number">3</span>: bipush        <span class="hljs-number">8</span><br>         <span class="hljs-number">5</span>: istore_2<br>         <span class="hljs-number">6</span>: iload_1<br>         <span class="hljs-number">7</span>: iload_2<br>         <span class="hljs-number">8</span>: iadd<br>         <span class="hljs-number">9</span>: istore_3<br>        <span class="hljs-number">10</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">5</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">6</span>: <span class="hljs-number">3</span><br>        line <span class="hljs-number">7</span>: <span class="hljs-number">6</span><br>        line <span class="hljs-number">8</span>: <span class="hljs-number">10</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">11</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo10OperandStack;<br>            <span class="hljs-number">3</span>       <span class="hljs-number">8</span>     <span class="hljs-number">1</span>     m   B<br>            <span class="hljs-number">6</span>       <span class="hljs-number">5</span>     <span class="hljs-number">2</span>     n   I<br>           <span class="hljs-number">10</span>       <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     k   I<br></code></pre></td></tr></table></figure><p>以上指令是如何一步一步进行的，如下图所示：</p><p><img src="/images/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90.png"></p><p><font color="Red">注意：对于<code>int n = 8;</code>这段代码，虽然指定的是int型，但是数值不超过byte的范围，所以编译后的类型是byte。即并不是我们指定什么类型，它就是什么类型，前端编译器会对我们的代码做优化。</font></p><p>对于有返回值的函数，调用这个函数时，会将函数结果压入栈顶，如下所示。sum方法和上面的method方法的指令，除了ireturn有区别外，其他均无区别。getSum方法的指令中，<font color="Red"><code>aload_0</code>是将this自身对应的引用从局部变量表中复制出来，放入操作数栈中；<code>invokevirtual</code>指令则是取出栈顶元素，以该元素为对象，调用对象中的一个方法，返回的结果会被重新压入栈顶；<code>istore_1</code>则是将栈顶元素出栈，即取出刚才的函数返回值，放入局部变量表中的1号slot槽位。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSum</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = sum();<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">10000</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">byte</span> m = <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">int</span> k = m + n;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSum</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: invokevirtual #<span class="hljs-number">2</span>                  <span class="hljs-comment">// Method sum:()I</span><br>         <span class="hljs-number">4</span>: istore_1<br>         <span class="hljs-number">5</span>: sipush        <span class="hljs-number">10000</span><br>         <span class="hljs-number">8</span>: istore_2<br>         <span class="hljs-number">9</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">11</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">12</span>: <span class="hljs-number">5</span><br>        line <span class="hljs-number">13</span>: <span class="hljs-number">9</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">10</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo10OperandStack;<br>            <span class="hljs-number">5</span>       <span class="hljs-number">5</span>     <span class="hljs-number">1</span>     a   I<br>            <span class="hljs-number">9</span>       <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-function">b   I</span><br><span class="hljs-function"></span><br><span class="hljs-function">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()I<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: bipush        <span class="hljs-number">15</span><br>         <span class="hljs-number">2</span>: istore_1<br>         <span class="hljs-number">3</span>: bipush        <span class="hljs-number">8</span><br>         <span class="hljs-number">5</span>: istore_2<br>         <span class="hljs-number">6</span>: iload_1<br>         <span class="hljs-number">7</span>: iload_2<br>         <span class="hljs-number">8</span>: iadd<br>         <span class="hljs-number">9</span>: istore_3<br>        <span class="hljs-number">10</span>: iload_3<br>        <span class="hljs-number">11</span>: ireturn<br>      LineNumberTable:<br>        line <span class="hljs-number">16</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">17</span>: <span class="hljs-number">3</span><br>        line <span class="hljs-number">18</span>: <span class="hljs-number">6</span><br>        line <span class="hljs-number">19</span>: <span class="hljs-number">10</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">12</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo10OperandStack;<br>            <span class="hljs-number">3</span>       <span class="hljs-number">9</span>     <span class="hljs-number">1</span>     m   B<br>            <span class="hljs-number">6</span>       <span class="hljs-number">6</span>     <span class="hljs-number">2</span>     n   I<br>           <span class="hljs-number">10</span>       <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     k   I<br></code></pre></td></tr></table></figure><blockquote><p>i++与++i的区别</p></blockquote><p>先通过字节码分析，可以发现，<code>n++</code>是先将数据从局部变量表中复制到操作数栈中，再对局部变量表中slot为1的变量的值进行++操作，最后将操作数栈中栈顶元素store到新的局部变量中，而<code>++n</code>是先在局部变量表中slot为1的变量的值进行++操作，再load到操作数栈中，最后store到新的局部变量中。即load和++操作的执行顺序不一样，这就导致n++返回的是n，而++n返回的是(n+1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">int</span> m = n++;<br>    <span class="hljs-keyword">int</span> k = ++n;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: sipush        <span class="hljs-number">1000</span><br>         <span class="hljs-number">3</span>: istore_1<br>         <span class="hljs-number">4</span>: iload_1<br>         <span class="hljs-number">5</span>: iinc          <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>         <span class="hljs-number">8</span>: istore_2<br>         <span class="hljs-number">9</span>: iinc          <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-number">12</span>: iload_1<br>        <span class="hljs-number">13</span>: istore_3<br>        <span class="hljs-number">14</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">23</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">24</span>: <span class="hljs-number">4</span><br>        line <span class="hljs-number">25</span>: <span class="hljs-number">9</span><br>        line <span class="hljs-number">26</span>: <span class="hljs-number">14</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">15</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo10OperandStack;<br>            <span class="hljs-number">4</span>      <span class="hljs-number">11</span>     <span class="hljs-number">1</span>     n   I<br>            <span class="hljs-number">9</span>       <span class="hljs-number">6</span>     <span class="hljs-number">2</span>     m   I<br>           <span class="hljs-number">14</span>       <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     k   I<br></code></pre></td></tr></table></figure><blockquote><p>栈顶缓存技术（top-of-stack caching）</p></blockquote><p>由于JVM是基于栈设计的，因此在不断的执行指令过程中，经常会有入栈出栈的操作，这就意味着存在多次的内存读写操作，会对整体运行速度有所影响。因此HotSpot JVM对此处做了一个缓存，即<font color="Red">将所有栈顶元素缓存到物理CPU寄存器中，依次降低对内存的读写，提高执行效率。</font></p><p>CPU还有一个东西叫高速缓存（一级、二级、三级），这个东西是集成到CPU内和CPU完全独立的一个器件，作为CPU的临时数据缓存区。而CPU寄存器是属于CPU本身的，因此CPU对寄存器的读写速度比对高速缓存的读写速度快得多。这一块是硬件相关的东西，不同架构的硬件设计不一样，可以去学习学习。</p><h4 id="（4）动态链接"><a href="#（4）动态链接" class="headerlink" title="（4）动态链接"></a>（4）动态链接</h4><p>之前说过，每个栈帧都对应一个方法的执行，那么JVM怎么知道这个栈帧是对应的哪个方法呢，这就是通过动态链接来实现的。</p><p>每个栈帧中都包含了一个指向运行时常量池中的该栈帧对应的方法类型的引用，这样字节码文件中的指令就可以支持使用动态链接。</p><p><font color="Red">动态链接（Dynamic Linking），将符号方法引用转换为直接方法引用，加载符号引用对应的类，将对变量的访问转换为这些变量在对应的存储结构中的对应的偏移量。</font></p><p>java代码被编译成字节码指令后，所有的类、变量和方法都保存在运行时常量池中，并都指定了一个通过#开头的独一无二的符号引用作为这个变量或方法的引用。<font color="Red">动态链接就是将这个符号引用转换为直接引用，从而实现方法的调用、类的加载和变量的使用。</font></p><p>比如下面这个类的运行时常量池和test()方法的字节码。运行时常量池中记录了这个类所需要的字节码对象，左边的#加数字即为对应的符号引用，test()方法中的指令需要用到某个对象时，则使用这个引用即可。</p><p>JVM的运行时常量池可以把其他字节码文件中的对象在本字节码文件中设置引用，但动态链接只能链接本字节码文件中运行时常量池中包含的对象，无法直接链接到外部字节码文件的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo11DynamicLinking</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Demo11DynamicLinking().test();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        String test = Demo08Slot.test(<span class="hljs-keyword">null</span>);<br>        Demo10OperandStack demo = <span class="hljs-keyword">new</span> Demo10OperandStack();<br>        demo.test();<br>        test(<span class="hljs-number">10</span>);<br>        System.out.println(test);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java">Constant pool:<br>   #<span class="hljs-number">1</span> = Methodref          #<span class="hljs-number">14.</span>#<span class="hljs-number">36</span>        <span class="hljs-comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   #<span class="hljs-number">2</span> = Class              #<span class="hljs-number">37</span>            <span class="hljs-comment">// net/yury/demo/Demo11DynamicLinking</span><br>   #<span class="hljs-number">3</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">36</span>         <span class="hljs-comment">// net/yury/demo/Demo11DynamicLinking.&quot;&lt;init&gt;&quot;:()V</span><br>   #<span class="hljs-number">4</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">38</span>         <span class="hljs-comment">// net/yury/demo/Demo11DynamicLinking.test:()V</span><br>   #<span class="hljs-number">5</span> = Class              #<span class="hljs-number">39</span>            <span class="hljs-comment">// java/lang/String</span><br>   #<span class="hljs-number">6</span> = String             #<span class="hljs-number">40</span>            <span class="hljs-comment">// 123456</span><br>   #<span class="hljs-number">7</span> = Methodref          #<span class="hljs-number">41.</span>#<span class="hljs-number">42</span>        <span class="hljs-comment">// net/yury/demo/Demo08Slot.test:([Ljava/lang/String;)Ljava/lang/String;</span><br>   #<span class="hljs-number">8</span> = Class              #<span class="hljs-number">43</span>            <span class="hljs-comment">// net/yury/demo/Demo10OperandStack</span><br>   #<span class="hljs-number">9</span> = Methodref          #<span class="hljs-number">8.</span>#<span class="hljs-number">36</span>         <span class="hljs-comment">// net/yury/demo/Demo10OperandStack.&quot;&lt;init&gt;&quot;:()V</span><br>  #<span class="hljs-number">10</span> = Methodref          #<span class="hljs-number">8.</span>#<span class="hljs-number">38</span>         <span class="hljs-comment">// net/yury/demo/Demo10OperandStack.test:()V</span><br>  #<span class="hljs-number">11</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">44</span>         <span class="hljs-comment">// net/yury/demo/Demo11DynamicLinking.test:(I)V</span><br>  #<span class="hljs-number">12</span> = Fieldref           #<span class="hljs-number">45.</span>#<span class="hljs-number">46</span>        <span class="hljs-comment">// java/lang/System.out:Ljava/io/PrintStream;</span><br>  #<span class="hljs-number">13</span> = Methodref          #<span class="hljs-number">47.</span>#<span class="hljs-number">48</span>        <span class="hljs-comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>  #<span class="hljs-number">14</span> = Class              #<span class="hljs-number">49</span>            <span class="hljs-comment">// java/lang/Object</span><br>  #<span class="hljs-number">15</span> = Utf8               &lt;init&gt;<br>  #<span class="hljs-number">16</span> = Utf8               ()V<br>  #<span class="hljs-number">17</span> = Utf8               Code<br>  #<span class="hljs-number">18</span> = Utf8               LineNumberTable<br>  #<span class="hljs-number">19</span> = Utf8               LocalVariableTable<br>  #<span class="hljs-number">20</span> = Utf8               <span class="hljs-keyword">this</span><br>  #<span class="hljs-number">21</span> = Utf8               Lnet/yury/demo/Demo11DynamicLinking;<br>  #<span class="hljs-number">22</span> = Utf8               main<br>  #<span class="hljs-number">23</span> = Utf8               ([Ljava/lang/String;)V<br>  #<span class="hljs-number">24</span> = Utf8               args<br>  #<span class="hljs-number">25</span> = Utf8               [Ljava/lang/String;<br>  #<span class="hljs-number">26</span> = Utf8               test<br>  #<span class="hljs-number">27</span> = Utf8               (I)V<br>  #<span class="hljs-number">28</span> = Utf8               i<br>  #<span class="hljs-number">29</span> = Utf8               I<br>  #<span class="hljs-number">30</span> = Utf8               testString<br>  #<span class="hljs-number">31</span> = Utf8               Ljava/lang/String;<br>  #<span class="hljs-number">32</span> = Utf8               demo<br>  #<span class="hljs-number">33</span> = Utf8               Lnet/yury/demo/Demo10OperandStack;<br>  #<span class="hljs-number">34</span> = Utf8               SourceFile<br>  #<span class="hljs-number">35</span> = Utf8               Demo11DynamicLinking.java<br>  #<span class="hljs-number">36</span> = NameAndType        #<span class="hljs-number">15</span>:#<span class="hljs-number">16</span>        <span class="hljs-comment">// &quot;&lt;init&gt;&quot;:()V</span><br>  #<span class="hljs-number">37</span> = Utf8               net/yury/demo/Demo11DynamicLinking<br>  #<span class="hljs-number">38</span> = NameAndType        #<span class="hljs-number">26</span>:#<span class="hljs-number">16</span>        <span class="hljs-comment">// test:()V</span><br>  #<span class="hljs-number">39</span> = Utf8               java/lang/String<br>  #<span class="hljs-number">40</span> = Utf8               <span class="hljs-number">123456</span><br>  #<span class="hljs-number">41</span> = Class              #<span class="hljs-number">50</span>            <span class="hljs-comment">// net/yury/demo/Demo08Slot</span><br>  #<span class="hljs-number">42</span> = NameAndType        #<span class="hljs-number">26</span>:#<span class="hljs-number">51</span>        <span class="hljs-comment">// test:([Ljava/lang/String;)Ljava/lang/String;</span><br>  #<span class="hljs-number">43</span> = Utf8               net/yury/demo/Demo10OperandStack<br>  #<span class="hljs-number">44</span> = NameAndType        #<span class="hljs-number">26</span>:#<span class="hljs-number">27</span>        <span class="hljs-comment">// test:(I)V</span><br>  #<span class="hljs-number">45</span> = Class              #<span class="hljs-number">52</span>            <span class="hljs-comment">// java/lang/System</span><br>  #<span class="hljs-number">46</span> = NameAndType        #<span class="hljs-number">53</span>:#<span class="hljs-number">54</span>        <span class="hljs-comment">// out:Ljava/io/PrintStream;</span><br>  #<span class="hljs-number">47</span> = Class              #<span class="hljs-number">55</span>            <span class="hljs-comment">// java/io/PrintStream</span><br>  #<span class="hljs-number">48</span> = NameAndType        #<span class="hljs-number">56</span>:#<span class="hljs-number">57</span>        <span class="hljs-comment">// println:(Ljava/lang/String;)V</span><br>  #<span class="hljs-number">49</span> = Utf8               java/lang/Object<br>  #<span class="hljs-number">50</span> = Utf8               net/yury/demo/Demo08Slot<br>  #<span class="hljs-number">51</span> = Utf8               ([Ljava/lang/String;)Ljava/lang/String;<br>  #<span class="hljs-number">52</span> = Utf8               java/lang/System<br>  #<span class="hljs-number">53</span> = Utf8               out<br>  #<span class="hljs-number">54</span> = Utf8               Ljava/io/PrintStream;<br>  #<span class="hljs-number">55</span> = Utf8               java/io/PrintStream<br>  #<span class="hljs-number">56</span> = Utf8               println<br>  #<span class="hljs-number">57</span> = Utf8               (Ljava/lang/String;)<span class="hljs-function">V</span><br><span class="hljs-function"></span><br><span class="hljs-function">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">4</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: iconst_1<br>         <span class="hljs-number">1</span>: anewarray     #<span class="hljs-number">5</span>                  <span class="hljs-comment">// class java/lang/String</span><br>         <span class="hljs-number">4</span>: dup<br>         <span class="hljs-number">5</span>: iconst_0<br>         <span class="hljs-number">6</span>: ldc           #<span class="hljs-number">6</span>                  <span class="hljs-comment">// String 123456</span><br>         <span class="hljs-number">8</span>: aastore<br>         <span class="hljs-number">9</span>: astore_1<br>        <span class="hljs-number">10</span>: aload_1<br>        <span class="hljs-number">11</span>: invokestatic  #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method net/yury/demo/Demo08Slot.test:([Ljava/lang/String;)Ljava/lang/String;</span><br>        <span class="hljs-number">14</span>: astore_2<br>        <span class="hljs-number">15</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">8</span>                  <span class="hljs-comment">// class net/yury/demo/Demo10OperandStack</span><br>        <span class="hljs-number">18</span>: dup<br>        <span class="hljs-number">19</span>: invokespecial #<span class="hljs-number">9</span>                  <span class="hljs-comment">// Method net/yury/demo/Demo10OperandStack.&quot;&lt;init&gt;&quot;:()V</span><br>        <span class="hljs-number">22</span>: astore_3<br>        <span class="hljs-number">23</span>: aload_3<br>        <span class="hljs-number">24</span>: invokevirtual #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method net/yury/demo/Demo10OperandStack.test:()V</span><br>        <span class="hljs-number">27</span>: aload_0<br>        <span class="hljs-number">28</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-number">30</span>: invokevirtual #<span class="hljs-number">11</span>                 <span class="hljs-comment">// Method test:(I)V</span><br>        <span class="hljs-number">33</span>: getstatic     #<span class="hljs-number">12</span>                 <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-number">36</span>: aload_2<br>        <span class="hljs-number">37</span>: invokevirtual #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class="hljs-number">40</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">16</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">17</span>: <span class="hljs-number">10</span><br>        line <span class="hljs-number">18</span>: <span class="hljs-number">15</span><br>        line <span class="hljs-number">19</span>: <span class="hljs-number">23</span><br>        line <span class="hljs-number">20</span>: <span class="hljs-number">27</span><br>        line <span class="hljs-number">21</span>: <span class="hljs-number">33</span><br>        line <span class="hljs-number">22</span>: <span class="hljs-number">40</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">41</span>     <span class="hljs-number">0</span>  <span class="hljs-keyword">this</span>   Lnet/yury/demo/Demo11DynamicLinking;<br>           <span class="hljs-number">10</span>      <span class="hljs-number">31</span>     <span class="hljs-number">1</span> testString   [Ljava/lang/String;<br>           <span class="hljs-number">15</span>      <span class="hljs-number">26</span>     <span class="hljs-number">2</span>  test   Ljava/lang/String;<br>           <span class="hljs-number">23</span>      <span class="hljs-number">18</span>     <span class="hljs-number">3</span>  demo   Lnet/yury/demo/Demo10OperandStack;<br></code></pre></td></tr></table></figure><blockquote><p>早期绑定和晚期绑定</p></blockquote><p><strong>绑定</strong>是一个字段、方法或类在符号引用被转换成直接引用的过程。</p><p><strong>早期绑定</strong>：如果被调用的目标的类型在编译期间就是确定的，且运行期间保持不变，则这个目标的绑定过程叫早期绑定。</p><p><strong>晚期绑定</strong>：如果被调用的目标的类型在编译期间无法确定，只能在运行期间确定，则这个目标的绑定过程叫晚期绑定。</p><p>对于方法而言，有早期绑定和晚期绑定又叫静态链接和动态链接。</p><p><strong>静态链接</strong>：如果被调用的方法类型在编译期间就是确定下来的，并且运行期间保持不变，这种情况下将调用的方法的符号引用转换为直接引用的过程叫静态链接。</p><p><strong>动态链接</strong>：如果被调用的方法类型在编译期间无法确定，只能在运行期间将调用的方法的符号引用转换为直接引用，这个过程叫动态链接。</p><blockquote><p>虚方法和非虚方法</p></blockquote><p><strong>虚方法</strong>：编译期间无法确定的方法叫虚方法；</p><p><strong>非虚方法</strong>：编译期间就可以确定，且运行期间无法修改的方法，叫非需方法。</p><p>虚方法的调用使用在字节码层面会使用invokevirtual和invokeinterface两个指令；而非虚方法的调用在字节码层面使用invokestatic和invokespecial指令。final方法外除外，final方法的调用仍然使用invokevirtual指令。</p><ul><li>invokestatic：调用静态方法</li><li>invokespecial：调用父类方法、私有方法、构造器方法</li><li>invokevirtual：调用其他普通方法或final方法</li><li>invokeinterface：调用接口方法</li><li>invokedynamic：使用函数式接口或lamdba表达式生成一个对象时使用的指令</li></ul><p>不同方法的调用使用的字节码指令如下。值得注意的是，下面这段代码中，Function接口通过lamdba表达式和new的方式使用的底层指令不一样，lamdba使用invokedynamic，而new实际上是生成了一个匿名内部类<code>Demo12DynamicLinking2$1</code>，并初始化这个匿名内部类，因此使用了invokespecial。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo12DynamicLinking2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interface</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123; System.out.println(<span class="hljs-string">&quot;child&quot;</span>); &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span></span>&#123; &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span></span>&#123; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">(Interface demo)</span></span>&#123;<br>        test1();<br>        test2();<br>        test3();<br>        test4();<br>        test5();<br>        test6();<br>        <span class="hljs-keyword">super</span>.test6();<br>        test7();<br>        test8();<br>        demo.test8();<br>        Function&lt;String, String&gt; function1 = s -&gt; &#123; <span class="hljs-keyword">return</span> s; &#125;;<br>        Function&lt;String, String&gt; function2 = <span class="hljs-keyword">new</span> Function&lt;String, String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">apply</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> s;<br>            &#125;<br>        &#125;;<br>        String s1 = function1.apply(<span class="hljs-string">&quot;123&quot;</span>);<br>        String s2 = function2.apply(<span class="hljs-string">&quot;456&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interface</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;parent&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">stack=<span class="hljs-number">3</span>, locals=<span class="hljs-number">6</span>, args_size=<span class="hljs-number">2</span><br>   <span class="hljs-number">0</span>: invokestatic  #<span class="hljs-number">5</span>                  <span class="hljs-comment">// Method test1:()V</span><br>   <span class="hljs-number">3</span>: aload_0<br>   <span class="hljs-number">4</span>: invokespecial #<span class="hljs-number">6</span>                  <span class="hljs-comment">// Method test2:()V</span><br>   <span class="hljs-number">7</span>: aload_0<br>   <span class="hljs-number">8</span>: invokevirtual #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method test3:()V</span><br>  <span class="hljs-number">11</span>: aload_0<br>  <span class="hljs-number">12</span>: invokevirtual #<span class="hljs-number">8</span>                  <span class="hljs-comment">// Method test4:()V</span><br>  <span class="hljs-number">15</span>: aload_0<br>  <span class="hljs-number">16</span>: invokevirtual #<span class="hljs-number">9</span>                  <span class="hljs-comment">// Method test5:()V</span><br>  <span class="hljs-number">19</span>: aload_0<br>  <span class="hljs-number">20</span>: invokevirtual #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method test6:()V</span><br>  <span class="hljs-number">23</span>: aload_0<br>  <span class="hljs-number">24</span>: invokespecial #<span class="hljs-number">11</span>                 <span class="hljs-comment">// Method net/yury/demo/Parent.test6:()V</span><br>  <span class="hljs-number">27</span>: aload_0<br>  <span class="hljs-number">28</span>: invokevirtual #<span class="hljs-number">12</span>                 <span class="hljs-comment">// Method test7:()V</span><br>  <span class="hljs-number">31</span>: aload_0<br>  <span class="hljs-number">32</span>: invokevirtual #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Method test8:()V</span><br>  <span class="hljs-number">35</span>: aload_1<br>  <span class="hljs-number">36</span>: invokeinterface #<span class="hljs-number">14</span>,  <span class="hljs-number">1</span>           <span class="hljs-comment">// InterfaceMethod net/yury/demo/Interface.test8:()V</span><br>  <span class="hljs-number">41</span>: invokedynamic #<span class="hljs-number">15</span>,  <span class="hljs-number">0</span>             <span class="hljs-comment">// InvokeDynamic #0:apply:()Ljava/util/function/Function;</span><br>  <span class="hljs-number">46</span>: astore_2<br>  <span class="hljs-number">47</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">16</span>                 <span class="hljs-comment">// class net/yury/demo/Demo12DynamicLinking2$1</span><br>  <span class="hljs-number">50</span>: dup<br>  <span class="hljs-number">51</span>: aload_0<br>  <span class="hljs-number">52</span>: invokespecial #<span class="hljs-number">17</span>                 <span class="hljs-comment">// Method net/yury/demo/Demo12DynamicLinking2$1.&quot;&lt;init&gt;&quot;:(Lnet/yury/demo/Demo12DynamicLinking2;)V</span><br>  <span class="hljs-number">55</span>: astore_3<br>  <span class="hljs-number">56</span>: aload_2<br>  <span class="hljs-number">57</span>: ldc           #<span class="hljs-number">18</span>                 <span class="hljs-comment">// String 123</span><br>  <span class="hljs-number">59</span>: invokeinterface #<span class="hljs-number">19</span>,  <span class="hljs-number">2</span>           <span class="hljs-comment">// InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;</span><br>  <span class="hljs-number">64</span>: checkcast     #<span class="hljs-number">20</span>                 <span class="hljs-comment">// class java/lang/String</span><br>  <span class="hljs-number">67</span>: astore        <span class="hljs-number">4</span><br>  <span class="hljs-number">69</span>: aload_3<br>  <span class="hljs-number">70</span>: ldc           #<span class="hljs-number">21</span>                 <span class="hljs-comment">// String 456</span><br>  <span class="hljs-number">72</span>: invokeinterface #<span class="hljs-number">19</span>,  <span class="hljs-number">2</span>           <span class="hljs-comment">// InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;</span><br>  <span class="hljs-number">77</span>: checkcast     #<span class="hljs-number">20</span>                 <span class="hljs-comment">// class java/lang/String</span><br>  <span class="hljs-number">80</span>: astore        <span class="hljs-number">5</span><br>  <span class="hljs-number">82</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><blockquote><p>继承和方法重写的本质</p></blockquote><p>java的类可能会有继承关系，而调用一个子类的方法时，JVM怎么知道这个方法是子类重写的方法，还是父类的方法呢。JVM会在编译期做以下操作。</p><ol><li>将该方法所属的对象引用加载到操作数栈（如果调用静态方法则省略这一步）</li><li>找到操作数栈栈顶的第一个元素所执行的对象的实际类型，记作 C</li><li>如果在运行时常量池的类型C中找到参数和返回值类型都和调用的方法相同的方法，则再进行权限校验，如果通过则返回这个方法的直接引用，如果权限校验不通过，则返回java.lang.IllegalAccessError异常；</li><li>如果没找到类型C中没找到这种方法，则按照类继承关系依次往父类执行第3步查找和权限校验。</li><li>如果最终无法正常返回一个方法的直接引用，则抛出异常。</li></ol><p>因此如果子类有这个方法则调用的是子类的方法，如果没有，则调用的是第一个有该方法的父类方法。</p><h4 id="（5）方法返回地址"><a href="#（5）方法返回地址" class="headerlink" title="（5）方法返回地址"></a>（5）方法返回地址</h4><p>正常返回：<font color="Red">方法返回地址存放调用该方法的pc寄存器的值，即返回下一条将要执行的指令的地址。</font></p><p>异常返回：通过异常表来确定，栈帧中一般不保存这部分信息。</p><p>方法返回的本质：</p><ul><li>当前栈帧出栈</li><li>返回到上层方法的局部变量表、操作数栈，将当前方法的返回值压入操作数栈（如果上层方法要使用的话）</li><li>设置pc寄存器的值</li></ul><p>return指令根据返回值类型的不同分为以下几种：</p><ul><li>return：返回void</li><li>ireturn：返回32位的类型，如boolean、byte、short、char、int</li><li>dreturn：返回double</li><li>freturn：返回float</li><li>lreturn：返回long</li><li>areturn：返回引用类型，如所有的类</li></ul><p>异常处理表：</p><p>从<code>from</code>这一行字节码开始，到<code>to</code>这一行字节码，如果出现了<code>type</code>类型，则从<code>target</code>行指令继续执行。如下Exception table所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo09Method</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Demo09Method demo = <span class="hljs-keyword">new</span> Demo09Method();<br>        String s;<br>        <span class="hljs-keyword">try</span>&#123;<br>            s = demo.test1(<span class="hljs-number">100L</span>);<br>            System.out.println(s);<br>        &#125;<span class="hljs-keyword">catch</span> (FileNotFoundException ex)&#123;<br>            System.out.println(Arrays.toString(ex.getStackTrace()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(java.lang.String[])</span></span>;<br>  descriptor: ([Ljava/lang/String;)V<br>  flags: ACC_PUBLIC, ACC_STATIC<br>  Code:<br>    stack=<span class="hljs-number">3</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>       <span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// class net/yury/demo/Demo09Method</span><br>       <span class="hljs-number">3</span>: dup<br>       <span class="hljs-number">4</span>: invokespecial #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method &quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-number">7</span>: astore_1<br>       <span class="hljs-number">8</span>: aload_1<br>       <span class="hljs-number">9</span>: ldc2_w        #<span class="hljs-number">4</span>                  <span class="hljs-comment">// long 100l</span><br>      <span class="hljs-number">12</span>: invokevirtual #<span class="hljs-number">6</span>                  <span class="hljs-comment">// Method test1:(J)Ljava/lang/String;</span><br>      <span class="hljs-number">15</span>: astore_2<br>      <span class="hljs-number">16</span>: getstatic     #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>      <span class="hljs-number">19</span>: aload_2<br>      <span class="hljs-number">20</span>: invokevirtual #<span class="hljs-number">8</span>                  <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>      <span class="hljs-number">23</span>: goto          <span class="hljs-number">40</span><br>      <span class="hljs-number">26</span>: astore_3<br>      <span class="hljs-number">27</span>: getstatic     #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>      <span class="hljs-number">30</span>: aload_3<br>      <span class="hljs-number">31</span>: invokevirtual #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method java/io/FileNotFoundException.getStackTrace:()[Ljava/lang/StackTraceElement;</span><br>      <span class="hljs-number">34</span>: invokestatic  #<span class="hljs-number">11</span>                 <span class="hljs-comment">// Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;</span><br>      <span class="hljs-number">37</span>: invokevirtual #<span class="hljs-number">8</span>                  <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>      <span class="hljs-number">40</span>: <span class="hljs-keyword">return</span><br>    Exception table:<br>       from    to  target type<br>           <span class="hljs-number">8</span>    <span class="hljs-number">23</span>    <span class="hljs-number">26</span>   Class java/io/FileNotFoundException<br>    LineNumberTable:<br>      line <span class="hljs-number">10</span>: <span class="hljs-number">0</span><br>      line <span class="hljs-number">13</span>: <span class="hljs-number">8</span><br>      line <span class="hljs-number">14</span>: <span class="hljs-number">16</span><br>      line <span class="hljs-number">17</span>: <span class="hljs-number">23</span><br>      line <span class="hljs-number">15</span>: <span class="hljs-number">26</span><br>      line <span class="hljs-number">16</span>: <span class="hljs-number">27</span><br>      line <span class="hljs-number">18</span>: <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><h4 id="（6）一些附加信息"><a href="#（6）一些附加信息" class="headerlink" title="（6）一些附加信息"></a>（6）一些附加信息</h4><p>略。</p><h4 id="（7）问题"><a href="#（7）问题" class="headerlink" title="（7）问题"></a>（7）问题</h4><blockquote><p>栈相关的报错有哪些？</p></blockquote><p>stackoverflow，栈溢出，方法调用的次数太多以致于栈耗费的空间超过了我们设置的栈大小，可以通过修改-Xss设置栈大小。</p><p>outofmemory，内存不足，栈空间设置足够大，但是方法调用过多，导致整体内存不足。（OOM很少出现在栈空间发生）</p><blockquote><p>调整栈空间大小，可以保证不出现溢出吗？</p></blockquote><p>不能。若使用固定大小的栈，即使调整了栈空间大小，他也是确定的；而程序方法的调用如在出现递归的情况下，调用次数是不确定的，有可能会出现栈溢出的情况。</p><blockquote><p>分配栈空间内存越大越好吗？</p></blockquote><p>服务器资源是有效的，栈空间内存分配越大，则其他资源（如堆）分配到的空间就受限。应根据服务器和应用程序的实际情况分配。</p><blockquote><p>垃圾回收会设计到栈空间吗？</p></blockquote><p>不会，栈没有垃圾回收。</p><blockquote><p>java对象一定都是在对空间上创建的吗？</p></blockquote><p>不一定，栈也可以创建对象。堆那边再聊。</p><blockquote><p><font color="Red">局部变量是线程安全的吗？</font></p></blockquote><p>若该局部变量是方法内部产生，且方法内部销毁的，则这个局部变量是线程安全的。</p><p>若该局部变量以参数形式传入方法，或者作为返回值返回出去的，则这个局部变量是线程不安全的。</p><p><strong>即只要这个局部变量的生命周期完全在这个方法内，则是线程安全的；否则是线程不安全的。</strong></p><p>一个对象的指针或引用被多个方法或线程使用，即称这个对象出现了<strong>逃逸</strong>（Escape）。全局变量如类属性和私有属性可能会被多个方法或线程使用，这种线程安全问题很常见；而局部变量如果其作用域不仅限于该方法，还被其他方法或线程使用了，即出现了逃逸，则也可能会存在线程安全问题。具体见后面的<strong>逃逸分析</strong>。</p><p>最稳妥的方式是，避免局部变量逃逸到其他方法或线程中，如</p><ul><li>方法参数尽量使用线程安全的对象，或者不可变对象（如String），或者使用私有属性的方式代替传入参数的形式来定义方法。</li><li>避免将局部变量作为方法返回值，或者以一个线程安全的或不可变的对象的形式返回（如返回<code>StringBuilder.ToString()</code>）。</li><li>坚守一个原则：对象的作用域尽量维持在使用它的最小作用域</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.yury.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo13ThreadSafe</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        method2();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>                sb.append(<span class="hljs-string">&#x27;a&#x27;</span>);<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; add(sb)).start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(sb.toString());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(StringBuilder sb)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">10000</span>; i++) &#123;<br>            sb.append(<span class="hljs-string">&#x27;b&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        StringBuilder sb = add2();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>                sb.append(<span class="hljs-string">&#x27;1&#x27;</span>);<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>                sb.append(<span class="hljs-string">&#x27;2&#x27;</span>);<br>            &#125;<br>        &#125;).start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(sb.toString());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StringBuilder <span class="hljs-title">add2</span><span class="hljs-params">()</span></span>&#123;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        sb.append(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-keyword">return</span> sb;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、本地方法栈"><a href="#5、本地方法栈" class="headerlink" title="5、本地方法栈"></a>5、本地方法栈</h3><p><font color="Red">本地方法栈（Nativa Method Stack）用于管理本地方法的调用，本地方法栈也是线程私有的。</font></p><p>本地方法：使用native关键字修饰的方法，由C/C++实现。</p><p>本地方法栈的大小和异常种类和普通的JVM栈是相同的，允许被实现成固定大小或者动态扩展的，溢出和OOM都有可能存在。</p><p>本地方法栈的具体做法就是执行本地方法时，在本地方法栈中压入本地方法，然后让执行引擎从本地方法库中加载这个本地方法，再让本地方法执行，最后本地方法栈栈顶元素出栈。</p><p><strong>本地方法接口</strong>就是本地方法运行时和JVM沟通的接口，<strong>本地方法库</strong>就是java所有本地方法的集合。</p><p><font color="Red">当某个线程调用本地方法时，本地方法执行的权限和JVM有着相同的权限。</font></p><ul><li>本地方法可以通过本地方法接口来访问JMV内部的运行时数据区。</li><li>本地方法可以直接使用本地处理器中的寄存器</li><li>本地方法可以直接从本地内存堆中分配任意数量的内存。</li></ul><p>并不是所有的JVM都支持本地方法，因为JVM规范中并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等，如果JVM产品不打算支持本地方法，那么无需实现本地方法栈也是可以的。</p><p>在HotSpot JVM中，直接将JVM栈和本地方法栈合二为一。</p><h3 id="6、JVM堆"><a href="#6、JVM堆" class="headerlink" title="6、JVM堆"></a>6、JVM堆</h3><ul><li><p>堆是JVM进程私有的，一个JVM进程只有一个堆内存，堆也是JVM内存管理的核心区域。</p></li><li><p>堆内存的大小是可以调节的。</p></li><li><p>JVM规范规定，堆可以处于物理上不连续的内存空间中，但在逻辑上他应该被视为连续的。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JVM版本：HotSpot 1.8&lt;/p&gt;
&lt;p&gt;推荐书籍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《The Java Virtual Machine Specification》（&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/s</summary>
      
    
    
    
    <category term="java" scheme="https://yury757.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>postgresql</title>
    <link href="https://yury757.github.io/database/postgresql/postgresql/"/>
    <id>https://yury757.github.io/database/postgresql/postgresql/</id>
    <published>2021-09-10T16:00:00.000Z</published>
    <updated>2021-10-31T18:45:23.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、postgresql安装部署"><a href="#一、postgresql安装部署" class="headerlink" title="一、postgresql安装部署"></a>一、postgresql安装部署</h2><p>postgresql版本：11.13</p><p>源码下载路径（最好下载源码，自己编译）：<a href="https://www.postgresql.org/ftp/source/v11.13/">PostgreSQL: File Browser</a></p><p>安装过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br>wget https://ftp.postgresql.org/pub/source/v11.13/postgresql-11.13.tar.gz<br>tar -xzf postgresql-11.13.tar.gz<br>cd postgresql-11.13.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>./configure<br><span class="hljs-meta">#</span><span class="bash"> 上面一步可能会出现library not found问题，安装对应的lib即可，经常碰到需要安装以下两个lib：</span><br><span class="hljs-meta">#</span><span class="bash"> sudo apt install libreadline-dev</span><br><span class="hljs-meta">#</span><span class="bash"> sudo apt install zlib1g-dev</span><br>make<br><span class="hljs-meta">#</span><span class="bash"> 上面这一步如果成功后会显示：All of PostgreSQL successfully made. Ready to install.</span><br>sudo make install<br><span class="hljs-meta">#</span><span class="bash"> 上面这一步成功后会显示：Postgresql installation complete，默认安装在/usr/<span class="hljs-built_in">local</span>/pgsql目录下</span><br></code></pre></td></tr></table></figure><p>配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/pgsql<br>sudo mkdir data<br>sudo chown yury /usr/local/pgsql/data # 修改data目录的所有者为yury，或者你自己新建的postgresql用户<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建环境变量，将以下两行写入/etc/profile文件中</span><br>export PGHOME=/usr/local/pgsql<br>export PGDATA=/usr/local/pgsql/data<br>export PATH=$&#123;PATH&#125;:$&#123;PG_HOME&#125;/bin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重新加载环境变量</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><p>初始化数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/pgsql<br>bin/initdb<br><span class="hljs-meta">#</span><span class="bash"> 出现以下输出时，说明初始化成功</span><br><span class="hljs-meta">#</span><span class="bash"> Success. You can now start the database server using:</span><br><span class="hljs-meta">#</span><span class="bash">     bin/pg_ctl -D /usr/<span class="hljs-built_in">local</span>/pgsql/data -l logfile start</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动数据库</span><br>bin/pg_ctl start<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建一个postgres用户</span><br>bin/createuser postgres<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以postgres用户登录</span><br>bin/psql postgres<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改当前用户（postgres）的密码</span><br>\password<br></code></pre></td></tr></table></figure><p>配置网络以便其他客户端可以连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi bin/pg_hba.conf<br><span class="hljs-meta">#</span><span class="bash"> 修改下面这一行为第二行的值</span><br><span class="hljs-meta">#</span><span class="bash"> host    all    127.0.0.1/32    trust</span><br><span class="hljs-meta">#</span><span class="bash"> host    all    0.0.0.0/0       trust</span><br><br>vi bin/postgresql.conf<br><span class="hljs-meta">#</span><span class="bash"> 修改下面这一行为第二行的值，并且取消注释这个配置</span><br><span class="hljs-meta">#</span><span class="bash"> listen_addresses = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span></span><br><span class="hljs-meta">#</span><span class="bash"> listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span></span><br><br>bin/pg_ctl restart # 重启服务<br></code></pre></td></tr></table></figure><h2 id="二、MySQL安装部署"><a href="#二、MySQL安装部署" class="headerlink" title="二、MySQL安装部署"></a>二、MySQL安装部署</h2><p>MySQL版本：8.0.25</p><p>使用apt安装</p><p>数据库目录：/var/lib/mysql/</p><p>配置文件：/usr/share/mysql-8.0（命令及配置文件），/etc/mysql（如my.cnf）</p><p>相关命令：/usr/bin（mysqladmin、mysqldump等命令）和/usr/sbin</p><p>启动脚本：/etc/init.d/mysql（启动脚本文件mysql的目录）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、postgresql安装部署&quot;&gt;&lt;a href=&quot;#一、postgresql安装部署&quot; class=&quot;headerlink&quot; title=&quot;一、postgresql安装部署&quot;&gt;&lt;/a&gt;一、postgresql安装部署&lt;/h2&gt;&lt;p&gt;postgresql版本：1</summary>
      
    
    
    
    <category term="postgresql" scheme="https://yury757.github.io/categories/postgresql/"/>
    
    
  </entry>
  
  <entry>
    <title>zookeeper-study</title>
    <link href="https://yury757.github.io/bigdata/zookeeper/zookeeper-study/"/>
    <id>https://yury757.github.io/bigdata/zookeeper/zookeeper-study/</id>
    <published>2021-08-27T16:00:00.000Z</published>
    <updated>2021-10-31T18:41:55.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Zookeeper介绍"><a href="#一、Zookeeper介绍" class="headerlink" title="一、Zookeeper介绍"></a>一、Zookeeper介绍</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>zookeeper是一个分布式数据一致性解决方案，致力于为分布式应用提供一个高性能、高可能，且具有严格顺序访问控制能力的分布式<strong>协调</strong>存储服务。提供的功能包括：<strong>配置维护、域名服务、分布式同步、组服务</strong>等。</p><p>zookeeper是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。</p><h2 id="二、下载安装"><a href="#二、下载安装" class="headerlink" title="二、下载安装"></a>二、下载安装</h2><p>地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/">Index of /apache/zookeeper (tsinghua.edu.cn)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/yury<br>wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar xzvf apache-zookeeper-3.6.3-bin.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将文件夹重命名为zookeeper-3.6.3-bin方便使用</span><br>mkdir zookeeper-3.6.3-bin/<br>mv -f apache-zookeeper-3.6.3-bin/* zookeeper-3.6.3-bin/<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用这个目录作为根目录</span><br>cd zookeeper-3.6.3-bin<br></code></pre></td></tr></table></figure><p>将以下配置写入一个新建的文件：<code>vi /conf/zoo.cfg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ZooKeeper使用的基本时间单位（毫秒）。 它用于做心跳，并且最小会话超时将是tickTime的两倍。</span><br>tickTime=2000<br><span class="hljs-meta">#</span><span class="bash"> 除非另有说明，否则存储内存中数据库快照的位置以及数据库更新的事务日志</span><br>dataDir=/home/yury/zookeeper-3.6.3-bin/zookeeper-data<br><span class="hljs-meta">#</span><span class="bash"> 客户端访问的端口</span><br>clientPort=2181<br></code></pre></td></tr></table></figure><h2 id="三、单机模式"><a href="#三、单机模式" class="headerlink" title="三、单机模式"></a>三、单机模式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动</span><br>bin/zkServer.sh start<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看运行状态</span><br>bin/zkServer.sh status<br><span class="hljs-meta">#</span><span class="bash"> ZooKeeper JMX enabled by default</span><br><span class="hljs-meta">#</span><span class="bash"> Using config: /home/yury/zookeeper-3.6.3-bin/bin/../conf/zoo.cfg</span><br><span class="hljs-meta">#</span><span class="bash"> Client port found: 2181. Client address: localhost. Client SSL: <span class="hljs-literal">false</span>.</span><br><span class="hljs-meta">#</span><span class="bash"> Mode: standalone</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用命令行连接到服务器</span><br>bin/zkCli.sh -server localhost:2181<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> jps命令，需要手动安装jps</span><br>16722 Jps<br>16365 QuorumPeerMain<br></code></pre></td></tr></table></figure><h2 id="四、分布式模式"><a href="#四、分布式模式" class="headerlink" title="四、分布式模式"></a>四、分布式模式</h2><p>官方文档建议使用奇数个服务器。 如果只有两台服务器，那么您将处于一种情况，如果其中一台服务器发生故障，则没有足够的计算机构成多数仲裁。由于存在两个单点故障，因此两个服务器本来就不如单个服务器稳定。因此我们创建3台服务器。</p><p>修改之前创建的那个配置文件，新增以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> initLimit is timeouts ZooKeeper uses to <span class="hljs-built_in">limit</span> the length of time the ZooKeeper servers <span class="hljs-keyword">in</span> quorum have to connect to a leader.</span><br>initLimit=5<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> syncLimit limits how far out of date a server can be from a leader</span><br><span class="hljs-meta">#</span><span class="bash"> 这几个时间都是以上面那个tickTime为单位时间</span><br>syncLimit=2<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> server.N是指第N台服务器</span><br><span class="hljs-meta">#</span><span class="bash"> A=B:C:D，其中B位置是ip，或者ip的别名，在hosts中可以为ip设置别名解析</span><br><span class="hljs-meta">#</span><span class="bash"> 服务器使用前一个端口连接到其他服务器。ZooKeeper服务器使用此端口将follower连接到leader。当出现新的leader时，follower使用此端口打开与leader的TCP连接。由于leader选举时默认使用TCP，因此我们当前需要另一个端口来进行leader选举。这是配置中的第二个端口。</span><br>server.1=192.168.0.201:2888:3888<br>server.2=192.168.0.202:2888:3888<br>server.3=192.168.0.203:2888:3888<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将配置文件拷贝到其他服务器</span><br>scp ./conf/* yury@192.168.141.142:/home/yury/zookeeper-3.6.3-bin/conf/<br>scp ./conf/* yury@192.168.141.143:/home/yury/zookeeper-3.6.3-bin/conf/<br></code></pre></td></tr></table></figure><p><font color="Red">注意：最后还要在上面的<code>dataDir</code>目录下新建一个<code>myid</code>的文件，写入本台服务器的数字id，如第2台服务器，只需要放一个数字2进去即可。</font></p><p>启动之后查看服务器状态，结果如下，其中141和142服务器的mode为follower，而143服务器的mode为leader，这是由分布式系统投票决定的，不是我们定义的。    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZooKeeper JMX enabled by default<br>Using config: /home/yury/zookeeper-3.6.3-bin/bin/../conf/zoo.cfg<br>Client port found: 2181. Client address: localhost. Client SSL: false.<br>Mode: follower<br></code></pre></td></tr></table></figure><p>搭好了之后，像上面一样用zkCli.sh命令连接随意连接一台服务器，创建节点，修改节点，会发现，三台服务器均会做相应修改。</p><h2 id="五、使用"><a href="#五、使用" class="headerlink" title="五、使用"></a>五、使用</h2><p>zkServer.sh脚本的功能如下</p><p>Usage: bin/zkServer.sh [–config &lt;conf-dir&gt;] {start|start-foreground|stop|version|restart|status|print-cmd}</p><h3 id="1、zkCli-sh命令"><a href="#1、zkCli-sh命令" class="headerlink" title="1、zkCli.sh命令"></a>1、zkCli.sh命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>help</td><td>帮助</td></tr><tr><td>ls /path</td><td>/path为节点路径，如：ls /zookeeper<br>-w 注册监听子节点路径变化，如果其他客户端修改该节点的值，或删除该节点，则可以收到通知。<font color="Red">但是有一个缺陷，这个监听只能监控到一次变化， 如果还需要继续监控，需要继续注册。</font></td></tr><tr><td>create /path [value]</td><td>创建节点，如：create /zktest mydata</td></tr><tr><td>get /path</td><td>获取节点的值，如：get /zktest<br>-w 注册监听节点的变化，监听效果同上<br>-s 获取节点信息</td></tr><tr><td>set /path value</td><td>设置节点的值，如：set /zktest junk</td></tr><tr><td>delete /path</td><td>删除节点（如果该节点下面非空，即有子节点，则无法删除），如：delete /zktest</td></tr><tr><td>deleteall /path</td><td>递归删除节点（会删除所有子节点）</td></tr><tr><td>quit</td><td>退出</td></tr></tbody></table><h3 id="2、节点类型"><a href="#2、节点类型" class="headerlink" title="2、节点类型"></a>2、节点类型</h3><p>持久、短暂、有序号、无序号</p><p>待完善。</p><h3 id="3、API使用"><a href="#3、API使用" class="headerlink" title="3、API使用"></a>3、API使用</h3><h2 id="六、分布式理论"><a href="#六、分布式理论" class="headerlink" title="六、分布式理论"></a>六、分布式理论</h2><h3 id="1、CAP理论"><a href="#1、CAP理论" class="headerlink" title="1、CAP理论"></a>1、CAP理论</h3><p>CAP 理论指出对于一个分布式计算系统来说，不可能同时满足以下三点：</p><ul><li><p><strong>一致性（Consistency）</strong>：在分布式环境中，一致性是指数据在多个副本之间是否能够保持一致的特性，等同于所有节点访问同一份最新的数据副本。在一致性的需求下，当一个系统在数据一致的状态下执行更新操作后，应该保证系统的数据仍然处于一致的状态。</p></li><li><p><strong>可用性（Availability）</strong>：每次请求都能获取到正确的响应，但是不保证获取的数据为最新数据。</p></li><li><p><strong>分区容错性（Partition Tolerance）</strong>：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。</p></li></ul><p><img src="/images/CAP%E7%90%86%E8%AE%BA.png"></p><p>一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p><p>在这三个基本需求中，最多只能同时满足其中的两项，P 是必须的，因此只能在 CP 和 AP 中选择，zookeeper 保证的是 CP，对比 spring cloud 系统中的注册中心 eruka 实现的是 AP。</p><h3 id="2、BASE理论"><a href="#2、BASE理论" class="headerlink" title="2、BASE理论"></a>2、BASE理论</h3><p>BASE是Basically Available（基本可用）、Soft-state（软状态）和Eventually Consistent（最终一致性）三个短语的缩写。</p><ul><li><strong>基本可用：</strong>在分布式系统出现故障，允许损失部分可用性（服务降级、页面降级）。</li><li><strong>软状态：</strong>允许分布式系统出现中间状态。而且中间状态不影响系统的可用性。这里的中间状态是指不同的 data replication（数据备份节点）之间的数据更新可以出现延时的最终一致性。</li><li><strong>最终一致性：</strong>data replications 经过一段时间达到一致性。</li></ul><p>BASE 理论是对 CAP 中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。</p><p>五、分布式一致性</p><p><img src="/images/%E4%B8%80%E8%87%B4%E6%80%A7.png"></p><p>1、强一致性：用户更新了value后，服务器先把数据同步到其他服务器，再将“更新成功”的消息返回给用户，即这两个操作是同步的，也可以说<strong>服务器的主从复制是同步的</strong>，则用户不管读那台服务器都是更新后的值。</p><p>2、弱一致性：用户更新了value后，服务器把数据同步到其他服务器和将“更新成功”的消息返回给用户这两个操作是异步的，也可以说<strong>服务器的主从复制是异步的</strong>，因此用户读取时可能会读到旧的数据。</p><p>3、半同步：保证一台从服务器是同步的，其他从服务器则是异步的，如果同步的从服务器出现问题，则让另外一台异步服务器来做同步。即始终保证有两个节点拥有完整数据。</p><p>3、最终一致性，最终一致性其实还是弱一致性，只不过用户看到的旧数据只是一个暂时的状态，如果等待一段时间，从服务器最终会和主服务器数据一致，这就是最终一致性。数据同步的速度受很多因素影响，一般都比较快，即这个等待延迟一般很短。</p><h2 id="七、选举机制"><a href="#七、选举机制" class="headerlink" title="七、选举机制"></a>七、选举机制</h2><p>1、半数机制。集群中半数以上机器存活，集群可用。所以zookeeper适合安装奇数台服务器。</p><p>2、zookeeper虽然在配置文件中没有指定leader和follower，但是在集群启动后，zookeeper会通过内部选举产生临时的leader和follower。</p><h2 id="八、监听器"><a href="#八、监听器" class="headerlink" title="八、监听器"></a>八、监听器</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Zookeeper介绍&quot;&gt;&lt;a href=&quot;#一、Zookeeper介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Zookeeper介绍&quot;&gt;&lt;/a&gt;一、Zookeeper介绍&lt;/h2&gt;&lt;h3 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot;</summary>
      
    
    
    
    <category term="bigdata" scheme="https://yury757.github.io/categories/bigdata/"/>
    
    <category term="zookeeper" scheme="https://yury757.github.io/categories/bigdata/zookeeper/"/>
    
    
  </entry>
  
  <entry>
    <title>SSM-Build</title>
    <link href="https://yury757.github.io/java/SSM-Build/SSM-Build/"/>
    <id>https://yury757.github.io/java/SSM-Build/SSM-Build/</id>
    <published>2021-08-23T16:00:00.000Z</published>
    <updated>2021-08-24T09:04:06.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h2><p>1、web.xml中配置DispatcherServlet时的初始化参数要连接所有的spring配置文件。先当与配置文件从web.xml是一个顶点，然后依次往下细分。</p><p>2、排错方法：</p><ul><li>使用IDEA查看bean和MVC的细节</li><li>Junit单元测试</li></ul><p>3、即使类上面加了<code>@RestController</code>，springmvc不会自动帮你把对象转字符串再返回给前端，这时若方法返回的是对象或List接口或其他则会报错<code>No converter found for return value of type: class java.util.ArrayList</code>。若导入了<code>jackson-databind</code>包，则会自动帮你把对象或列表转字符串，就可以直接返回一个对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">a2</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;yury757&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;name2&quot;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&quot;女&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;name3&quot;</span>, <span class="hljs-number">48</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>    <span class="hljs-keyword">return</span> userList;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SSM框架整合&quot;&gt;&lt;a href=&quot;#SSM框架整合&quot; class=&quot;headerlink&quot; title=&quot;SSM框架整合&quot;&gt;&lt;/a&gt;SSM框架整合&lt;/h2&gt;&lt;p&gt;1、web.xml中配置DispatcherServlet时的初始化参数要连接所有的spring配置</summary>
      
    
    
    
    <category term="java" scheme="https://yury757.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yury757.github.io/tags/java/"/>
    
    <category term="spring" scheme="https://yury757.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Java_NIO-study</title>
    <link href="https://yury757.github.io/java/java_NIO/Java_NIO-study/"/>
    <id>https://yury757.github.io/java/java_NIO/Java_NIO-study/</id>
    <published>2021-08-23T16:00:00.000Z</published>
    <updated>2021-08-28T05:50:37.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、NIO和IO的区别"><a href="#一、NIO和IO的区别" class="headerlink" title="一、NIO和IO的区别"></a>一、NIO和IO的区别</h2><ul><li><p>传统IO面向流，而NIO面向管道（channel）和缓冲区（buffer）。传统IO只能单向传输数据，而NIO可以双向传输数据。传统IO就像单向水管，而NIO中channel像列车轨道，buffer就像火车，可以双向传输数据。</p></li><li><p>传统IO是阻塞（blocking）的，而NIO就是非阻塞（Non blocking）的。</p></li><li><p>NIO多了一个选择器（Selector），是针对网络编程用的。</p></li></ul><h2 id="二、缓冲区（Buffer）"><a href="#二、缓冲区（Buffer）" class="headerlink" title="二、缓冲区（Buffer）"></a>二、缓冲区（Buffer）</h2><p>缓冲区（Buffer）是基于数组来做管理的，负责存取数据。java NIO有七种xxxBuffer类，都继承了Buffer类，即八种基本数据类型中，除了boolean以外都提供了对应的xxxBuffer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ByteBuffer<br>CharBuffer<br>ShortBuffer<br>IntBuffer<br>LongBuffer<br>FloatBuffer<br>DoubleBuffer<br></code></pre></td></tr></table></figure><p>每种xxxBuffer类还不是最终实现类，最终的实现类有两种，以下以ByteBuffer为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 属于下面说的直接缓冲区，不懂操作系统的人最好不要使用，有风险</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DirectByteBufferR</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DirectByteBuffer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DirectBuffer</span></span>&#123;&#125;<br><br><span class="hljs-comment">// 常用这个实现类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeapByteBuffer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ByteBuffer</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="1、四个核心属性"><a href="#1、四个核心属性" class="headerlink" title="1、四个核心属性"></a>1、四个核心属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 容量，缓冲区总的最大容量</span><br><span class="hljs-keyword">int</span> capacity;<br><br><span class="hljs-comment">// 最大可读写的容量</span><br><span class="hljs-keyword">int</span> limit;<br><br><span class="hljs-comment">// 位置，表示缓冲区中正在操作的数据的下标。当position&lt;limit，可以做写入操作，当position=limit时，写入操作会报错。</span><br><span class="hljs-keyword">int</span> position;<br><br><span class="hljs-comment">// 标记位置，默认为-1</span><br><span class="hljs-keyword">int</span> mark = -<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// mark &lt; position &lt; limit &lt; capacity</span><br></code></pre></td></tr></table></figure><h3 id="2、主要方法"><a href="#2、主要方法" class="headerlink" title="2、主要方法"></a>2、主要方法</h3><p>下面以ByteBuffer为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分配缓冲区</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteBuffer <span class="hljs-title">allocate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span></span>;<br><br><span class="hljs-comment">// 存入数据到缓冲区中</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> ByteBuffer <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">byte</span> b)</span></span>;<br><br><span class="hljs-comment">// 读取数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">byte</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>;<br><br><span class="hljs-comment">// 将缓冲区的数据读取到另外一个数组中</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ByteBuffer <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] dst, <span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> length)</span></span>;<br><br><span class="hljs-comment">// 切换到读取数据的模式。将limit的值置为当前position的值，再把position归0</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Buffer <span class="hljs-title">flip</span><span class="hljs-params">()</span> </span>&#123;<br>        limit = position;<br>        position = <span class="hljs-number">0</span>;<br>        mark = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// 恢复到初始状态，注意数据还在，只是被遗忘了</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Buffer <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        position = <span class="hljs-number">0</span>;<br>        limit = capacity;<br>        mark = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// 将position恢复到上一次mark标记的位置</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Buffer <span class="hljs-title">reset</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = mark;<br>        <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidMarkException();<br>        position = m;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">注意：<code>public ByteBufferget(byte[] dst, int offset, int length)</code>方法参数中的offset和length不是针对源buffer，而是针对新数组dst的！！</font></p><h3 id="3、非直接缓冲区"><a href="#3、非直接缓冲区" class="headerlink" title="3、非直接缓冲区"></a>3、非直接缓冲区</h3><p><img src="/images/%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png"></p><h3 id="4、直接缓冲区"><a href="#4、直接缓冲区" class="headerlink" title="4、直接缓冲区"></a>4、直接缓冲区</h3><p><img src="/images/%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png"></p><p><strong>优点</strong>：效率更高！</p><p><strong>缺点：</strong>消耗资源大，数据写入到物理内存中后不受java控制，垃圾回收也有一定的问题。</p><p><img src="/images/%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA%E5%92%8C%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png"></p><h2 id="三、通道（Channel）"><a href="#三、通道（Channel）" class="headerlink" title="三、通道（Channel）"></a>三、通道（Channel）</h2><p>之前进行IO操作，是通过CPU授权给DMA（Direct Memory Access）总线，然后在DMA总线的管理下进行IO操作。而Channel则是一种独立的专门处理IO操作的特殊的（协）处理器，具有自己的IO指令，进行IO操作时不需要CPU授权。</p><p><img src="/images/%E9%80%9A%E9%81%93.png"></p><h3 id="1、接口和实现类"><a href="#1、接口和实现类" class="headerlink" title="1、接口和实现类"></a>1、接口和实现类</h3><p>接口：</p><p>java.nio.Channels.Channel</p><p>实现类：</p><ul><li>FileChannel：本地数据IO</li><li>SocketChannel：TCP连接用</li><li>ServerSocketChannel：TCP连接用</li><li>DatagramChannel：UDP连接用</li></ul><h3 id="2、获取通道的三种方式"><a href="#2、获取通道的三种方式" class="headerlink" title="2、获取通道的三种方式"></a>2、获取通道的三种方式</h3><h4 id="（1）各个支持通道的IO类提供了相应的getChannel方法"><a href="#（1）各个支持通道的IO类提供了相应的getChannel方法" class="headerlink" title="（1）各个支持通道的IO类提供了相应的getChannel方法"></a>（1）各个支持通道的IO类提供了相应的getChannel方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span>(<span class="hljs-comment">// 获取流</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(filename1);<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(filename2);<br><br>        <span class="hljs-comment">// 获取对应的通道</span><br>        FileChannel fisChannel = fis.getChannel();<br>        FileChannel fosChannel = fos.getChannel();)<br>    &#123;<br>        <span class="hljs-comment">// 通过非直接缓冲区方式</span><br>        ByteBuffer buffer = ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br><br>        <span class="hljs-comment">// 将源数据通道的数据写入缓冲区</span><br>        <span class="hljs-keyword">while</span> (fisChannel.read(buffer) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 切换成读取模式</span><br>            buffer.flip();<br><br>            <span class="hljs-comment">// 读取缓冲区中的数据，写入目标数据通道</span><br>            fosChannel.write(buffer);<br><br>            <span class="hljs-comment">// 清空缓冲区</span><br>            buffer.clear();<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>        ex.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-comment">// 使用try()&#123;&#125;的方式就可以不用关闭，否则就要关闭所有的流和通道</span><br>    <span class="hljs-comment">//        fosChannel.close();</span><br>    <span class="hljs-comment">//        fisChannel.close();</span><br>    <span class="hljs-comment">//        fis.close();</span><br>    <span class="hljs-comment">//        fos.close();</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）使用open函数"><a href="#（2）使用open函数" class="headerlink" title="（2）使用open函数"></a>（2）使用open函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span> </span>&#123;<br>    Date startTime = <span class="hljs-keyword">new</span> Date();<br>    <span class="hljs-comment">// 通过open的方式获取通道</span><br>    <span class="hljs-comment">// CREATE_NEW：当文件存在时会报错</span><br>    <span class="hljs-comment">// CREATE：当文件存在时，会在原文件上从头开始覆盖写入。</span><br>    <span class="hljs-comment">// 但是很奇怪，当使用CREATE和直接缓冲区结合的方式时，当source文件的字节数小于destination文件的字节数时，并不会发生写入操作。</span><br>    <span class="hljs-comment">// 即一般使用CREATE_NEW就行</span><br>    <span class="hljs-keyword">try</span>(FileChannel fisChannel = FileChannel.open(Paths.get(filename1), StandardOpenOption.READ);<br>        FileChannel fosChannel = FileChannel.open(Paths.get(filename2), StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.CREATE_NEW))<br>    &#123;<br><br>        <span class="hljs-comment">// 使用非直接缓冲区</span><br>        ByteBuffer buffer = ByteBuffer.allocate(<span class="hljs-number">8</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>        <span class="hljs-keyword">while</span> (fisChannel.read(buffer) != -<span class="hljs-number">1</span>)&#123;<br>            buffer.flip();<br>            fosChannel.write(buffer);<br>            buffer.clear();<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            // 通过直接缓冲区方式</span><br><span class="hljs-comment">            MappedByteBuffer inMappedBuffer = fisChannel.map(FileChannel.MapMode.READ_ONLY, 0, fisChannel.size());</span><br><span class="hljs-comment">            MappedByteBuffer outMappedBuffer = fosChannel.map(FileChannel.MapMode.READ_WRITE, 0, fisChannel.size());</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            // 对直接缓冲区中的数据进行读写，因此省略了从OS地址空间到JVM地址空间的copy操作</span><br><span class="hljs-comment">            // 使用内存映射文件时，就是将一个硬盘上的文件通过通道映射到物理内存的缓冲区中，当缓冲区有put操作，则会直接将对应的数据写入硬盘</span><br><span class="hljs-comment">            byte[] dst = new byte[inMappedBuffer.limit()];</span><br><span class="hljs-comment">            inMappedBuffer.get(dst);</span><br><span class="hljs-comment">            outMappedBuffer.put(dst);</span><br><span class="hljs-comment"> */</span><br><br>        <span class="hljs-comment">// 关闭通道，同样如果使用了try()&#123;&#125;则不用关闭</span><br>        <span class="hljs-comment">//            fisChannel.close();</span><br>        <span class="hljs-comment">//            fosChannel.close();</span><br><br>    &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>        ex.printStackTrace();<br>    &#125;<br>    Date endTime = <span class="hljs-keyword">new</span> Date();<br>    System.out.println(<span class="hljs-string">&quot;time: &quot;</span> + (endTime.getTime() - startTime.getTime()) / <span class="hljs-number">1000</span> + <span class="hljs-string">&quot;秒&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">注意！！使用Channel.transferTo方法时，一次传输最大传输支持2G，如果文件超过2G，则要断点传输！如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test04</span><span class="hljs-params">()</span></span>&#123;<br>    Date startTime = <span class="hljs-keyword">new</span> Date();<br>    <span class="hljs-keyword">try</span>(FileChannel fisChannel = FileChannel.open(Paths.get(filename1), StandardOpenOption.READ);<br>        FileChannel fosChannel = FileChannel.open(Paths.get(filename2), StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.CREATE_NEW))<br>    &#123;<br>        <span class="hljs-comment">// 通过transferTo，也是通过直接缓冲区的方式</span><br>        <span class="hljs-comment">// transferTo一次传输最大2G，因此无论文件大小的化，最好使用以下方式</span><br>        <span class="hljs-keyword">long</span> position = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">long</span> len = fisChannel.size();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">0</span> &lt; len)&#123;<br>            <span class="hljs-keyword">long</span> l = fisChannel.transferTo(position, len, fosChannel);<br>            <span class="hljs-keyword">if</span> (l &gt; <span class="hljs-number">0</span>)&#123;<br>                position = l;<br>                len -= l;<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>        ex.printStackTrace();<br>    &#125;<br>    Date endTime = <span class="hljs-keyword">new</span> Date();<br>    System.out.println(<span class="hljs-string">&quot;time: &quot;</span> + (endTime.getTime() - startTime.getTime()) / <span class="hljs-number">1000</span> + <span class="hljs-string">&quot;秒&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）通过Files创建"><a href="#（3）通过Files创建" class="headerlink" title="（3）通过Files创建"></a>（3）通过Files创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Files.newByteChannel();<br></code></pre></td></tr></table></figure><h3 id="3、聚集和分散"><a href="#3、聚集和分散" class="headerlink" title="3、聚集和分散"></a>3、聚集和分散</h3><p>分散读取（Scattering Reads）：读取文件时按顺序填入多个缓冲区中，前面的缓冲区填满了，再填后面的缓冲区</p><p>聚集写入（Gathering Writes）：将多个缓冲区中的数据按顺序写入到通道中</p><p>即就是将channel写入一个bytebuffer数组中，或者从一个bytebuffer数组中读取数据到channel。</p><p><img src="/images/%E8%81%9A%E9%9B%86%E5%92%8C%E5%88%86%E6%95%A3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test05</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">try</span>(RandomAccessFile raf = <span class="hljs-keyword">new</span> RandomAccessFile(filename1, <span class="hljs-string">&quot;r&quot;</span>);<br>        FileChannel channel = raf.getChannel();<br>        RandomAccessFile raf2 = <span class="hljs-keyword">new</span> RandomAccessFile(filename2, <span class="hljs-string">&quot;rw&quot;</span>);<br>        FileChannel channel2 = raf2.getChannel();<br>        )<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;=======分散读取======&quot;</span>);<br>        ByteBuffer buffer1 = ByteBuffer.allocate(<span class="hljs-number">10</span>);<br>        ByteBuffer buffer2 = ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br>        <span class="hljs-comment">// 写入缓冲区</span><br>        ByteBuffer[] buffers = &#123;buffer1, buffer2&#125;;<br>        channel.read(buffers);<br>        <span class="hljs-comment">// 将缓冲区切换成读取模式</span><br>        <span class="hljs-keyword">for</span> (ByteBuffer buffer : buffers) &#123;<br>            buffer.flip();<br>        &#125;<br>        <span class="hljs-comment">// 将缓冲区中的内容打印出来</span><br>        System.out.println(<span class="hljs-keyword">new</span> String(buffers[<span class="hljs-number">0</span>].array(), <span class="hljs-number">0</span>, buffers[<span class="hljs-number">0</span>].limit()));<br>        System.out.println(<span class="hljs-string">&quot;=============&quot;</span>);<br>        System.out.println(<span class="hljs-keyword">new</span> String(buffers[<span class="hljs-number">1</span>].array(), <span class="hljs-number">0</span>, buffers[<span class="hljs-number">1</span>].limit()));<br><br>        System.out.println(<span class="hljs-string">&quot;=======聚集写入======&quot;</span>);<br>        channel2.write(buffers);<br>    &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>        ex.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、字符集（Charset）"><a href="#四、字符集（Charset）" class="headerlink" title="四、字符集（Charset）"></a>四、字符集（Charset）</h2><p>编码：字符串 =&gt; 字节数组</p><p>解码：字节数组 =&gt; 字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">final</span> SortedMap&lt;String, Charset&gt; stringCharsetSortedMap = Charset.availableCharsets();<br>    stringCharsetSortedMap.forEach((key, value) -&gt; &#123;<br>        System.out.println(key.getClass().getName());<br>        System.out.println(value.getClass().getName());<br>        System.out.println(key + <span class="hljs-string">&quot;: &quot;</span> + value);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>获取一个字符集的类，并得到他们的编码器和解码器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Charset gbk = Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>);<br>CharsetEncoder charsetEncoder = gbk.newEncoder();<br>CharsetDecoder charsetDecoder = gbk.newDecoder();<br></code></pre></td></tr></table></figure><p>encode方法得到一个ByteBuffer，而decode方法得到一个CharBuffer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-keyword">final</span> Charset gbk = Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>);<br>    <span class="hljs-keyword">final</span> CharsetEncoder charsetEncoder = gbk.newEncoder();<br>    <span class="hljs-keyword">final</span> CharsetDecoder charsetDecoder = gbk.newDecoder();<br><br>    CharBuffer charBuffer = CharBuffer.allocate(<span class="hljs-number">1024</span>);<br>    charBuffer.put(<span class="hljs-string">&quot;你好，世界！hello, world!!&quot;</span>);<br>    charBuffer.flip();<br><br>    ByteBuffer byteBuffer = charsetEncoder.encode(charBuffer);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; byteBuffer.limit(); i++) &#123;<br>        System.out.print(byteBuffer.get() + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>    byteBuffer.flip();<br><br>    CharBuffer charBuffer2 = charsetDecoder.decode(byteBuffer);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; charBuffer2.limit(); i++) &#123;<br>        System.out.print(charBuffer2.get() + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>    charBuffer2.flip();<br><br>    System.out.println(charBuffer2.toString());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、阻塞和非阻塞（重点！！）"><a href="#五、阻塞和非阻塞（重点！！）" class="headerlink" title="五、阻塞和非阻塞（重点！！）"></a>五、阻塞和非阻塞（重点！！）</h2><p>这里所说的阻塞和非阻塞主要针对网络编程。在客户端连接服务器时，客户端要向服务器发送数据包请求，双方都会打开一个通道，但是当服务器读取一段数据后，不清楚客户端通道中的数据是否读取完，则这个线程会被阻塞。</p><p>而非阻塞网络IO就是在客户端和服务器之间加一个选择器（Selector），所有客户端发送过来的数据包都先通过选择器，由选择器来判断该数据包是否准备完毕，将准备完毕的数据包发送给服务器去处理，而没准备完毕的数据包留在这里。</p><p><img src="/images/%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F.png"></p><p>因此，使用NIO完成网络通信的三个核心：</p><ul><li>Channel，负责连接</li><li>Buffer，负责传输数据</li><li>Selector，是SelectableChannel的多路复用器，用于监控SelectableChannel的IO状况。</li></ul><p>这部分笔者还不是很清楚。</p><h2 id="六、NIO实战项目"><a href="#六、NIO实战项目" class="headerlink" title="六、NIO实战项目"></a>六、NIO实战项目</h2><p>用NIO写一个非阻塞式http服务器：<a href="https://github.com/yury757/httpserver">yury757/httpserver (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、NIO和IO的区别&quot;&gt;&lt;a href=&quot;#一、NIO和IO的区别&quot; class=&quot;headerlink&quot; title=&quot;一、NIO和IO的区别&quot;&gt;&lt;/a&gt;一、NIO和IO的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;传统IO面向流，而NIO面向管道（channel）</summary>
      
    
    
    
    <category term="java" scheme="https://yury757.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yury757.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hbase-study</title>
    <link href="https://yury757.github.io/bigdata/hbase/HBase-study/"/>
    <id>https://yury757.github.io/bigdata/hbase/HBase-study/</id>
    <published>2021-08-23T16:00:00.000Z</published>
    <updated>2021-10-31T18:41:45.121Z</updated>
    
    <content type="html"><![CDATA[<p>Linux：ubuntu18.04.5</p><p>hbase：2.3.5</p><p>官方文档：<a href="http://hbase.apache.org/book.html">Apache HBase ™ Reference Guide</a></p><h2 id="一、HBase介绍"><a href="#一、HBase介绍" class="headerlink" title="一、HBase介绍"></a>一、HBase介绍</h2><h3 id="1、Hadoop的局限性"><a href="#1、Hadoop的局限性" class="headerlink" title="1、Hadoop的局限性"></a>1、Hadoop的局限性</h3><ul><li>hadoop主要是实现批量数据的处理，并通过顺序方式访问数据。比如批量处理一天的数据。</li><li>要查找数据必须搜索整个数据集，即不具备随即读取数据的能力。</li></ul><h3 id="2、HBase简介"><a href="#2、HBase简介" class="headerlink" title="2、HBase简介"></a>2、HBase简介</h3><ul><li>HBase是一个分布式的、<strong>面向列</strong>的开源数据库，该技术来源于Fay Chang所撰写的Google论文《Bigtable：一个结构化数据的分布式存储系统》。</li><li>HBase一开始是Hadoop下的一个子项目，因为也是基于HDFS文件系统的，后成为Apache的顶级项目。</li><li>HBase是Google Bigtable的开源实现，类似Google Bigtable利用GFS作为其文件存储系统，HBase利用<strong>Hadoop HDFS</strong>作为其文件存储系统；Google运行MapReduce来处理Bigtable中的海量数据，HBase同样利用Hadoop MapReduce来处理HBase中的海量数据；Google Bigtable利用 Chubby作为协同服务，HBase利用Zookeeper作为对应。</li><li>HBase是一种NoSQL数据库，仅能通过主键（row key）和主键的range来检索数据，对事务的支持较弱。</li><li><strong>HBase只支持一种数据类型：byte[]</strong></li><li>HBase是稀疏存储的，即为空的字段不占用空间，而比如MySQL的null实际上也会占空间的。</li><li><font color="Red">应用场景：需要存储海量数据，又要快速的写入和查询数据的场景。</font></li></ul><h3 id="3、关系型数据库（RDBMS）和HBase的比较"><a href="#3、关系型数据库（RDBMS）和HBase的比较" class="headerlink" title="3、关系型数据库（RDBMS）和HBase的比较"></a>3、关系型数据库（RDBMS）和HBase的比较</h3><table><thead><tr><th></th><th>关系型数据库（以MySQL为例）</th><th>HBase</th></tr></thead><tbody><tr><td>是否以表的形式存在</td><td>是</td><td>是</td></tr><tr><td>支持的文件系统</td><td>FAT（windows旧）、NTFS（windows新）、EXT（Linux）</td><td>HDFS文件系统</td></tr><tr><td>物理上的存储方式</td><td>以行的形式存储，每个字段之间用分隔符隔开</td><td>以每个单元格为一行的形式存储，即每一个单元格数据都会存储其row key、列簇名、列名和时间戳等。HBase会对行进行分割，一片行和一个列簇即形成一个region。具体见后面详解。</td></tr><tr><td>索引</td><td>支持主键（primary key）和二级索引</td><td>仅支持主键（row key）</td></tr><tr><td>事务</td><td>最常用的InnoDB引擎的事务处理满足ACID原则</td><td>对事务的支持较弱，不支持ACID</td></tr><tr><td>是否能使用sql查询</td><td>能</td><td>不能，NoSQL数据库</td></tr><tr><td>是否支持join</td><td>支持</td><td>不支持</td></tr><tr><td>适合存储的数据</td><td>适合存储少量的、结构化的数据</td><td>适合存储大量数据，结构化和非结构话都适合，但是如果使用HBase来存储少量数据，效率和内存消耗上都不如关系型数据库</td></tr></tbody></table><h3 id="4、HBase的逻辑结构"><a href="#4、HBase的逻辑结构" class="headerlink" title="4、HBase的逻辑结构"></a>4、HBase的逻辑结构</h3><p><img src="/images/HBase%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png"></p><h3 id="5、HBase的物理结构"><a href="#5、HBase的物理结构" class="headerlink" title="5、HBase的物理结构"></a>5、HBase的物理结构</h3><p>HBase的物理结构，实际上是每一个单元都对应了一行或多行数据，每行存储了其元数据信息和值。</p><p><font color="Red">而实际上删除操作的第一时间并不会真正删除数据，而是插入了一条type为delete的数据，timestamp则是版本控制（这就是为什么需要校正服务器时间），查数据get命令其实就是获取timestamp最大的那条数据，如果这条数据的type是delete，则不反悔数据，否则返回那条数据。而scan命令可以通过设置VERSION参数来查看之前版本的数据。</font></p><p><img src="/images/HBase%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84.png"></p><h3 id="6、Hive和HBase的区别"><a href="#6、Hive和HBase的区别" class="headerlink" title="6、Hive和HBase的区别"></a>6、Hive和HBase的区别</h3><table><thead><tr><th></th><th>Hive</th><th>HBase</th></tr></thead><tbody><tr><td>定位</td><td>Hive是一个数据仓库工具，本质相当于把HDFS中已存在的数据文件在MySQL中做一个映射关系，以方便用HQL去管理查询。</td><td>定位是一个NoSQL数据库</td></tr><tr><td>功能</td><td>用于数据分析和清洗</td><td>高效地存储和查询数据</td></tr><tr><td>使用场景</td><td>离线数据分析和清晰，因为需要时间较长，延迟较高</td><td>实时查询和存储海量数据</td></tr><tr><td>底层</td><td>基于HDFS，编写的HQL最终是转换为MapReduce代码执行</td><td>基于HDFS，但是在HDFS上做了进一步的处理和优化</td></tr></tbody></table><p>如下面是一种数据仓库架构。</p><p><img src="/images/%E5%A4%A7%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%9A%84%E4%B8%80%E7%A7%8D%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%9E%B6%E6%9E%84.png"></p><h2 id="二、下载、安装和配置"><a href="#二、下载、安装和配置" class="headerlink" title="二、下载、安装和配置"></a>二、下载、安装和配置</h2><p>下载链接：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/">HBase的清华大学镜像包</a></p><p>选择一个稳定版本，点进去后下载其中的二进制的压缩包，不用下载源码的压缩包，源码的压缩包可以用来看源码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br>wget https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/stable/hbase-2.3.5-bin.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 解压</span><br>tar xzvf hbase-2.3.5-bin.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以这个目录为工作目录</span><br>cd hbase-2.3.5<br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><span class="hljs-meta">#</span><span class="bash"> 在最下面添加</span><br>export HBASE_HOME=/home/yury/hbase-2.3.5<br>export PATH=$&#123;PATH&#125;:$&#123;HBASE_HOME&#125;/bin:$&#123;HBASE_HOME&#125;/sbin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 加载环境变量</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><p>修改配置文件<code>./conf/hbase-env.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 修改压缩包根目录下的这个文件</span><br>vi ./conf/hbase-env.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加JAVA_HOME配置</span><br>export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/<br><span class="hljs-meta">#</span><span class="bash"> 为<span class="hljs-literal">false</span>时使用自己的ZOOKEEPER，即需要自己启动zookeeper服务。为<span class="hljs-literal">true</span>时使用hbase内置的zookeeper，如果是单机版建议为<span class="hljs-literal">true</span>，或者不配置</span><br>export HBASE_MANAGES_ZK=false<br></code></pre></td></tr></table></figure><p>将一个包复制到lib目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp lib/client-facing-thirdparty/htrace-core4-4.2.0-incubating.jar ./lib/<br></code></pre></td></tr></table></figure><p>移除一个日志jar包，这个版本和hadoop的3.3.0版本的日志包会有冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm lib/client-facing-thirdparty/slf4j-log4j12-1.7.30.jar<br></code></pre></td></tr></table></figure><h2 id="三、单机版"><a href="#三、单机版" class="headerlink" title="三、单机版"></a>三、单机版</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 配置完了以上操作后，直接启动即可</span><br>./bin/start-hbase.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 返回结果如下</span><br><span class="hljs-meta">#</span><span class="bash"> running master, logging to /home/yury/hbase-2.3.5/bin/../logs/hbase-yury-master-myubuntu1.out</span><br><span class="hljs-meta">#</span><span class="bash"> 可以在http://192.168.141.141:16010这个页面中HBase的web管理页面</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> jps命令可以看到有一个HMaster进程</span><br>jps<br><span class="hljs-meta">#</span><span class="bash"> 2032 Jps</span><br><span class="hljs-meta">#</span><span class="bash"> 1539 HMaster</span><br></code></pre></td></tr></table></figure><h2 id="四、初步使用HBase的shell"><a href="#四、初步使用HBase的shell" class="headerlink" title="四、初步使用HBase的shell"></a>四、初步使用HBase的shell</h2><p>hbase的数据库结构主要以下层次：</p><ul><li>namespace（命名空间，相当于MySQL的schema）</li><li>table</li><li>column family（列簇）</li><li>column qualifier（列名）</li></ul><p>hbase的namespace默认有两个：default和namespace，默认使用default，即在创建表时如果没有加命名空间前缀，则默认往default命名空间里面建表。</p><p>而namespace这个命名空间存储着数据库的元数据信息，这个命名空间向相当于MySQL的information这个schema。</p><p><font color="Red">hbase shell里面没有分号，如果敲了分号并回车了，可以通过敲一个单引号，再回车，再敲一个单引号来取消之前的命令。</font></p><p><font color="Red">对于哪个命令不熟悉，可以<code>help &#39;create&#39;</code>，就有这个命令的使用方法，下面只是简单介绍。</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动hbase的shell命令，需要配置hbase环境变量，以下都是hbase的shell命令</span><br>hbase shell<br></code></pre></td></tr></table></figure><h3 id="1、命名空间操作"><a href="#1、命名空间操作" class="headerlink" title="1、命名空间操作"></a>1、命名空间操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">list_namespace                # 展示所有命名空间<br>create_namespace &#x27;myns&#x27;       # 创建命名空间，相当于MySQL的创建一个schema<br>drop_namespace &#x27;myns&#x27;         # 删除命名空间<br>describe_namespace &#x27;myns&#x27;     # 查看指定命名空间的详细信息<br>list_namespace_tables &#x27;myns&#x27;  # 查看指定命名空间下的所有表<br></code></pre></td></tr></table></figure><h3 id="2、表操作"><a href="#2、表操作" class="headerlink" title="2、表操作"></a>2、表操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 对于表的操作默认是指default命名空间，要想对其他命名空间操作表，需加命名空间的前缀，如下</span><br><span class="hljs-meta">#</span><span class="bash"> 在myns命名空间下创建一个表</span><br>create &#x27;myns:myns_test&#x27;, &#x27;myns_cf&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以下不加前缀则都是在default命名空间下操作</span><br>create &#x27;test&#x27;, &#x27;cf&#x27;                              # 一个列簇cf<br>create &#x27;test2&#x27;, &#x27;cf1&#x27;, &#x27;cf2&#x27;                     # 两个列簇cf1和cf2<br>list &#x27;test&#x27;                                      # 确认表是否存在<br>describe &#x27;test&#x27;                                  # 查看表结构<br>disable &#x27;test&#x27;                                   # 使表失效<br>enable &#x27;test&#x27;                                    # 使表生效<br>alter &#x27;test&#x27;, &#123;NAME=&gt;&#x27;cf1&#x27;, VERSION=&gt;3&#125;          # 修改表的元数据信息<br>drop &#x27;test&#x27;                                      # 删除表，删除之前要disable这个表<br>scan &#x27;test&#x27;, &#123;STARTROW=&gt;&#x27;1001&#x27;, STOPROW=&gt;&#x27;1003&#x27;&#125; # 扫描查看&#x27;test&#x27;表的所有数据<br></code></pre></td></tr></table></figure><h3 id="3、数据操作"><a href="#3、数据操作" class="headerlink" title="3、数据操作"></a>3、数据操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 插入数据</span><br><span class="hljs-meta">#</span><span class="bash"> 参数1：命名空间+表名</span><br><span class="hljs-meta">#</span><span class="bash"> 参数2：行号，row key</span><br><span class="hljs-meta">#</span><span class="bash"> 参数3：列名全限定名，即列簇名+列名</span><br><span class="hljs-meta">#</span><span class="bash"> 参数4：值</span><br>put &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;, &#x27;&#123;row key&#125;&#x27;, &#x27;&#123;column family&#125;:&#123;column qualifier&#125;&#x27;, &#x27;&#123;value&#125;&#x27;, &#x27;&#123;timestamp&#125;&#x27;, &#x27;&#123;其他属性&#125;&#x27;<br>put &#x27;test&#x27;, &#x27;row1&#x27;, &#x27;cf:a&#x27;, &#x27;value1&#x27;<br>put &#x27;test&#x27;, &#x27;row2&#x27;, &#x27;cf:b&#x27;, &#x27;value2&#x27;<br>put &#x27;test&#x27;, &#x27;row3&#x27;, &#x27;cf:c&#x27;, &#x27;value3&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 根据表名和row key获取值</span><br>get &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;, &#x27;&#123;row key&#125;&#x27;, &#x27;&#123;column family&#125;:&#123;column qualifier&#125;&#x27;<br>get &#x27;test&#x27;, &#x27;row1&#x27;<br><span class="hljs-meta">#</span><span class="bash"> 结果如下</span><br><span class="hljs-meta">#</span><span class="bash"> COLUMN            CELL</span><br><span class="hljs-meta">#</span><span class="bash">  cf:a             timestamp=2021-05-01T17:46:15.064, value=value1</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 根据表名、row key和列删除数据，一个单元格</span><br>delete &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;, &#x27;&#123;row key&#125;&#x27;, &#x27;&#123;column family&#125;:&#123;column qualifier&#125;&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 根据表名、row key删除数据，row key对应的一整行</span><br>deleteall &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;, &#x27;&#123;row key&#125;&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 清空表</span><br>truncate &#x27;&#123;namespace&#125;:&#123;tablename&#125;&#x27;<br></code></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><font color="Red">注意：</font></h3><ul><li><p>row key为字符串类型，其排序是按照字符串的大小排序，如’10010’ &gt; ‘1001’。</p></li><li><p>get命令的列参数哪里如果没有冒号，则这个参数是指column family而不是column qualifier。</p></li><li><p>scan命令如果有STARTROW和STOPROW参数，则筛选范围为左闭右开！</p></li><li><p>数据的改操作没有update命令，其实直接put进去一个值，就会自动完成改操作，有点类似于hashmap直接put后会覆盖原来的值这种。</p></li><li><p>创建表和列簇时的VERSION属性表示这个这个列簇最终将会存几个版本的数据，如VERSION=2，则取数据时设置VERSION=3也只能拿到两条数据，并且在hbase空间时，除最新的两个版本的数据会被保留外，其余版本数据都会从磁盘中删除。</p></li></ul><h2 id="五、分布式部署"><a href="#五、分布式部署" class="headerlink" title="五、分布式部署"></a>五、分布式部署</h2><h3 id="1、伪分布式"><a href="#1、伪分布式" class="headerlink" title="1、伪分布式"></a>1、伪分布式</h3><p><strong>伪分布式：在同一个服务器中部署，但是HMaster，HRegionServer和ZooKeeper服务在不同的JVM进程中。</strong></p><p>前提：先启动zookeeper服务（可以单机模式），再启动hadoop服务（至少伪分布式），最后才能启动hbase</p><p>配置/conf/hbase-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /conf/hbase-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 为true则是分布式的，为false则是单机版 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这个是指数据的根目录在哪里，可以指定hdfs文件系统，即在hadoop的etc/hadoop/core-site.xml中配置的fs.defaultFS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://localhost:9000/hbase<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 官网文档说还要删除hbase.tmp.dir配置和hbase.unsafe.stream.capability.enforce配置 --&gt;</span><br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动hbase</span><br>bin/start-hbase.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 在hadoop中校验是否在hdfs文件系统中创建了一个hbase的文件夹</span><br>bin/hadoop fs -ls /hbase<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> zookeeper、hadoop和hbase全部启动成功后，运行jps命令结果应该是这样的。如果没有jps命令，linux会提示你安装一个jdk的东西</span><br>jps<br>6976 DataNode           # hadoop<br>6787 NameNode           # hadoop<br>6531 QuorumPeerMain     # zookeeper<br>7237 SecondaryNameNode  # hadoop<br>7941 Jps                # jps<br>7592 HMaster            # hbase<br>7786 HRegionServer      # hbase<br></code></pre></td></tr></table></figure><h3 id="2、完全分布式"><a href="#2、完全分布式" class="headerlink" title="2、完全分布式"></a>2、完全分布式</h3><p><code>hbase-site.xml</code>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>./tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://192.168.0.201:9000/hbase<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>192.168.0.201,192.168.0.202,192.168.0.203<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/home/yury/zookeeper-3.6.3/zookeeper-data/hbase<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、注意点"><a href="#3、注意点" class="headerlink" title="3、注意点"></a>3、注意点</h3><p>1、各个服务器之间的时间必须要同步，不然会出现不可预知的错误</p><h2 id="六、HBase进阶"><a href="#六、HBase进阶" class="headerlink" title="六、HBase进阶"></a>六、HBase进阶</h2><h3 id="1、HBase架构"><a href="#1、HBase架构" class="headerlink" title="1、HBase架构"></a>1、HBase架构</h3><p>HMaster负责DDL操作，而HRegionServer负责DML操作，而实际操作中都会有zookeeper，zookeeper则是负责调度HRegionServer，因此当HMaster挂了，并不影响DML操作，只是不能进行DDL操作。</p><p>HLog类似于MySQL的Binlog，防止数据库奔溃时数据丢失。</p><p><img src="/images/HBase%E6%9E%B6%E6%9E%84.png"></p><h3 id="2、写数据流程"><a href="#2、写数据流程" class="headerlink" title="2、写数据流程"></a>2、写数据流程</h3><ul><li>收到put请求：put table/rowkey/cf/column value</li><li>前往meta-region-server这个服务器，请求查询该表的meta表所在RegioinServer</li><li>前往meta表所在服务器，请求查询该表和列簇所在的RegioinServer</li><li>将该put请求发送给对应的服务器</li></ul><p><img src="/images/HBase%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png"></p><h3 id="3、MemStore-Flush"><a href="#3、MemStore-Flush" class="headerlink" title="3、MemStore Flush"></a>3、MemStore Flush</h3><p>即把内存中的数据刷新到HDFS中。</p><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>hbase.regionserver.global.memstore.size</td><td>全局配置，一个regionserver中所有memstore之和的最大值，默认为堆内存的40%，当memstore超过这个值时，就会阻塞写数据操作</td></tr><tr><td>hbase.regionserver.global.memstore.size.lower.limit</td><td>全局配置，一个regionserver中所有memstore之和的最大值，默认为堆内存的40%*0.95=38%，当memstore超过这个值时，就会开始flush操作，此时还不会阻塞写数据操作</td></tr><tr><td>hbase.regionserver.optionalcacheflushinterval</td><td>内存中的最后一次编辑的数据文件在自动刷新前能够存活的最长时间，默认1小时，当某些数据超过这个时间时，即使memstore内存没达到flush阈值，也会进行flush</td></tr><tr><td>hbase.hregion.memstore.flush.size</td><td>单个region中memstore的缓存最大值，超过这个值时这个region就会进行flush，默认值为128M</td></tr></tbody></table><h3 id="4、读数据流程"><a href="#4、读数据流程" class="headerlink" title="4、读数据流程"></a>4、读数据流程</h3><ul><li>收到get请求</li><li>前往meta-region-server查询meta表所在的RegionServer</li><li>前往meta表所在服务器，请求查询该表和列簇所在的RegioinServer</li><li>同时读memstore（内存）和storefile（磁盘），将两份数据读进block cache，取时间戳最大的那条数据。</li></ul><p><img src="/images/HBase%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png"></p><h3 id="5、StoreFile-Compaction"><a href="#5、StoreFile-Compaction" class="headerlink" title="5、StoreFile Compaction"></a>5、StoreFile Compaction</h3><p>hdfs中的hfile文件的合并，<font color="Red">compaction操作是先全部读出来，再重新合并在一起。</font>有以下两种：</p><ul><li>Minor compaction：只选取一些小的文件进行合并，不会删除delete类型或时间戳更小的数据</li><li>Major compaction：将一个store下的所有hfile合并成一个大文件，对于相同rowkey且时间戳更小的数据会执行物理删除操作</li></ul><p>配置：</p><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>hbase.hregion.majorcompaction</td><td>一个region进行自动major compaction的周期，默认为7天，即7天自动进行一次大合并。生产环境不建议开启（设置为0），因为很耗资源，而是手动进行major compaction</td></tr><tr><td>hbase.hregion.majorcompaction.jitter</td><td>抖动比例，不管，反正都会被关掉</td></tr><tr><td>hbase.hstore.compactionThreshold</td><td>一个store中允许存的hfile的最大值，超过或等于这个值，就会被合并到一个新的hfile中，默认值为3</td></tr></tbody></table><h3 id="6、真正删数据发生在什么时候"><a href="#6、真正删数据发生在什么时候" class="headerlink" title="6、真正删数据发生在什么时候"></a>6、真正删数据发生在什么时候</h3><ul><li>进行flush时，内存中版本更老的数据会被删除，即老版本数据不会被写入hfile中</li><li>进行major compaction时会将老版本数据删除</li></ul><h3 id="7、Region-Split"><a href="#7、Region-Split" class="headerlink" title="7、Region Split"></a>7、Region Split</h3><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>hbase.hregion.max.filesize</td><td>一个region的最大大小。默认值为10G。</td></tr></tbody></table><p>当一个region中的某个store下的所有storefile总大小超过<code>Min(&quot;count of region&quot;^2*&quot;hbase.hregion.memstore.flush.size&quot;, &quot;hbase.hregion.max.filesize&quot;)</code>时，该region就会进行拆分。</p><p><strong>数据热点问题：</strong></p><p>第一个region的拆分的阈值为128M，拆分为两个，分别为64M</p><p>rowkey是自增的，在第二个region后面新增数据</p><p>第二个region的拆分的阈值为512M（2^2*128），拆分为两个，分别为256M</p><p>rowkey继续自增，在第三个region后面新增数据</p><p>第三个region的拆分阈值为1152M（3^2*128），拆分为两个，分别为576M</p><p>rowkey继续自增……</p><p>因此，这样的话第n个region的大小为：Min(n^2*64M, 5G)，即region在到达5G之前，各个regino的大小差异会比较大，即数据会集中在某几个region中，导致这几个region服务器压力很大。</p><p><strong>官方建议，使用更少的列簇，将更多的列放进同一个列簇中，而不是创建更多的列簇，因为多个列簇flush后容易形成多个小文件</strong></p><h2 id="七、优化"><a href="#七、优化" class="headerlink" title="七、优化"></a>七、优化</h2><h3 id="1、高可用"><a href="#1、高可用" class="headerlink" title="1、高可用"></a>1、高可用</h3><p>在创建conf/backup-master这个文件，在里面写入备份的master结点的服务器，当主节点挂了之后，会选举一个备份主节点来顶替主节点的位置</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.141.142</span><br><span class="hljs-number">192.168.141.143</span><br></code></pre></td></tr></table></figure><h3 id="2、预分区"><a href="#2、预分区" class="headerlink" title="2、预分区"></a>2、预分区</h3><p>（1）手动设置预分区（更常用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">create &quot;staff&quot;, &quot;info&quot;, &quot;partition&quot;, SPLITS =&gt; [&#x27;1000&#x27;, &#x27;2000&#x27;, &#x27;3000&#x27;, &#x27;4000&#x27;]<br></code></pre></td></tr></table></figure><p>（2）手动生成16进制预分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">create &quot;staff2&quot;, &quot;info&quot;, &quot;partition2&quot;, &#123;NUMREGIONS =&gt; 15, SPLITALGO =&gt; &#x27;HexStringSplit&#x27;&#125;<br></code></pre></td></tr></table></figure><p>（3）按照文件中设置的分区规则预分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在hbase根目录下</span><br>touch splits.txt<br>aaaa<br>bbbb<br>cccc<br>dddd<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">create &quot;staff3&quot;, &quot;info&quot;, &quot;partition3&quot;, SPLITS_FILE =&gt; &#x27;splits.txt&#x27;<br><span class="hljs-meta">#</span><span class="bash"> 系统会给splits.txt这个文件进行排序</span><br></code></pre></td></tr></table></figure><p>（4）使用javaAPI创建分区</p><p>略</p><h3 id="3、rowkey的设计"><a href="#3、rowkey的设计" class="headerlink" title="3、rowkey的设计"></a>3、rowkey的设计</h3><p><font color="Red">rowkey要保持散列性（随机性，使其可以随机落在不同的region中）、唯一性、长度足够长等原则，最好是70-100位字母或数字。</font></p><p>如生成随机数、hash、散列值、字符串拼接。</p><h4 id="（1）案例1"><a href="#（1）案例1" class="headerlink" title="（1）案例1"></a>（1）案例1</h4><p>存储通话记录以及通话详情的rowkey设计。需存储的数据如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phone_from</span>   phone_to     time_start           duration<br><span class="hljs-attribute">13112345678</span>  <span class="hljs-number">13187654321</span>  <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span> <span class="hljs-number">12</span>:<span class="hljs-number">12</span>:<span class="hljs-number">12</span>  <span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><p>首先根据业务对未来十年的数据的预期，需要设置300个分区，分区键分别是：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">000</span><span class="hljs-string">|</span><br><span class="hljs-number">001</span><span class="hljs-string">|</span><br><span class="hljs-number">002</span><span class="hljs-string">|</span><br>...<br><span class="hljs-number">156</span><span class="hljs-string">|</span><br><span class="hljs-number">157</span><span class="hljs-string">|</span><br>...<br><span class="hljs-number">298</span><span class="hljs-string">|</span><br></code></pre></td></tr></table></figure><p>我们将rowkey前三位作为分区号，那么为了保证随机性，我们如何将数据散列分布在这300个分区内呢？即我们如何设计rowkey以保证数据会随机分布在300个分区中？</p><p>此外根据业务需求，我们最好将同一拨出号码的同一个月份的通话记录放在一个分区内，以便以后做计算更快。</p><p>我们设计这样一个算法：</p><p>因此有300个分区，因此我们将rowkey的前三位作为分区号，从第4位开始，我们将拨出号码作为字符串拼接进去，再将通话开始时间拼接进去，以下划线分割，如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">xxx_13112345678_2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span> <span class="hljs-number">12</span>:<span class="hljs-number">12</span>:<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>那么如何将这个rowkey随机分布到300个分区中且同一拨出号码同一月份的通话记录在同一分区呢？即rowkey前面的xxx要根据后面的13112345678_2021-01-01 12:12:12来区分。</p><ul><li>首先，不同的手机号可以随机区分开，因此可以用手机号进行hash，这样不同手机号的hashcode是随机分布的</li><li>其次，同一拨出号码的同一月份要放一起，因此可以将手机号+年月进行hash，这样同一手机号同一月份的hashcode是相同的</li><li>最后，我们只需要三位数字来存储分区号，因此我们可以通过获取hashcode除以299的余来获取分区号</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">分区号=<span class="hljs-comment">(hash(13112345678_202101)</span>)<span class="hljs-meta">%</span><span class="hljs-number">299</span><br></code></pre></td></tr></table></figure><p><font color="Red">技巧：我们对分区键的设计可以用一个常用符号中ascii序号最大的符号为结尾，如<code>|</code>，而rowkey中以一个ascii序号小点的符号为分隔符，如<code>_</code>。这样<code>000|</code>就会大于任意以<code>000_</code>开始的值。且我们在扫描表时，是左闭右开的原则，这样做对于rowkey的比较起来更方便，如下。</font></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 扫描001分区的数据</span><br>STARTKEY =&gt; &#x27;001&#x27;, STOPKEY =&gt; &#x27;001|&#x27;<br><br><span class="hljs-meta"># 扫描某拨出号码在4月份的数据</span><br>STARTKEY =&gt; &#x27;XXX_<span class="hljs-number">1311234567</span>8_<span class="hljs-number">202103</span>&#x27;, STOPKEY =&gt; &#x27;XXX_<span class="hljs-number">1311234567</span>8_<span class="hljs-number">202103</span>|&#x27;<br><span class="hljs-meta"># 其中xxx=(hash(13112345678_202103))%299</span><br></code></pre></td></tr></table></figure><h3 id="4、基础优化"><a href="#4、基础优化" class="headerlink" title="4、基础优化"></a>4、基础优化</h3><p>（1）允许在HDFS的文件中追加内容</p><p>hdfs-site.xml、hbase-site.xml</p><p>属性：dfs.support.append</p><p>解释：开启HDFS追加同步，可以优秀地配合HBase的数据同步和持久化。默认值为true。</p><p>（2）优化DataNode允许的最大文件打开数</p><p>hdfs-site.xml</p><p>属性：dfs.datanode.max.transfer.threads</p><p>解释：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux：ubuntu18.04.5&lt;/p&gt;
&lt;p&gt;hbase：2.3.5&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;http://hbase.apache.org/book.html&quot;&gt;Apache HBase ™ Reference Guide&lt;/a&gt;&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="bigdata" scheme="https://yury757.github.io/categories/bigdata/"/>
    
    <category term="hbase" scheme="https://yury757.github.io/categories/bigdata/hbase/"/>
    
    
  </entry>
  
  <entry>
    <title>mybatis-study</title>
    <link href="https://yury757.github.io/java/mybatis/mybatis-study/"/>
    <id>https://yury757.github.io/java/mybatis/mybatis-study/</id>
    <published>2021-08-23T16:00:00.000Z</published>
    <updated>2021-09-10T13:50:17.664Z</updated>
    
    <content type="html"><![CDATA[<p>练习用代码：<a href="https://github.com/yury757/Mybatis-Study">yury757/Mybatis-Study (github.com)</a></p><h2 id="一、Mybatis问题"><a href="#一、Mybatis问题" class="headerlink" title="一、Mybatis问题"></a>一、Mybatis问题</h2><p>Mybatis遇到的问题大部分有以下五类：</p><p>1、配置文件没有注册</p><p>2、绑定接口错误</p><p>3、方法名不对</p><p>4、返回类型不对</p><p>5、Maven导出资源问题</p><h2 id="二、Mybatis实现方式"><a href="#二、Mybatis实现方式" class="headerlink" title="二、Mybatis实现方式"></a>二、Mybatis实现方式</h2><ul><li>写一个实体类和对应的查询接口</li><li>本来我们应该手写实现这个查询接口的类，并在对应的方法里面写sql语句、使用SqlSession执行SQL语句，再把结果集强转成我们自己的实体类。</li><li>Mybatis则不需要我们手写这个实现类，而是弄了一个mapper的xml文件，里面定义了<strong>某个接口的某个方法的实现</strong>，我们只需要在xml中定义这个方法的SQL语句、参数类型、参数集、结果类型、结果集等标签。</li><li>再将对应的mapper注册到Mybatis的配置文件中。</li><li><strong>然后项目启动时，Mybatis框架去配置文件的注册中心中把注册过的类提前实现好，生成.class字节码文件（猜测）</strong>，我们只需要通过<code>getMapper(UserDao.class)</code>方法（这个方法里面肯定封装了newInstance或类似的方法）就可以拿到对应类的实例，然后直接调用相应的方法就行。而且会自动帮我们把结果集封装到mapper定义的结果类型中。</li></ul><h2 id="三、Mybatis中的三个核心类"><a href="#三、Mybatis中的三个核心类" class="headerlink" title="三、Mybatis中的三个核心类"></a>三、Mybatis中的三个核心类</h2><h3 id="（1）SqlSessionFactoryBuilder"><a href="#（1）SqlSessionFactoryBuilder" class="headerlink" title="（1）SqlSessionFactoryBuilder"></a>（1）SqlSessionFactoryBuilder</h3><p>这个类是<strong>用于创建SqlSessionFactory对象的</strong>，SqlSessionFactory对象一旦创建就不再需要SqlSessionFactoryBuilder了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用mybatis第一步，获取SqlSessionFactory对象</span><br><span class="hljs-keyword">static</span>&#123;<br>    String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    InputStream inputStream = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        inputStream = Resources.getResourceAsStream(resource);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（2）SqlSessionFactory"><a href="#（2）SqlSessionFactory" class="headerlink" title="（2）SqlSessionFactory"></a>（2）SqlSessionFactory</h3><p>SqlSessionFactory一旦被创建，应该在程序运行期间一直存在，因为<strong>它是创建SqlSession对象的工厂</strong>。默认为单例模式。</p><h3 id="（3）SqlSession"><a href="#（3）SqlSession" class="headerlink" title="（3）SqlSession"></a>（3）SqlSession</h3><p>SqlSession是用于访问数据库的一个会话。</p><ul><li>SqlSession实例<strong>不是线程安全的</strong>，因此避免被共享，最佳的使用域是请求或非静态方法作用域。</li><li>使用完一个SqlSession后<strong>一定一定一定</strong>要关闭它，为避免关闭资源时异常，最好使用以下方式使用SqlSession</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取SqlSession对象的方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>&#125;<br><br><span class="hljs-comment">// 重载方法，选择是否自动提交</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> autoCommit)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(autoCommit);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(SqlSession sqlSession = MybatisUtils.getSqlSession())&#123;<br>    UserDao userDao = sqlSession.getMapper(UserDao.class);<br>    List&lt;User&gt; userList = userDao.getUserList();<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、Mapper标签属性注意事项"><a href="#四、Mapper标签属性注意事项" class="headerlink" title="四、Mapper标签属性注意事项"></a>四、Mapper标签属性注意事项</h2><ul><li><code>id</code>：对应接口的方法名</li><li><code>resultType</code>：结果集类型，要写全限定类名，或别名</li><li><code>parameterType</code>：参数类型</li><li>当接口方法只有一个参数时，<code>#&#123;&#125;</code>中有以下几种填法<ul><li>若传入参数类型是一个实体类或其他类，<code>#&#123;&#125;</code>可直接填入相应属性名</li><li>若传入参数类型是<code>Map</code>接口类（可以用别名<code>map</code>代表<code>Map</code>），<code>#&#123;&#125;</code>可直接填入相应的键值</li><li>若传入参数是<code>String</code>、<code>int</code>等其他类型，<code>#&#123;&#125;</code>填任意值数字或字母的组合都行，建议使用<code>param1</code></li></ul></li><li>当接口方法只有多个参数时，<code>parameterType</code>可不填，<code>#&#123;&#125;</code>按接口方法的参数顺序填入<code>#&#123;param1&#125;</code>、<code>#&#123;param2&#125;</code>。或者在接口处使用<code>@param</code>注解，给参数起一个别名。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有两个类型相同的参数的查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTwoUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;param1&#125; or id = #&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有两个类型不同的参数的查询2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTwoUserById2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Object&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;param1&#125; or name = #&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有两个类型不同的参数的查询3 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTwoUserById3&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;param1&#125; or id = #&#123;param2.id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有两个类型不同的参数的查询4 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTwoUserById4&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;id&#125; or id = #&#123;user.id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 有两个类型不同的参数的查询4，使用<span class="hljs-doctag">@Param</span>注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getTwoUserById4</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id,<span class="hljs-meta">@Param(&quot;user&quot;)</span> User user)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>模糊查询有两种方式<ul><li>在mapper中这样用来拼接<code>%</code>：<code>like &quot;%&quot;#&#123;param1&#125;&quot;%&quot;</code></li><li>mapper中仍然使用<code>like #&#123;param1&#125;</code>，而在调用方式时手动在传入参数两边加上<code>%</code></li></ul></li></ul><p>推荐使用第一种，因为在参数里面加<code>%</code>可能面临被转义的风险。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike1&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where name like &quot;%&quot;#&#123;param1&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.xxxx.pojo.User&quot;</span>&gt;</span><br>    select * from user where name like #&#123;param1&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>resultMap</code>：结果集映射，将从数据库中取出来的字段和类中的属性做一个映射关系，为解决数据库字段名和类属性名不一致的问题。<code>column</code>为数据库字段名，<code>property</code>为类的属性名。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;pwd&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五、mybatis-config-xml配置解析"><a href="#五、mybatis-config-xml配置解析" class="headerlink" title="五、mybatis-config.xml配置解析"></a>五、mybatis-config.xml配置解析</h2><h3 id="（1）properties标签"><a href="#（1）properties标签" class="headerlink" title="（1）properties标签"></a>（1）properties标签</h3><p>可以引入其他某个<code>.properties</code>文件，作为参数值在本配置文件中使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>也可以可以加入<code>property</code>标签加入自定义参数。</p><p>对于有重复的参数，参数调用顺序是，先生成<code>property</code>标签中的参数，再读取引入的配置文件中的参数，对于有重复的参数会被覆盖掉，理解成一个<code>HashMap</code>即可。</p><h3 id="（2）settings标签"><a href="#（2）settings标签" class="headerlink" title="（2）settings标签"></a>（2）settings标签</h3><p>有以下属性：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a></p><p>主要用的有：</p><ul><li>cacheEnabled：缓存</li><li>useGeneratedKeys：自动生成主键</li><li>mapUnderscoreToCamelCase：数据库字段名转java属性名时自动重命名</li><li>logImpl：日志实现类</li></ul><p>官网也给了一个建议的设置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PARTIAL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WARNING&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultExecutorType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SIMPLE&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultFetchSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OTHER&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="（3）typeAliases标签"><a href="#（3）typeAliases标签" class="headerlink" title="（3）typeAliases标签"></a>（3）typeAliases标签</h3><p>为类型设置别名，这样避免了写全限定类型或全限定接口名。</p><p>当为一整个包的类设置别名时，若类型带有<code>@Alias</code>注解时，别名为注解值；否则别名为对应类的类型，首字母小写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;typeAlias type=&quot;org.yuyr757.pojo.User&quot; alias=&quot;UserAlias&quot;/&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.xxxxx.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Mybatis有一些默认别名，如下：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases</a></p><h3 id="（4）mappers映射器"><a href="#（4）mappers映射器" class="headerlink" title="（4）mappers映射器"></a>（4）mappers映射器</h3><p>官网有四种写法，使用完全限定资源定位符（URL）不推荐使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;mapper resource=&quot;org/xxxx/Dao/UserMapper.xml&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;mapper class=&quot;org.xxxx.Dao.UserMapper&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.xxxx.Dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最推荐使用第四种，将包内的映射器接口实现全部注册为映射器。使用条件：</p><ul><li>接口和mapper必须放在同一个包下，建议包名为Dao，<font color="Red">同一个包下是指编译后同一个包下，可以在resources目录下也新建一个<code>org.xxxx.Dao</code>目录，这样接口和mapper配置就会编译到同一个包下了。</font></li><li>接口和mapper两个文件名必须相同（文件类型后缀不管）</li><li>使用这种方式必须在<code>pom.xml</code>中把<code>src/java/main</code>下的xml文件作为配置文件添加到<code>build.resources.resource</code>中</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">java.org.xxxx.Dao<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserMapper</span>.</span></span>java（接口）<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Department</span>.</span></span>java<br>resources.org.xxxx.Dao<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserMapper</span>.</span></span>xml（mapper）<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Department</span>.</span></span>xml<br></code></pre></td></tr></table></figure><h2 id="六、分页"><a href="#六、分页" class="headerlink" title="六、分页"></a>六、分页</h2><p>1、在mapper的sql语句中把startIndex和endIndex作为参数传入进去</p><p>2、分页插件PageHelper：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p><h2 id="七、使用注解开发"><a href="#七、使用注解开发" class="headerlink" title="七、使用注解开发"></a>七、使用注解开发</h2><p>实现方式：反射、动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对于这种很简单的sql，可以不用写mapper，直接写一个Select注解，里面传入sql值即可</span><br><span class="hljs-comment"> * 注意点：</span><br><span class="hljs-comment"> * 1、数据库字段名和类属性名要相同</span><br><span class="hljs-comment"> * 2、returnType为接口的返回类型</span><br><span class="hljs-comment"> * 3、parameterType为接口的参数类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;param1&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserByIdUsingAnnotation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;param1&#125; or name = #&#123;param2&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserByIdUsingAnnotation2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span></span>;<br><br><span class="hljs-meta">@Insert(&quot;insert into user(id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUserUsingAnnotation</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="八、连表查询1"><a href="#八、连表查询1" class="headerlink" title="八、连表查询1"></a>八、连表查询1</h2><p>在数据库设计时，为降低数据的冗余，一般都会做到三范式。比如学生老师信息表可能会做成以下这种方式：</p><p>比如一个学生表如下：</p><table><thead><tr><th>ID</th><th>NAME</th><th>TEACHER_ID</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>1</td></tr><tr><td>2</td><td>小五</td><td>1</td></tr><tr><td>3</td><td>小华</td><td>3</td></tr><tr><td>4</td><td>小石</td><td>2</td></tr><tr><td>5</td><td>李笑</td><td>3</td></tr><tr><td>6</td><td>孙武</td><td>2</td></tr><tr><td>7</td><td>黄铭</td><td>2</td></tr></tbody></table><p>一个老师表如下：</p><table><thead><tr><th>ID</th><th>NAME</th></tr></thead><tbody><tr><td>1</td><td>李老师</td></tr><tr><td>2</td><td>黄老师</td></tr><tr><td>3</td><td>钱老师</td></tr></tbody></table><p>因此我们的java对象应该是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Teacher teacher; <span class="hljs-comment">// 引用了一个老师</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们在配置mapper时有两种方法：</p><h3 id="1、通过子查询方式"><a href="#1、通过子查询方式" class="headerlink" title="1、通过子查询方式"></a>1、通过子查询方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentTeacher&quot;</span>&gt;</span><br>    select * from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 对象使用association，集合使用collection --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;teacher_id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>    select * from teacher where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>association</code>标签的属性解释：</p><ul><li><code>property</code>：属性名</li><li><code>column</code>：该属性要用数据库中的某个字段名去关联查询</li><li><code>javaType</code>：该属性的类型</li><li><code>select</code>：从数据库拿到这个类的数据的select语句</li></ul><p>这种方式实际上就是把查询出来的关联字段去重，去重后再去数据库里面查相应的数据，再封装到对象中。</p><p>如打开日志后可以发现这种方式实际上查了四次数据库。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-02-22 17:40:11[ <span class="hljs-builtin-name">DEBUG</span> ]Opening JDBC<span class="hljs-built_in"> Connection</span><br><span class="hljs-built_in"></span>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]Created<span class="hljs-built_in"> connection </span>202125197.<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]==&gt;  Preparing: select * <span class="hljs-keyword">from</span> student <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]==&gt; Parameters: <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt;  Preparing: select * <span class="hljs-keyword">from</span> teacher where id = ? <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt; Parameters: 1(Integer)<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;====      Total: 1<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt;  Preparing: select * <span class="hljs-keyword">from</span> teacher where id = ? <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt; Parameters: 3(Integer)<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;====      Total: 1<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt;  Preparing: select * <span class="hljs-keyword">from</span> teacher where id = ? <br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]====&gt; Parameters: 2(Integer)<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;====      Total: 1<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;==      Total: 7<br>Student&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小五&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小华&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;钱老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小石&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=5, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李笑&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;钱老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=6, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;孙武&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=7, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄铭&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]Closing JDBC<span class="hljs-built_in"> Connection </span>[com.mysql.cj.jdbc.ConnectionImpl@c0c2f8d]<br>2021-02-22 17:40:12[ <span class="hljs-builtin-name">DEBUG</span> ]Returned<span class="hljs-built_in"> connection </span>202125197 <span class="hljs-keyword">to</span> pool.<br></code></pre></td></tr></table></figure><h3 id="2、通过连表查询方式"><a href="#2、通过连表查询方式" class="headerlink" title="2、通过连表查询方式"></a>2、通过连表查询方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentTeacher2&quot;</span>&gt;</span><br>    select s.id, s.name, s.teacher_id, t.name as teacher_name<br>    from student s left join teacher t on s.teacher_id = t.id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;teacher_id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;teacher_name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同样有一个<code>association</code>标签，而下面还有封装这个<code>teacher</code>类的子标签，子标签定义了初始化这个类所需要的字段映射。</p><ul><li><code>property</code>：属性名</li><li><code>javaType</code>：该属性的类型</li></ul><p>这种方式只需要查一次数据库：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2021-02-22 17:41:58[ <span class="hljs-builtin-name">DEBUG</span> ]Opening JDBC<span class="hljs-built_in"> Connection</span><br><span class="hljs-built_in"></span>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]Created<span class="hljs-built_in"> connection </span>202125197.<br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]==&gt;  Preparing: select s.id, s.name, s.teacher_id, t.name as teacher_name <span class="hljs-keyword">from</span> student s left join teacher t on s.teacher_id = t.id <br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]==&gt; Parameters: <br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]&lt;==      Total: 7<br>Student&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小五&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小石&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=6, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;孙武&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=7, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄铭&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;黄老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小华&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;钱老师&#x27;</span>&#125;&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=5, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李笑&#x27;</span>, <span class="hljs-attribute">teacher</span>=Teacher&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;钱老师&#x27;</span>&#125;&#125;<br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]Closing JDBC<span class="hljs-built_in"> Connection </span>[com.mysql.cj.jdbc.ConnectionImpl@c0c2f8d]<br>2021-02-22 17:41:59[ <span class="hljs-builtin-name">DEBUG</span> ]Returned<span class="hljs-built_in"> connection </span>202125197 <span class="hljs-keyword">to</span> pool.<br></code></pre></td></tr></table></figure><p><font color="Red">具体使用哪种方式视情况而定，简单的连表可以使用第二种。当连表查询的sql特别复杂，以致于难以在sql层面去优化时，可以使用第一种，主查询把其他需要连的表的主键查询来，子查询再用主键去查，可能会提高效率。</font></p><h2 id="九、连表查询2"><a href="#九、连表查询2" class="headerlink" title="九、连表查询2"></a>九、连表查询2</h2><p>对于以上的学生老师表，我们的java类还可能是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student2</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> teacherId;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher2</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students; <span class="hljs-comment">// 老师这里有多个学生对象的引用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>同样有子查询和连表查询两种方式：</p><h3 id="1、通过子查询方式-1"><a href="#1、通过子查询方式-1" class="headerlink" title="1、通过子查询方式"></a>1、通过子查询方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 子查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacherById2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;teacher2Student2&quot;</span>&gt;</span><br>    select t.id, t.name from teacher t where t.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher2Student2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;teacher2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;student2&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudent&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;student2Map&quot;</span>&gt;</span><br>    select * from student where teacher_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student2Map&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;student2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;teacher_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、通过连表查询方式-1"><a href="#2、通过连表查询方式-1" class="headerlink" title="2、通过连表查询方式"></a>2、通过连表查询方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 连表查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacherById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;teacher2Student&quot;</span>&gt;</span><br>    select t.id, t.name, s.id as student_id, s.name as student_name<br>    from teacher t left join student s on t.id = s.teacher_id<br>    where t.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher2Student&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;teacher2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里要用ofType，即集合的元素类型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;student2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;student_id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;student_name&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十、缓存"><a href="#十、缓存" class="headerlink" title="十、缓存"></a>十、缓存</h2><h3 id="1、本地缓存。"><a href="#1、本地缓存。" class="headerlink" title="1、本地缓存。"></a>1、本地缓存。</h3><p>作用域为SqlSession，默认开启。</p><p>在一个session中查两次相同的sql，只会执行一次sql，第二次拿到的对象，和第一次拿到的对象的<font color="Red">地址都是一样的。</font><strong>本地缓存将会在做出修改、事务提交或回滚，以及关闭session时清空。默认情况下，本地缓存数据的生命周期等同于整个session的周期。</strong></p><h3 id="2、二级缓存。"><a href="#2、二级缓存。" class="headerlink" title="2、二级缓存。"></a>2、二级缓存。</h3><p>作用域为mapper的namespace，<font color="Red">当sqlsession作出修改、事务提交、回滚或关闭时，会把本地缓存扔到二级缓存中。即一级缓存失效时，会把其缓存的数据扔到二级缓存中。</font></p><p>需要在mapper中加入<code>&lt;cache/&gt;</code>就可以为这个mapper开启二级缓存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">       <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>mybatis-config.xml</code>配置中，设置<code>cacheEnabled</code>为true可以为所有mapper开启二级缓存。</p><p>缓存清除策略：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><h3 id="3、缓存顺序"><a href="#3、缓存顺序" class="headerlink" title="3、缓存顺序"></a>3、缓存顺序</h3><p><strong>二级缓存 =&gt; 本地缓存 =&gt; 数据库</strong></p><h2 id="N、注意事项"><a href="#N、注意事项" class="headerlink" title="N、注意事项"></a>N、注意事项</h2><ul><li>insert、update、delete要手动提交事务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sqlSession.commit();<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;练习用代码：&lt;a href=&quot;https://github.com/yury757/Mybatis-Study&quot;&gt;yury757/Mybatis-Study (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Mybatis问题&quot;&gt;&lt;a href=&quot;#一、Myba</summary>
      
    
    
    
    <category term="java" scheme="https://yury757.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yury757.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springMVC-study</title>
    <link href="https://yury757.github.io/java/springMVC/SpringMVC-Study/"/>
    <id>https://yury757.github.io/java/springMVC/SpringMVC-Study/</id>
    <published>2021-08-23T16:00:00.000Z</published>
    <updated>2021-08-27T16:52:11.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、回顾Servlet"><a href="#一、回顾Servlet" class="headerlink" title="一、回顾Servlet"></a>一、回顾Servlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 转发，forward</span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(request, response);<br><br><span class="hljs-comment">// 重定向，redirect</span><br>response.sendRedirect(<span class="hljs-string">&quot;/index.jsp&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- session失效时间，单位分钟 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、SpringMVC开始"><a href="#二、SpringMVC开始" class="headerlink" title="二、SpringMVC开始"></a>二、SpringMVC开始</h2><h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p><font color="Red">约定大于配置。</font></p><p>最重要的一个类：<code>DispatcherServlet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FrameworkServlet</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DispatcherServlet</span><span class="hljs-params">(WebApplicationContext webApplicationContext)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(webApplicationContext);<br>setDispatchOptionsRequest(<span class="hljs-keyword">true</span>);<br>&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;&#125;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/DispatcherServlet.png"></p><p><font color="Red">这个类的作用就是就是把不同的请求分发到不同的类。</font></p><h3 id="2、配置springmvc（重要！）"><a href="#2、配置springmvc（重要！）" class="headerlink" title="2、配置springmvc（重要！）"></a>2、配置springmvc（重要！）</h3><h4 id="1、web-xml"><a href="#1、web-xml" class="headerlink" title="1、web.xml"></a>1、web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开始配置SpringMVC --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1、注册DispatcherServlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 关联一个springmvc配置文件，本质是一个spring配置文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-config.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 启动级别 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    / 和 /* 是有区别的，用/，不能用/*</span><br><span class="hljs-comment">    /  ：匹配所有请求，不会匹配jsp</span><br><span class="hljs-comment">    /* ：匹配所有请求，包括jsp，即把返回一个.jsp页面也当作了一个请求</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、springmvc-config-xml"><a href="#2、springmvc-config-xml" class="headerlink" title="2、springmvc-config.xml"></a>2、springmvc-config.xml</h4><p>本质是一个spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 处理器映射器，有多种映射器 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这种映射器是通过bean的名字查找 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 处理器适配器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器，配置了前后缀，以后重定向到某个jsp时就可以不用写前后缀了 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置handler --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上面那个映射器会去查找和url名字相同的bean id --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 找到之后上面那个适配器就会把请求交给对应bean的class去处理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuyr757.controller.Hello2Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如下图</p><ul><li>配置<code>处理器映射器</code>就是为了做2、3、4三步，去找到对应的handler</li><li>配置<code>处理器适配器</code>就是为了做5、6、7、8四步，把对应的handler交给controller处理</li><li>配置<code>视图解析器</code>就是为了做9、10、11、12四步，把controller处理好的带model和view名字的MV对象交给视图解析器，先去处理对应的jsp，然后把生成好的页面返回给浏览器。</li></ul><p><img src="/images/SpringMVC-Flow.png"></p><h3 id="3、配置springmvc时404的问题"><a href="#3、配置springmvc时404的问题" class="headerlink" title="3、配置springmvc时404的问题"></a>3、配置springmvc时404的问题</h3><p>原因之一可能是：IDEA的项目结构中的<code>Artifacts</code>的<code>utput Layout</code>要确保<code>WEB-INF</code>目录下有<code>classes</code>和<code>lib</code>两个目录，若没有<code>lib</code>目录，则新建一个，然后把所有我们的依赖包放到<code>lib</code>目录中。</p><p><img src="/images/404solution.png"></p><h3 id="4、使用springmvc"><a href="#4、使用springmvc" class="headerlink" title="4、使用springmvc"></a>4、使用springmvc</h3><p>这里是采用实现Controller接口的方式，不建议使用，建议使用下面注解开发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">// 注意！！这个Controller是org.springframework.web.servlet.mvc.Controller，是一个接口</span><br><span class="hljs-comment">// 而不是org.springframework.stereotype.Controller，这个Controller是注解用的</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello2Controller</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 模型和视图</span><br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br><br>        <span class="hljs-comment">// 封装对象</span><br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;HelloSpringMVC&quot;</span>);<br><br>        <span class="hljs-comment">// 封装要跳转的对象</span><br>        mv.setViewName(<span class="hljs-string">&quot;hello2&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、使用注解开发SpringMVC"><a href="#三、使用注解开发SpringMVC" class="headerlink" title="三、使用注解开发SpringMVC"></a>三、使用注解开发SpringMVC</h2><p>web.xml中的配置不变，springmvc-config.xml中的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效，由IOC容器统一管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.yuye757.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置对url的检查，将一些静态资源交给默认的Servlet处理，非静态资源才让DispatcherServlet处理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启注解 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器，配置了前后缀，以后重定向到某个jsp时就可以不用写前后缀了 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span> <span class="hljs-comment">// 不写的话，就直接走方法的mapping uri</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span> <span class="hljs-comment">// 如果没有配置restful，这里一定要写，不写则找不到这个方法的uri</span><br>    <span class="hljs-comment">// uil为：localhost:8080/warName/hello/h1</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">// 封装数据</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello, SpringMVC Annotation!&quot;</span>);<br><br>        String viewName = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>        <span class="hljs-comment">// 加了@Controller注解的类下的所有加了@RequestMapping的方法</span><br>        <span class="hljs-comment">// 若返回的类型是字符串，且能够找到对应的jsp，就会被视图解析器处理</span><br>        <span class="hljs-comment">// /WEB-INF/jsp/$&#123;viewName&#125;.jsp</span><br>        <span class="hljs-keyword">return</span> viewName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、restful风格的uri"><a href="#四、restful风格的uri" class="headerlink" title="四、restful风格的uri"></a>四、restful风格的uri</h2><p>jsp不支持DELETE、PUT类型的方法，以下那两个方法看看即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/restful&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestfulController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 原来的方式：localhost:8080/warName/test?a=1&amp;b=2</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a + b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// restful方式：localhost:8080/warName/test/1/2</span><br>    <span class="hljs-comment">// @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a + b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;GET方法：&quot;</span> + res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// restful方式：localhost:8080/warName/test/1/2</span><br>    <span class="hljs-comment">// @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a - b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;POST方法：&quot;</span> + res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// restful方式：localhost:8080/warName/test/1/2</span><br>    <span class="hljs-comment">// @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.PUT)</span><br>    <span class="hljs-meta">@PutMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test4</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a * b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;PUT方法：&quot;</span> + res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// restful方式：localhost:8080/warName/test/1/2</span><br>    <span class="hljs-comment">// @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.DELETE)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test5</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = a / b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;DELETE方法：&quot;</span> + res);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、springmvc使用细节"><a href="#五、springmvc使用细节" class="headerlink" title="五、springmvc使用细节"></a>五、springmvc使用细节</h2><h3 id="1、转发和重定向"><a href="#1、转发和重定向" class="headerlink" title="1、转发和重定向"></a>1、转发和重定向</h3><p>可以在方法中加入request、response参数，使用servlet原生的转发或重定向方式。</p><p>在springmvc中可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/modelTest&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelTest1</span> </span>&#123;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/test1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>        <span class="hljs-comment">// 重定向：redirect</span><br>        mv.setViewName(<span class="hljs-string">&quot;redirect:/restful/test2/10/5&quot;</span>);<br>        <br>        <span class="hljs-comment">// 转发：forward</span><br>        <span class="hljs-comment">// mv.setViewName(&quot;forward:/restful/test2/10/5&quot;);</span><br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="Red">注意：通过这种方式的转发会带上方法的类型，如POST、PUT。但是重定向不会，默认是GET方法。因为重定向实际上是重新发起了一次请求，因此默认是GET。</font></p><h3 id="2、参数"><a href="#2、参数" class="headerlink" title="2、参数"></a>2、参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.yuye757.pojo.User;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-comment">// 若有@RequestParam，则前端传入的参数以注解里面的名字为准，此时变量名失效。没有的话就只能用变量名。</span><br>    <span class="hljs-comment">// 建议都加上@RequestParam，这样可以很明显的告诉别人这是要从前端接收的参数</span><br>    <span class="hljs-comment">// http://localhost:8080/user/t1?username=123456</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Model model, <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前端接收到的参数：&quot;</span> + name);<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, name);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1、若参数为普通类型，则通过方法的参数名字和url的参数名字匹配</span><br><span class="hljs-comment">    2、若参数为对象，则会调用无参构造方法，再按照对象属性名和url的参数名去匹配，匹配到的就会调用其setter方法</span><br><span class="hljs-comment">       和url参数名没匹配上的属性或没有setter方法的属性则没有值</span><br><span class="hljs-comment">       若没有无参构造方法，则调用有参构造方法。总之把pojo类的构造方法写全是最好的。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// http://localhost:8080/user/t2?id=1&amp;name=我是一个名字&amp;age=12</span><br>    <span class="hljs-meta">@GetMapping(&quot;/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(User user, Model model)</span></span>&#123;<br>        String s = user.toString();<br>        System.out.println(s);<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, s);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、乱码"><a href="#3、乱码" class="headerlink" title="3、乱码"></a>3、乱码</h3><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 之前我们自己写filter来解决乱码问题 --&gt;</span><br><span class="hljs-comment">&lt;!-- 在springmvc中，他给我们写了一个过滤器来解决乱码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注意这里要用/*，之前上面说了/*可以把jsp资源也包括在处理范围类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、返回值"><a href="#4、返回值" class="headerlink" title="4、返回值"></a>4、返回值</h3><p>（1）让方法返回一个纯字符串给前端，而不是走视图解析器</p><ul><li>在类上面加<code>@RestController</code>，这个注解可以使类中的所有方法都返回字符串，而不是走视图解析器</li><li>在方法上面加<code>@ResponseBody</code>注解</li></ul><p>（2）返回json字符串</p><ul><li>使用jackson包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuyr757.controller;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.yuyr757.User.User;<br><br><span class="hljs-comment">// @RestController这个注解可以使类中的所有方法都返回字符串，而不是走视图解析器</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">// 使用这个注解，则不会走视图解析器，而是直接返回一个字符串</span><br>    <span class="hljs-comment">// produces = &quot;application/json;charset=utf-8&quot;，加上这个指明返回的页面格式和编码</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user/j1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;你好&quot;</span>, <span class="hljs-number">2</span>);<br>        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper(); <span class="hljs-comment">// 使用jackson包</span><br>        String s = objectMapper.writeValueAsString(user);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用fastjson包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user/j4&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">2</span>);<br>    list.add(user);<br><br>    <span class="hljs-comment">// 原生日期格式</span><br>    Date date = <span class="hljs-keyword">new</span> Date();<br>    list.add(date);<br><br>    <span class="hljs-comment">// 通过java.text.DateFormat的格式化</span><br>    ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    list.add(simpleDateFormat.format(date));<br><br>    <span class="hljs-comment">// 通过jackson格式化</span><br>    ObjectMapper objectMapper2 = <span class="hljs-keyword">new</span> ObjectMapper();<br>    objectMapper2.setDateFormat(simpleDateFormat);<br>    String s2 = objectMapper2.writeValueAsString(date);<br>    list.add(s2);<br><br>    <span class="hljs-keyword">return</span> JSON.toJSONString(list, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>); <span class="hljs-comment">// 使用fastjson</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（3）使用jackson包返回json字符串到前端后乱码问题</p><ul><li>在<code>@RequestMapping</code>注解里面加入<code>produces</code>参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/user/j1&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span><br></code></pre></td></tr></table></figure><ul><li>在springmvc-config.xml中配置jackson独有的配置（建议使用）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Jackson乱码解决--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）在前端使用json</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> user = &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;yuyr757&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">        <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span></span><br><span class="javascript">    &#125;;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(user);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;---------将对象解析为json----------&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">JSON</span>.stringify(user);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(value);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;---------将json解析为对象----------&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> object = <span class="hljs-built_in">JSON</span>.parse(value);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(object);</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="六、拦截器和过滤器"><a href="#六、拦截器和过滤器" class="headerlink" title="六、拦截器和过滤器"></a>六、拦截器和过滤器</h2><p><strong>拦截器</strong>：拦截器只会拦截访问的控制器方法，如果访问的是jsp、html、css、image、js是不会被拦截的。<font color="Red">实现了<code>HandlerInterceptor</code>接口的类就是拦截器。拦截器是AOP思想的一个具体应用。</font></p><p><strong>过滤器</strong>：在web.xml中配置的Filter就是过滤器，url_pattern配置了<code>/*</code>会对所有资源进行过滤。</p><p>登录拦截示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String username, String password, HttpSession session)</span></span>&#123;<br>        session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/goLogin&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">goLogin</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/main&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/logout&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span></span>&#123;<br>        session.removeAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/main&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">// return true即放行，return false则阻断</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        HttpSession session = request.getSession();<br>        System.out.println(request.getRequestURI());<br><br>        <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">&quot;Login&quot;</span>) || request.getRequestURI().contains(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>) != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 下面两个不会返回值，一般用于其他处理，如日志，或者直接删掉也可以</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.yuye757.interceptor.LoginInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、文件上传和下载"><a href="#七、文件上传和下载" class="headerlink" title="七、文件上传和下载"></a>七、文件上传和下载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.yuye757.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileUploader</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        String filename = file.getOriginalFilename();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(filename))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件名：&quot;</span> + filename);<br><br>        <span class="hljs-comment">// 上传路径保存设置</span><br>        String path = session.getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br><br>        <span class="hljs-comment">// 如果路径不存在，则创建一个</span><br>        File realPath = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>            realPath.mkdir();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span> + realPath);<br><br>        <span class="hljs-comment">// 创建流</span><br>        InputStream is = file.getInputStream();<br>        OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(realPath + <span class="hljs-string">&quot;\\&quot;</span> + filename);<br><br>        <span class="hljs-comment">// 读写</span><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span>((len = is.read(buffer)) &gt; <span class="hljs-number">0</span>)&#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, buffer.length);<br>            os.flush();<br>        &#125;<br>        os.close();<br>        is.close();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br><br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        String filename = file.getOriginalFilename();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(filename))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件名：&quot;</span> + filename);<br><br>        <span class="hljs-comment">// 上传路径保存设置</span><br>        String path = session.getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br><br>        <span class="hljs-comment">// 如果路径不存在，则创建一个</span><br>        File realPath = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>            realPath.mkdir();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span> + realPath);<br><br>        <span class="hljs-comment">// 通过CommonsMultipartFile的方法直接写入文件</span><br>        file.transferTo(<span class="hljs-keyword">new</span> File(path + <span class="hljs-string">&quot;/&quot;</span> + filename));<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br><br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/download1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download1</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, String filename)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String path = request.getSession().getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br>        response.reset(); <span class="hljs-comment">// 设置页面不缓存，清空buffer</span><br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;multipart/form-data&quot;</span>);<br>        <span class="hljs-comment">// 设置响应头</span><br>        response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="hljs-string">&quot;utf-8&quot;</span>));<br><br>        File file = <span class="hljs-keyword">new</span> File(path + <span class="hljs-string">&quot;\\&quot;</span> + filename);<br>        System.out.println(<span class="hljs-string">&quot;下载文件为：&quot;</span> + file.toString());<br><br>        <span class="hljs-comment">// 读取文件流</span><br>        InputStream is = <span class="hljs-keyword">new</span> FileInputStream(file);<br>        <span class="hljs-comment">// 输出文件流</span><br>        OutputStream os = response.getOutputStream();<br><br>        <span class="hljs-comment">// 读写</span><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span>((len = is.read(buffer)) &gt; <span class="hljs-number">0</span>)&#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, buffer.length);<br>            os.flush();<br>        &#125;<br>        os.close();<br>        is.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、回顾Servlet&quot;&gt;&lt;a href=&quot;#一、回顾Servlet&quot; class=&quot;headerlink&quot; title=&quot;一、回顾Servlet&quot;&gt;&lt;/a&gt;一、回顾Servlet&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="java" scheme="https://yury757.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yury757.github.io/tags/java/"/>
    
    <category term="spring" scheme="https://yury757.github.io/tags/spring/"/>
    
  </entry>
  
</feed>
