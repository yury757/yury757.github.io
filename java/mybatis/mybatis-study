<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport">
	
	<!-- title -->
	
	<title>
	
		mybatis-study | 
	 
	Yury&#39;s Blog
	</title>
	
	<!-- keywords,description -->
	 
		<meta name="description" content="blog of usual study" />
	

	<!-- favicon -->
	
	<link rel="shortcut icon" href="/favicon.ico">
	


	<!-- search -->
	<script>
		var searchEngine = "https://www.google.com/search?q=";
		if(typeof searchEngine == "undefined" || searchEngine == null || searchEngine == ""){
			searchEngine = "https://www.google.com/search?q=";
		}
		var homeHost = "";
		if(typeof homeHost == "undefined" || homeHost == null || homeHost == ""){
			homeHost = window.location.host;
		}
	</script>


	
<link rel="stylesheet" href="/css/main.css">

	
<link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/styles/darcula.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css">


	
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/highlight.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/npm/jquery-pjax@2.0.1/jquery.pjax.min.js"></script>

	
<script src="/js/main.js"></script>

	
		
<script src="https://cdn.jsdelivr.net/npm/leancloud-storage/dist/av-min.js"></script>

		
<script src="https://cdn.jsdelivr.net/npm/valine@1.3.10/dist/Valine.min.js"></script>

	
	
<meta name="generator" content="Hexo 5.4.0"><link rel="alternate" href="/atom.xml" title="Yury's Blog" type="application/atom+xml">
</head>

<body>
	<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?3efe99c287df5a1d6f0d02d187e403c1";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

<header id="header">
    <a id="title" href="/" class="logo">Yury's Blog</a>

	<ul id="menu">
		<li class="menu-item">
			<a href="/about" class="menu-item-link">ABOUT</a>
		</li>
	
		<li class="menu-item">
			<a href="/tags" class="menu-item-link">标签</a>
		</li>
	

	
		<li class="menu-item">
			<a href="/categories" class="menu-item-link">分类</a>
		</li>
	

		<li class="menu-item">
			<a href="https://github.com/yury757" class="menu-item-link" target="_blank">
				<i class="fa fa-github fa-2x"></i>
			</a>
		</li>
	</ul>
</header>

	
<div id="sidebar">
	<button id="sidebar-toggle" class="toggle" ><i class="fa fa-arrow-right " aria-hidden="true"></i></button>
	
	<div id="site-toc">
		<input id="search-input" class="search-input" type="search" placeholder="按回车全站搜索">
		<div id="tree">
			

			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Git
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										learngit
									</a>
									
							<ul>
								<li class="file">
									<a href="/Git/learngit/learn-git">
										learn-git
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										bigdata
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										clickhouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/clickhouse/clickhouse">
										clickhouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hadoop
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hadoop/hadoop-study">
										hadoop-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hbase
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hbase/HBase-study">
										HBase-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										kafka
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/kafka/kafka">
										kafka
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										zookeeper
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/zookeeper/zookeeper-study">
										zookeeper-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										computer-science
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Computer-Networking
									</a>
									
							<ul>
								<li class="file">
									<a href="/computer-science/Computer-Networking/Computer-Networking">
										Computer-Networking
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
							<ul>
								<li class="file">
									<a href="/computer-science/Computer-Networking/socket">
										socket
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										database
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mysql
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL中的exists与in的使用
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8">
										MySQL中的exists与in的使用
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL备份-Linux版
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88">
										MySQL备份-linux版
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL日期格式化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96">
										MySQL日期格式化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL查询执行计划详解-explain
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain">
										MySQL查询执行计划详解-explain
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL迁移数据目录
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95">
										MySQL迁移数据目录
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										《高性能MySQL》
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第1章-MySQL架构与历史
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2">
										第一章-MySQL架构与历史
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第2章-MySQL基准测试
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC2%E7%AB%A0-MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">
										第二章 MySQL基准测试
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第3章-服务器性能剖析
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC3%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90">
										第三章-服务器性能剖析
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第4章-Schema与数据类型优化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC4%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96">
										第四章-Schema与数据类型优化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第5章-创建高性能的索引
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC5%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95">
										第五章-创建高性能的索引
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										postgresql
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/postgresql/postgresql">
										postgresql
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										JVM
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/JVM/jvm-1.8">
										jvm-1.8
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										SSM-Build
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/SSM-Build/SSM-Build">
										SSM-Build
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_JUC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_JUC/Java_JUC-study">
										Java_JUC-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_NIO
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_NIO/Java_NIO-study">
										Java_NIO-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="file">
									<a href="/java/java%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE">
										java常用配置
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mybatis
									</a>
									
							<ul>
								<li class="file active">
									<a href="/java/mybatis/mybatis-study">
										mybatis-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springMVC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springMVC/SpringMVC-Study">
										SpringMVC-Study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springboot
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springboot/springboot-study">
										springboot-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										spring
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/spring/Spring-study">
										Spring-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="file">
									<a href="/jetbrains%E7%B3%BB%E5%88%97IDE%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE">
										jetbrains系列IDE推荐设置
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										linux
									</a>
									
							<ul>
								<li class="file">
									<a href="/linux/linux%E5%91%BD%E4%BB%A4">
										linux命令
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
							<ul>
								<li class="file">
									<a href="/linux/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%9A%84%E7%BB%8F%E5%8E%86">
										记一次服务器被挖矿的经历
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										operating-support
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										docker
									</a>
									
							<ul>
								<li class="file">
									<a href="/operating-support/docker/docker">
										docker
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										project
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										flink_data_warehouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/project/flink_data_warehouse/flink_data_warehouse">
										flink_data_warehouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="file">
									<a href="/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E7%AB%AF%E5%8F%A3%E5%8F%B7">
										常用组件端口号
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
		</div>
	</div>
</div>

	<!-- 引入正文 -->
	<div id="content">
		<h1 id="article-title">

	mybatis-study
</h1>
<div class="article-meta">
	
	<span>Yury</span>
	<span>2021-08-24 00:00:00</span>
		<div id="article-categories">
    
		<span>Categories：</span>
            
                
                    <span>
                        <i class="fa fa-folder" aria-hidden="true">
                        <a href="/categories/java/">java</a>
                        </i>
                      
                    </span>
                
            
    

    
		<span>Tags：</span>
            
                
                    <span>
                        <i class="fa fa-tag" aria-hidden="true">
                        <a href="/tags/java/">java</a>
                        </i>
                    </span>
                
            
    
		</div>

</div>

<div id="article-content">
	<p>练习用代码：<a target="_blank" rel="noopener" href="https://github.com/yury757/Mybatis-Study">yury757/Mybatis-Study (github.com)</a></p>
<h2 id="一、Mybatis问题"><a href="#一、Mybatis问题" class="headerlink" title="一、Mybatis问题"></a>一、Mybatis问题</h2><p>Mybatis遇到的问题大部分有以下五类：</p>
<p>1、配置文件没有注册</p>
<p>2、绑定接口错误</p>
<p>3、方法名不对</p>
<p>4、返回类型不对</p>
<p>5、Maven导出资源问题</p>
<h2 id="二、Mybatis实现方式"><a href="#二、Mybatis实现方式" class="headerlink" title="二、Mybatis实现方式"></a>二、Mybatis实现方式</h2><ul>
<li>写一个实体类和对应的查询接口</li>
<li>本来我们应该手写实现这个查询接口的类，并在对应的方法里面写sql语句、使用SqlSession执行SQL语句，再把结果集强转成我们自己的实体类。</li>
<li>Mybatis则不需要我们手写这个实现类，而是弄了一个mapper的xml文件，里面定义了<strong>某个接口的某个方法的实现</strong>，我们只需要在xml中定义这个方法的SQL语句、参数类型、参数集、结果类型、结果集等标签。</li>
<li>再将对应的mapper注册到Mybatis的配置文件中。</li>
<li><strong>然后项目启动时，Mybatis框架去配置文件的注册中心中把注册过的类提前实现好，生成.class字节码文件（猜测）</strong>，我们只需要通过<code>getMapper(UserDao.class)</code>方法（这个方法里面肯定封装了newInstance或类似的方法）就可以拿到对应类的实例，然后直接调用相应的方法就行。而且会自动帮我们把结果集封装到mapper定义的结果类型中。</li>
</ul>
<h2 id="三、Mybatis中的三个核心类"><a href="#三、Mybatis中的三个核心类" class="headerlink" title="三、Mybatis中的三个核心类"></a>三、Mybatis中的三个核心类</h2><h3 id="（1）SqlSessionFactoryBuilder"><a href="#（1）SqlSessionFactoryBuilder" class="headerlink" title="（1）SqlSessionFactoryBuilder"></a>（1）SqlSessionFactoryBuilder</h3><p>这个类是<strong>用于创建SqlSessionFactory对象的</strong>，SqlSessionFactory对象一旦创建就不再需要SqlSessionFactoryBuilder了。</p>
<pre><code class="java">// 使用mybatis第一步，获取SqlSessionFactory对象
static&#123;
    String resource = &quot;mybatis-config.xml&quot;;
    InputStream inputStream = null;
    try &#123;
        inputStream = Resources.getResourceAsStream(resource);
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125;
    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
&#125;
</code></pre>
<h3 id="（2）SqlSessionFactory"><a href="#（2）SqlSessionFactory" class="headerlink" title="（2）SqlSessionFactory"></a>（2）SqlSessionFactory</h3><p>SqlSessionFactory一旦被创建，应该在程序运行期间一直存在，因为<strong>它是创建SqlSession对象的工厂</strong>。默认为单例模式。</p>
<h3 id="（3）SqlSession"><a href="#（3）SqlSession" class="headerlink" title="（3）SqlSession"></a>（3）SqlSession</h3><p>SqlSession是用于访问数据库的一个会话。</p>
<ul>
<li>SqlSession实例<strong>不是线程安全的</strong>，因此避免被共享，最佳的使用域是请求或非静态方法作用域。</li>
<li>使用完一个SqlSession后<strong>一定一定一定</strong>要关闭它，为避免关闭资源时异常，最好使用以下方式使用SqlSession</li>
</ul>
<pre><code class="java">// 获取SqlSession对象的方法
public static SqlSession getSqlSession()&#123;
    return sqlSessionFactory.openSession();
&#125;

// 重载方法，选择是否自动提交
public static SqlSession getSqlSession(boolean autoCommit)&#123;
    return sqlSessionFactory.openSession(autoCommit);
&#125;
</code></pre>
<pre><code class="java">try(SqlSession sqlSession = MybatisUtils.getSqlSession())&#123;
    UserDao userDao = sqlSession.getMapper(UserDao.class);
    List&lt;User&gt; userList = userDao.getUserList();
    for (User user : userList) &#123;
        System.out.println(user.toString());
    &#125;
&#125;
</code></pre>
<h2 id="四、Mapper标签属性注意事项"><a href="#四、Mapper标签属性注意事项" class="headerlink" title="四、Mapper标签属性注意事项"></a>四、Mapper标签属性注意事项</h2><ul>
<li><code>id</code>：对应接口的方法名</li>
<li><code>resultType</code>：结果集类型，要写全限定类名，或别名</li>
<li><code>parameterType</code>：参数类型</li>
<li>当接口方法只有一个参数时，<code>#&#123;&#125;</code>中有以下几种填法<ul>
<li>若传入参数类型是一个实体类或其他类，<code>#&#123;&#125;</code>可直接填入相应属性名</li>
<li>若传入参数类型是<code>Map</code>接口类（可以用别名<code>map</code>代表<code>Map</code>），<code>#&#123;&#125;</code>可直接填入相应的键值</li>
<li>若传入参数是<code>String</code>、<code>int</code>等其他类型，<code>#&#123;&#125;</code>填任意值数字或字母的组合都行，建议使用<code>param1</code></li>
</ul>
</li>
<li>当接口方法只有多个参数时，<code>parameterType</code>可不填，<code>#&#123;&#125;</code>按接口方法的参数顺序填入<code>#&#123;param1&#125;</code>、<code>#&#123;param2&#125;</code>。或者在接口处使用<code>@param</code>注解，给参数起一个别名。</li>
</ul>
<pre><code class="xml">&lt;!-- 有两个类型相同的参数的查询 --&gt;
&lt;select id=&quot;getTwoUserById&quot; parameterType=&quot;int&quot; resultType=&quot;org.xxxx.pojo.User&quot;&gt;
    select * from user where id = #&#123;param1&#125; or id = #&#123;param2&#125;
&lt;/select&gt;

&lt;!-- 有两个类型不同的参数的查询2 --&gt;
&lt;select id=&quot;getTwoUserById2&quot; parameterType=&quot;Object&quot; resultType=&quot;org.xxxx.pojo.User&quot;&gt;
    select * from user where id = #&#123;param1&#125; or name = #&#123;param2&#125;
&lt;/select&gt;

&lt;!-- 有两个类型不同的参数的查询3 --&gt;
&lt;select id=&quot;getTwoUserById3&quot; resultType=&quot;org.xxxx.pojo.User&quot;&gt;
    select * from user where id = #&#123;param1&#125; or id = #&#123;param2.id&#125;
&lt;/select&gt;

&lt;!-- 有两个类型不同的参数的查询4 --&gt;
&lt;select id=&quot;getTwoUserById4&quot; resultType=&quot;org.xxxx.pojo.User&quot;&gt;
    select * from user where id = #&#123;id&#125; or id = #&#123;user.id&#125;
&lt;/select&gt;
</code></pre>
<pre><code class="java">/**
 * 有两个类型不同的参数的查询4，使用@Param注解
 */
public List&lt;User&gt; getTwoUserById4(@Param(&quot;id&quot;) int id,@Param(&quot;user&quot;) User user);
</code></pre>
<ul>
<li>模糊查询有两种方式<ul>
<li>在mapper中这样用来拼接<code>%</code>：<code>like &quot;%&quot;#&#123;param1&#125;&quot;%&quot;</code></li>
<li>mapper中仍然使用<code>like #&#123;param1&#125;</code>，而在调用方式时手动在传入参数两边加上<code>%</code></li>
</ul>
</li>
</ul>
<p>推荐使用第一种，因为在参数里面加<code>%</code>可能面临被转义的风险。</p>
<pre><code class="xml">&lt;select id=&quot;getUserLike1&quot; parameterType=&quot;string&quot; resultType=&quot;org.xxxx.pojo.User&quot;&gt;
    select * from user where name like &quot;%&quot;#&#123;param1&#125;&quot;%&quot;
&lt;/select&gt;

&lt;select id=&quot;getUserLike2&quot; parameterType=&quot;string&quot; resultType=&quot;org.xxxx.pojo.User&quot;&gt;
    select * from user where name like #&#123;param1&#125;
&lt;/select&gt;
</code></pre>
<ul>
<li><code>resultMap</code>：结果集映射，将从数据库中取出来的字段和类中的属性做一个映射关系，为解决数据库字段名和类属性名不一致的问题。<code>column</code>为数据库字段名，<code>property</code>为类的属性名。</li>
</ul>
<pre><code class="xml">&lt;resultMap id=&quot;UserMap&quot; type=&quot;user&quot;&gt;
    &lt;result column=&quot;id&quot; property=&quot;id&quot;/&gt;
    &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;
    &lt;result column=&quot;password&quot; property=&quot;pwd&quot;/&gt;
&lt;/resultMap&gt;
</code></pre>
<h2 id="五、mybatis-config-xml配置解析"><a href="#五、mybatis-config-xml配置解析" class="headerlink" title="五、mybatis-config.xml配置解析"></a>五、mybatis-config.xml配置解析</h2><h3 id="（1）properties标签"><a href="#（1）properties标签" class="headerlink" title="（1）properties标签"></a>（1）properties标签</h3><p>可以引入其他某个<code>.properties</code>文件，作为参数值在本配置文件中使用。</p>
<pre><code class="xml">&lt;properties resource=&quot;db.properties&quot;/&gt;
</code></pre>
<p>也可以可以加入<code>property</code>标签加入自定义参数。</p>
<p>对于有重复的参数，参数调用顺序是，先生成<code>property</code>标签中的参数，再读取引入的配置文件中的参数，对于有重复的参数会被覆盖掉，理解成一个<code>HashMap</code>即可。</p>
<h3 id="（2）settings标签"><a href="#（2）settings标签" class="headerlink" title="（2）settings标签"></a>（2）settings标签</h3><p>有以下属性：<a target="_blank" rel="noopener" href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a></p>
<p>主要用的有：</p>
<ul>
<li>cacheEnabled：缓存</li>
<li>useGeneratedKeys：自动生成主键</li>
<li>mapUnderscoreToCamelCase：数据库字段名转java属性名时自动重命名</li>
<li>logImpl：日志实现类</li>
</ul>
<p>官网也给了一个建议的设置如下：</p>
<pre><code class="xml">&lt;settings&gt;
  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;
  &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;
  &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;
  &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;
  &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;
  &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;
  &lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt;
  &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;
  &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt;
  &lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt;
  &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;
  &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;
  &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;
  &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;
  &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot;/&gt;
&lt;/settings&gt;
</code></pre>
<h3 id="（3）typeAliases标签"><a href="#（3）typeAliases标签" class="headerlink" title="（3）typeAliases标签"></a>（3）typeAliases标签</h3><p>为类型设置别名，这样避免了写全限定类型或全限定接口名。</p>
<p>当为一整个包的类设置别名时，若类型带有<code>@Alias</code>注解时，别名为注解值；否则别名为对应类的类型，首字母小写。</p>
<pre><code class="xml">&lt;typeAliases&gt;
    &lt;!-- &lt;typeAlias type=&quot;org.yuyr757.pojo.User&quot; alias=&quot;UserAlias&quot;/&gt; --&gt;
    &lt;package name=&quot;org.xxxxx.pojo&quot;/&gt;
&lt;/typeAliases&gt;
</code></pre>
<p>Mybatis有一些默认别名，如下：<a target="_blank" rel="noopener" href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases</a></p>
<h3 id="（4）mappers映射器"><a href="#（4）mappers映射器" class="headerlink" title="（4）mappers映射器"></a>（4）mappers映射器</h3><p>官网有四种写法，使用完全限定资源定位符（URL）不推荐使用。</p>
<pre><code class="xml">&lt;mappers&gt;
    &lt;!-- &lt;mapper resource=&quot;org/xxxx/Dao/UserMapper.xml&quot;/&gt;--&gt;
    &lt;!-- &lt;mapper class=&quot;org.xxxx.Dao.UserMapper&quot;/&gt;--&gt;
    &lt;package name=&quot;org.xxxx.Dao&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>最推荐使用第四种，将包内的映射器接口实现全部注册为映射器。使用条件：</p>
<ul>
<li>接口和mapper必须放在同一个包下，建议包名为Dao，<font color="Red">同一个包下是指编译后同一个包下，可以在resources目录下也新建一个<code>org.xxxx.Dao</code>目录，这样接口和mapper配置就会编译到同一个包下了。</font></li>
<li>接口和mapper两个文件名必须相同（文件类型后缀不管）</li>
<li>使用这种方式必须在<code>pom.xml</code>中把<code>src/java/main</code>下的xml文件作为配置文件添加到<code>build.resources.resource</code>中</li>
</ul>
<pre><code>java.org.xxxx.Dao
    UserMapper.java（接口）
    Department.java
resources.org.xxxx.Dao
    UserMapper.xml（mapper）
    Department.xml
</code></pre>
<h2 id="六、分页"><a href="#六、分页" class="headerlink" title="六、分页"></a>六、分页</h2><p>1、在mapper的sql语句中把startIndex和endIndex作为参数传入进去</p>
<p>2、分页插件PageHelper：<a target="_blank" rel="noopener" href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p>
<h2 id="七、使用注解开发"><a href="#七、使用注解开发" class="headerlink" title="七、使用注解开发"></a>七、使用注解开发</h2><p>实现方式：反射、动态代理</p>
<pre><code class="java">/**
 * 对于这种很简单的sql，可以不用写mapper，直接写一个Select注解，里面传入sql值即可
 * 注意点：
 * 1、数据库字段名和类属性名要相同
 * 2、returnType为接口的返回类型
 * 3、parameterType为接口的参数类型
 */
@Select(&quot;select * from user where id = #&#123;param1&#125;&quot;)
public List&lt;User&gt; getUserByIdUsingAnnotation(int id);

@Select(&quot;select * from user where id = #&#123;param1&#125; or name = #&#123;param2&#125;&quot;)
public List&lt;User&gt; getUserByIdUsingAnnotation2(int id, String name);

@Insert(&quot;insert into user(id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)&quot;)
public void addUserUsingAnnotation(User user);
</code></pre>
<h2 id="八、连表查询1"><a href="#八、连表查询1" class="headerlink" title="八、连表查询1"></a>八、连表查询1</h2><p>在数据库设计时，为降低数据的冗余，一般都会做到三范式。比如学生老师信息表可能会做成以下这种方式：</p>
<p>比如一个学生表如下：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>NAME</th>
<th>TEACHER_ID</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>小明</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>小五</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>小华</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>小石</td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td>李笑</td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td>孙武</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td>黄铭</td>
<td>2</td>
</tr>
</tbody></table>
<p>一个老师表如下：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>NAME</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>李老师</td>
</tr>
<tr>
<td>2</td>
<td>黄老师</td>
</tr>
<tr>
<td>3</td>
<td>钱老师</td>
</tr>
</tbody></table>
<p>因此我们的java对象应该是这样的：</p>
<pre><code class="java">public class Student &#123;
    private int id;
    private String name;
    private Teacher teacher; // 引用了一个老师
&#125;

public class Teacher &#123;
    private int id;
    private String name;
&#125;
</code></pre>
<p>这样我们在配置mapper时有两种方法：</p>
<h3 id="1、通过子查询方式"><a href="#1、通过子查询方式" class="headerlink" title="1、通过子查询方式"></a>1、通过子查询方式</h3><pre><code class="xml">&lt;select id=&quot;getStudent&quot; resultMap=&quot;studentTeacher&quot;&gt;
    select * from student
&lt;/select&gt;

&lt;resultMap id=&quot;studentTeacher&quot; type=&quot;student&quot;&gt;
    &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;!-- 对象使用association，集合使用collection --&gt;
    &lt;association property=&quot;teacher&quot; column=&quot;teacher_id&quot; javaType=&quot;teacher&quot; select=&quot;getTeacher&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;getTeacher&quot; resultType=&quot;teacher&quot;&gt;
    select * from teacher where id = #&#123;id&#125;
&lt;/select&gt;
</code></pre>
<p>其中<code>association</code>标签的属性解释：</p>
<ul>
<li><code>property</code>：属性名</li>
<li><code>column</code>：该属性要用数据库中的某个字段名去关联查询</li>
<li><code>javaType</code>：该属性的类型</li>
<li><code>select</code>：从数据库拿到这个类的数据的select语句</li>
</ul>
<p>这种方式实际上就是把查询出来的关联字段去重，去重后再去数据库里面查相应的数据，再封装到对象中。</p>
<p>如打开日志后可以发现这种方式实际上查了四次数据库。</p>
<pre><code>2021-02-22 17:40:11[ DEBUG ]Opening JDBC Connection
2021-02-22 17:40:12[ DEBUG ]Created connection 202125197.
2021-02-22 17:40:12[ DEBUG ]==&gt;  Preparing: select * from student 
2021-02-22 17:40:12[ DEBUG ]==&gt; Parameters: 
2021-02-22 17:40:12[ DEBUG ]====&gt;  Preparing: select * from teacher where id = ? 
2021-02-22 17:40:12[ DEBUG ]====&gt; Parameters: 1(Integer)
2021-02-22 17:40:12[ DEBUG ]&lt;====      Total: 1
2021-02-22 17:40:12[ DEBUG ]====&gt;  Preparing: select * from teacher where id = ? 
2021-02-22 17:40:12[ DEBUG ]====&gt; Parameters: 3(Integer)
2021-02-22 17:40:12[ DEBUG ]&lt;====      Total: 1
2021-02-22 17:40:12[ DEBUG ]====&gt;  Preparing: select * from teacher where id = ? 
2021-02-22 17:40:12[ DEBUG ]====&gt; Parameters: 2(Integer)
2021-02-22 17:40:12[ DEBUG ]&lt;====      Total: 1
2021-02-22 17:40:12[ DEBUG ]&lt;==      Total: 7
Student&#123;id=1, name=&#39;小明&#39;, teacher=Teacher&#123;id=1, name=&#39;李老师&#39;&#125;&#125;
Student&#123;id=2, name=&#39;小五&#39;, teacher=Teacher&#123;id=1, name=&#39;李老师&#39;&#125;&#125;
Student&#123;id=3, name=&#39;小华&#39;, teacher=Teacher&#123;id=3, name=&#39;钱老师&#39;&#125;&#125;
Student&#123;id=4, name=&#39;小石&#39;, teacher=Teacher&#123;id=2, name=&#39;黄老师&#39;&#125;&#125;
Student&#123;id=5, name=&#39;李笑&#39;, teacher=Teacher&#123;id=3, name=&#39;钱老师&#39;&#125;&#125;
Student&#123;id=6, name=&#39;孙武&#39;, teacher=Teacher&#123;id=2, name=&#39;黄老师&#39;&#125;&#125;
Student&#123;id=7, name=&#39;黄铭&#39;, teacher=Teacher&#123;id=2, name=&#39;黄老师&#39;&#125;&#125;
2021-02-22 17:40:12[ DEBUG ]Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@c0c2f8d]
2021-02-22 17:40:12[ DEBUG ]Returned connection 202125197 to pool.
</code></pre>
<h3 id="2、通过连表查询方式"><a href="#2、通过连表查询方式" class="headerlink" title="2、通过连表查询方式"></a>2、通过连表查询方式</h3><pre><code class="xml">&lt;select id=&quot;getStudent2&quot; resultMap=&quot;studentTeacher2&quot;&gt;
    select s.id, s.name, s.teacher_id, t.name as teacher_name
    from student s left join teacher t on s.teacher_id = t.id
&lt;/select&gt;

&lt;resultMap id=&quot;studentTeacher2&quot; type=&quot;student&quot;&gt;
    &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;association property=&quot;teacher&quot; javaType=&quot;teacher&quot;&gt;
        &lt;result property=&quot;id&quot; column=&quot;teacher_id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;teacher_name&quot;/&gt;
    &lt;/association&gt;
&lt;/resultMap&gt;
</code></pre>
<p>同样有一个<code>association</code>标签，而下面还有封装这个<code>teacher</code>类的子标签，子标签定义了初始化这个类所需要的字段映射。</p>
<ul>
<li><code>property</code>：属性名</li>
<li><code>javaType</code>：该属性的类型</li>
</ul>
<p>这种方式只需要查一次数据库：</p>
<pre><code>2021-02-22 17:41:58[ DEBUG ]Opening JDBC Connection
2021-02-22 17:41:59[ DEBUG ]Created connection 202125197.
2021-02-22 17:41:59[ DEBUG ]==&gt;  Preparing: select s.id, s.name, s.teacher_id, t.name as teacher_name from student s left join teacher t on s.teacher_id = t.id 
2021-02-22 17:41:59[ DEBUG ]==&gt; Parameters: 
2021-02-22 17:41:59[ DEBUG ]&lt;==      Total: 7
Student&#123;id=1, name=&#39;小明&#39;, teacher=Teacher&#123;id=1, name=&#39;李老师&#39;&#125;&#125;
Student&#123;id=2, name=&#39;小五&#39;, teacher=Teacher&#123;id=1, name=&#39;李老师&#39;&#125;&#125;
Student&#123;id=4, name=&#39;小石&#39;, teacher=Teacher&#123;id=2, name=&#39;黄老师&#39;&#125;&#125;
Student&#123;id=6, name=&#39;孙武&#39;, teacher=Teacher&#123;id=2, name=&#39;黄老师&#39;&#125;&#125;
Student&#123;id=7, name=&#39;黄铭&#39;, teacher=Teacher&#123;id=2, name=&#39;黄老师&#39;&#125;&#125;
Student&#123;id=3, name=&#39;小华&#39;, teacher=Teacher&#123;id=3, name=&#39;钱老师&#39;&#125;&#125;
Student&#123;id=5, name=&#39;李笑&#39;, teacher=Teacher&#123;id=3, name=&#39;钱老师&#39;&#125;&#125;
2021-02-22 17:41:59[ DEBUG ]Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@c0c2f8d]
2021-02-22 17:41:59[ DEBUG ]Returned connection 202125197 to pool.
</code></pre>
<p><font color="Red">具体使用哪种方式视情况而定，简单的连表可以使用第二种。当连表查询的sql特别复杂，以致于难以在sql层面去优化时，可以使用第一种，主查询把其他需要连的表的主键查询来，子查询再用主键去查，可能会提高效率。</font></p>
<h2 id="九、连表查询2"><a href="#九、连表查询2" class="headerlink" title="九、连表查询2"></a>九、连表查询2</h2><p>对于以上的学生老师表，我们的java类还可能是这样的：</p>
<pre><code class="java">public class Student2 &#123;
    private int id;
    private String name;
    private int teacherId;
&#125;

public class Teacher2 &#123;
    private int id;
    private String name;
    private List&lt;Student&gt; students; // 老师这里有多个学生对象的引用
&#125;
</code></pre>
<p>同样有子查询和连表查询两种方式：</p>
<h3 id="1、通过子查询方式-1"><a href="#1、通过子查询方式-1" class="headerlink" title="1、通过子查询方式"></a>1、通过子查询方式</h3><pre><code class="xml">&lt;!-- 子查询 --&gt;
&lt;select id=&quot;getTeacherById2&quot; resultMap=&quot;teacher2Student2&quot;&gt;
    select t.id, t.name from teacher t where t.id = #&#123;id&#125;
&lt;/select&gt;

&lt;resultMap id=&quot;teacher2Student2&quot; type=&quot;teacher2&quot;&gt;
    &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;collection property=&quot;students&quot; column=&quot;id&quot; javaType=&quot;ArrayList&quot; ofType=&quot;student2&quot; select=&quot;getStudent&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;getStudent&quot; resultMap=&quot;student2Map&quot;&gt;
    select * from student where teacher_id = #&#123;id&#125;
&lt;/select&gt;

&lt;resultMap id=&quot;student2Map&quot; type=&quot;student2&quot;&gt;
    &lt;result property=&quot;teacherId&quot; column=&quot;teacher_id&quot;/&gt;
&lt;/resultMap&gt;
</code></pre>
<h3 id="2、通过连表查询方式-1"><a href="#2、通过连表查询方式-1" class="headerlink" title="2、通过连表查询方式"></a>2、通过连表查询方式</h3><pre><code class="xml">&lt;!-- 连表查询 --&gt;
&lt;select id=&quot;getTeacherById&quot; resultMap=&quot;teacher2Student&quot;&gt;
    select t.id, t.name, s.id as student_id, s.name as student_name
    from teacher t left join student s on t.id = s.teacher_id
    where t.id = #&#123;id&#125;
&lt;/select&gt;

&lt;resultMap id=&quot;teacher2Student&quot; type=&quot;teacher2&quot;&gt;
    &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;!-- 这里要用ofType，即集合的元素类型 --&gt;
    &lt;collection property=&quot;students&quot; ofType=&quot;student2&quot;&gt;
        &lt;result property=&quot;id&quot; column=&quot;student_id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;student_name&quot;/&gt;
        &lt;result property=&quot;teacherId&quot; column=&quot;id&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<h2 id="十、缓存"><a href="#十、缓存" class="headerlink" title="十、缓存"></a>十、缓存</h2><h3 id="1、本地缓存。"><a href="#1、本地缓存。" class="headerlink" title="1、本地缓存。"></a>1、本地缓存。</h3><p>作用域为SqlSession，默认开启。</p>
<p>在一个session中查两次相同的sql，只会执行一次sql，第二次拿到的对象，和第一次拿到的对象的<font color="Red">地址都是一样的。</font><strong>本地缓存将会在做出修改、事务提交或回滚，以及关闭session时清空。默认情况下，本地缓存数据的生命周期等同于整个session的周期。</strong></p>
<h3 id="2、二级缓存。"><a href="#2、二级缓存。" class="headerlink" title="2、二级缓存。"></a>2、二级缓存。</h3><p>作用域为mapper的namespace，<font color="Red">当sqlsession作出修改、事务提交、回滚或关闭时，会把本地缓存扔到二级缓存中。即一级缓存失效时，会把其缓存的数据扔到二级缓存中。</font></p>
<p>需要在mapper中加入<code>&lt;cache/&gt;</code>就可以为这个mapper开启二级缓存。</p>
<pre><code class="xml">&lt;cache
       eviction=&quot;FIFO&quot;
       flushInterval=&quot;60000&quot;
       size=&quot;512&quot;
       readOnly=&quot;true&quot;/&gt;
</code></pre>
<p>在<code>mybatis-config.xml</code>配置中，设置<code>cacheEnabled</code>为true可以为所有mapper开启二级缓存。</p>
<p>缓存清除策略：</p>
<ul>
<li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li>
<li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li>
<li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li>
<li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li>
</ul>
<h3 id="3、缓存顺序"><a href="#3、缓存顺序" class="headerlink" title="3、缓存顺序"></a>3、缓存顺序</h3><p><strong>二级缓存 =&gt; 本地缓存 =&gt; 数据库</strong></p>
<h2 id="N、注意事项"><a href="#N、注意事项" class="headerlink" title="N、注意事项"></a>N、注意事项</h2><ul>
<li>insert、update、delete要手动提交事务：</li>
</ul>
<pre><code class="java">sqlSession.commit();
</code></pre>

</div>


    <div class="post-guide">
        <div class="item left">
            
              <a href="/bigdata/hbase/HBase-study">
                  <i class="fa fa-angle-left" aria-hidden="true"></i>
                  HBase-study
              </a>
            
        </div>
        <div class="item right">
            
              <a href="/java/springboot/springboot-study">
                springboot-study
                <i class="fa fa-angle-right" aria-hidden="true"></i>
              </a>
            
        </div>
    </div>




<script>
	
	
</script>
	</div>
	<div id="footer">
	<p>
	©2019-<span id="footerYear"></span> 
	
	<br>
	Theme <a href="//github.com/wujun234/hexo-theme-tree" target="_blank">Tree</a>
	Powered by <a href="//hexo.io" target="_blank">Hexo</a>
	</p>
</div>
<script type="text/javascript"> 
	document.getElementById('footerYear').innerHTML = new Date().getFullYear() + '';
</script>
	<button id="totop-toggle" class="toggle"><i class="fa fa-angle-double-up" aria-hidden="true"></i></button>
</body>
</html>