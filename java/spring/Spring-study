<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport">
	
	<!-- title -->
	
	<title>
	
		spring-study | 
	 
	Yury&#39;s Blog
	</title>
	
	<!-- keywords,description -->
	 
		<meta name="description" content="blog of usual study" />
	

	<!-- favicon -->
	
	<link rel="shortcut icon" href="/favicon.ico">
	


	<!-- search -->
	<script>
		var searchEngine = "https://www.google.com/search?q=";
		if(typeof searchEngine == "undefined" || searchEngine == null || searchEngine == ""){
			searchEngine = "https://www.google.com/search?q=";
		}
		var homeHost = "";
		if(typeof homeHost == "undefined" || homeHost == null || homeHost == ""){
			homeHost = window.location.host;
		}
	</script>


	
<link rel="stylesheet" href="/css/main.css">

	
<link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/styles/darcula.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css">


	
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/highlight.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/npm/jquery-pjax@2.0.1/jquery.pjax.min.js"></script>

	
<script src="/js/main.js"></script>

	
		
<script src="https://cdn.jsdelivr.net/npm/leancloud-storage/dist/av-min.js"></script>

		
<script src="https://cdn.jsdelivr.net/npm/valine@1.3.10/dist/Valine.min.js"></script>

	
	
<meta name="generator" content="Hexo 5.4.0"><link rel="alternate" href="/atom.xml" title="Yury's Blog" type="application/atom+xml">
</head>

<body>
	<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?3efe99c287df5a1d6f0d02d187e403c1";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

<header id="header">
    <a id="title" href="/" class="logo">Yury's Blog</a>

	<ul id="menu">
		<li class="menu-item">
			<a href="/about" class="menu-item-link">ABOUT</a>
		</li>
	
		<li class="menu-item">
			<a href="/tags" class="menu-item-link">标签</a>
		</li>
	

	
		<li class="menu-item">
			<a href="/categories" class="menu-item-link">分类</a>
		</li>
	

		<li class="menu-item">
			<a href="https://github.com/yury757" class="menu-item-link" target="_blank">
				<i class="fa fa-github fa-2x"></i>
			</a>
		</li>
	</ul>
</header>

	
<div id="sidebar">
	<button id="sidebar-toggle" class="toggle" ><i class="fa fa-arrow-right " aria-hidden="true"></i></button>
	
	<div id="site-toc">
		<input id="search-input" class="search-input" type="search" placeholder="按回车全站搜索">
		<div id="tree">
			

			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Git
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										learngit
									</a>
									
							<ul>
								<li class="file">
									<a href="/Git/learngit/learn-git">
										learn-git
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										bigdata
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										clickhouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/clickhouse/clickhouse">
										clickhouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hadoop
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hadoop/hadoop-study">
										hadoop-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hbase
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hbase/HBase-study">
										HBase-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										kafka
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/kafka/kafka">
										kafka
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										zookeeper
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/zookeeper/zookeeper-study">
										zookeeper-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										computer-science
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Computer-Networking
									</a>
									
							<ul>
								<li class="file">
									<a href="/computer-science/Computer-Networking/Computer-Networking">
										Computer-Networking
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										database
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mysql
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL中的exists与in的使用
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8">
										MySQL中的exists与in的使用
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL备份-Linux版
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88">
										MySQL备份-linux版
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL日期格式化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96">
										MySQL日期格式化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL查询执行计划详解-explain
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain">
										MySQL查询执行计划详解-explain
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL迁移数据目录
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95">
										MySQL迁移数据目录
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										《高性能MySQL》
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第1章-MySQL架构与历史
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2">
										第一章-MySQL架构与历史
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第2章-MySQL基准测试
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC2%E7%AB%A0-MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">
										第二章 MySQL基准测试
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第3章-服务器性能剖析
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC3%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90">
										第三章-服务器性能剖析
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第4章-Schema与数据类型优化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC4%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96">
										第四章-Schema与数据类型优化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第5章-创建高性能的索引
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC5%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95">
										第五章-创建高性能的索引
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										postgresql
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/postgresql/postgresql">
										postgresql
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										JVM
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/JVM/jvm-1.8">
										jvm-1.8
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										SSM-Build
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/SSM-Build/SSM-Build">
										SSM-Build
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_JUC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_JUC/Java_JUC-study">
										Java_JUC-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_NIO
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_NIO/Java_NIO-study">
										Java_NIO-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mybatis
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/mybatis/mybatis-study">
										mybatis-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springMVC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springMVC/SpringMVC-Study">
										SpringMVC-Study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springboot
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springboot/springboot-study">
										springboot-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										spring
									</a>
									
							<ul>
								<li class="file active">
									<a href="/java/spring/Spring-study">
										Spring-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										linux
									</a>
									
							<ul>
								<li class="file">
									<a href="/linux/linux%E5%91%BD%E4%BB%A4">
										linux命令
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										operating-support
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										docker
									</a>
									
							<ul>
								<li class="file">
									<a href="/operating-support/docker/docker">
										docker
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										project
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										flink_data_warehouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/project/flink_data_warehouse/flink_data_warehouse">
										flink_data_warehouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
		</div>
	</div>
</div>

	<!-- 引入正文 -->
	<div id="content">
		<h1 id="article-title">

	Spring-study
</h1>
<div class="article-meta">
	
	<span>Yury</span>
	<span>2021-08-24 00:00:00</span>
		<div id="article-categories">
    
		<span>Categories：</span>
            
                
                    <span>
                        <i class="fa fa-folder" aria-hidden="true">
                        <a href="/categories/java/">java</a>
                        </i>
                      
                    </span>
                
            
    

    
		<span>Tags：</span>
            
                
                    <span>
                        <i class="fa fa-tag" aria-hidden="true">
                        <a href="/tags/java/">java</a>
                        </i>
                    </span>
                
            
                
                    <span>
                        <i class="fa fa-tag" aria-hidden="true">
                        <a href="/tags/spring/">spring</a>
                        </i>
                    </span>
                
            
    
		</div>

</div>

<div id="article-content">
	<p>代码地址：<a target="_blank" rel="noopener" href="https://github.com/yury757/SpringStudy">yury757/SpringStudy (github.com)</a></p>
<p><font color="Red">spring：约定大于配置！</font></p>
<h2 id="一、IOC（控制反转）"><a href="#一、IOC（控制反转）" class="headerlink" title="一、IOC（控制反转）"></a>一、IOC（控制反转）</h2><h3 id="1、什么是IOC"><a href="#1、什么是IOC" class="headerlink" title="1、什么是IOC"></a>1、什么是IOC</h3><p>之前都是我们手动new一个对象（比如new一个Dao层对象），然后使用这个对象的属性的方法。</p>
<p>而IOC就是不用我们去new这个对象，我们只要定义一些配置，然后把创建对象的工作交给spring框架处理，我们需要使用时直接把对象从IOC容器中取出来即可。</p>
<p><font color="Red">因此IOC（控制反转）的含义就是：spring中，对象创建的权利从我们程序员手动创建控制管理，转变为由spring框架去创建控制管理。</font></p>
<p><font color="Red">DI（依赖注入）的含义就是：spring框架在创建类的实例时，这个类的所有属性需要私有化，并且设置getter、setter方法，spring框架就可以通过setter方法给对应属性注入值。若没有相应的setter方法，则会报错。</font></p>
<p>配置如下：</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;!-- 使用spring来创建对象，在spring中，这些对象都叫做bean --&gt;
    &lt;!-- id：唯一id --&gt;
    &lt;!-- class：需要new的类型 --&gt;
    &lt;!-- property：对象的属性 --&gt;
    &lt;!-- property.name：对象属性名 --&gt;
    &lt;!-- property.value：对象属性设置值 --&gt;
    &lt;bean id=&quot;hello&quot; class=&quot;org.yuyr757.pojo.Hello&quot;&gt;
        &lt;property name=&quot;str&quot; value=&quot;spring_value&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<p>取出对象的代码如下：</p>
<pre><code class="java">// 获取spring的上下文对象
ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);
// 我们的对象都在spring管理，我们要使用的话，直接去spring容器里面取
Hello hello = (Hello)context.getBean(&quot;hello&quot;);
System.out.println(hello.toString());
</code></pre>
<p>和Mybatis有点像，都是通过配置文件来配置创建对象所需要的东西，然后把创建对象的工作交给框架来做。</p>
<p><font color="Red">只不过Mybatis是根据接口创建对象，这个对象的类型的java代码我们甚至没写过，而且对象里面只有方法（CRUD）。而spring的创建对象只是单纯的根据我们写好的java类去new一个实例，然后我们需要什么就取什么。</font></p>
<h3 id="2、通过bean创建对象的四种方式"><a href="#2、通过bean创建对象的四种方式" class="headerlink" title="2、通过bean创建对象的四种方式"></a>2、通过bean创建对象的四种方式</h3><pre><code class="xml">&lt;!-- 无参构造，再调用相应属性的setter方法 --&gt;
&lt;bean id=&quot;user1&quot; class=&quot;org.yuyr757.pojo.User&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;1&quot;/&gt;
    &lt;property name=&quot;name&quot; value=&quot;test_user_name1&quot;/&gt;
&lt;/bean&gt;

&lt;!-- 有参构造，使用构造方法参数下标 --&gt;
&lt;bean id=&quot;user2&quot; class=&quot;org.yuyr757.pojo.User&quot;&gt;
    &lt;constructor-arg index=&quot;0&quot; value=&quot;2&quot;/&gt;
    &lt;constructor-arg index=&quot;1&quot; value=&quot;test_user_name2&quot;/&gt;
&lt;/bean&gt;

&lt;!-- 有参构造，使用构造方法参数类型 --&gt;
&lt;!-- 不建议使用 --&gt;
&lt;bean id=&quot;user3&quot; class=&quot;org.yuyr757.pojo.User&quot;&gt;
    &lt;constructor-arg type=&quot;int&quot; value=&quot;3&quot;/&gt;
    &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;test_user_name3&quot;/&gt;
&lt;/bean&gt;

&lt;!-- 有参构造，使用构造方法参数参数名 --&gt;
&lt;bean id=&quot;user4&quot; class=&quot;org.yuyr757.pojo.User&quot;&gt;
    &lt;constructor-arg name=&quot;id&quot; value=&quot;4&quot;/&gt;
    &lt;constructor-arg name=&quot;name&quot; value=&quot;test_user_name4&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<h3 id="3、spring创建对象的时间"><a href="#3、spring创建对象的时间" class="headerlink" title="3、spring创建对象的时间"></a>3、spring创建对象的时间</h3><p><font color="Red">值得注意的是，bean默认为单例模式。对于单例模式的bean，当程序启动时，spring就会立即给帮我们把对象创建好了，而不是等我们调用getBean时创建的。</font></p>
<pre><code class="java">package org.yuyr757.pojo;

public class User &#123;
    private int id;
    private String name;
    public User() &#123;
        System.out.println(&quot;调用了无参构造方法&quot;);
    &#125;
    public User(int id, String name) &#123;
        System.out.println(&quot;调用了有参构造方法&quot;);
        this.id = id;
        this.name = name;
    &#125;
    public String getName() &#123;
        System.out.println(&quot;调用了getName方法&quot;);
        return name;
    &#125;
    public void setName(String name) &#123;
        System.out.println(&quot;调用了setName方法&quot;);
        this.name = name;
    &#125;
    public int getId() &#123;
        System.out.println(&quot;调用了getId方法&quot;);
        return id;
    &#125;
    public void setId(int id) &#123;
        System.out.println(&quot;调用了setId方法&quot;);
        this.id = id;
    &#125;
    @Override
    public String toString() &#123;
        return &quot;User&#123;&quot; +
                &quot;id=&quot; + id +
                &quot;, name=&#39;&quot; + name + &#39;\&#39;&#39; +
                &#39;&#125;&#39;;
    &#125;
&#125;
</code></pre>
<pre><code class="java">public class TestHello &#123;
    public static final ApplicationContext context;

    static&#123;
        context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;); // 在这里打断点调试
        // 上面这条语句结束后，就立即打印了下面几句话
        // 调用了无参构造方法
        // 调用了setId方法
        // 调用了setName方法
        // 调用了有参构造方法
        // 调用了有参构造方法
        // 调用了有参构造方法
    &#125;
    
    @Test
    public void testUser()&#123;
        System.out.println(&quot;=============================&quot;);
        User user1 = (User)context.getBean(&quot;user1&quot;);
        System.out.println(user1.toString());
        System.out.println(&quot;=============================&quot;);
        User user2 = (User)context.getBean(&quot;user2&quot;);
        System.out.println(user2.toString());
        System.out.println(&quot;=============================&quot;);
        User user3 = (User)context.getBean(&quot;user3&quot;);
        System.out.println(user3.toString());
        System.out.println(&quot;=============================&quot;);
        User user4 = (User)context.getBean(&quot;user4&quot;);
        System.out.println(user4.toString());
        System.out.println(&quot;=============================&quot;);
    &#125;
&#125;
</code></pre>
<h3 id="4、spring配置文件"><a href="#4、spring配置文件" class="headerlink" title="4、spring配置文件"></a>4、spring配置文件</h3><h4 id="（1）bean标签"><a href="#（1）bean标签" class="headerlink" title="（1）bean标签"></a>（1）bean标签</h4><ul>
<li><p><code>id</code>：唯一id，用于获取到这个对象的id</p>
</li>
<li><p><code>class</code>：需要new的类型，要写全限定类名</p>
</li>
<li><p><code>property</code>：定义对象的属性的标签</p>
</li>
<li><p><code>constructor-arg</code>：定义构造函数的标签</p>
<ul>
<li><code>name</code>：对象属性名或构造函数的参数名</li>
<li><code>value</code>：普通值</li>
<li><code>ref</code>：引用一个bean</li>
<li><code>array</code>：注入一个数组</li>
<li><code>list</code>：注入一个列表</li>
<li><code>map</code>：注入一个映射表</li>
<li><code>set</code>：注入一个集合</li>
<li><code>null</code>：注入一个null指针</li>
<li><code>props</code>：注入一个properties对象</li>
</ul>
</li>
<li><p><code>scope</code>：作用域</p>
</li>
</ul>
<h4 id="（2）import标签"><a href="#（2）import标签" class="headerlink" title="（2）import标签"></a>（2）import标签</h4><p>导入其他bean配置文件。</p>
<p>适用于团队开发，不同的人开发的bean不同，最终汇总的时候用一个applicationContext.xml引入各个bean.xml即可。</p>
<pre><code class="xml">&lt;import resource=&quot;beans.xml&quot;/&gt;
&lt;import resource=&quot;beans2.xml&quot;/&gt;
&lt;import resource=&quot;beans3.xml&quot;/&gt;
</code></pre>
<h3 id="5、注入方式"><a href="#5、注入方式" class="headerlink" title="5、注入方式"></a>5、注入方式</h3><h4 id="（1）普通方式"><a href="#（1）普通方式" class="headerlink" title="（1）普通方式"></a>（1）普通方式</h4><pre><code class="java">package org.yuyr757.pojo;

import java.util.*;

public class Student &#123;
    private String name;
    private Address address;
    private String[] books;
    private List&lt;String&gt; hobbies;
    private Map&lt;String, String&gt; card;
    private Set&lt;String&gt; games;
    private String wife;
    private Properties info;

    @Override
    public String toString() &#123;
        return &quot;Student&#123;&quot; +
                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +
                &quot;, address=&quot; + address +
                &quot;, books=&quot; + Arrays.toString(books) +
                &quot;, hobbies=&quot; + hobbies +
                &quot;, card=&quot; + card +
                &quot;, games=&quot; + games +
                &quot;, info=&quot; + info +
                &quot;, wife=&#39;&quot; + wife + &#39;\&#39;&#39; +
                &#39;&#125;&#39;;
    &#125;

    public String getName() &#123;
        return name;
    &#125;

    public void setName(String name) &#123;
        this.name = name;
    &#125;

    public Address getAddress() &#123;
        return address;
    &#125;

    public void setAddress(Address address) &#123;
        this.address = address;
    &#125;

    public String[] getBooks() &#123;
        return books;
    &#125;

    public void setBooks(String[] books) &#123;
        this.books = books;
    &#125;

    public List&lt;String&gt; getHobbies() &#123;
        return hobbies;
    &#125;

    public void setHobbies(List&lt;String&gt; hobbies) &#123;
        this.hobbies = hobbies;
    &#125;

    public Map&lt;String, String&gt; getCard() &#123;
        return card;
    &#125;

    public void setCard(Map&lt;String, String&gt; card) &#123;
        this.card = card;
    &#125;

    public Set&lt;String&gt; getGames() &#123;
        return games;
    &#125;

    public void setGames(Set&lt;String&gt; games) &#123;
        this.games = games;
    &#125;

    public Properties getInfo() &#123;
        return info;
    &#125;

    public void setInfo(Properties info) &#123;
        this.info = info;
    &#125;

    public String getWife() &#123;
        return wife;
    &#125;

    public void setWife(String wife) &#123;
        this.wife = wife;
    &#125;

    public Student() &#123;
    &#125;

    public Student(String name, Address address, String[] books, List&lt;String&gt; hobbies, Map&lt;String, String&gt; card, Set&lt;String&gt; games, Properties info, String wife) &#123;
        this.name = name;
        this.address = address;
        this.books = books;
        this.hobbies = hobbies;
        this.card = card;
        this.games = games;
        this.info = info;
        this.wife = wife;
    &#125;
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.pojo;

public class Address &#123;
    private String address;

    @Override
    public String toString() &#123;
        return &quot;Address&#123;&quot; +
                &quot;address=&#39;&quot; + address + &#39;\&#39;&#39; +
                &#39;&#125;&#39;;
    &#125;

    public String getAddress() &#123;
        return address;
    &#125;

    public void setAddress(String address) &#123;
        this.address = address;
    &#125;

    public Address() &#123;
    &#125;

    public Address(String address) &#123;
        this.address = address;
    &#125;
&#125;
</code></pre>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;!-- 测试特别复杂类型的注入 --&gt;
    &lt;bean id=&quot;student&quot; class=&quot;org.yuyr757.pojo.Student&quot;&gt;
        &lt;!-- 普通值，value --&gt;
        &lt;property name=&quot;name&quot; value=&quot;yuyr757&quot;/&gt;

        &lt;!-- bean注入，ref --&gt;
        &lt;property name=&quot;address&quot; ref=&quot;address&quot;/&gt;

        &lt;!-- 数组注入，array --&gt;
        &lt;property name=&quot;books&quot;&gt;
            &lt;array&gt;
                &lt;value&gt;红楼梦&lt;/value&gt;
                &lt;value&gt;水浒传&lt;/value&gt;
                &lt;value&gt;西游记&lt;/value&gt;
                &lt;value&gt;三国演义&lt;/value&gt;
            &lt;/array&gt;
        &lt;/property&gt;

        &lt;!-- 列表注入，list --&gt;
        &lt;property name=&quot;hobbies&quot;&gt;
            &lt;list&gt;
                &lt;value&gt;听歌&lt;/value&gt;
                &lt;value&gt;写代码&lt;/value&gt;
                &lt;value&gt;看电影&lt;/value&gt;
            &lt;/list&gt;
        &lt;/property&gt;

        &lt;!-- 映射表注入，map --&gt;
        &lt;property name=&quot;card&quot;&gt;
            &lt;map&gt;
                &lt;entry key=&quot;身份证&quot; value=&quot;111111111111111111&quot;/&gt;
                &lt;entry key=&quot;银行卡&quot; value=&quot;222222222222222222&quot;/&gt;
            &lt;/map&gt;
        &lt;/property&gt;

        &lt;!-- 集合注入，set --&gt;
        &lt;property name=&quot;games&quot;&gt;
            &lt;set&gt;
                &lt;value&gt;魂斗罗&lt;/value&gt;
                &lt;value&gt;冒险岛&lt;/value&gt;
                &lt;value&gt;七龙珠&lt;/value&gt;
            &lt;/set&gt;
        &lt;/property&gt;

        &lt;!-- null注入，null --&gt;
        &lt;property name=&quot;wife&quot;&gt;
            &lt;null/&gt;
        &lt;/property&gt;

        &lt;!-- properties对象注入，props，注意和map的区别 --&gt;
        &lt;property name=&quot;info&quot;&gt;
            &lt;props&gt;
                &lt;prop key=&quot;学号&quot;&gt;U201300001&lt;/prop&gt;
                &lt;prop key=&quot;性别&quot;&gt;男&lt;/prop&gt;
                &lt;prop key=&quot;username&quot;&gt;root&lt;/prop&gt;
                &lt;prop key=&quot;password&quot;&gt;root&lt;/prop&gt;
            &lt;/props&gt;
        &lt;/property&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;address&quot; class=&quot;org.yuyr757.pojo.Address&quot;&gt;
        &lt;property name=&quot;address&quot; value=&quot;我是一个地址&quot;/&gt;
    &lt;/bean&gt;

&lt;/beans&gt;
</code></pre>
<h4 id="（2）拓展方式"><a href="#（2）拓展方式" class="headerlink" title="（2）拓展方式"></a>（2）拓展方式</h4><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;
       xmlns:c=&quot;http://www.springframework.org/schema/c&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;!-- 以上加入这个这个拓展标签 --&gt;
    &lt;!-- xmlns:p=&quot;http://www.springframework.org/schema/p&quot; --&gt;
    &lt;!-- 加入这个标签后可以直接在后面使用 p:属性名 来定义属性 --&gt;
    &lt;bean id=&quot;user5&quot; class=&quot;org.yuyr757.pojo.User&quot; p:id=&quot;5&quot; p:name=&quot;user_test_5&quot;/&gt;

    &lt;!-- 以上加入这个这个拓展标签 --&gt;
    &lt;!-- xmlns:p=&quot;http://www.springframework.org/schema/c&quot; --&gt;
    &lt;!-- 加入这个标签后可以直接在后面使用 c:属性名/下标 来定义构造方法的参数的值 --&gt;
    &lt;bean id=&quot;user6&quot; class=&quot;org.yuyr757.pojo.User&quot; c:id=&quot;6&quot; c:name=&quot;user_test_6&quot;/&gt;
    &lt;bean id=&quot;user7&quot; class=&quot;org.yuyr757.pojo.User&quot; c:_0=&quot;7&quot; c:_1=&quot;user_test_7&quot;/&gt;
&lt;/beans&gt;
</code></pre>
<h3 id="6、bean的作用域"><a href="#6、bean的作用域" class="headerlink" title="6、bean的作用域"></a>6、bean的作用域</h3><h4 id="（1）singleton-Scope（单例，默认）"><a href="#（1）singleton-Scope（单例，默认）" class="headerlink" title="（1）singleton Scope（单例，默认）"></a>（1）singleton Scope（单例，默认）</h4><p>从服务器启动到服务器消灭，全局只创建一个对象。当使用多线程时，多个线程拿到的是同一个对象（<font color="Red">注意线程的安全</font>）。</p>
<h4 id="（2）prototype（多例）"><a href="#（2）prototype（多例）" class="headerlink" title="（2）prototype（多例）"></a>（2）prototype（多例）</h4><p>每次调用getBean方法，都会重新new一个对象。</p>
<h4 id="（3）request、session、application"><a href="#（3）request、session、application" class="headerlink" title="（3）request、session、application"></a>（3）request、session、application</h4><p>这三个只能在web应用中使用，和servlet中的不同作用域的context差不多。</p>
<h3 id="7、bean的自动装配"><a href="#7、bean的自动装配" class="headerlink" title="7、bean的自动装配"></a>7、bean的自动装配</h3><p><font color="Red">即spring会在容器中自动寻找创建某个对象的依赖，并装配到这个对象的属性中。</font>有以下方式：</p>
<h4 id="（1）在xml中显式配置"><a href="#（1）在xml中显式配置" class="headerlink" title="（1）在xml中显式配置"></a>（1）在xml中显式配置</h4><ul>
<li>byName：在容器中自动查找对应属性的setter方法名中set后面的值相同的bean的id</li>
<li>byType：在容器中自动查找对应属性类型相同的bean，使用这种方式，一定要保证相同类型的对象只有一个bean</li>
</ul>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;bean id=&quot;dog&quot; class=&quot;org.yuyr757.pojo.Dog&quot;/&gt;
    &lt;bean id=&quot;cat&quot; class=&quot;org.yuyr757.pojo.Cat&quot;/&gt;
&lt;!--    &lt;bean id=&quot;cat2&quot; class=&quot;org.yuyr757.pojo.Cat&quot;/&gt;--&gt;

    &lt;!-- byName：在容器中自动查找对应属性的setter方法名中set后面的值相同的bean的id --&gt;
    &lt;bean id=&quot;people1&quot; class=&quot;org.yuyr757.pojo.People&quot; autowire=&quot;byName&quot;&gt;
        &lt;property name=&quot;name&quot; value=&quot;这是我的名字1&quot;/&gt;
    &lt;/bean&gt;
    &lt;!-- byType：在容器中自动查找对应属性类型相同的bean --&gt;
    &lt;!-- 当容器中有两个相同类型的对象时，不能使用byType --&gt;
    &lt;bean id=&quot;people2&quot; class=&quot;org.yuyr757.pojo.People&quot; autowire=&quot;byType&quot;&gt;
        &lt;property name=&quot;name&quot; value=&quot;这是我的名字2&quot;/&gt;
    &lt;/bean&gt;
    
&lt;/beans&gt;
</code></pre>
<h4 id="（2）使用注解"><a href="#（2）使用注解" class="headerlink" title="（2）使用注解"></a>（2）使用注解</h4><p>要在<code>applicationContext.xml</code>中加入以下支持。</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;context:annotation-config/&gt;


&lt;/beans&gt;
</code></pre>
<p><font color="Red">xml配置和注解的一般结合方式：在xml中配置bean，在注入属性时使用注解。</font></p>
<h3 id="8、注解"><a href="#8、注解" class="headerlink" title="8、注解"></a>8、注解</h3><h4 id="（1）普通注解"><a href="#（1）普通注解" class="headerlink" title="（1）普通注解"></a>（1）普通注解</h4><ul>
<li><p><code>@Component</code>：作用目标：类。把该类当作一个bean对象，即相当于在配置中加入了一个bean标签，默认单例。</p>
</li>
<li><p><code>@AutoWired</code>：作用目标：很多，一般用于属性。为该属性通过setter方法注入一个值，相当于在配置文件中加入了一个property标签。<font color="Red">先通过byType的方法注入的，当IOC容器中有多个相同类型的对象时，再使用byName的方式来注入，而这个name默认就是根据变量名来的。</font></p>
</li>
<li><p><code>@Qualifier</code>：作用目标：很多，一般用于属性。<font color="Red">通过byName自动注入，该注解有一个value属性，指定去找对应名字的bean。</font>可以和<code>@AutoWired</code>配合使用。</p>
</li>
<li><p><code>@Resources</code>：作用目标：很多，一般用于属性。<font color="Red">相当于以上两个注解的结合。</font>有一个name属性，用于匹配bean的名字，不填。</p>
</li>
<li><p><code>@value</code>：作用目标：很多，一般用于属性。为该属性通过setter方法注入一个普通的确定的值。</p>
</li>
</ul>
<h4 id="（2）衍生注解"><a href="#（2）衍生注解" class="headerlink" title="（2）衍生注解"></a>（2）衍生注解</h4><ul>
<li><code>Repository</code>：这是Component注解的别名，用于表示这个类是Dao层的类</li>
<li><code>Service</code>：这是Component注解的别名，用于表示这个类是Service层的类</li>
<li><code>Controller</code>：这是Component注解的别名，用于表示这个类是Controller层的类</li>
<li><code>Scope</code>：作用域，singleton、prototype等</li>
</ul>
<h3 id="9、使用java类来配置spring"><a href="#9、使用java类来配置spring" class="headerlink" title="9、使用java类来配置spring"></a>9、使用java类来配置spring</h3><p>即不需要再xml中配置spring，而是在一个SpringConfig类中配置。</p>
<ul>
<li><code>@configuration</code>：在类上加入这个注解，则表明这是一个配置类。</li>
<li><code>@Bean</code>：在方法的的上面加这个注解，相当于xml中的一个bean标签，方法的名字就是bean标签的id，方法的返回值就是bean标签的class属性。</li>
<li><code>@Import</code>：引入其他配置类</li>
</ul>
<pre><code class="java">package org.yuyr757.config;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.yuyr757.pojo.Address;
import org.yuyr757.pojo.User;

@Configuration
@Import(MyConfig2.class)
public class MyConfig &#123;
    @Bean
    public Address address()&#123;
        return new Address(&quot;1&quot;);
    &#125;

    @Bean
    public Address address2()&#123;
        return new Address(&quot;2&quot;);
    &#125;

    @Bean
    public User getUser()&#123;
        return new User();
    &#125;
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.pojo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

public class User &#123;
    @Value(&quot;yuyr757&quot;)
    private String name;

    @Autowired
    private Address address;

    @Override
    public String toString() &#123;
        return &quot;User&#123;&quot; +
                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +
                &quot;, address=&quot; + address +
                &#39;&#125;&#39;;
    &#125;

    public String getName() &#123;
        return name;
    &#125;

    public void setName(String name) &#123;
        this.name = name;
    &#125;

    public Address getAddress() &#123;
        return address;
    &#125;

    public void setAddress(Address address) &#123;
        this.address = address;
    &#125;

    public User() &#123;
    &#125;

    public User(String name, Address address) &#123;
        this.name = name;
        this.address = address;
    &#125;
&#125;
</code></pre>
<h2 id="二、AOP"><a href="#二、AOP" class="headerlink" title="二、AOP"></a>二、AOP</h2><p>AOP：Aspect-Oriented Programming，面向切面编程</p>
<p><img src="/images/aop-program.png"></p>
<h3 id="1、代理模式"><a href="#1、代理模式" class="headerlink" title="1、代理模式"></a>1、代理模式</h3><h4 id="（1）静态代理"><a href="#（1）静态代理" class="headerlink" title="（1）静态代理"></a>（1）静态代理</h4><p>角色：</p>
<ul>
<li>抽象角色：一般使用接口或抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真是角色，并做一些附属操作</li>
<li>客户：访问代理角色的人</li>
</ul>
<p>以租房为例。</p>
<p>很多客户（租户）直接找到真实角色（房东），完成一个操作（租房）。但是要完成这个操作要很多其他繁琐的事情（比如每次都要带客户看房、签合同等），真实角色（房东）不想做这些他认为没有意义的操作。于是真实角色（房东）找到一个同样可以做这个操作（租房）的代理角色（中介），让代理角色（中介）去和客户（租户）完成看房、签合同等其他操作，真实角色（房东）就可以专心做租房这一个操作了。抽象角色指一类人，这类人都可以完成租房这个操作。在这里真实角色（房东）和代理角色（中介）都是同一类抽象角色。</p>
<p><font color="Red">注意在代码中理解四类角色。</font></p>
<ul>
<li>示例一</li>
</ul>
<pre><code class="java">package org.yuyr757.Demo1;
// 抽象角色
public interface Rent &#123;
    public void rent();
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.Demo1;
// 客户
public class Client &#123;
    public static void main(String[] args) &#123;
        // 直接找房东租房
        Host host = new Host();
        host.rent();

        System.out.println(&quot;======================&quot;);

        // 找中介租房
        // 通过代理可以做一些附属操作
        Proxy proxy = new Proxy(host);
        proxy.rent();
    &#125;
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.Demo1;
// 房东
public class Host implements Rent&#123;
    public void rent() &#123;
        System.out.println(&quot;房东要出租房子&quot;);
    &#125;
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.Demo1;
// 中介
public class Proxy implements Rent &#123;
    private Host host;

    public Host getHost() &#123;
        return host;
    &#125;

    public void setHost(Host host) &#123;
        this.host = host;
    &#125;

    public Proxy() &#123;
    &#125;

    public Proxy(Host host) &#123;
        this.host = host;
    &#125;

    public void seeHouse()&#123;
        System.out.println(&quot;中介带看房&quot;);
    &#125;

    public void payFee()&#123;
        System.out.println(&quot;收取中介费&quot;);
    &#125;

    public void rent() &#123;
        this.seeHouse();
        host.rent();
        this.payFee();
    &#125;
&#125;
</code></pre>
<ul>
<li>示例二：</li>
</ul>
<pre><code class="java">package org.yuyr757.Demo2;

public interface UserService &#123;
    public void add();
    public void delete();
    public void update();
    public void query();
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.Demo2;

public class UserServiceImpl implements UserService&#123;
    public void add() &#123;
        System.out.println(&quot;增加了一个用户&quot;);
    &#125;

    public void delete() &#123;
        System.out.println(&quot;删除了一个用户&quot;);
    &#125;

    public void update() &#123;
        System.out.println(&quot;修改了一个用户&quot;);
    &#125;

    public void query() &#123;
        System.out.println(&quot;查询了一个用户&quot;);
    &#125;
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.Demo2;

public class UserServiceProxy implements UserService&#123;
    private UserService userService;

    public UserServiceProxy() &#123;
    &#125;

    public UserServiceProxy(UserService userService) &#123;
        this.userService = userService;
    &#125;

    public UserService getUserService() &#123;
        return userService;
    &#125;

    public void setUserService(UserService userService) &#123;
        this.userService = userService;
    &#125;

    public void add() &#123;
        log(&quot;使用了add&quot;);
        this.userService.add();
    &#125;

    public void delete() &#123;
        log(&quot;使用了delete&quot;);
        this.userService.delete();
    &#125;

    public void update() &#123;
        log(&quot;使用了update&quot;);
        this.userService.update();
    &#125;

    public void query() &#123;
        log(&quot;使用了query&quot;);
        this.userService.query();
    &#125;

    public void log(String message)&#123;
        System.out.println(message);
    &#125;
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.Demo2;

public class Client &#123;
    public static void main(String[] args) &#123;
        UserServiceImpl userService = new UserServiceImpl();
        UserServiceProxy userServiceProxy = new UserServiceProxy(userService);
        userServiceProxy.add();
    &#125;
&#125;
</code></pre>
<p>优点：</p>
<ul>
<li>可以使真实角色专注他自己的业务，其他业务交给其他角色来做，实现了分工</li>
<li>有良好的扩展性，可以在不修改其他功能的基础上新增其他功能</li>
</ul>
<p><font color="Red">缺点：一个真实角色就要产生一个代理角色，代码量会翻倍。有没有一种方法可以避免写这么多代理类，或者自动生成代理类。这就是动态代理。</font></p>
<h4 id="（2）动态代理（十分重要！）"><a href="#（2）动态代理（十分重要！）" class="headerlink" title="（2）动态代理（十分重要！）"></a>（2）动态代理（十分重要！）</h4><ul>
<li><p>动态代理和静态代理的角色一样。</p>
</li>
<li><p>动态代理的代理角色（代理类）是动态生成的，不是我们自己写的。</p>
</li>
<li><p>动态代理有两类：</p>
<ul>
<li>基于接口——JDK动态代理</li>
<li>基于类——cglib</li>
<li>java字节码实现——javassist</li>
</ul>
</li>
<li><p>需要了解两个类/接口：</p>
<ul>
<li>InvocationHandler：调用处理程序</li>
<li>Proxy：代理类</li>
</ul>
</li>
</ul>
<pre><code class="java">public interface InvocationHandler &#123;

    /**
     * Processes a method invocation on a proxy instance and returns
     * the result.  This method will be invoked on an invocation handler
     * when a method is invoked on a proxy instance that it is
     * associated with.
     *
     * @param   proxy （代理实例，即生成的代理对象，要用该对象去调用某个方法）the proxy instance that the method was invoked on
     *
     * @param   method （在代理实例上调用的接口方法的实例，即要调用的方法）the &#123;@code Method&#125; instance corresponding to
     * the interface method invoked on the proxy instance.  The declaring
     * class of the &#123;@code Method&#125; object will be the interface that
     * the method was declared in, which may be a superinterface of the
     * proxy interface that the proxy class inherits the method through.
     *
     * @param   args （参数数组）an array of objects containing the values of the
     * arguments passed in the method invocation on the proxy instance,
     * or &#123;@code null&#125; if interface method takes no arguments.
     * Arguments of primitive types are wrapped in instances of the
     * appropriate primitive wrapper class, such as
     * &#123;@code java.lang.Integer&#125; or &#123;@code java.lang.Boolean&#125;.
     *
     * @return  the value to return from the method invocation on the
     * proxy instance.  If the declared return type of the interface
     * method is a primitive type, then the value returned by
     * this method must be an instance of the corresponding primitive
     * wrapper class; otherwise, it must be a type assignable to the
     * declared return type.  If the value returned by this method is
     * &#123;@code null&#125; and the interface method&#39;s return type is
     * primitive, then a &#123;@code NullPointerException&#125; will be
     * thrown by the method invocation on the proxy instance.  If the
     * value returned by this method is otherwise not compatible with
     * the interface method&#39;s declared return type as described above,
     * a &#123;@code ClassCastException&#125; will be thrown by the method
     * invocation on the proxy instance.
     *
     * @throws  Throwable the exception to throw from the method
     * invocation on the proxy instance.  The exception&#39;s type must be
     * assignable either to any of the exception types declared in the
     * &#123;@code throws&#125; clause of the interface method or to the
     * unchecked exception types &#123;@code java.lang.RuntimeException&#125;
     * or &#123;@code java.lang.Error&#125;.  If a checked exception is
     * thrown by this method that is not assignable to any of the
     * exception types declared in the &#123;@code throws&#125; clause of
     * the interface method, then an
     * &#123;@link UndeclaredThrowableException&#125; containing the
     * exception that was thrown by this method will be thrown by the
     * method invocation on the proxy instance.
     *
     * @see     UndeclaredThrowableException
     */
    public Object invoke(Object proxy, Method method, Object[] args)
        throws Throwable;
&#125;
</code></pre>
<pre><code class="java">// 这个类提供了创建动态代理类和实例的方法，这个方法是静态的，通过这些方法创建的类都继承了Proxy这个类
public class Proxy implements java.io.Serializable&#123;
    
    /* -------------------属性------------------- */
    // final的属性基本都不用管，因为我们无法做修改
    private static final long serialVersionUID = -2222568056686623797L;
    private static final Class&lt;?&gt;[] constructorParams = &#123; InvocationHandler.class &#125;;
    private static final WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;
        proxyClassCache = new WeakCache&lt;&gt;(new KeyFactory(), new ProxyClassFactory());
    private static final Object key0 = new Object();
    
    // 这个是我们需要传入的对象，就是上面说的那个接口类
    protected InvocationHandler h;
    
    /* -------------------构造方法------------------- */
    private Proxy() &#123;&#125;;
    protected Proxy(InvocationHandler h);
    
    /* -------------------静态方法------------------- */
    
    // 生成代理类，会调用getProxyClass0方法
    @CallerSensitive
    public static Class&lt;?&gt; getProxyClass(ClassLoader loader,
                                         Class&lt;?&gt;... interfaces);
    
    // 检查代理权限
    private static void checkProxyAccess(Class&lt;?&gt; caller,
                                         ClassLoader loader,
                                         Class&lt;?&gt;... interfaces);
    
    // 重要！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
    // 从类加载器中生成一个代理类，文档说生成代理类之前必须检查代理权限（checkProxyAccess）
    private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,
                                           Class&lt;?&gt;... interfaces);
    
    // 重要！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
    // 生成一个代理类的实例
    // loader：真实对象（目标对象）的类加载器
    // interfaces：真实对象（目标对象）的接口组成的数组
    // h：实现了上面那个InvocationHandler接口的对象
    @CallerSensitive
    public static Object newProxyInstance(ClassLoader loader,
                                          Class&lt;?&gt;[] interfaces,
                                          InvocationHandler h);
    
    // 检查caller类和proxyclass类是否在同一个包内，如果不在同一个包内，再检查相关权限
    private static void checkNewProxyPermission(Class&lt;?&gt; caller, Class&lt;?&gt; proxyClass);
    
    // 判断一个类是否是一个由Proxy类生成的代理类
    public static boolean isProxyClass(Class&lt;?&gt; cl);
    
    // 传入一个对象参数，取出这个对象中的InvocationHandler属性，就是上面的h
    public static InvocationHandler getInvocationHandler(Object proxy);
    
    // native，非java实现，不用管
    private static native Class&lt;?&gt; defineClass0(ClassLoader loader, String name,
                                                byte[] b, int off, int len);
    
    /* -------------------内部private类------------------- */
    private static final class Key1 extends WeakReference&lt;Class&lt;?&gt;&gt;&#123;&#125;
    private static final class Key2 extends WeakReference&lt;Class&lt;?&gt;&gt;&#123;&#125;
    private static final class KeyX&#123;&#125;
    private static final class KeyFactory
        implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Object&gt;&#123;&#125;
    // 创建代理类的工厂，如果工厂中有相应接口的代理类的缓存，则会返回一个代理类的复制，否则会重新创建一个代理类
    private static final class ProxyClassFactory
        implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;&#123;&#125;
&#125;
</code></pre>
<p><font color="Red">动态代理的本质：JVM在运行时动态创建class字节码并加载的过程。要实现的接口和调用接口方法的handler，可以生成一个class字节码，然后由对应的类加载器加载calss字节码，就可以在内存中生成一个类对象（代理类）了。当代理对象调用对应方法时，handler会将方法转发给自己的invoke方法。于是我们就可以在invoke方法中加入增强方法的代码。</font></p>
<p>用动态代理来增强示例二如下：</p>
<pre><code class="java">package org.yuyr757.DynamicProxy2;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class ProxyInvocationHandler implements InvocationHandler &#123;
    private Object target;

    /**
     * 设置真实对象，相当于代理对象要和真实对象签定委托代理的契约，代理对象才可以有权限对做真实对象才能做的事情
     * 就像现实生活中，租房中介要拿到房东的授权委托书，中介才可以有权去代理房东租房
     */
    public void setTarget(Object target) &#123;
        this.target = target;
    &#125;

    public ProxyInvocationHandler() &#123;
    &#125;

    public ProxyInvocationHandler(Object target) &#123;
        this.target = target;
    &#125;

    /**
     * 生成一个代理对象，即生成一个租房中介
     * @loader 这个中介的类加载器和房东是一样的，即他们的级别是一样的
     * @interfaces 这个中介的接口和房东是一样的，即他们都应该有相同的动作
     * @h 这个中介拿到一个InvocationHandler对象，即每当客户有租房的动作时，租房的动作会通过InvocationHandler转发到自己的invoke方法，代理对象就可以在invoker方法中做一些额外操作
     * 此外newProxyInstance方法内部还会授予相关代理权限，不然任何一个没有权限的人都可以代理房东去租房
     */
    public Object getProxy()&#123;
        return Proxy.newProxyInstance(
                this.target.getClass().getClassLoader(),
                this.target.getClass().getInterfaces(),
                this
        );
    &#125;

    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;
        this.log(method.getName());
        Object returnObject = method.invoke(target, args);
        return returnObject;
    &#125;

    public void log(String msg)&#123;
        System.out.println(&quot;调用了&quot; + msg + &quot;方法&quot;);
    &#125;
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.DynamicProxy2;

import org.yuyr757.Demo2.UserService;
import org.yuyr757.Demo2.UserServiceImpl;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Arrays;

public class Client &#123;
    public static void main(String[] args) &#123;
        UserService userservice = new UserServiceImpl();
        ProxyInvocationHandler handler = new ProxyInvocationHandler(userservice);
        UserService proxy = (UserService)handler.getProxy();
        System.out.println(&quot;=============查看生成的类的具体信息=============&quot;);
        Class proxyClass = proxy.getClass();
        System.out.println(&quot;类名称：&quot; + proxyClass.getName());
        System.out.println(&quot;类加载器：&quot; + proxyClass.getClassLoader());
        System.out.println(&quot;类接口：&quot; + Arrays.toString(proxyClass.getInterfaces()));
        System.out.println(&quot;类的父类：&quot; + proxyClass.getSuperclass());
        System.out.println(&quot;public方法和父类的public方法：&quot;);
        for (Method method : proxyClass.getMethods()) &#123;
            System.out.println(method.toString());
        &#125;
        System.out.println(&quot;所有本类的方法：&quot;);
        for (Method method : proxyClass.getDeclaredMethods()) &#123;
            System.out.println(method.toString());
        &#125;
        System.out.println(&quot;所有本类的属性：&quot; );
        for (Field declaredField : proxyClass.getDeclaredFields()) &#123;
            System.out.println(declaredField);
        &#125;
        System.out.println(&quot;=============测试方法=============&quot;);
        proxy.add();
        proxy.delete();
        proxy.update();
        proxy.query();
        System.out.println(&quot;=============代理其他实现了该接口的类只需要修改目标对象即可=============&quot;);
        handler.setTarget(new UserServiceImpl2());
        UserService proxy2 = (UserService)handler.getProxy();
        proxy2.add();
        proxy2.delete();
        proxy2.update();
        proxy2.query();
    &#125;
&#125;
</code></pre>
<p>动态代理的优点：动态代理代理的是接口，一般是一类业务，所有实现了该接口的类都可以被代理，减少了代码量。</p>
<p>缺点：效率稍微低一些。因为要在运行时根据接口动态生成字节码，再重新加载字节码。</p>
<h3 id="2、spring-aop"><a href="#2、spring-aop" class="headerlink" title="2、spring-aop"></a>2、spring-aop</h3><p>几个重要概念：</p>
<ul>
<li><strong>切入点（pointcut）</strong>：即我们原有的功能或业务逻辑，一堆方法的集合</li>
<li><strong>切面（aspect）</strong>：一个切入到我们原有功能里面的新功能的集合（模块），一个类</li>
<li><strong>通知（advisor）</strong>：切面要完成的工作，即类中的方法</li>
<li><strong>连接点（joinpoint）</strong>：在切入点具体执行的某一个方法</li>
</ul>
<p>通知的五种类型：</p>
<ul>
<li><strong>前置通知（Before advice）</strong>：即在目标方法执行前加一个增强方法</li>
<li><strong>正常返回通知（After returning advice）</strong>：在连接点正常执行完成后执行，如果连接点抛出异常，则不会执行。</li>
<li><strong>异常返回通知（After throwing advice）</strong>：在连接点抛出异常后执行。</li>
<li><strong>返回通知（After (finally) advice）</strong>：在连接点执行完成后执行，不管是正常执行完成，还是抛出异常，都会执行返回通知中的内容。</li>
<li><strong>环绕通知（Around advice）</strong>：即把目标方法包裹在该通知方法内，比如我们使用IDEA有一个快捷键是<code>ctrl + alt + T</code>，即用一个方法把目标方法包裹（surrounding）起来。使用这种通知时，要把目标方法传入我们的通知方法中。<font color="Red">最强的通知类型，完全可以使用这一个通知，然后在通知方法里面定义具体的实现，来满足以上四个通知（下面有示例）。前四个通知和环绕通知最好不要一起使用， 即要么使用前四个通知，要么只使用环绕通知。若都使用了，比如同时使用了前置通知和环绕通知，则目标方法执行前的增强方法好像是根据xml配置的顺序决定的。反正别一起使用就对了。【！！！推荐使用环绕通知，自己写增强方法，因为在有返回值和报异常同时存在的情况下，环绕通知有更强的实现，以上四个通知都做不到】</font></li>
</ul>
<h4 id="（1）方式一：使用spring-aop接口实现"><a href="#（1）方式一：使用spring-aop接口实现" class="headerlink" title="（1）方式一：使用spring aop接口实现"></a>（1）方式一：使用spring aop接口实现</h4><p>配置文件中不需要aspect，因为spring会去找实现了相应接口的类当作aspect，需要配置pointcut和advisor。</p>
<pre><code class="xml">&lt;!-- 配置AOP --&gt;
&lt;!-- 方式一：使用原生spring aop的api接口 --&gt;
&lt;aop:config&gt;
    &lt;!-- 配置切入点，即需要增强的目方法 --&gt;
    &lt;!-- expression：表达式，execution(要执行的位置，修饰词 返回值 列名 方法名 参数) --&gt;
    &lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;/&gt;

    &lt;!-- 执行环绕增加 --&gt;
    &lt;aop:advisor advice-ref=&quot;logBefore&quot; pointcut-ref=&quot;pointcut&quot;/&gt;
    &lt;aop:advisor advice-ref=&quot;logAfter&quot; pointcut-ref=&quot;pointcut&quot;/&gt;
&lt;/aop:config&gt;
</code></pre>
<h4 id="（2）方式二：自定义类-xml配置（建议使用）"><a href="#（2）方式二：自定义类-xml配置（建议使用）" class="headerlink" title="（2）方式二：自定义类+xml配置（建议使用）"></a>（2）方式二：自定义类+xml配置（建议使用）</h4><p>要自定义类当作aspect，配置文件中定义aspect标签引用自定义类，再配置pointcut、before、after等。</p>
<pre><code class="xml">&lt;!-- 方式二：使用自定义类来实现aop --&gt;
&lt;aop:config&gt;
&lt;!-- 需要配置切面 --&gt;
    &lt;aop:aspect ref=&quot;diyPoint&quot;&gt;
        &lt;aop:pointcut id=&quot;point&quot; expression=&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;/&gt;
        &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;point&quot;/&gt;
        &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;point&quot;/&gt;
    &lt;/aop:aspect&gt;
&lt;/aop:config&gt;
</code></pre>
<h4 id="（3）方式三：使用自定义类-注解"><a href="#（3）方式三：使用自定义类-注解" class="headerlink" title="（3）方式三：使用自定义类+注解"></a>（3）方式三：使用自定义类+注解</h4><pre><code class="java">package org.yuyr757.DiyAop;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class DiyPointCut2 &#123;
    @Before(&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;)
    public void before()&#123;
        System.out.println(&quot;=========方法执行前2=========&quot;);
    &#125;

    @After(&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;)
    public void after()&#123;
        System.out.println(&quot;=========方法执行后2=========&quot;);
    &#125;
&#125;
</code></pre>
<pre><code class="xml">&lt;!-- 方式三：使用自定义+注解 --&gt;
&lt;aop:aspectj-autoproxy/&gt;

&lt;!-- proxy-target-class默认为false，false代表使用jdk自己的动态代理实现，true代表使用cglib实现，一般用false即可 --&gt;
&lt;aop:aspectj-autoproxy proxy-target-class=&quot;false&quot;/&gt;
</code></pre>
<h4 id="（4）示例"><a href="#（4）示例" class="headerlink" title="（4）示例"></a>（4）示例</h4><pre><code class="java">package org.yuyr757.DiyAop;

import org.aspectj.lang.ProceedingJoinPoint;

public class DiyPointCut &#123;
    public void before()&#123;
        System.out.println(&quot;=========before通知=========&quot;);
    &#125;

    public void after()&#123;
        System.out.println(&quot;=========after通知=========&quot;);
    &#125;

    public void afterReturning()&#123;
        System.out.println(&quot;=========afterReturning通知=========&quot;);
    &#125;

    public void afterThrowing()&#123;
        System.out.println(&quot;=========afterThrowing通知=========&quot;);
    &#125;

    public Object around(ProceedingJoinPoint joinPoint) throws Throwable &#123;
        Object object = 0;
        try&#123;
            System.out.println(&quot;=========around通知前=========&quot;);
            object = joinPoint.proceed();
            System.out.println(&quot;=========around通知-afterReturning=========&quot;);
        &#125;catch (IllegalArgumentException e)&#123;
            System.out.println(&quot;=========around通知-afterThrowing=========&quot;);
        &#125;finally &#123;
            System.out.println(&quot;=========around通知后=========&quot;);
        &#125;
        return object;
    &#125;
&#125;
</code></pre>
<pre><code class="xml">    &lt;aop:config&gt;
    &lt;!-- 需要配置切面 --&gt;
        &lt;aop:aspect ref=&quot;diyPoint&quot;&gt;
            &lt;aop:pointcut id=&quot;point&quot; expression=&quot;execution(* org.yuyr757.services.UserServiceImpl.*(..))&quot;/&gt;
&lt;!--            &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;point&quot;/&gt;--&gt;
&lt;!--            &lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;point&quot;/&gt;--&gt;
&lt;!--            &lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut-ref=&quot;point&quot;/&gt;--&gt;
            &lt;aop:around method=&quot;around&quot; pointcut-ref=&quot;point&quot;/&gt;
&lt;!--            &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;point&quot;/&gt;--&gt;
        &lt;/aop:aspect&gt;
    &lt;/aop:config&gt;
</code></pre>
<pre><code class="java">package org.yuyr757.services;

public class UserServiceImpl implements UserService&#123;
    public int add(int num) &#123;
        if (num &lt; 50) throw new IllegalArgumentException();
        System.out.println(&quot;增加了一个用户&quot;);
        return num;
    &#125;

    public void delete() &#123;
        System.out.println(&quot;删除了一个用户&quot;);
    &#125;

    public void update() &#123;
        System.out.println(&quot;修改了一个用户&quot;);
    &#125;

    public void select() &#123;
        System.out.println(&quot;查询了一个用户&quot;);
    &#125;
&#125;
</code></pre>
<pre><code class="java">package org.yuyr757.services;

public interface UserService &#123;
    public int add(int num);
    public void delete();
    public void update();
    public void select();
&#125;
</code></pre>
<pre><code class="java">import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.yuyr757.services.UserService;

public class TestAop1 &#123;
    public static final ApplicationContext context;

    static&#123;
        context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
    &#125;

    @Test
    public void testAopAroundReturning()&#123;
        System.out.println(&quot;【开始测试正常返回时的通知结果】&quot;);
        UserService userService = context.getBean(&quot;userServiceImpl&quot;, UserService.class);
        int num = userService.add(188);
        System.out.println(num);
    &#125;

    @Test
    public void testAopAroundThrowing()&#123;
        System.out.println(&quot;【开始测试报异常时的通知结果】&quot;);
        UserService userService = context.getBean(&quot;userServiceImpl&quot;, UserService.class);
        int num = userService.add(1);
        System.out.println(num);
    &#125;
&#125;
</code></pre>
<h2 id="三、整合spring和mybatis"><a href="#三、整合spring和mybatis" class="headerlink" title="三、整合spring和mybatis"></a>三、整合spring和mybatis</h2><p>需要用到<code>mybatis-spring</code>这个包。</p>
<p>此外对于每个mapper接口我们必须手动写一个实现类，然后注册到spring的bean中，实现类使用的SqlSession要使用SqlSessionTemplate。其他的都和mybatis一样配置</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;!-- 使用spring数据源代替mybatis数据源 --&gt;
    &lt;bean id=&quot;datasource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=true&amp;amp;serverTimezone=UTC&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;
    &lt;/bean&gt;

    &lt;!-- sqlSessionFactory --&gt;
    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;/&gt;
        &lt;!-- 绑定mybatis配置文件 --&gt;
        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;
        &lt;!-- 一般这里只需要绑定配置文件就可以，mybatis的配置还是在mybatis-config.xml中配置 --&gt;
    &lt;/bean&gt;

    &lt;!-- 这个sqlSessionTemplate是SqlSession的一个实现类，我们以后就不用手动调用openSession()方法来获得SqlSession对象 --&gt;
    &lt;bean id=&quot;sqlSessionTemplate&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;
        &lt;!-- 因为这个类没有setter方法，所以只能通过有参构造方法来初始化 --&gt;
        &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<h2 id="四、spring的事务管理"><a href="#四、spring的事务管理" class="headerlink" title="四、spring的事务管理"></a>四、spring的事务管理</h2><h3 id="1、编程式事务管理"><a href="#1、编程式事务管理" class="headerlink" title="1、编程式事务管理"></a>1、编程式事务管理</h3><p>手动在程序中写try catch来实现事务就是编程式事务管理。</p>
<h3 id="2、声明式事务管理"><a href="#2、声明式事务管理" class="headerlink" title="2、声明式事务管理"></a>2、声明式事务管理</h3><p>把事务交给IOC容器管理就是声明式事务管理。配置如下：</p>
<pre><code class="xml">&lt;!-- 声明式事务管理 --&gt;
&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;/&gt;
&lt;/bean&gt;

&lt;!-- 结合AOP实现事务织入 --&gt;
&lt;!-- 配置事务通知的的类：需要导入tx命名空间 --&gt;
&lt;tx:advice id=&quot;txAdvisor&quot; transaction-manager=&quot;transactionManager&quot;&gt;
    &lt;!-- name：给哪些方法配置事务，propagation：配置事务的传播特性 --&gt;
    &lt;tx:attributes&gt;
        &lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;select*&quot; read-only=&quot;true&quot;/&gt;
    &lt;/tx:attributes&gt;
&lt;/tx:advice&gt;

&lt;!-- 配置事务的切入点 --&gt;
&lt;aop:config&gt;
    &lt;aop:pointcut id=&quot;txPointCut&quot; expression=&quot;execution(* org.yuyr757.mapper.*.*(..))&quot;/&gt;
    &lt;aop:advisor advice-ref=&quot;txAdvisor&quot; pointcut-ref=&quot;txPointCut&quot;/&gt;
&lt;/aop:config&gt;
</code></pre>

</div>


    <div class="post-guide">
        <div class="item left">
            
              <a href="/java/springboot/springboot-study">
                  <i class="fa fa-angle-left" aria-hidden="true"></i>
                  springboot-study
              </a>
            
        </div>
        <div class="item right">
            
              <a href="/java/java_JUC/Java_JUC-study">
                Java_JUC-study
                <i class="fa fa-angle-right" aria-hidden="true"></i>
              </a>
            
        </div>
    </div>




<script>
	
	
</script>
	</div>
	<div id="footer">
	<p>
	©2019-<span id="footerYear"></span> 
	
	<br>
	Theme <a href="//github.com/wujun234/hexo-theme-tree" target="_blank">Tree</a>
	Powered by <a href="//hexo.io" target="_blank">Hexo</a>
	</p>
</div>
<script type="text/javascript"> 
	document.getElementById('footerYear').innerHTML = new Date().getFullYear() + '';
</script>
	<button id="totop-toggle" class="toggle"><i class="fa fa-angle-double-up" aria-hidden="true"></i></button>
</body>
</html>