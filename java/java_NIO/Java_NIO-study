<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport">
	
	<!-- title -->
	
	<title>
	
		Java_NIO-study | 
	 
	Yury&#39;s Blog
	</title>
	
	<!-- keywords,description -->
	 
		<meta name="description" content="blog of usual study" />
	

	<!-- favicon -->
	
	<link rel="shortcut icon" href="/favicon.ico">
	


	<!-- search -->
	<script>
		var searchEngine = "https://www.google.com/search?q=";
		if(typeof searchEngine == "undefined" || searchEngine == null || searchEngine == ""){
			searchEngine = "https://www.google.com/search?q=";
		}
		var homeHost = "";
		if(typeof homeHost == "undefined" || homeHost == null || homeHost == ""){
			homeHost = window.location.host;
		}
	</script>


	
<link rel="stylesheet" href="/css/main.css">

	
<link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/styles/darcula.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css">


	
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/highlight.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/npm/jquery-pjax@2.0.1/jquery.pjax.min.js"></script>

	
<script src="/js/main.js"></script>

	
		
<script src="https://cdn.jsdelivr.net/npm/leancloud-storage/dist/av-min.js"></script>

		
<script src="https://cdn.jsdelivr.net/npm/valine@1.3.10/dist/Valine.min.js"></script>

	
	
<meta name="generator" content="Hexo 5.4.0"><link rel="alternate" href="/atom.xml" title="Yury's Blog" type="application/atom+xml">
</head>

<body>
	<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?3efe99c287df5a1d6f0d02d187e403c1";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

<header id="header">
    <a id="title" href="/" class="logo">Yury's Blog</a>

	<ul id="menu">
		<li class="menu-item">
			<a href="/about" class="menu-item-link">ABOUT</a>
		</li>
	
		<li class="menu-item">
			<a href="/tags" class="menu-item-link">标签</a>
		</li>
	

	
		<li class="menu-item">
			<a href="/categories" class="menu-item-link">分类</a>
		</li>
	

		<li class="menu-item">
			<a href="https://github.com/yury757" class="menu-item-link" target="_blank">
				<i class="fa fa-github fa-2x"></i>
			</a>
		</li>
	</ul>
</header>

	
<div id="sidebar">
	<button id="sidebar-toggle" class="toggle" ><i class="fa fa-arrow-right " aria-hidden="true"></i></button>
	
	<div id="site-toc">
		<input id="search-input" class="search-input" type="search" placeholder="按回车全站搜索">
		<div id="tree">
			

			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Git
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										learngit
									</a>
									
							<ul>
								<li class="file">
									<a href="/Git/learngit/learn-git">
										learn-git
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										bigdata
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										clickhouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/clickhouse/clickhouse">
										clickhouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hadoop
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hadoop/hadoop-study">
										hadoop-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hbase
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hbase/HBase-study">
										HBase-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										kafka
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/kafka/kafka">
										kafka
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										zookeeper
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/zookeeper/zookeeper-study">
										zookeeper-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										computer-science
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Computer-Networking
									</a>
									
							<ul>
								<li class="file">
									<a href="/computer-science/Computer-Networking/Computer-Networking">
										Computer-Networking
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										database
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mysql
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL中的exists与in的使用
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8">
										MySQL中的exists与in的使用
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL备份-Linux版
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88">
										MySQL备份-linux版
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL日期格式化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96">
										MySQL日期格式化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL查询执行计划详解-explain
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain">
										MySQL查询执行计划详解-explain
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL迁移数据目录
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95">
										MySQL迁移数据目录
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										《高性能MySQL》
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第1章-MySQL架构与历史
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2">
										第一章-MySQL架构与历史
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第2章-MySQL基准测试
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC2%E7%AB%A0-MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">
										第二章 MySQL基准测试
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第3章-服务器性能剖析
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC3%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90">
										第三章-服务器性能剖析
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第4章-Schema与数据类型优化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC4%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96">
										第四章-Schema与数据类型优化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第5章-创建高性能的索引
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC5%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95">
										第五章-创建高性能的索引
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										postgresql
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/postgresql/postgresql">
										postgresql
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										JVM
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/JVM/jvm-1.8">
										jvm-1.8
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										SSM-Build
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/SSM-Build/SSM-Build">
										SSM-Build
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_JUC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_JUC/Java_JUC-study">
										Java_JUC-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_NIO
									</a>
									
							<ul>
								<li class="file active">
									<a href="/java/java_NIO/Java_NIO-study">
										Java_NIO-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="file">
									<a href="/java/java%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE">
										java常用配置
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mybatis
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/mybatis/mybatis-study">
										mybatis-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springMVC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springMVC/SpringMVC-Study">
										SpringMVC-Study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springboot
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springboot/springboot-study">
										springboot-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										spring
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/spring/Spring-study">
										Spring-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="file">
									<a href="/jetbrains%E7%B3%BB%E5%88%97IDE%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE">
										jetbrains系列IDE推荐设置
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										linux
									</a>
									
							<ul>
								<li class="file">
									<a href="/linux/linux%E5%91%BD%E4%BB%A4">
										linux命令
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										operating-support
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										docker
									</a>
									
							<ul>
								<li class="file">
									<a href="/operating-support/docker/docker">
										docker
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										project
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										flink_data_warehouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/project/flink_data_warehouse/flink_data_warehouse">
										flink_data_warehouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
		</div>
	</div>
</div>

	<!-- 引入正文 -->
	<div id="content">
		<h1 id="article-title">

	Java_NIO-study
</h1>
<div class="article-meta">
	
	<span>Yury</span>
	<span>2021-08-24 00:00:00</span>
		<div id="article-categories">
    
		<span>Categories：</span>
            
                
                    <span>
                        <i class="fa fa-folder" aria-hidden="true">
                        <a href="/categories/java/">java</a>
                        </i>
                      
                    </span>
                
            
    

    
		<span>Tags：</span>
            
                
                    <span>
                        <i class="fa fa-tag" aria-hidden="true">
                        <a href="/tags/java/">java</a>
                        </i>
                    </span>
                
            
    
		</div>

</div>

<div id="article-content">
	<h2 id="一、NIO和IO的区别"><a href="#一、NIO和IO的区别" class="headerlink" title="一、NIO和IO的区别"></a>一、NIO和IO的区别</h2><ul>
<li><p>传统IO面向流，而NIO面向管道（channel）和缓冲区（buffer）。传统IO只能单向传输数据，而NIO可以双向传输数据。传统IO就像单向水管，而NIO中channel像列车轨道，buffer就像火车，可以双向传输数据。</p>
</li>
<li><p>传统IO是阻塞（blocking）的，而NIO就是非阻塞（Non blocking）的。</p>
</li>
<li><p>NIO多了一个选择器（Selector），是针对网络编程用的。</p>
</li>
</ul>
<h2 id="二、缓冲区（Buffer）"><a href="#二、缓冲区（Buffer）" class="headerlink" title="二、缓冲区（Buffer）"></a>二、缓冲区（Buffer）</h2><p>缓冲区（Buffer）是基于数组来做管理的，负责存取数据。java NIO有七种xxxBuffer类，都继承了Buffer类，即八种基本数据类型中，除了boolean以外都提供了对应的xxxBuffer。</p>
<pre><code class="java">ByteBuffer
CharBuffer
ShortBuffer
IntBuffer
LongBuffer
FloatBuffer
DoubleBuffer
</code></pre>
<p>每种xxxBuffer类还不是最终实现类，最终的实现类有两种，以下以ByteBuffer为例：</p>
<pre><code class="java">// 属于下面说的直接缓冲区，不懂操作系统的人最好不要使用，有风险
class DirectByteBufferR extends DirectByteBuffer implements DirectBuffer&#123;&#125;

// 常用这个实现类
class HeapByteBuffer extends ByteBuffer&#123;&#125;
</code></pre>
<h3 id="1、四个核心属性"><a href="#1、四个核心属性" class="headerlink" title="1、四个核心属性"></a>1、四个核心属性</h3><pre><code class="java">// 容量，缓冲区总的最大容量
int capacity;

// 最大可读写的容量
int limit;

// 位置，表示缓冲区中正在操作的数据的下标。当position&lt;limit，可以做写入操作，当position=limit时，写入操作会报错。
int position;

// 标记位置，默认为-1
int mark = -1;

// mark &lt; position &lt; limit &lt; capacity
</code></pre>
<h3 id="2、主要方法"><a href="#2、主要方法" class="headerlink" title="2、主要方法"></a>2、主要方法</h3><p>下面以ByteBuffer为例：</p>
<pre><code class="java">// 分配缓冲区
public static ByteBuffer allocate(int capacity);

// 存入数据到缓冲区中
public abstract ByteBuffer put(byte b);

// 读取数据
public abstract byte get(int index);

// 将缓冲区的数据读取到另外一个数组中
public ByteBuffer get(byte[] dst, int offset, int length);

// 切换到读取数据的模式。将limit的值置为当前position的值，再把position归0
public final Buffer flip() &#123;
        limit = position;
        position = 0;
        mark = -1;
        return this;
&#125;

// 恢复到初始状态，注意数据还在，只是被遗忘了
public final Buffer clear() &#123;
        position = 0;
        limit = capacity;
        mark = -1;
        return this;
&#125;

// 将position恢复到上一次mark标记的位置
public final Buffer reset() &#123;
        int m = mark;
        if (m &lt; 0)
            throw new InvalidMarkException();
        position = m;
        return this;
&#125;
</code></pre>
<p><font color="Red">注意：<code>public ByteBufferget(byte[] dst, int offset, int length)</code>方法参数中的offset和length不是针对源buffer，而是针对新数组dst的！！</font></p>
<h3 id="3、非直接缓冲区"><a href="#3、非直接缓冲区" class="headerlink" title="3、非直接缓冲区"></a>3、非直接缓冲区</h3><p><img src="/images/%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png"></p>
<h3 id="4、直接缓冲区"><a href="#4、直接缓冲区" class="headerlink" title="4、直接缓冲区"></a>4、直接缓冲区</h3><p><img src="/images/%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png"></p>
<p><strong>优点</strong>：效率更高！</p>
<p><strong>缺点：</strong>消耗资源大，数据写入到物理内存中后不受java控制，垃圾回收也有一定的问题。</p>
<p><img src="/images/%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA%E5%92%8C%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png"></p>
<h2 id="三、通道（Channel）"><a href="#三、通道（Channel）" class="headerlink" title="三、通道（Channel）"></a>三、通道（Channel）</h2><p>之前进行IO操作，是通过CPU授权给DMA（Direct Memory Access）总线，然后在DMA总线的管理下进行IO操作。而Channel则是一种独立的专门处理IO操作的特殊的（协）处理器，具有自己的IO指令，进行IO操作时不需要CPU授权。</p>
<p><img src="/images/%E9%80%9A%E9%81%93.png"></p>
<h3 id="1、接口和实现类"><a href="#1、接口和实现类" class="headerlink" title="1、接口和实现类"></a>1、接口和实现类</h3><p>接口：</p>
<p>java.nio.Channels.Channel</p>
<p>实现类：</p>
<ul>
<li>FileChannel：本地数据IO</li>
<li>SocketChannel：TCP连接用</li>
<li>ServerSocketChannel：TCP连接用</li>
<li>DatagramChannel：UDP连接用</li>
</ul>
<h3 id="2、获取通道的三种方式"><a href="#2、获取通道的三种方式" class="headerlink" title="2、获取通道的三种方式"></a>2、获取通道的三种方式</h3><h4 id="（1）各个支持通道的IO类提供了相应的getChannel方法"><a href="#（1）各个支持通道的IO类提供了相应的getChannel方法" class="headerlink" title="（1）各个支持通道的IO类提供了相应的getChannel方法"></a>（1）各个支持通道的IO类提供了相应的getChannel方法</h4><pre><code class="java">@Test
public void test02() &#123;
    try(// 获取流
        FileInputStream fis = new FileInputStream(filename1);
        FileOutputStream fos = new FileOutputStream(filename2);

        // 获取对应的通道
        FileChannel fisChannel = fis.getChannel();
        FileChannel fosChannel = fos.getChannel();)
    &#123;
        // 通过非直接缓冲区方式
        ByteBuffer buffer = ByteBuffer.allocate(1024);

        // 将源数据通道的数据写入缓冲区
        while (fisChannel.read(buffer) != -1)&#123;
            // 切换成读取模式
            buffer.flip();

            // 读取缓冲区中的数据，写入目标数据通道
            fosChannel.write(buffer);

            // 清空缓冲区
            buffer.clear();
        &#125;
    &#125;catch (Exception ex)&#123;
        ex.printStackTrace();
    &#125;

    // 使用try()&#123;&#125;的方式就可以不用关闭，否则就要关闭所有的流和通道
    //        fosChannel.close();
    //        fisChannel.close();
    //        fis.close();
    //        fos.close();

&#125;
</code></pre>
<h4 id="（2）使用open函数"><a href="#（2）使用open函数" class="headerlink" title="（2）使用open函数"></a>（2）使用open函数</h4><pre><code class="java">@Test
public void test03() &#123;
    Date startTime = new Date();
    // 通过open的方式获取通道
    // CREATE_NEW：当文件存在时会报错
    // CREATE：当文件存在时，会在原文件上从头开始覆盖写入。
    // 但是很奇怪，当使用CREATE和直接缓冲区结合的方式时，当source文件的字节数小于destination文件的字节数时，并不会发生写入操作。
    // 即一般使用CREATE_NEW就行
    try(FileChannel fisChannel = FileChannel.open(Paths.get(filename1), StandardOpenOption.READ);
        FileChannel fosChannel = FileChannel.open(Paths.get(filename2), StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.CREATE_NEW))
    &#123;

        // 使用非直接缓冲区
        ByteBuffer buffer = ByteBuffer.allocate(8 * 1024 * 1024);
        while (fisChannel.read(buffer) != -1)&#123;
            buffer.flip();
            fosChannel.write(buffer);
            buffer.clear();
        &#125;

        /*
            // 通过直接缓冲区方式
            MappedByteBuffer inMappedBuffer = fisChannel.map(FileChannel.MapMode.READ_ONLY, 0, fisChannel.size());
            MappedByteBuffer outMappedBuffer = fosChannel.map(FileChannel.MapMode.READ_WRITE, 0, fisChannel.size());

            // 对直接缓冲区中的数据进行读写，因此省略了从OS地址空间到JVM地址空间的copy操作
            // 使用内存映射文件时，就是将一个硬盘上的文件通过通道映射到物理内存的缓冲区中，当缓冲区有put操作，则会直接将对应的数据写入硬盘
            byte[] dst = new byte[inMappedBuffer.limit()];
            inMappedBuffer.get(dst);
            outMappedBuffer.put(dst);
 */

        // 关闭通道，同样如果使用了try()&#123;&#125;则不用关闭
        //            fisChannel.close();
        //            fosChannel.close();

    &#125;catch (Exception ex)&#123;
        ex.printStackTrace();
    &#125;
    Date endTime = new Date();
    System.out.println(&quot;time: &quot; + (endTime.getTime() - startTime.getTime()) / 1000 + &quot;秒&quot;);
&#125;
</code></pre>
<p><font color="Red">注意！！使用Channel.transferTo方法时，一次传输最大传输支持2G，如果文件超过2G，则要断点传输！如下：</font></p>
<pre><code class="java">@Test
public void test04()&#123;
    Date startTime = new Date();
    try(FileChannel fisChannel = FileChannel.open(Paths.get(filename1), StandardOpenOption.READ);
        FileChannel fosChannel = FileChannel.open(Paths.get(filename2), StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.CREATE_NEW))
    &#123;
        // 通过transferTo，也是通过直接缓冲区的方式
        // transferTo一次传输最大2G，因此无论文件大小的化，最好使用以下方式
        long position = 0;
        long len = fisChannel.size();
        while (0 &lt; len)&#123;
            long l = fisChannel.transferTo(position, len, fosChannel);
            if (l &gt; 0)&#123;
                position = l;
                len -= l;
            &#125;
        &#125;
    &#125;catch (Exception ex)&#123;
        ex.printStackTrace();
    &#125;
    Date endTime = new Date();
    System.out.println(&quot;time: &quot; + (endTime.getTime() - startTime.getTime()) / 1000 + &quot;秒&quot;);
&#125;
</code></pre>
<h4 id="（3）通过Files创建"><a href="#（3）通过Files创建" class="headerlink" title="（3）通过Files创建"></a>（3）通过Files创建</h4><pre><code class="java">Files.newByteChannel();
</code></pre>
<h3 id="3、聚集和分散"><a href="#3、聚集和分散" class="headerlink" title="3、聚集和分散"></a>3、聚集和分散</h3><p>分散读取（Scattering Reads）：读取文件时按顺序填入多个缓冲区中，前面的缓冲区填满了，再填后面的缓冲区</p>
<p>聚集写入（Gathering Writes）：将多个缓冲区中的数据按顺序写入到通道中</p>
<p>即就是将channel写入一个bytebuffer数组中，或者从一个bytebuffer数组中读取数据到channel。</p>
<p><img src="/images/%E8%81%9A%E9%9B%86%E5%92%8C%E5%88%86%E6%95%A3.png"></p>
<pre><code class="java">@Test
public void test05()&#123;
    try(RandomAccessFile raf = new RandomAccessFile(filename1, &quot;r&quot;);
        FileChannel channel = raf.getChannel();
        RandomAccessFile raf2 = new RandomAccessFile(filename2, &quot;rw&quot;);
        FileChannel channel2 = raf2.getChannel();
        )
    &#123;
        System.out.println(&quot;=======分散读取======&quot;);
        ByteBuffer buffer1 = ByteBuffer.allocate(10);
        ByteBuffer buffer2 = ByteBuffer.allocate(1024);
        // 写入缓冲区
        ByteBuffer[] buffers = &#123;buffer1, buffer2&#125;;
        channel.read(buffers);
        // 将缓冲区切换成读取模式
        for (ByteBuffer buffer : buffers) &#123;
            buffer.flip();
        &#125;
        // 将缓冲区中的内容打印出来
        System.out.println(new String(buffers[0].array(), 0, buffers[0].limit()));
        System.out.println(&quot;=============&quot;);
        System.out.println(new String(buffers[1].array(), 0, buffers[1].limit()));

        System.out.println(&quot;=======聚集写入======&quot;);
        channel2.write(buffers);
    &#125;catch (Exception ex)&#123;
        ex.printStackTrace();
    &#125;
&#125;
</code></pre>
<h2 id="四、字符集（Charset）"><a href="#四、字符集（Charset）" class="headerlink" title="四、字符集（Charset）"></a>四、字符集（Charset）</h2><p>编码：字符串 =&gt; 字节数组</p>
<p>解码：字节数组 =&gt; 字符串</p>
<pre><code class="java">@Test
public void test01()&#123;
    final SortedMap&lt;String, Charset&gt; stringCharsetSortedMap = Charset.availableCharsets();
    stringCharsetSortedMap.forEach((key, value) -&gt; &#123;
        System.out.println(key.getClass().getName());
        System.out.println(value.getClass().getName());
        System.out.println(key + &quot;: &quot; + value);
    &#125;);
&#125;
</code></pre>
<p>获取一个字符集的类，并得到他们的编码器和解码器：</p>
<pre><code class="java">Charset gbk = Charset.forName(&quot;GBK&quot;);
CharsetEncoder charsetEncoder = gbk.newEncoder();
CharsetDecoder charsetDecoder = gbk.newDecoder();
</code></pre>
<p>encode方法得到一个ByteBuffer，而decode方法得到一个CharBuffer：</p>
<pre><code class="java">@Test
public void test02() throws Exception&#123;
    final Charset gbk = Charset.forName(&quot;GBK&quot;);
    final CharsetEncoder charsetEncoder = gbk.newEncoder();
    final CharsetDecoder charsetDecoder = gbk.newDecoder();

    CharBuffer charBuffer = CharBuffer.allocate(1024);
    charBuffer.put(&quot;你好，世界！hello, world!!&quot;);
    charBuffer.flip();

    ByteBuffer byteBuffer = charsetEncoder.encode(charBuffer);

    for (int i = 0; i &lt; byteBuffer.limit(); i++) &#123;
        System.out.print(byteBuffer.get() + &quot; &quot;);
    &#125;
    System.out.println();
    byteBuffer.flip();

    CharBuffer charBuffer2 = charsetDecoder.decode(byteBuffer);
    for (int i = 0; i &lt; charBuffer2.limit(); i++) &#123;
        System.out.print(charBuffer2.get() + &quot; &quot;);
    &#125;
    System.out.println();
    charBuffer2.flip();

    System.out.println(charBuffer2.toString());
&#125;
</code></pre>
<h2 id="五、阻塞和非阻塞（重点！！）"><a href="#五、阻塞和非阻塞（重点！！）" class="headerlink" title="五、阻塞和非阻塞（重点！！）"></a>五、阻塞和非阻塞（重点！！）</h2><p>这里所说的阻塞和非阻塞主要针对网络编程。在客户端连接服务器时，客户端要向服务器发送数据包请求，双方都会打开一个通道，但是当服务器读取一段数据后，不清楚客户端通道中的数据是否读取完，则这个线程会被阻塞。</p>
<p>而非阻塞网络IO就是在客户端和服务器之间加一个选择器（Selector），所有客户端发送过来的数据包都先通过选择器，由选择器来判断该数据包是否准备完毕，将准备完毕的数据包发送给服务器去处理，而没准备完毕的数据包留在这里。</p>
<p><img src="/images/%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F.png"></p>
<p>因此，使用NIO完成网络通信的三个核心：</p>
<ul>
<li>Channel，负责连接</li>
<li>Buffer，负责传输数据</li>
<li>Selector，是SelectableChannel的多路复用器，用于监控SelectableChannel的IO状况。</li>
</ul>
<p>这部分笔者还不是很清楚。</p>
<h2 id="六、NIO实战项目"><a href="#六、NIO实战项目" class="headerlink" title="六、NIO实战项目"></a>六、NIO实战项目</h2><p>用NIO写一个非阻塞式http服务器：<a target="_blank" rel="noopener" href="https://github.com/yury757/httpserver">yury757/httpserver (github.com)</a></p>

</div>


    <div class="post-guide">
        <div class="item left">
            
              <a href="/java/SSM-Build/SSM-Build">
                  <i class="fa fa-angle-left" aria-hidden="true"></i>
                  SSM-Build
              </a>
            
        </div>
        <div class="item right">
            
              <a href="/bigdata/hbase/HBase-study">
                HBase-study
                <i class="fa fa-angle-right" aria-hidden="true"></i>
              </a>
            
        </div>
    </div>




<script>
	
	
</script>
	</div>
	<div id="footer">
	<p>
	©2019-<span id="footerYear"></span> 
	
	<br>
	Theme <a href="//github.com/wujun234/hexo-theme-tree" target="_blank">Tree</a>
	Powered by <a href="//hexo.io" target="_blank">Hexo</a>
	</p>
</div>
<script type="text/javascript"> 
	document.getElementById('footerYear').innerHTML = new Date().getFullYear() + '';
</script>
	<button id="totop-toggle" class="toggle"><i class="fa fa-angle-double-up" aria-hidden="true"></i></button>
</body>
</html>