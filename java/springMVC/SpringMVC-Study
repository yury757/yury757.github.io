<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport">
	
	<!-- title -->
	
	<title>
	
		springMVC-study | 
	 
	Yury&#39;s Blog
	</title>
	
	<!-- keywords,description -->
	 
		<meta name="description" content="blog of usual study" />
	

	<!-- favicon -->
	
	<link rel="shortcut icon" href="/favicon.ico">
	


	<!-- search -->
	<script>
		var searchEngine = "https://www.google.com/search?q=";
		if(typeof searchEngine == "undefined" || searchEngine == null || searchEngine == ""){
			searchEngine = "https://www.google.com/search?q=";
		}
		var homeHost = "";
		if(typeof homeHost == "undefined" || homeHost == null || homeHost == ""){
			homeHost = window.location.host;
		}
	</script>


	
<link rel="stylesheet" href="/css/main.css">

	
<link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/styles/darcula.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css">


	
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/highlight.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/npm/jquery-pjax@2.0.1/jquery.pjax.min.js"></script>

	
<script src="/js/main.js"></script>

	
		
<script src="https://cdn.jsdelivr.net/npm/leancloud-storage/dist/av-min.js"></script>

		
<script src="https://cdn.jsdelivr.net/npm/valine@1.3.10/dist/Valine.min.js"></script>

	
	
<meta name="generator" content="Hexo 5.4.0"><link rel="alternate" href="/atom.xml" title="Yury's Blog" type="application/atom+xml">
</head>

<body>
	<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?3efe99c287df5a1d6f0d02d187e403c1";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

<header id="header">
    <a id="title" href="/" class="logo">Yury's Blog</a>

	<ul id="menu">
		<li class="menu-item">
			<a href="/about" class="menu-item-link">ABOUT</a>
		</li>
	
		<li class="menu-item">
			<a href="/tags" class="menu-item-link">标签</a>
		</li>
	

	
		<li class="menu-item">
			<a href="/categories" class="menu-item-link">分类</a>
		</li>
	

		<li class="menu-item">
			<a href="https://github.com/yury757" class="menu-item-link" target="_blank">
				<i class="fa fa-github fa-2x"></i>
			</a>
		</li>
	</ul>
</header>

	
<div id="sidebar">
	<button id="sidebar-toggle" class="toggle" ><i class="fa fa-arrow-right " aria-hidden="true"></i></button>
	
	<div id="site-toc">
		<input id="search-input" class="search-input" type="search" placeholder="按回车全站搜索">
		<div id="tree">
			

			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Git
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										learngit
									</a>
									
							<ul>
								<li class="file">
									<a href="/Git/learngit/learn-git">
										learn-git
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										bigdata
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										clickhouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/clickhouse/clickhouse">
										clickhouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hadoop
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hadoop/hadoop-study">
										hadoop-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hbase
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hbase/HBase-study">
										HBase-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										kafka
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/kafka/kafka">
										kafka
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										zookeeper
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/zookeeper/zookeeper-study">
										zookeeper-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										computer-science
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Computer-Networking
									</a>
									
							<ul>
								<li class="file">
									<a href="/computer-science/Computer-Networking/Computer-Networking">
										Computer-Networking
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										database
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mysql
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL中的exists与in的使用
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8">
										MySQL中的exists与in的使用
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL备份-Linux版
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88">
										MySQL备份-linux版
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL日期格式化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96">
										MySQL日期格式化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL查询执行计划详解-explain
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain">
										MySQL查询执行计划详解-explain
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										《高性能MySQL》
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第1章-MySQL架构与历史
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2">
										第一章-MySQL架构与历史
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第2章-MySQL基准测试
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC2%E7%AB%A0-MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">
										第二章 MySQL基准测试
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第3章-服务器性能剖析
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC3%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90">
										第三章-服务器性能剖析
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第4章-Schema与数据类型优化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC4%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96">
										第四章-Schema与数据类型优化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第5章-创建高性能的索引
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC5%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95">
										第五章-创建高性能的索引
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										postgresql
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/postgresql/postgresql">
										postgresql
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										JVM
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/JVM/jvm-1.8">
										jvm-1.8
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										SSM-Build
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/SSM-Build/SSM-Build">
										SSM-Build
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_JUC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_JUC/Java_JUC-study">
										Java_JUC-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_NIO
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_NIO/Java_NIO-study">
										Java_NIO-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mybatis
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/mybatis/mybatis-study">
										mybatis-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springMVC
									</a>
									
							<ul>
								<li class="file active">
									<a href="/java/springMVC/SpringMVC-Study">
										SpringMVC-Study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springboot
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springboot/springboot-study">
										springboot-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										spring
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/spring/Spring-study">
										Spring-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										linux
									</a>
									
							<ul>
								<li class="file">
									<a href="/linux/linux%E5%91%BD%E4%BB%A4">
										linux命令
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										operating-support
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										docker
									</a>
									
							<ul>
								<li class="file">
									<a href="/operating-support/docker/docker">
										docker
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										project
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										flink_data_warehouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/project/flink_data_warehouse/flink_data_warehouse">
										flink_data_warehouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
		</div>
	</div>
</div>

	<!-- 引入正文 -->
	<div id="content">
		<h1 id="article-title">

	SpringMVC-Study
</h1>
<div class="article-meta">
	
	<span>Yury</span>
	<span>2021-08-24 00:00:00</span>
		<div id="article-categories">
    
		<span>Categories：</span>
            
                
                    <span>
                        <i class="fa fa-folder" aria-hidden="true">
                        <a href="/categories/java/">java</a>
                        </i>
                      
                    </span>
                
            
    

    
		<span>Tags：</span>
            
                
                    <span>
                        <i class="fa fa-tag" aria-hidden="true">
                        <a href="/tags/java/">java</a>
                        </i>
                    </span>
                
            
                
                    <span>
                        <i class="fa fa-tag" aria-hidden="true">
                        <a href="/tags/spring/">spring</a>
                        </i>
                    </span>
                
            
    
		</div>

</div>

<div id="article-content">
	<h2 id="一、回顾Servlet"><a href="#一、回顾Servlet" class="headerlink" title="一、回顾Servlet"></a>一、回顾Servlet</h2><pre><code class="java">// 转发，forward
request.getRequestDispatcher(&quot;/WEB-INF/jsp/hello.jsp&quot;).forward(request, response);

// 重定向，redirect
response.sendRedirect(&quot;/index.jsp&quot;);
</code></pre>
<pre><code class="xml">&lt;!-- session失效时间，单位分钟 --&gt;
&lt;session-config&gt;
    &lt;session-timeout&gt;1&lt;/session-timeout&gt;
&lt;/session-config&gt;
</code></pre>
<h2 id="二、SpringMVC开始"><a href="#二、SpringMVC开始" class="headerlink" title="二、SpringMVC开始"></a>二、SpringMVC开始</h2><h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p><font color="Red">约定大于配置。</font></p>
<p>最重要的一个类：<code>DispatcherServlet</code></p>
<pre><code class="java">public class DispatcherServlet extends FrameworkServlet&#123;
    public DispatcherServlet(WebApplicationContext webApplicationContext) &#123;
        super(webApplicationContext);
        setDispatchOptionsRequest(true);
    &#125;
    
    protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;&#125;
    
    protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;&#125;
        
&#125;
</code></pre>
<p><img src="/images/DispatcherServlet.png"></p>
<p><font color="Red">这个类的作用就是就是把不同的请求分发到不同的类。</font></p>
<h3 id="2、配置springmvc（重要！）"><a href="#2、配置springmvc（重要！）" class="headerlink" title="2、配置springmvc（重要！）"></a>2、配置springmvc（重要！）</h3><h4 id="1、web-xml"><a href="#1、web-xml" class="headerlink" title="1、web.xml"></a>1、web.xml</h4><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;
         version=&quot;4.0&quot;&gt;

    &lt;!-- 开始配置SpringMVC --&gt;
    &lt;!-- 1、注册DispatcherServlet --&gt;
    &lt;servlet&gt;
        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;!-- 关联一个springmvc配置文件，本质是一个spring配置文件 --&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
            &lt;param-value&gt;classpath:springmvc-config.xml&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;!-- 启动级别 --&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    
    &lt;!--
    / 和 /* 是有区别的，用/，不能用/*
    /  ：匹配所有请求，不会匹配jsp
    /* ：匹配所有请求，包括jsp，即把返回一个.jsp页面也当作了一个请求
     --&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</code></pre>
<h4 id="2、springmvc-config-xml"><a href="#2、springmvc-config-xml" class="headerlink" title="2、springmvc-config.xml"></a>2、springmvc-config.xml</h4><p>本质是一个spring配置文件</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;!-- 处理器映射器，有多种映射器 --&gt;
    &lt;!-- 这种映射器是通过bean的名字查找 --&gt;
    &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot; /&gt;
    &lt;!-- 处理器适配器 --&gt;
    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot; /&gt;

    &lt;!-- 视图解析器，配置了前后缀，以后重定向到某个jsp时就可以不用写前后缀了 --&gt;
    &lt;bean id=&quot;internalResourceViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
        &lt;!-- 前缀 --&gt;
        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;
        &lt;!-- 后缀 --&gt;
        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;
    &lt;/bean&gt;

    &lt;!-- 配置handler --&gt;
    &lt;!-- 上面那个映射器会去查找和url名字相同的bean id --&gt;
    &lt;!-- 找到之后上面那个适配器就会把请求交给对应bean的class去处理 --&gt;
    &lt;bean id=&quot;/hello2&quot; class=&quot;org.yuyr757.controller.Hello2Controller&quot;/&gt;
&lt;/beans&gt;
</code></pre>
<p>如下图</p>
<ul>
<li>配置<code>处理器映射器</code>就是为了做2、3、4三步，去找到对应的handler</li>
<li>配置<code>处理器适配器</code>就是为了做5、6、7、8四步，把对应的handler交给controller处理</li>
<li>配置<code>视图解析器</code>就是为了做9、10、11、12四步，把controller处理好的带model和view名字的MV对象交给视图解析器，先去处理对应的jsp，然后把生成好的页面返回给浏览器。</li>
</ul>
<p><img src="/images/SpringMVC-Flow.png"></p>
<h3 id="3、配置springmvc时404的问题"><a href="#3、配置springmvc时404的问题" class="headerlink" title="3、配置springmvc时404的问题"></a>3、配置springmvc时404的问题</h3><p>原因之一可能是：IDEA的项目结构中的<code>Artifacts</code>的<code>utput Layout</code>要确保<code>WEB-INF</code>目录下有<code>classes</code>和<code>lib</code>两个目录，若没有<code>lib</code>目录，则新建一个，然后把所有我们的依赖包放到<code>lib</code>目录中。</p>
<p><img src="/images/404solution.png"></p>
<h3 id="4、使用springmvc"><a href="#4、使用springmvc" class="headerlink" title="4、使用springmvc"></a>4、使用springmvc</h3><p>这里是采用实现Controller接口的方式，不建议使用，建议使用下面注解开发。</p>
<pre><code class="java">package org.yuyr757.controller;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

// 注意！！这个Controller是org.springframework.web.servlet.mvc.Controller，是一个接口
// 而不是org.springframework.stereotype.Controller，这个Controller是注解用的
public class Hello2Controller implements Controller &#123;
    @Override
    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;
        // 模型和视图
        ModelAndView mv = new ModelAndView();

        // 封装对象
        mv.addObject(&quot;msg&quot;, &quot;HelloSpringMVC&quot;);

        // 封装要跳转的对象
        mv.setViewName(&quot;hello2&quot;);
        System.out.println(&quot;---&quot;);
        return mv;
    &#125;
&#125;
</code></pre>
<h2 id="三、使用注解开发SpringMVC"><a href="#三、使用注解开发SpringMVC" class="headerlink" title="三、使用注解开发SpringMVC"></a>三、使用注解开发SpringMVC</h2><p>web.xml中的配置不变，springmvc-config.xml中的配置如下：</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;

    &lt;!-- 自动扫描包，让指定包下的注解生效，由IOC容器统一管理 --&gt;
    &lt;context:component-scan base-package=&quot;org.yuye757.controller&quot;/&gt;

    &lt;!-- 配置对url的检查，将一些静态资源交给默认的Servlet处理，非静态资源才让DispatcherServlet处理 --&gt;
    &lt;mvc:default-servlet-handler/&gt;

    &lt;!-- 开启注解 --&gt;
    &lt;mvc:annotation-driven/&gt;

    &lt;!-- 视图解析器，配置了前后缀，以后重定向到某个jsp时就可以不用写前后缀了 --&gt;
    &lt;bean id=&quot;internalResourceViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
        &lt;!-- 前缀 --&gt;
        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;
        &lt;!-- 后缀 --&gt;
        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;
    &lt;/bean&gt;

&lt;/beans&gt;
</code></pre>
<pre><code class="java">package org.yuye757.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping(&quot;/hello&quot;) // 不写的话，就直接走方法的mapping uri
public class HelloController &#123;

    @RequestMapping(&quot;/h1&quot;) // 如果没有配置restful，这里一定要写，不写则找不到这个方法的uri
    // uil为：localhost:8080/warName/hello/h1
    public String index(Model model)&#123;
        // 封装数据
        model.addAttribute(&quot;msg&quot;, &quot;Hello, SpringMVC Annotation!&quot;);

        String viewName = &quot;hello&quot;;

        // 加了@Controller注解的类下的所有加了@RequestMapping的方法
        // 若返回的类型是字符串，且能够找到对应的jsp，就会被视图解析器处理
        // /WEB-INF/jsp/$&#123;viewName&#125;.jsp
        return viewName;
    &#125;
&#125;
</code></pre>
<h2 id="四、restful风格的uri"><a href="#四、restful风格的uri" class="headerlink" title="四、restful风格的uri"></a>四、restful风格的uri</h2><p>jsp不支持DELETE、PUT类型的方法，以下那两个方法看看即可。</p>
<pre><code class="java">package org.yuye757.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping(&quot;/restful&quot;)
public class RestfulController &#123;

    // 原来的方式：localhost:8080/warName/test?a=1&amp;b=2
    @RequestMapping(&quot;/test&quot;)
    public String test(Model model, int a, int b)&#123;
        int res = a + b;
        model.addAttribute(&quot;msg&quot;, res);

        return &quot;test&quot;;
    &#125;

    // restful方式：localhost:8080/warName/test/1/2
    // @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.GET)
    @GetMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)
    public String test2(@PathVariable int a, @PathVariable int b, Model model)&#123;
        int res = a + b;
        model.addAttribute(&quot;msg&quot;, &quot;GET方法：&quot; + res);

        return &quot;test&quot;;
    &#125;

    // restful方式：localhost:8080/warName/test/1/2
    // @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.POST)
    @PostMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)
    public String test3(@PathVariable int a, @PathVariable int b, Model model)&#123;
        int res = a - b;
        model.addAttribute(&quot;msg&quot;, &quot;POST方法：&quot; + res);

        return &quot;test&quot;;
    &#125;

    // restful方式：localhost:8080/warName/test/1/2
    // @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.PUT)
    @PutMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)
    public String test4(@PathVariable int a, @PathVariable int b, Model model)&#123;
        int res = a * b;
        model.addAttribute(&quot;msg&quot;, &quot;PUT方法：&quot; + res);

        return &quot;test&quot;;
    &#125;

    // restful方式：localhost:8080/warName/test/1/2
    // @RequestMapping(value = &quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.DELETE)
    @DeleteMapping(&quot;/test2/&#123;a&#125;/&#123;b&#125;&quot;)
    public String test5(@PathVariable int a, @PathVariable int b, Model model)&#123;
        int res = a / b;
        model.addAttribute(&quot;msg&quot;, &quot;DELETE方法：&quot; + res);

        return &quot;test&quot;;
    &#125;
&#125;
</code></pre>
<h2 id="五、springmvc使用细节"><a href="#五、springmvc使用细节" class="headerlink" title="五、springmvc使用细节"></a>五、springmvc使用细节</h2><h3 id="1、转发和重定向"><a href="#1、转发和重定向" class="headerlink" title="1、转发和重定向"></a>1、转发和重定向</h3><p>可以在方法中加入request、response参数，使用servlet原生的转发或重定向方式。</p>
<p>在springmvc中可以这样：</p>
<pre><code class="java">package org.yuye757.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping(&quot;/modelTest&quot;)
public class ModelTest1 &#123;

    @PostMapping(value = &quot;/test1&quot;)
    public ModelAndView test()&#123;
        ModelAndView mv = new ModelAndView();
        // 重定向：redirect
        mv.setViewName(&quot;redirect:/restful/test2/10/5&quot;);
        
        // 转发：forward
        // mv.setViewName(&quot;forward:/restful/test2/10/5&quot;);
        return mv;
    &#125;
&#125;
</code></pre>
<p><font color="Red">注意：通过这种方式的转发会带上方法的类型，如POST、PUT。但是重定向不会，默认是GET方法。因为重定向实际上是重新发起了一次请求，因此默认是GET。</font></p>
<h3 id="2、参数"><a href="#2、参数" class="headerlink" title="2、参数"></a>2、参数</h3><pre><code class="java">package org.yuye757.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.yuye757.pojo.User;

@Controller
@RequestMapping(&quot;/user&quot;)
public class UserController &#123;

    @GetMapping(&quot;/t1&quot;)
    // 若有@RequestParam，则前端传入的参数以注解里面的名字为准，此时变量名失效。没有的话就只能用变量名。
    // 建议都加上@RequestParam，这样可以很明显的告诉别人这是要从前端接收的参数
    // http://localhost:8080/user/t1?username=123456
    public String test1(Model model, @RequestParam(&quot;username&quot;) String name)&#123;
        System.out.println(&quot;前端接收到的参数：&quot; + name);
        model.addAttribute(&quot;msg&quot;, name);

        return &quot;test&quot;;
    &#125;

    /*
    1、若参数为普通类型，则通过方法的参数名字和url的参数名字匹配
    2、若参数为对象，则会调用无参构造方法，再按照对象属性名和url的参数名去匹配，匹配到的就会调用其setter方法
       和url参数名没匹配上的属性或没有setter方法的属性则没有值
       若没有无参构造方法，则调用有参构造方法。总之把pojo类的构造方法写全是最好的。
     */
    // http://localhost:8080/user/t2?id=1&amp;name=我是一个名字&amp;age=12
    @GetMapping(&quot;/t2&quot;)
    public String test2(User user, Model model)&#123;
        String s = user.toString();
        System.out.println(s);
        model.addAttribute(&quot;msg&quot;, s);
        return &quot;test&quot;;
    &#125;

&#125;
</code></pre>
<h3 id="3、乱码"><a href="#3、乱码" class="headerlink" title="3、乱码"></a>3、乱码</h3><p>配置web.xml</p>
<pre><code class="xml">&lt;!-- 之前我们自己写filter来解决乱码问题 --&gt;
&lt;!-- 在springmvc中，他给我们写了一个过滤器来解决乱码 --&gt;
&lt;filter&gt;
    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;encoding&lt;/param-name&gt;
        &lt;param-value&gt;utf-8&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;
    &lt;!-- 注意这里要用/*，之前上面说了/*可以把jsp资源也包括在处理范围类 --&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre>
<h3 id="4、返回值"><a href="#4、返回值" class="headerlink" title="4、返回值"></a>4、返回值</h3><p>（1）让方法返回一个纯字符串给前端，而不是走视图解析器</p>
<ul>
<li>在类上面加<code>@RestController</code>，这个注解可以使类中的所有方法都返回字符串，而不是走视图解析器</li>
<li>在方法上面加<code>@ResponseBody</code>注解</li>
</ul>
<p>（2）返回json字符串</p>
<ul>
<li>使用jackson包</li>
</ul>
<pre><code class="java">package org.yuyr757.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.yuyr757.User.User;

// @RestController这个注解可以使类中的所有方法都返回字符串，而不是走视图解析器
@RestController
public class UserController &#123;

    @ResponseBody // 使用这个注解，则不会走视图解析器，而是直接返回一个字符串
    // produces = &quot;application/json;charset=utf-8&quot;，加上这个指明返回的页面格式和编码
    @RequestMapping(value = &quot;/user/j1&quot;)
    public String json2() throws JsonProcessingException &#123;
        User user = new User(1, &quot;你好&quot;, 2);
        ObjectMapper objectMapper = new ObjectMapper(); // 使用jackson包
        String s = objectMapper.writeValueAsString(user);
        return s;
    &#125;
&#125;
</code></pre>
<ul>
<li>使用fastjson包</li>
</ul>
<pre><code class="java">@RequestMapping(&quot;/user/j4&quot;)
public String json4() throws JsonProcessingException &#123;
    List&lt;Object&gt; list = new ArrayList&lt;&gt;();

    User user = new User(1, &quot;名字&quot;, 2);
    list.add(user);

    // 原生日期格式
    Date date = new Date();
    list.add(date);

    // 通过java.text.DateFormat的格式化
    ObjectMapper objectMapper = new ObjectMapper();
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
    list.add(simpleDateFormat.format(date));

    // 通过jackson格式化
    ObjectMapper objectMapper2 = new ObjectMapper();
    objectMapper2.setDateFormat(simpleDateFormat);
    String s2 = objectMapper2.writeValueAsString(date);
    list.add(s2);

    return JSON.toJSONString(list, &quot;yyyy-MM-dd HH:mm:ss&quot;); // 使用fastjson
&#125;
</code></pre>
<p>（3）使用jackson包返回json字符串到前端后乱码问题</p>
<ul>
<li>在<code>@RequestMapping</code>注解里面加入<code>produces</code>参数</li>
</ul>
<pre><code class="java">@RequestMapping(value = &quot;/user/j1&quot;, produces = &quot;application/json;charset=utf-8&quot;)
</code></pre>
<ul>
<li>在springmvc-config.xml中配置jackson独有的配置（建议使用）</li>
</ul>
<pre><code class="xml">&lt;!--Jackson乱码解决--&gt;
&lt;mvc:annotation-driven&gt;
    &lt;mvc:message-converters&gt;
        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;
            &lt;constructor-arg value=&quot;UTF-8&quot;/&gt;
        &lt;/bean&gt;
        &lt;bean class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;
            &lt;property name=&quot;objectMapper&quot;&gt;
                &lt;bean class=&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;
                    &lt;property name=&quot;failOnEmptyBeans&quot; value=&quot;false&quot;/&gt;
                &lt;/bean&gt;
            &lt;/property&gt;
        &lt;/bean&gt;
    &lt;/mvc:message-converters&gt;
&lt;/mvc:annotation-driven&gt;
</code></pre>
<p>（4）在前端使用json</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    var user = &#123;
        name: &quot;yuyr757&quot;,
        age: 2,
        sex: &quot;男&quot;
    &#125;;
    console.log(user);
    console.log(&quot;---------将对象解析为json----------&quot;);

    var value = JSON.stringify(user);
    console.log(value);

    console.log(&quot;---------将json解析为对象----------&quot;);

    var object = JSON.parse(value);
    console.log(object);

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="六、拦截器和过滤器"><a href="#六、拦截器和过滤器" class="headerlink" title="六、拦截器和过滤器"></a>六、拦截器和过滤器</h2><p><strong>拦截器</strong>：拦截器只会拦截访问的控制器方法，如果访问的是jsp、html、css、image、js是不会被拦截的。<font color="Red">实现了<code>HandlerInterceptor</code>接口的类就是拦截器。拦截器是AOP思想的一个具体应用。</font></p>
<p><strong>过滤器</strong>：在web.xml中配置的Filter就是过滤器，url_pattern配置了<code>/*</code>会对所有资源进行过滤。</p>
<p>登录拦截示例：</p>
<pre><code class="java">package org.yuye757.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.HttpSession;

@Controller
public class LoginController &#123;

    @RequestMapping(&quot;/login&quot;)
    public String login(String username, String password, HttpSession session)&#123;
        session.setAttribute(&quot;username&quot;, username);
        return &quot;main&quot;;
    &#125;

    @RequestMapping(&quot;/goLogin&quot;)
    public String goLogin()&#123;
        return &quot;login&quot;;
    &#125;

    @RequestMapping(&quot;/main&quot;)
    public String main()&#123;
        return &quot;main&quot;;
    &#125;

    @RequestMapping(&quot;/logout&quot;)
    public String logout(HttpSession session)&#123;
        session.removeAttribute(&quot;username&quot;);
        return &quot;redirect:/main&quot;;
    &#125;
&#125;
</code></pre>
<pre><code class="java">package org.yuye757.interceptor;

import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class LoginInterceptor implements HandlerInterceptor &#123;

    // return true即放行，return false则阻断
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;
        HttpSession session = request.getSession();
        System.out.println(request.getRequestURI());

        if (request.getRequestURI().contains(&quot;Login&quot;) || request.getRequestURI().contains(&quot;login&quot;))&#123;
            return true;
        &#125;
        if (session.getAttribute(&quot;username&quot;) != null)&#123;
            return true;
        &#125;
        request.getRequestDispatcher(&quot;/WEB-INF/jsp/login.jsp&quot;).forward(request, response);

        return false;
    &#125;

    // 下面两个不会返回值，一般用于其他处理，如日志，或者直接删掉也可以
    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;
    &#125;

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;
    &#125;
&#125;
</code></pre>
<pre><code class="xml">&lt;mvc:interceptors&gt;
    &lt;mvc:interceptor&gt;
        &lt;mvc:mapping path=&quot;/**&quot;/&gt;
        &lt;bean class=&quot;org.yuye757.interceptor.LoginInterceptor&quot;/&gt;
    &lt;/mvc:interceptor&gt;
&lt;/mvc:interceptors&gt;
</code></pre>
<h2 id="七、文件上传和下载"><a href="#七、文件上传和下载" class="headerlink" title="七、文件上传和下载"></a>七、文件上传和下载</h2><pre><code class="java">package org.yuye757.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.net.URLEncoder;

@Controller
public class FileUploader &#123;

    @RequestMapping(&quot;/upload&quot;)
    public String upload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file, HttpSession session) throws IOException &#123;

        String filename = file.getOriginalFilename();
        if (&quot;&quot;.equals(filename))&#123;
            return &quot;redirect:/index.jsp&quot;;
        &#125;
        System.out.println(&quot;上传文件名：&quot; + filename);

        // 上传路径保存设置
        String path = session.getServletContext().getRealPath(&quot;/WEB-INF/upload&quot;);

        // 如果路径不存在，则创建一个
        File realPath = new File(path);
        if (!realPath.exists())&#123;
            realPath.mkdir();
        &#125;
        System.out.println(&quot;上传文件保存地址：&quot; + realPath);

        // 创建流
        InputStream is = file.getInputStream();
        OutputStream os = new FileOutputStream(realPath + &quot;\\&quot; + filename);

        // 读写
        int len = 0;
        byte[] buffer = new byte[1024];
        while((len = is.read(buffer)) &gt; 0)&#123;
            os.write(buffer, 0, buffer.length);
            os.flush();
        &#125;
        os.close();
        is.close();

        return &quot;redirect:/index.jsp&quot;;

    &#125;

    @RequestMapping(&quot;/upload2&quot;)
    public String upload2(@RequestParam(&quot;file&quot;) CommonsMultipartFile file, HttpSession session) throws IOException &#123;

        String filename = file.getOriginalFilename();
        if (&quot;&quot;.equals(filename))&#123;
            return &quot;redirect:/index.jsp&quot;;
        &#125;
        System.out.println(&quot;上传文件名：&quot; + filename);

        // 上传路径保存设置
        String path = session.getServletContext().getRealPath(&quot;/WEB-INF/upload&quot;);

        // 如果路径不存在，则创建一个
        File realPath = new File(path);
        if (!realPath.exists())&#123;
            realPath.mkdir();
        &#125;
        System.out.println(&quot;上传文件保存地址：&quot; + realPath);

        // 通过CommonsMultipartFile的方法直接写入文件
        file.transferTo(new File(path + &quot;/&quot; + filename));

        return &quot;redirect:/index.jsp&quot;;

    &#125;

    @RequestMapping(&quot;/download1&quot;)
    public void download1(HttpServletRequest request, HttpServletResponse response, String filename) throws IOException &#123;
        String path = request.getSession().getServletContext().getRealPath(&quot;/WEB-INF/upload&quot;);
        response.reset(); // 设置页面不缓存，清空buffer
        response.setCharacterEncoding(&quot;utf-8&quot;);
        response.setContentType(&quot;multipart/form-data&quot;);
        // 设置响应头
        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + URLEncoder.encode(filename, &quot;utf-8&quot;));

        File file = new File(path + &quot;\\&quot; + filename);
        System.out.println(&quot;下载文件为：&quot; + file.toString());

        // 读取文件流
        InputStream is = new FileInputStream(file);
        // 输出文件流
        OutputStream os = response.getOutputStream();

        // 读写
        int len = 0;
        byte[] buffer = new byte[1024];
        while((len = is.read(buffer)) &gt; 0)&#123;
            os.write(buffer, 0, buffer.length);
            os.flush();
        &#125;
        os.close();
        is.close();
    &#125;
&#125;
</code></pre>

</div>


    <div class="post-guide">
        <div class="item left">
            
              <a href="/java/mybatis/mybatis-study">
                  <i class="fa fa-angle-left" aria-hidden="true"></i>
                  mybatis-study
              </a>
            
        </div>
        <div class="item right">
            
              <a href="/java/springboot/springboot-study">
                springboot-study
                <i class="fa fa-angle-right" aria-hidden="true"></i>
              </a>
            
        </div>
    </div>




<script>
	
	
</script>
	</div>
	<div id="footer">
	<p>
	©2019-<span id="footerYear"></span> 
	
	<br>
	Theme <a href="//github.com/wujun234/hexo-theme-tree" target="_blank">Tree</a>
	Powered by <a href="//hexo.io" target="_blank">Hexo</a>
	</p>
</div>
<script type="text/javascript"> 
	document.getElementById('footerYear').innerHTML = new Date().getFullYear() + '';
</script>
	<button id="totop-toggle" class="toggle"><i class="fa fa-angle-double-up" aria-hidden="true"></i></button>
</body>
</html>