<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport">
	
	<!-- title -->
	
	<title>
	
		springboot-study | 
	 
	Yury&#39;s Blog
	</title>
	
	<!-- keywords,description -->
	 
		<meta name="description" content="blog of usual study" />
	

	<!-- favicon -->
	
	<link rel="shortcut icon" href="/favicon.ico">
	


	<!-- search -->
	<script>
		var searchEngine = "https://www.google.com/search?q=";
		if(typeof searchEngine == "undefined" || searchEngine == null || searchEngine == ""){
			searchEngine = "https://www.google.com/search?q=";
		}
		var homeHost = "";
		if(typeof homeHost == "undefined" || homeHost == null || homeHost == ""){
			homeHost = window.location.host;
		}
	</script>


	
<link rel="stylesheet" href="/css/main.css">

	
<link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/styles/darcula.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css">


	
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/highlight.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/npm/jquery-pjax@2.0.1/jquery.pjax.min.js"></script>

	
<script src="/js/main.js"></script>

	
		
<script src="https://cdn.jsdelivr.net/npm/leancloud-storage/dist/av-min.js"></script>

		
<script src="https://cdn.jsdelivr.net/npm/valine@1.3.10/dist/Valine.min.js"></script>

	
	
<meta name="generator" content="Hexo 5.4.0"><link rel="alternate" href="/atom.xml" title="Yury's Blog" type="application/atom+xml">
</head>

<body>
	<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?3efe99c287df5a1d6f0d02d187e403c1";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

<header id="header">
    <a id="title" href="/" class="logo">Yury's Blog</a>

	<ul id="menu">
		<li class="menu-item">
			<a href="/about" class="menu-item-link">ABOUT</a>
		</li>
	
		<li class="menu-item">
			<a href="/tags" class="menu-item-link">标签</a>
		</li>
	

	
		<li class="menu-item">
			<a href="/categories" class="menu-item-link">分类</a>
		</li>
	

		<li class="menu-item">
			<a href="https://github.com/yury757" class="menu-item-link" target="_blank">
				<i class="fa fa-github fa-2x"></i>
			</a>
		</li>
	</ul>
</header>

	
<div id="sidebar">
	<button id="sidebar-toggle" class="toggle" ><i class="fa fa-arrow-right " aria-hidden="true"></i></button>
	
	<div id="site-toc">
		<input id="search-input" class="search-input" type="search" placeholder="按回车全站搜索">
		<div id="tree">
			

			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Git
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										learngit
									</a>
									
							<ul>
								<li class="file">
									<a href="/Git/learngit/learn-git">
										learn-git
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										bigdata
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										clickhouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/clickhouse/clickhouse">
										clickhouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hadoop
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hadoop/hadoop-study">
										hadoop-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hbase
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hbase/HBase-study">
										HBase-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										kafka
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/kafka/kafka">
										kafka
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										zookeeper
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/zookeeper/zookeeper-study">
										zookeeper-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										computer-science
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Computer-Networking
									</a>
									
							<ul>
								<li class="file">
									<a href="/computer-science/Computer-Networking/Computer-Networking">
										Computer-Networking
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										database
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mysql
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL中的exists与in的使用
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8">
										MySQL中的exists与in的使用
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL备份-Linux版
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88">
										MySQL备份-linux版
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL日期格式化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96">
										MySQL日期格式化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL查询执行计划详解-explain
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain">
										MySQL查询执行计划详解-explain
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL迁移数据目录
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/MySQL%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95">
										MySQL迁移数据目录
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										《高性能MySQL》
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第1章-MySQL架构与历史
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2">
										第一章-MySQL架构与历史
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第2章-MySQL基准测试
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC2%E7%AB%A0-MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">
										第二章 MySQL基准测试
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第3章-服务器性能剖析
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC3%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90">
										第三章-服务器性能剖析
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第4章-Schema与数据类型优化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC4%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96">
										第四章-Schema与数据类型优化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第5章-创建高性能的索引
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC5%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95">
										第五章-创建高性能的索引
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										postgresql
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/postgresql/postgresql">
										postgresql
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										JVM
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/JVM/jvm-1.8">
										jvm-1.8
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										SSM-Build
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/SSM-Build/SSM-Build">
										SSM-Build
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_JUC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_JUC/Java_JUC-study">
										Java_JUC-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_NIO
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_NIO/Java_NIO-study">
										Java_NIO-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="file">
									<a href="/java/java%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE">
										java常用配置
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mybatis
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/mybatis/mybatis-study">
										mybatis-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springMVC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springMVC/SpringMVC-Study">
										SpringMVC-Study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springboot
									</a>
									
							<ul>
								<li class="file active">
									<a href="/java/springboot/springboot-study">
										springboot-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										spring
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/spring/Spring-study">
										Spring-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="file">
									<a href="/jetbrains%E7%B3%BB%E5%88%97IDE%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE">
										jetbrains系列IDE推荐设置
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										linux
									</a>
									
							<ul>
								<li class="file">
									<a href="/linux/linux%E5%91%BD%E4%BB%A4">
										linux命令
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
							<ul>
								<li class="file">
									<a href="/linux/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%9A%84%E7%BB%8F%E5%8E%86">
										记一次服务器被挖矿的经历
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										operating-support
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										docker
									</a>
									
							<ul>
								<li class="file">
									<a href="/operating-support/docker/docker">
										docker
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										project
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										flink_data_warehouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/project/flink_data_warehouse/flink_data_warehouse">
										flink_data_warehouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
		</div>
	</div>
</div>

	<!-- 引入正文 -->
	<div id="content">
		<h1 id="article-title">

	springboot-study
</h1>
<div class="article-meta">
	
	<span>Yury</span>
	<span>2021-08-24 00:00:00</span>
		<div id="article-categories">
    
		<span>Categories：</span>
            
                
                    <span>
                        <i class="fa fa-folder" aria-hidden="true">
                        <a href="/categories/java/">java</a>
                        </i>
                      
                    </span>
                
            
    

    
		<span>Tags：</span>
            
                
                    <span>
                        <i class="fa fa-tag" aria-hidden="true">
                        <a href="/tags/java/">java</a>
                        </i>
                    </span>
                
            
                
                    <span>
                        <i class="fa fa-tag" aria-hidden="true">
                        <a href="/tags/springboot/">springboot</a>
                        </i>
                    </span>
                
            
    
		</div>

</div>

<div id="article-content">
	<p><font color="Red">约定大于配置！！</font></p>
<p>版本：SpringBoot-2.4.3</p>
<h2 id="一、springboot使用简介"><a href="#一、springboot使用简介" class="headerlink" title="一、springboot使用简介"></a>一、springboot使用简介</h2><h3 id="（1）pom-xml"><a href="#（1）pom-xml" class="headerlink" title="（1）pom.xml"></a>（1）pom.xml</h3><p>pom.xml的依赖都在父工程中<code>spring-boot-dependencies</code>中，我们在引入一些springboot依赖时，可以不需要指定版本，因为父工程中指定了建议的版本。也可以写版本号使用我们自己的版本号。</p>
<h3 id="（2）启动器"><a href="#（2）启动器" class="headerlink" title="（2）启动器"></a>（2）启动器</h3><pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>就是一个个功能的开关，我们要使用某个功能，找到相应的启动器<code>starter</code>打开就可以了。如下官网提供了很多启动器：</p>
<p><a target="_blank" rel="noopener" href="https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/using-spring-boot.html#using-boot-starter</a></p>
<h3 id="（3）启动类"><a href="#（3）启动类" class="headerlink" title="（3）启动类"></a>（3）启动类</h3><p>springboot为我们写了一个默认的启动类，该启动类加了<code>@SpringBootApplication</code>注解，这个注解主要由以下三个注解组成。</p>
<ul>
<li>@SpringBootConfiguration：表示这是一个配置类</li>
<li>@EnableAutoConfiguration：启用自动装配</li>
<li>@ComponentScan：组件扫描，自动注册bean</li>
</ul>
<p>以上三个注解不是必需的，即我们可以挑选使用我们自己需要的功能，或者使用其他注解来启动应用。如下，我们不启用组件扫描，配置了一个属性，还导入了我们自定义的其他配置类。</p>
<pre><code class="java">package com.example.myapplication;

import org.springframework.boot.SpringApplication;
import org.springframework.context.annotation.ComponentScan
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

@Configuration(proxyBeanMethods = false)
@EnableAutoConfiguration
@Import(&#123; MyConfig.class, MyAnotherConfig.class &#125;)
public class Application &#123;

    public static void main(String[] args) &#123;
            SpringApplication.run(Application.class, args);
    &#125;

&#125;
</code></pre>
<h3 id="（4）运行程序"><a href="#（4）运行程序" class="headerlink" title="（4）运行程序"></a>（4）运行程序</h3><pre><code class="shell"># 使用jar包直接运行
java -jar target/myapplication-0.0.1-SNAPSHOT.jar

# 使用maven运行
mvn spring-boot:run
</code></pre>
<h3 id="（5）自动配置"><a href="#（5）自动配置" class="headerlink" title="（5）自动配置"></a>（5）自动配置</h3><p>Spring Boot自动配置会尝试根据您添加的jar依赖项自动配置您的Spring应用程序。 例如，如果HSQLDB位于类路径上，并且尚未手动配置任何数据库连接bean，则Spring Boot会自动配置内存数据库。<font color="Red">springboot支持的自动配置类如下：</font></p>
<p><a target="_blank" rel="noopener" href="https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-auto-configuration-classes.html">https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-auto-configuration-classes.html</a></p>
<p>可以在配置文件中加入以下设置查看哪些自动配置生效了，哪些没生效。</p>
<pre><code class="yaml">debug: true
</code></pre>
<h3 id="（6）手动配置"><a href="#（6）手动配置" class="headerlink" title="（6）手动配置"></a>（6）手动配置</h3><p>当我们不想用某个依赖的自动配置时，我们可以在我们的启动程序中加上<code>exclude=&#123;DataSourceAutoConfiguration.class&#125;</code>来排除，然后在配置文件中写上我们需要的配置。其实不用排除也可以，springboot中的自动配置有默认值，直接在配置文件中写我们需要的配置，会覆盖默认值。<font color="Red">springboot自动配置的默认值如下：</font></p>
<p><a target="_blank" rel="noopener" href="https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-application-properties.html">https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-application-properties.html</a></p>
<pre><code class="java">import org.springframework.boot.autoconfigure.*;
import org.springframework.boot.autoconfigure.jdbc.*;

@SpringBootApplication(exclude=&#123;DataSourceAutoConfiguration.class&#125;)
public class MyApplication &#123;
&#125;
</code></pre>
<p><font color="Red">配置文件中可以写的配置属性从哪里来？（重要！！）</font></p>
<p>打开下面这个文件</p>
<pre><code>\org\springframework\boot\spring-boot-autoconfigure\2.4.3\spring-boot-autoconfigure-2.4.3.jar!\META-INF\spring.factories
</code></pre>
<p>都是一个个的xxxAutoConfiguration类，点进去基本都会有以下几个注解：</p>
<pre><code class="java">// 表明这是一个配置类，即在spring中讲的使用配置类来配置bean
@Configuration(proxyBeanMethods = false)

// 条件：必须加载了某个类，这个自动配置类才会生效
@ConditionalOnClass(KafkaTemplate.class)

// 使用某个属性类当作自动配置的属性
@EnableConfigurationProperties(KafkaProperties.class)

// 点进去上面那个xxxProperties.class，可以发现这里面有很多属性
// 且有下面这个注解，这个注解的功能就是将我们的配置文件的属性和这个类中的属性绑定（参考下面的“使用yaml给bean注入属性”）
@ConfigurationProperties(prefix = &quot;spring.kafka&quot;)
public class KafkaProperties&#123;&#125;
</code></pre>
<p><font color="Red">即xxxAutoConfiguration类就是一个个的配置类，目的是实例化一个个的bean；而xxxProperties类就是属性类，为示例化bean提供属性值，我们在配置文件中可以写的属性就是xxxProperties类中的属性。</font></p>
<h3 id="（7）配置顺序（重要！！）"><a href="#（7）配置顺序（重要！！）" class="headerlink" title="（7）配置顺序（重要！！）"></a>（7）配置顺序（重要！！）</h3><p>springboot可以从很多地方来配置，官方给了一个配置的覆盖顺序，后面配置会覆盖前面的配置：</p>
<pre><code>1、Default properties (specified by setting SpringApplication.setDefaultProperties).

2、@PropertySource annotations on your @Configuration classes. Please note that such property sources are not added to the Environment until the application context is being refreshed. This is too late to configure certain properties such as logging.* and spring.main.* which are read before refresh begins.

3、（主要！）Config data (such as application.properties files)

4、A RandomValuePropertySource that has properties only in random.*.

5、OS environment variables.

6、Java System properties (System.getProperties()).

7、JNDI attributes from java:comp/env.

8、ServletContext init parameters.

9、ServletConfig init parameters.

10、Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property).

11、Command line arguments.

12、properties attribute on your tests. Available on @SpringBootTest and the test annotations for testing a particular slice of your application.

13、@TestPropertySource annotations on your tests.

14、Devtools global settings properties in the $HOME/.config/spring-boot directory when devtools is active.
</code></pre>
<p>而第3点配置文件<code>application.yaml</code>可以放置在以下位置，加载顺序也是后面的配置会覆盖前面的配置：</p>
<pre><code>1、classpath:/

2、classpath:/config/

3、file:/

4、file:/config/
</code></pre>
<p><font color="Red">多环境配置：</font></p>
<p>可以在文件名后面加对应环境，来设置对应环境的配置，即<code>application-dev.yaml</code>。然后在<code>application.yaml</code>中配置如下设置来修改配置文件：</p>
<pre><code class="yaml">spring:
  profiles:
    active: dev
</code></pre>
<p>或者不用新建<code>application-dev.yaml</code>配置文件，而是直接在<code>application.yaml</code>中加入三根英文横线<code>---</code>来分隔文档版本，并且加上对应的环境，也可以进行配置切换。如下使用的就是<code>dev</code>环境。其实建议使用额外增加一个配置文件<code>application-dev.yaml</code>的形式。</p>
<pre><code class="yaml">server:
  port: 8084

spring:
  profiles:
    active: dev

---
server:
  port: 8085

spring:
  profiles: dev

---
server:
  port: 8086

spring:
  profiles: test
</code></pre>
<p>对于多环境配置的加载顺序，官网也还有一个顺序，也是后面的配置会覆盖前面的配置，如下：</p>
<pre><code>1、Application properties packaged inside your jar (application.properties and YAML variants).

2、Profile-specific application properties packaged inside your jar (application-&#123;profile&#125;.properties and YAML variants).

3、Application properties outside of your packaged jar (application.properties and YAML variants).

4、Profile-specific application properties outside of your packaged jar (application-&#123;profile&#125;.properties and YAML variants).
</code></pre>
<p><font color="Red">最佳的一种方式就是：</font></p>
<p>在<code>classpath:/</code>下的<code>application.yaml</code>中配置我们的应用，多环境则配置相应的<code>application-&#123;profiles&#125;.yaml</code>，然后启动项目时在命令行中加上<code>spring.profiles.active</code>参数。</p>
<h2 id="二、YAML配置"><a href="#二、YAML配置" class="headerlink" title="二、YAML配置"></a>二、YAML配置</h2><p>springboot会读取的数据配置文件只有<code>application.properties</code>、<code>application.yaml</code>这两个，修改了文件名则不会生效。</p>
<p>推荐使用yaml配置文件。</p>
<h3 id="1、YAML语法"><a href="#1、YAML语法" class="headerlink" title="1、YAML语法"></a>1、YAML语法</h3><p>具体语法见这里：<a target="_blank" rel="noopener" href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">https://www.ruanyifeng.com/blog/2016/07/yaml.html</a></p>
<p>注意点：</p>
<ul>
<li><p><font color="Red">YAML语法对空格的要求及其严格，一定要小心。</font></p>
</li>
<li><p><font color="Red">Key-Value键值对中，key后后面冒号后面一定要加一个空格！！</font></p>
</li>
<li><p><font color="Red">缩进为两个空格，表示子属性，不能用tab符号。</font></p>
</li>
</ul>
<p>其中引用的使用建议使用EL表达式，而不是<code>&amp;</code>、<code>*</code>，因为EL表达式不仅可以因为该文件内的属性，还可以引用springboot给我们设置好的其他属性。还可以使用类似三元运算符。</p>
<pre><code class="yaml">number: $&#123;random.uuid&#125;
version: $&#123;mysql.version&#125;
number2: $&#123;value2:123&#125; # 若value2存在则使用value2的值，否则使用123
</code></pre>
<h3 id="2、使用yaml给bean注入属性"><a href="#2、使用yaml给bean注入属性" class="headerlink" title="2、使用yaml给bean注入属性"></a>2、使用yaml给bean注入属性</h3><pre><code class="yaml">person:
  name: yury757
  age: 3
  number: 10
  happy: false
  birth: 2020/12/02
  maps:
    k1: v1
    k2: v2
  lists:
    - code
    - music
  dog:
    name: 旺财3
    age: 2
</code></pre>
<p>配置了yaml后可以直接在对应的类上面用以下注解，来给bean注入属性。这个注解的作用是将配置文件中的属性值，映射到这个类的属性上。<code>prefix</code>的值就是配置文件中的某一个<code>Key</code>。</p>
<pre><code class="java">@ConfigurationProperties(prefix = &quot;person&quot;)
</code></pre>
<pre><code class="java">@Component
@ConfigurationProperties(prefix = &quot;person&quot;)
public class Person &#123;
    private String name;
    private int age;
    private Integer number;
    private boolean happy;
    private Date birth;
    private Map&lt;String, Object&gt; maps;
    private List&lt;Object&gt; lists;
    private Dog dog;
&#125;
</code></pre>
<p>加了这个注解后IDEA会有一个红色的提示，pom.xml中加入以下依赖，就不会有了。</p>
<pre><code class="xml">&lt;!-- 用yaml注入对象属性值的依赖 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
    &lt;optional&gt;true&lt;/optional&gt;
&lt;/dependency&gt;
</code></pre>
<p><font color="Red">这种方式需要对应的类有 <code>无参构造方法</code> 和 <code>每个属性的setter方法</code>，不然会报错。</font></p>
<h3 id="3、JSR303校验"><a href="#3、JSR303校验" class="headerlink" title="3、JSR303校验"></a>3、JSR303校验</h3><p>即在属性上加一些注解可以对注入的值进行校验。</p>
<p>导入依赖</p>
<pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>普通值校验</p>
<pre><code class="java">@Min            // 验证 Number 和 String 对象是否大等于指定的值  
@Max            // 验证 Number 和 String 对象是否小等于指定的值  
@DecimalMax //被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度
@DecimalMin //被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度
@Digits                     //验证 Number 和 String 的构成是否合法  
@Digits(integer=,fraction=) // 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。
@Range(min=, max=)          // 校验值的大小是否在给定的范围内（可包含）
@Range(min=10000,max=50000,message=&quot;range.bean.wage&quot;)
private BigDecimal wage;
@Valid // 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)
@CreditCardNumber                             // 信用卡验证
@Email                                        // 验证是否是邮件地址，如果为null,不进行验证，算通过验证。
@ScriptAssert(lang= ,script=, alias=)         // 脚本代码段验证，lang为哪种语言
@URL(protocol=,host=, port=,regexp=, flags=)  // url验证
</code></pre>
<p>空检查</p>
<pre><code class="javascript">@Null       // 验证对象是否为null
@NotNull    // 验证对象是否不为null, 无法查检长度为0的字符串
@NotBlank   // 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.
@NotEmpty   // 检查约束元素是否为NULL或者是EMPTY.
</code></pre>
<p>Booelan检查</p>
<pre><code class="java">@AssertTrue     // 验证 Boolean 对象是否为 true  
@AssertFalse    // 验证 Boolean 对象是否为 false
</code></pre>
<p>长度检查</p>
<pre><code class="java">@Size(min=, max=)   // 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  
@Length(min=, max=) // 验证string字符串的长度是否在给定的范围指内
</code></pre>
<p>日期检查</p>
<pre><code class="java">@Past       // 验证 Date 和 Calendar 对象是否在当前时间之前  
@Future     // 验证 Date 和 Calendar 对象是否在当前时间之后  
@Pattern    // 验证 String 对象是否符合正则表达式的规则
</code></pre>
<h2 id="三、使用springboot开发web"><a href="#三、使用springboot开发web" class="headerlink" title="三、使用springboot开发web"></a>三、使用springboot开发web</h2><pre><code class="xml">        &lt;!-- web启动器--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!-- 用yaml注入对象属性值 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        &lt;!-- 属性校验 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!-- thymeleaf模板引擎 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!-- 系统功能监控、统计相关 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!-- 单元测试 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre>
<h3 id="1、静态资源存放位置"><a href="#1、静态资源存放位置" class="headerlink" title="1、静态资源存放位置"></a>1、静态资源存放位置</h3><p>（1）webjars静态资源（一般不这么用）</p>
<p>从webjars导入的静态资源的访问路径是：<code>classpath</code> + 导入的webjars包在<code>META-INF/resources/</code>后面的路径。</p>
<p>（2）其他静态资源</p>
<p>（从左到右优先级依次降低，即同一个静态资源，会先拿最左边的）：</p>
<pre><code class="java">&#123;&quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot;&#125;
</code></pre>
<p>配置文件中，以下配置的默认值是<code>/**</code>，即把类路径当作根目录，再去找上面的三个文件夹。若修改了这里，比如改成了<code>/test/**</code>，则要通过<code>/test/</code>这个路径才能找到对应的资源。所以<font color="Red">千万不要</font>设置下面这个配置。</p>
<pre><code class="yaml">spring
  mvc
    static-path-pattern: /**
</code></pre>
<p><font color="Red">即我们只要将静态资源放在resources、static、public下的任意一个位置就可以了，按照自己喜好分类放置。</font></p>
<p><font color="Red">注意<code>template</code>目录和外部的目录是无法直接访问到的。</font></p>
<h3 id="2、模板引擎"><a href="#2、模板引擎" class="headerlink" title="2、模板引擎"></a>2、模板引擎</h3><h4 id="（1）thymeleaf"><a href="#（1）thymeleaf" class="headerlink" title="（1）thymeleaf"></a>（1）thymeleaf</h4><ul>
<li>pom.xml依赖</li>
</ul>
<p>若springboot版本没有thymeleaf启动器，则引入以下依赖。</p>
<pre><code class="xml">&lt;!-- thymeleaf模板引擎，最好使用3.x --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;
    &lt;artifactId&gt;thymeleaf-spring5&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;
    &lt;artifactId&gt;thymeleaf-extras-java8time&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>如有启动器，则直接引入启动器的依赖即可，引入以下依赖反而报错。</p>
<pre><code class="xml">&lt;!-- thymeleaf模板引擎 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>同样按上面的方法找到我们需要在配置文件中需要配置的属性，找到下面这个类</li>
</ul>
<pre><code class="java">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)
public class ThymeleafProperties &#123;
    private static final Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;
    public static final String DEFAULT_PREFIX = &quot;classpath:/templates/&quot;;
    public static final String DEFAULT_SUFFIX = &quot;.html&quot;;
    private boolean checkTemplate = true;
    private boolean checkTemplateLocation = true;
    private String prefix = DEFAULT_PREFIX;
    private String suffix = DEFAULT_SUFFIX;
    private String mode = &quot;HTML&quot;;
    private Charset encoding = DEFAULT_ENCODING;
    private boolean cache = true;
    private Integer templateResolverOrder;
    private String[] viewNames;
    private String[] excludedViewNames;
    private boolean enableSpringElCompiler;
    private boolean renderHiddenMarkersBeforeCheckboxes = false;
    private boolean enabled = true;
    private final Servlet servlet = new Servlet();
    private final Reactive reactive = new Reactive();
&#125;
</code></pre>
<p>从上面可以看到thymeleaf使用的前缀是<code>classpath:/templates/</code>，后缀是<code>.html</code>，因此我们要把html文件放到templates目录下，才会生效。</p>
<p>在html中加入thymeleaf的命名空间，就可以使用thymeleaf的语法了。</p>
<pre><code class="html">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
</code></pre>
<p><strong>一定要了解的thymeleaf语法：</strong></p>
<p>Variable Expression：<code>$&#123;&#125;</code></p>
<p>Selection Variable Expression：<code>*&#123;&#125;</code></p>
<p>Message Expression：<code>#&#123;&#125;</code></p>
<p>Link Url Expression：<code>@&#123;&#125;</code></p>
<p>Fragment Expression：<code>~&#123;&#125;</code></p>
<h3 id="3、自定义扩展webmvc"><a href="#3、自定义扩展webmvc" class="headerlink" title="3、自定义扩展webmvc"></a>3、自定义扩展webmvc</h3><ul>
<li>写一个配置类，要实现WebMvcConfigurer接口，并加上@Configuration注解</li>
<li>想加入一个自定义视图解析器，则自定义一个视图解析器类（视图解析器类要实现接口ViewResolver），然后定一个@bean的方法，返回这个类就注册好了。</li>
<li>想加入一个自定义拦截器，则定义一个拦截器（拦截器要实现接口HandlerInterceptor），然后重写addInterceptors方法，把拦截器注册进去，再配置好需要拦截的url pattern即可。</li>
</ul>
<pre><code class="java">package com.yury757.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.View;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Locale;

// 自定义视图解析器步骤
// 写一个配置类，要实现WebMvcConfigurer接口，并加上@Configuration注解
@Configuration
public class MyMvcConfig implements WebMvcConfigurer &#123;

    // 往IOC容器中注册一个bean
    @Bean
    public MyViewResolver getMyViewResolver()&#123;
        return new MyViewResolver();
    &#125;

    // 自定义视图解析器
    public static class MyViewResolver implements ViewResolver &#123;
        @Override
        public View resolveViewName(String viewName, Locale locale) throws Exception &#123;
            return null;
        &#125;
    &#125;

    // 注册拦截器
    @Override
    public void addInterceptors(InterceptorRegistry registry) &#123;
        registry.addInterceptor(new MyInterceptor())
                .addPathPatterns(&quot;/**&quot;)
                .excludePathPatterns(&quot;/*.js&quot;, &quot;/*.css&quot;);
    &#125;

    // 自定义拦截器
    private static class MyInterceptor implements HandlerInterceptor &#123;
        @Override
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;
            System.out.println(request.getRequestURI());
            return true;
        &#125;
    &#125;
&#125;
</code></pre>
<h3 id="4、国际化（i18n）"><a href="#4、国际化（i18n）" class="headerlink" title="4、国际化（i18n）"></a>4、国际化（i18n）</h3><p>sources目录下新建一个<code>i18n</code>目录，再新建以下三个配置文件（这里只能使用<code>.properties</code>，不能使用<code>.yaml</code>）：</p>
<pre><code>login.properties
login_en_US.properties
login_zh_CN.properties
</code></pre>
<p>会发现这三个被绑定在一起了，然后就可以像正常输入配置文件一样，在对应的语言配置中输入变量及对应语言的内容。</p>
<pre><code class="properties"># login.properties
login.btn=登录
login.password=密码
login.rememberMe=记住我
login.tips=请登录
login.username=用户名

# login_en_US.properties
login.btn=Sign In
login.password=password
login.rememberMe=remember me
login.tips=Please Login In
login.username=username

# login_zh_CN.properties
login.btn=登录
login.password=密码
login.rememberMe=记住我
login.tips=请登录
login.username=用户名
</code></pre>
<p>然后在html中就可以使用这里面的变量，不同的模板引擎有不同的写法，如thymeleaf的写法是：</p>
<pre><code class="html">#&#123;login.tips&#125;

&lt;div class=&quot;text-center mb-4&quot;&gt;
    &lt;img class=&quot;mb-4&quot; src=&quot;https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg&quot; alt=&quot;&quot; width=&quot;72&quot; height=&quot;72&quot;&gt;
    &lt;h1 class=&quot;h3 mb-3 font-weight-normal&quot; th:text=&quot;#&#123;login.tips&#125;&quot;&gt;&lt;/h1&gt;
&lt;/div&gt;
</code></pre>
<p>最后还要在webmvc组件中配置国际化处理器，以及将处理器注册到bean中的配置类，如下：</p>
<pre><code class="java">package com.yury757.config;

import org.springframework.web.servlet.LocaleResolver;
import org.thymeleaf.util.StringUtils;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.Locale;

// 国际化处理器
public class MyLocaleResolver implements LocaleResolver &#123;

    // 解析请求，精简版，不能直接在工作中使用
    @Override
    public Locale resolveLocale(HttpServletRequest request) &#123;
        String l = request.getParameter(&quot;l&quot;);

        Locale locale = Locale.getDefault();
        if (!StringUtils.isEmpty(l))&#123;
            String[] s = l.split(&quot;_&quot;);
            locale = new Locale(s[0], s[1]);
        &#125;
        return locale;
    &#125;

    @Override
    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) &#123;&#125;
&#125;
</code></pre>
<pre><code class="java">package com.yury757.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class MyWebMvcConfigurer implements WebMvcConfigurer &#123;
    @Override
    public void addViewControllers(ViewControllerRegistry registry) &#123;
        registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;/index&quot;);
        registry.addViewController(&quot;/&quot;).setViewName(&quot;/index&quot;);
    &#125;

    // 注册bean，使用我们自己写的国际化组件
    // 注意！！！！！这里方法名要用和类名一样，且首字母小写
    @Bean
    public LocaleResolver localeResolver()&#123;
        return new MyLocaleResolver();
    &#125;
&#125;
</code></pre>
<h2 id="四、SpringBoot整合其他组件"><a href="#四、SpringBoot整合其他组件" class="headerlink" title="四、SpringBoot整合其他组件"></a>四、SpringBoot整合其他组件</h2><p>pom中以<code>spring-boot-starter-</code>开头的就是springboot官方的，以<code>-spring-boot-starter</code>结尾的就是对应组件的公司自己写的。</p>
<h3 id="（1）整合Druid数据源"><a href="#（1）整合Druid数据源" class="headerlink" title="（1）整合Druid数据源"></a>（1）整合Druid数据源</h3><pre><code class="xml">&lt;!-- log4j2 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;
    &lt;version&gt;2.4.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- druid数据源 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.2.5&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<pre><code class="yaml">spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      username: root
      password: root
      url: jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC

      # 最大等待时间，配置获取连接等待超时，时间单位都是毫秒ms
      max-wait: 60000
      # 最大值
      max-active: 20
      #最小值
      min-idle: 5
      #初始化大小
      initial-size: 5
      #配置一个连接在池中最小生存的时间
      min-evictable-idle-time-millis: 60000
      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接
      time-between-eviction-runs-millis: 300000
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      pool-prepared-statements: true
      #最大PSCache连接
      max-pool-prepared-statement-per-connection-size: 20
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500

      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，
      # wall用于防火墙
      filter:
        stat:
          enabled: true
        wall:
          enabled: true
        log4j2:
          enabled: true
      # 配置StatFilter
      web-stat-filter:
        # 默认为false，设置为true启动
        enabled: true
        exclusions: &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;
      # 配置StatViewServlet
      stat-view-servlet:
        url-pattern: &quot;/druid/*&quot;
        # 允许哪些ip
        login-username: root
        login-password: root
        # 禁止哪些ip
        deny: 192.168.1.102
        # 是否可以重置
        reset-enable: true
        # 启用
        enabled: true
</code></pre>
<h3 id="（2）整合mybatis"><a href="#（2）整合mybatis" class="headerlink" title="（2）整合mybatis"></a>（2）整合mybatis</h3><pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;2.1.4&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<pre><code class="yaml">mybatis:
  type-aliases-package: com.yury757.pojo
  mapper-locations: classpath:mybatis/mapper/*.xml
</code></pre>
<pre><code class="java">package com.yury757.mapper;

import com.yury757.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Mapper
@Repository
public interface UserMapper &#123;
    public List&lt;User&gt; selectList();

    public User selectById(@RequestParam(&quot;id&quot;) int id);

    public int addUser(User user);

    public int updateUser(User user);

    public int deleteUser(@RequestParam(&quot;id&quot;) int id);
&#125;
</code></pre>
<h2 id="五、网站安全"><a href="#五、网站安全" class="headerlink" title="五、网站安全"></a>五、网站安全</h2><p>这部分内容用过滤器和拦截器也可以做到，只是以下两个框架可以使我们的安全组件更高效更简化。</p>
<h3 id="1、SpringSecurity"><a href="#1、SpringSecurity" class="headerlink" title="1、SpringSecurity"></a>1、SpringSecurity</h3><p><strong>功能：身份验证（Authentication）和访问控制（Authorization）</strong></p>
<p>很重要的几个类或注解：</p>
<ul>
<li>WebSecurityConfigurerAdapter：想要自定义安全策略，只要继承这个类就可以，重写里面的方法即可</li>
<li>AuthenrcationManagerBuilder：自定义认证策略</li>
<li>@EnableWebSecurity：开启WebSecurity模式</li>
</ul>
<pre><code class="java">@EnableWebSecurity
public class MySecurityConfig extends WebSecurityConfigurerAdapter &#123;
    @Override
    protected void configure(HttpSecurity http) throws Exception &#123;
        super.configure(http);
    &#125;
&#125;
</code></pre>
<pre><code class="java">package com.yury757.config;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import javax.sql.DataSource;

@EnableWebSecurity
public class MySecurityConfig extends WebSecurityConfigurerAdapter &#123;

    private DataSource dataSource;
    // 自定义授权规则
    @Override
    protected void configure(HttpSecurity http) throws Exception &#123;
        // 首页所有人可以访问，功能页只有对应权限的人才能访问
        http.authorizeRequests()
                .antMatchers(&quot;/&quot;).permitAll()
                .antMatchers(&quot;/level1/**&quot;).hasRole(&quot;vip1&quot;)
                .antMatchers(&quot;/level2/**&quot;).hasRole(&quot;vip2&quot;)
                .antMatchers(&quot;/level3/**&quot;).hasRole(&quot;vip3&quot;);
        // 没有权限，跳到登录页面
        http.formLogin().loginPage(&quot;/toLogin&quot;).loginProcessingUrl(&quot;/login&quot;).defaultSuccessUrl(&quot;/index&quot;);
        // 使用自己的登录页面和自己的登录处理逻辑时，要禁用csrf防护
        // 千万不要禁用csrf，及找其他方式处理登录页面
        http.csrf().disable();
        // 开启注销功能
        http.logout();
        // 开启“记住我”功能，实际上就是丢了一个“rememberMe”的cookie，默认保存两周
        http.rememberMe();
    &#125;

    // 自定义认证规则
    // 在spring security5中，需要不能直接使用密码，要加密使用
    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;
        // 这些数据正常应该从数据库里面读取
        auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder())
                .withUser(&quot;yury757&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip2&quot;, &quot;vip3&quot;)
                .and()
                .withUser(&quot;root&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip1&quot;, &quot;vip2&quot;, &quot;vip3&quot;)
                .and()
                .withUser(&quot;guest&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip1&quot;);

    &#125;
&#125;
</code></pre>
<h3 id="2、Shiro"><a href="#2、Shiro" class="headerlink" title="2、Shiro"></a>2、Shiro</h3><p>也是一个安全组件。可以脱离web使用。</p>
<p>重要的三个对象：</p>
<ul>
<li>Subject：应用代码直接交互的对象，即外部浏览器或爬虫调用我们服务器api的用户。</li>
<li>SecurityManager：安全管理器，管理所有的subject</li>
<li>Realm：连接数据</li>
</ul>

</div>


    <div class="post-guide">
        <div class="item left">
            
              <a href="/java/mybatis/mybatis-study">
                  <i class="fa fa-angle-left" aria-hidden="true"></i>
                  mybatis-study
              </a>
            
        </div>
        <div class="item right">
            
              <a href="/java/springMVC/SpringMVC-Study">
                SpringMVC-Study
                <i class="fa fa-angle-right" aria-hidden="true"></i>
              </a>
            
        </div>
    </div>




<script>
	
	
</script>
	</div>
	<div id="footer">
	<p>
	©2019-<span id="footerYear"></span> 
	
	<br>
	Theme <a href="//github.com/wujun234/hexo-theme-tree" target="_blank">Tree</a>
	Powered by <a href="//hexo.io" target="_blank">Hexo</a>
	</p>
</div>
<script type="text/javascript"> 
	document.getElementById('footerYear').innerHTML = new Date().getFullYear() + '';
</script>
	<button id="totop-toggle" class="toggle"><i class="fa fa-angle-double-up" aria-hidden="true"></i></button>
</body>
</html>