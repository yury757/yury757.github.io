<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport">
	
	<!-- title -->
	
	<title>
	
		clickhouse | 
	 
	Yury&#39;s Blog
	</title>
	
	<!-- keywords,description -->
	 
		<meta name="description" content="blog of usual study" />
	

	<!-- favicon -->
	
	<link rel="shortcut icon" href="/favicon.ico">
	


	<!-- search -->
	<script>
		var searchEngine = "https://www.google.com/search?q=";
		if(typeof searchEngine == "undefined" || searchEngine == null || searchEngine == ""){
			searchEngine = "https://www.google.com/search?q=";
		}
		var homeHost = "";
		if(typeof homeHost == "undefined" || homeHost == null || homeHost == ""){
			homeHost = window.location.host;
		}
	</script>


	
<link rel="stylesheet" href="/css/main.css">

	
<link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/styles/darcula.min.css">

	
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css">


	
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/highlight.min.js"></script>

	
<script src="https://cdn.jsdelivr.net/npm/jquery-pjax@2.0.1/jquery.pjax.min.js"></script>

	
<script src="/js/main.js"></script>

	
		
<script src="https://cdn.jsdelivr.net/npm/leancloud-storage/dist/av-min.js"></script>

		
<script src="https://cdn.jsdelivr.net/npm/valine@1.3.10/dist/Valine.min.js"></script>

	
	
<meta name="generator" content="Hexo 5.4.0"><link rel="alternate" href="/atom.xml" title="Yury's Blog" type="application/atom+xml">
</head>

<body>
	<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?3efe99c287df5a1d6f0d02d187e403c1";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

<header id="header">
    <a id="title" href="/" class="logo">Yury's Blog</a>

	<ul id="menu">
		<li class="menu-item">
			<a href="/about" class="menu-item-link">ABOUT</a>
		</li>
	
		<li class="menu-item">
			<a href="/tags" class="menu-item-link">标签</a>
		</li>
	

	
		<li class="menu-item">
			<a href="/categories" class="menu-item-link">分类</a>
		</li>
	

		<li class="menu-item">
			<a href="https://github.com/yury757" class="menu-item-link" target="_blank">
				<i class="fa fa-github fa-2x"></i>
			</a>
		</li>
	</ul>
</header>

	
<div id="sidebar">
	<button id="sidebar-toggle" class="toggle" ><i class="fa fa-arrow-right " aria-hidden="true"></i></button>
	
	<div id="site-toc">
		<input id="search-input" class="search-input" type="search" placeholder="按回车全站搜索">
		<div id="tree">
			

			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Git
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										learngit
									</a>
									
							<ul>
								<li class="file">
									<a href="/Git/learngit/learn-git">
										learn-git
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										bigdata
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										clickhouse
									</a>
									
							<ul>
								<li class="file active">
									<a href="/bigdata/clickhouse/clickhouse">
										clickhouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hadoop
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hadoop/hadoop-study">
										hadoop-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										hbase
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/hbase/HBase-study">
										HBase-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										kafka
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/kafka/kafka">
										kafka
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										zookeeper
									</a>
									
							<ul>
								<li class="file">
									<a href="/bigdata/zookeeper/zookeeper-study">
										zookeeper-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										computer-science
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										Computer-Networking
									</a>
									
							<ul>
								<li class="file">
									<a href="/computer-science/Computer-Networking/Computer-Networking">
										Computer-Networking
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										database
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mysql
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL中的exists与in的使用
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8/MySQL%E4%B8%AD%E7%9A%84exists%E4%B8%8Ein%E7%9A%84%E4%BD%BF%E7%94%A8">
										MySQL中的exists与in的使用
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL备份-Linux版
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E5%A4%87%E4%BB%BD-Linux%E7%89%88/MySQL%E5%A4%87%E4%BB%BD-linux%E7%89%88">
										MySQL备份-linux版
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL日期格式化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96">
										MySQL日期格式化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										MySQL查询执行计划详解-explain
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain/MySQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3-explain">
										MySQL查询执行计划详解-explain
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										《高性能MySQL》
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第1章-MySQL架构与历史
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2">
										第一章-MySQL架构与历史
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第2章-MySQL基准测试
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC2%E7%AB%A0-MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20MySQL%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">
										第二章 MySQL基准测试
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第3章-服务器性能剖析
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC3%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90">
										第三章-服务器性能剖析
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第4章-Schema与数据类型优化
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC4%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96">
										第四章-Schema与数据类型优化
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										第5章-创建高性能的索引
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/mysql/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/%E7%AC%AC5%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95">
										第五章-创建高性能的索引
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										postgresql
									</a>
									
							<ul>
								<li class="file">
									<a href="/database/postgresql/postgresql">
										postgresql
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										JVM
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/JVM/jvm-1.8">
										jvm-1.8
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										SSM-Build
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/SSM-Build/SSM-Build">
										SSM-Build
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_JUC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_JUC/Java_JUC-study">
										Java_JUC-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										java_NIO
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/java_NIO/Java_NIO-study">
										Java_NIO-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										mybatis
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/mybatis/mybatis-study">
										mybatis-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springMVC
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springMVC/SpringMVC-Study">
										SpringMVC-Study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										springboot
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/springboot/springboot-study">
										springboot-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										spring
									</a>
									
							<ul>
								<li class="file">
									<a href="/java/spring/Spring-study">
										Spring-study
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										linux
									</a>
									
							<ul>
								<li class="file">
									<a href="/linux/linux%E5%91%BD%E4%BB%A4">
										linux命令
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										operating-support
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										docker
									</a>
									
							<ul>
								<li class="file">
									<a href="/operating-support/docker/docker">
										docker
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										project
									</a>
									
							<ul>
								<li class="directory">
									<a href="#" class="directory">
										<i class="fa fa-plus-square-o"></i>
										flink_data_warehouse
									</a>
									
							<ul>
								<li class="file">
									<a href="/project/flink_data_warehouse/flink_data_warehouse">
										flink_data_warehouse
									</a>
								</li>
								<div class="article-toc" style="display: none;"></div>
							</ul>
			
								</li>
								
							</ul>
			
								</li>
								
							</ul>
			
		</div>
	</div>
</div>

	<!-- 引入正文 -->
	<div id="content">
		<h1 id="article-title">

	clickhouse
</h1>
<div class="article-meta">
	
	<span>Yury</span>
	<span>2021-11-21 00:00:00</span>
		<div id="article-categories">
    
		<span>Categories：</span>
            
                
                    <span>
                        <i class="fa fa-folder" aria-hidden="true">
                        <a href="/categories/bigdata/">bigdata</a>
                        </i>
                      
                    </span>
                
            
    

    
		<span>Tags：</span>
            
    
		</div>

</div>

<div id="article-content">
	<p>clickhouse版本：21.7.3.14</p>
<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>基于<strong>列存储</strong>的数据库，使用C++编写，主要用于<strong>在线分析处理查询</strong>（OLAP），能够使用<strong>SQL查询</strong>实时生成分析报告。</p>
<p>列式存储的优点：</p>
<ul>
<li>对于列的聚合、计数等统计操作由于行式数据库</li>
<li>由于某一列的数据类型是一样的，在数据压缩上效率更高，压缩比更大，缓存cache也有更大的发挥空间</li>
</ul>
<p>列式存储的缺点：插入、更新速度比行式数据库更慢</p>
<h3 id="2、高吞吐写入能力"><a href="#2、高吞吐写入能力" class="headerlink" title="2、高吞吐写入能力"></a>2、高吞吐写入能力</h3><p>clickhouse采用类<strong>LSM Tree</strong>的结构，数据写入后定期在后台compation。clickhouse在导入数据时全部都是<strong>顺序append写入</strong>，写入后数据段不可更改，在后台compation时也是多个段merge sort后顺序写回磁盘。顺序写的特性，充分利用了磁盘的吞吐能力。</p>
<h3 id="3、数据分区和线程级并行"><a href="#3、数据分区和线程级并行" class="headerlink" title="3、数据分区和线程级并行"></a>3、数据分区和线程级并行</h3><p>clickhouse将数据划分为多个partition，每个partition再进一步划分为多个index granularity（索引粒度），然后通过多个线程分别处理其中一部分来实现并行数据处理。这种设计下，单条query就可以利用整机所有的CPU资源。对于大量数据的查询也能够化整为零的并行处理。</p>
<p><font color="Red">缺点：由于一条SQL就会占用所有cpu，因此对于qps高的业务并不适合。</font></p>
<h3 id="4、使用场景"><a href="#4、使用场景" class="headerlink" title="4、使用场景"></a>4、使用场景</h3><p>不适用于初始数据存储，而适用于最后的宽表存储，用来查询用。</p>
<p>适用于clickhouse的业务：具有复杂统计逻辑的查询sql，需要查询大量数据的sql，并发量低</p>
<p>适用于hbase的业务：业务很简单的查询，一般就是key-value一一对应的查询，并发量高</p>
<p>clickhouse还有一个特点就是，<font color="Red">单表查询速度及其快，但是多表join操作比较慢</font>，在了解join原理后，可以通过优化sql来优化join速度。</p>
<h2 id="二、安装部署"><a href="#二、安装部署" class="headerlink" title="二、安装部署"></a>二、安装部署</h2><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><h4 id="（1）ulimit"><a href="#（1）ulimit" class="headerlink" title="（1）ulimit"></a>（1）ulimit</h4><p>linux取消一些系统资源限制：</p>
<pre><code class="shell"># 查看系统资源限制
ulimit -a
# open files                      (-n) 1024
# max user processes              (-u) 7625

# 修改系统资源限制
sudo vi /etc/security/limits.conf

# 加上以下配置
* soft nofile 65535
* hard nofile 65535
* soft nproc  131072
* hard nproc  131072

# 有些linux系统在/etc/security/limit.d目录下面还有20-npric.conf或90-npric.conf
# 这两个配置会把limits.conf配置覆盖了，所以如果有的话这两个也要加上以上配置
sudo vi /etc/security/limits.d/20-nproc.conf

# 修改之后不需要重启，重新登录该用户即可，再查看ulimit -a是否修改成功
</code></pre>
<h4 id="（2）SELINUX"><a href="#（2）SELINUX" class="headerlink" title="（2）SELINUX"></a>（2）SELINUX</h4><p>sentos取消SELINUX（linux的security enforce）</p>
<p>SELINUX并不是安装里所有linux都会有，没有SELINUX不需要执行以下修改。</p>
<pre><code class="shell"># 查看security enfore
getenforce

sudo vi /etc/selinux/config

# 将SELINUX修改为disabled
SELINUX=disabled

# 重启永久生效，输入以下命令临时生效
setenforce 0
</code></pre>
<h4 id="（3）版本"><a href="#（3）版本" class="headerlink" title="（3）版本"></a>（3）版本</h4><p>clickhouse版本更新比较快</p>
<p>20.6.3 新增explain，类似于MySQL的explain</p>
<p>20.8 新增同步MySQL功能等</p>
<p>我们使用的版本是21.7.3.14</p>
<h3 id="2、下载安装"><a href="#2、下载安装" class="headerlink" title="2、下载安装"></a>2、下载安装</h3><p>下载地址：<a target="_blank" rel="noopener" href="https://repo.clickhouse.com/deb/stable/main/">Index of /clickhouse/deb/stable/main/</a></p>
<pre><code class="shell">cd /home/yury/clickhouse

wget https://repo.clickhouse.com/deb/stable/main/clickhouse-common-static_21.7.3.14_amd64.deb
wget https://repo.clickhouse.com/deb/stable/main/clickhouse-client_21.7.3.14_all.deb
wget https://repo.clickhouse.com/deb/stable/main/clickhouse-server_21.7.3.14_all.deb
# 下面这个包是带有调试信息的包，可以不装
wget https://repo.clickhouse.com/deb/stable/main/clickhouse-common-static-dbg_21.7.3.14_amd64.deb

sudo dpkg -i *.deb

# 一路yyy，最后要输入一个默认用户的密码，可以设置密码，也可以直接回车不设置密码

# 安装成功后，软件被安装到目录下，lib目录在/var/lib/clickhouse/
</code></pre>
<h3 id="3、常用路径"><a href="#3、常用路径" class="headerlink" title="3、常用路径"></a>3、常用路径</h3><p>bin目录：<code>/usr/bin/</code></p>
<p>服务器安装目录：<code>/etc/clickhouse-server/</code></p>
<p>客户端安装目录：<code>/etc/clickhouse-client/</code></p>
<p>配置文件目录：<code>/etc/clickhouse-server/</code>，所有其他配置目录都可以在这个配置文件中设置</p>
<p>日志目录：<code>/var/log/clickhouse-server/clickhouse-server.log</code></p>
<p>报错日志目录：<code>/var/log/clickhouse-server/clickhouse-server.err.log</code></p>
<p>依赖目录：<code>/var/lib/clickhouse/</code></p>
<p>数据目录：<code>/var/lib/clickhouse/</code>，即config.xml配置文件中path标签下</p>
<p>临时文件目录：<code>/var/lib/clickhouse/tmp/</code>，即config.xml配置文件中tmp_path标签下</p>
<h3 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h3><p><font color="Red">config.xml中的配置是服务器配置，比如上面说的数据目录、日志目录都在这个配置中，而user.xml则是程序运行参数配置，如cpu、内存在这个里面配置。</font></p>
<p>修改一个配置，使得其他ip地址也可以访问clickhouse服务器</p>
<pre><code class="shell">sudo vi /etc/clickhouse-server/config.xml

# 将下面这个配置取消注释
&lt;listen_host&gt;::&lt;/listen_host&gt;
</code></pre>
<p><font color="Red">此外再把tcp_port端口改为9003，因为默认的9000端口很容易被其他应用使用，比如hadoop就使用了9000端口。此外用，clickhosue-client连接时用tcp连接，而使用其他连接，比如datagrip或java，都是用的http连接，注意端口的使用。</font></p>
<pre><code class="xml">&lt;tcp_port&gt;9003&lt;/tcp_port&gt;
</code></pre>
<h3 id="5、启动和连接"><a href="#5、启动和连接" class="headerlink" title="5、启动和连接"></a>5、启动和连接</h3><pre><code class="shell"># 启动
sudo clickhouse start

# 查看服务器运行状态
sudo clickhouse status
# /var/run/clickhouse-server/clickhouse-server.pid file exists and contains pid = 7116.
# The process with pid = 7116 is running.

# 关闭
sudo clickhouse stop

# 重启
sudo clickhouse restart

# 常加-m参数，这样可以在sql语句中使用换行，否则要用分号分隔
# -h参数为服务器host，默认是localhost
# --port参数为tcp端口，默认是9000
clickhouse-client -m -h myubuntu1 --port 9003
</code></pre>
<p>clickhouse-client还有一个快捷方式的参数query：</p>
<pre><code class="shell">clickhouse-client -m -h 192.168.141.141 --port 9003 --query &quot;show databases;&quot;
default
system
</code></pre>
<h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>文档：<a target="_blank" rel="noopener" href="https://clickhouse.com/docs/en/sql-reference/data-types/">Introduction | ClickHouse Documentation</a></p>
<h3 id="1、整形"><a href="#1、整形" class="headerlink" title="1、整形"></a>1、整形</h3><p>（1）有符号整型</p>
<table>
<thead>
<tr>
<th>clickhouse类型</th>
<th>范围</th>
<th>对应MySQL类型</th>
</tr>
</thead>
<tbody><tr>
<td>Int8</td>
<td>-128 : 127 (2^7)</td>
<td>tinyint</td>
</tr>
<tr>
<td>Int16</td>
<td>-32768 : 32767(2^15)</td>
<td>smallint</td>
</tr>
<tr>
<td>Int32</td>
<td>-2147483648 : 2147483647 (2^31)</td>
<td>int</td>
</tr>
<tr>
<td>Int64</td>
<td>-9223372036854775808 : 9223372036854775807 (2^63)</td>
<td>bigint</td>
</tr>
<tr>
<td>Int128</td>
<td>-2^127 : 2^127-1</td>
<td>无</td>
</tr>
<tr>
<td>Int256</td>
<td>-2^255 : 2^255-1</td>
<td>无</td>
</tr>
</tbody></table>
<p>（2）无符号整形</p>
<p>UInt8、UInt16、UInt32、UInt64，UInt128、UInt256，范围分别是0 : (2^n)-1。</p>
<p>128位和256位的一般用不到。</p>
<p>clickhouse没有布尔类型，官方建议用UInt8来存储，0代表false，1代表true。</p>
<h3 id="2、浮点型"><a href="#2、浮点型" class="headerlink" title="2、浮点型"></a>2、浮点型</h3><table>
<thead>
<tr>
<th>clichouse类型</th>
<th>对应MySQL类型</th>
</tr>
</thead>
<tbody><tr>
<td>Float32</td>
<td>float</td>
</tr>
<tr>
<td>Float64</td>
<td>double</td>
</tr>
</tbody></table>
<h3 id="3、Decimal"><a href="#3、Decimal" class="headerlink" title="3、Decimal"></a>3、Decimal</h3><table>
<thead>
<tr>
<th>clickhouse类型</th>
<th>整数位+小数位</th>
<th>小数位</th>
<th>对应MySQL类型</th>
</tr>
</thead>
<tbody><tr>
<td>Decimal(P,S)</td>
<td>P</td>
<td>S</td>
<td>decimal(P,S)</td>
</tr>
<tr>
<td>Decimal32(S)</td>
<td>9</td>
<td>S</td>
<td>decimal(9,S)</td>
</tr>
<tr>
<td>Decimal64(S)</td>
<td>18</td>
<td>S</td>
<td>decimal(18,S)</td>
</tr>
<tr>
<td>Decimal128(S)</td>
<td>38</td>
<td>S</td>
<td>decimal(38,S)</td>
</tr>
<tr>
<td>Decimal128(S)</td>
<td>76</td>
<td>S</td>
<td>decimal(76,S)</td>
</tr>
</tbody></table>
<p>不同位数长度的Decimal进行运算时，最终结果的位数长度是最大的那个。</p>
<h3 id="4、字符串类型"><a href="#4、字符串类型" class="headerlink" title="4、字符串类型"></a>4、字符串类型</h3><table>
<thead>
<tr>
<th>clickhouse</th>
<th>字节长度</th>
<th>对应MySQL类型</th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>无限制</td>
<td>varchar、所有text、所有blob</td>
</tr>
<tr>
<td>FixedString(N)</td>
<td>N</td>
<td>char(N)</td>
</tr>
</tbody></table>
<p>FixedString(N)类型，<font color="Red">这个N是字节长度，而不是字符长度</font>。当存入字符的字节长度小于N时，会用空字节（<code>\0</code>）补齐。一般很少用FixedString(N)，就像MySQL很少使用char(N)一样。</p>
<p><font color="Red">clickhouse没有编码的概念，即它存储字符串时是以二进制的形式存储。clickhosue在计算长度时，length函数是计算编码后字节的长度，lengthUTF8函数才是计算字符的长度，且只有一个计算UTF8编码的函数，因此服务器一定要使用utf-8编码。</font></p>
<p>clickhouse还有一个专门的存储UUID的类型：<strong>UUID</strong>，以及生成UUID的函数<code>generateUUIDv4()</code>。</p>
<pre><code class="sql">CREATE TABLE t_uuid (x UUID, y String) ENGINE=TinyLog
</code></pre>
<h3 id="5、日期类型"><a href="#5、日期类型" class="headerlink" title="5、日期类型"></a>5、日期类型</h3><table>
<thead>
<tr>
<th>clickhouse类型</th>
<th>字节长度</th>
<th>时间范围</th>
<th>对应MySQL类型</th>
</tr>
</thead>
<tbody><tr>
<td>Date</td>
<td>2</td>
<td>1970-01-01至2148-12-31</td>
<td></td>
</tr>
<tr>
<td>Date32</td>
<td></td>
<td>1925-01-01至2283-11-11</td>
<td></td>
</tr>
<tr>
<td>DateTime([timezone])</td>
<td></td>
<td>1970-01-01 00:00:00至2105-12-31 23:59:59</td>
<td>timestamp</td>
</tr>
<tr>
<td>DateTime64(precision, [timezone])</td>
<td></td>
<td>1925-01-01 00:00:00至2283-11-11 23:59:59</td>
<td></td>
</tr>
<tr>
<td>Interval</td>
<td></td>
<td>无，是一个时间长度含义</td>
<td>interval</td>
</tr>
</tbody></table>
<p>timezone是指时区，默认使用配置文件中设置的时区，或者操作系统时区。</p>
<p>precision是指秒后面的时间精度。</p>
<p>Interval的使用和MySQL的interval类型一样使用。</p>
<pre><code class="sql">select now() + interval 4 DAY + interval 3 HOUR;
┌─plus(plus(now(), toIntervalDay(4)), toIntervalHour(3))─┐
│                                    2021-11-26 01:15:52 │
└────────────────────────────────────────────────────────┘
</code></pre>
<h3 id="6、枚举类型"><a href="#6、枚举类型" class="headerlink" title="6、枚举类型"></a>6、枚举类型</h3><table>
<thead>
<tr>
<th>clickhouse类型</th>
<th>枚举值个数</th>
<th>MySQL类型</th>
</tr>
</thead>
<tbody><tr>
<td>Enum8（别名：Enum）</td>
<td>256</td>
<td>enum</td>
</tr>
<tr>
<td>Enum16</td>
<td>65536</td>
<td>enum</td>
</tr>
</tbody></table>
<pre><code class="sql">CREATE TABLE t_enum
(
    x Enum(&#39;hello&#39; = 1, &#39;world&#39; = 2)
)
ENGINE = TinyLog
</code></pre>
<p>clickhouse和MySQL在存储枚举值时，都是存储的对应的数值，而clickhouse是手动设置枚举值对应的数字值，MySQL则是系统设定的。</p>
<h3 id="7、LowCardinality"><a href="#7、LowCardinality" class="headerlink" title="7、LowCardinality"></a>7、LowCardinality</h3><pre><code>LowCardinality(data_type)
</code></pre>
<p>该数据类型，将存储的值，设置字典索引，实际存储则存储其索引数字即可。</p>
<p>比如LowCardinality(String)类型字段，在insert了“小明”，“小红”，“小光”三个字符时，首先会创建一个字典，将这三个字符写入字典，如下：</p>
<pre><code class="java">&#123;
    1: &quot;小明&quot;,
    2: &quot;小红&quot;,
    3: &quot;小光&quot;,
&#125;
</code></pre>
<p>key为索引序号，value为实际值。而实际存储在数据文件中，则是存储的其索引。</p>
<p><font color="Red">当value有很多重复值时，这种方式不仅可以节省很多存储空间，还可以加快读取速度，以及对该字段进行过滤、分组和某些查询的速度。</font></p>
<p><strong>值得一提的是，微软office2007版本的xlsx类型文件底层的字符串格式的存储也是采用这种方式，专门使用一个sharedString.xml来存储所有字符串，作为一个字典，而在主体的存储文件中使用索引。</strong></p>
<p>但是这种类型，写入速度会比一般普通类型写入慢一些，因此<strong>特别不建议在重复度很低的字段上使用这个类型</strong>。</p>
<p>这种类型和Enum比较类似，但是LowCadinality更加灵活，不仅可以存储String，还可以存储Date、DateTime，只要重复度很高，则可以使用这种类型。</p>
<h3 id="8、Nullable-T"><a href="#8、Nullable-T" class="headerlink" title="8、Nullable(T)"></a>8、Nullable(T)</h3><p>Nullable(T)，可为空的类型，如Nullable(Int8)是可为空值的Int8</p>
<p><font color="Red">使用Nullable会对性能产生影响，业务中可以用一些特殊字符来填充null，从而避免使用Nullable类型。</font></p>
<p><font color="Red">注意：每种数据类型都会有自带的默认值，且不是null，如Int8的默认值是0，String的默认值是空字符串，DateTime的默认值是1970-01-01 08:00:00。如果需要为null，则需要使用Nullable(T)类型，Nullable的默认值则是null。</font></p>
<pre><code class="sql">use default;
create table test1(a Int8, b String, c DateTime, d Nullable(Int8), e Nullable(String) , f Nullable(DateTime))engine=TinyLog;
insert into test1 values(1, &#39;nihao&#39;, &#39;2020-12-31&#39;, 1, &#39;nihao&#39;, &#39;2020-12-31&#39;);
insert into test1 values(null, null, null, null, null, null);
select * from test1;
┌─a─┬─b─────┬───────────────────c─┬────d─┬─e─────┬───────────────────f─┐
│ 1 │ nihao │ 2020-12-31 00:00:00 │    1 │ nihao │ 2020-12-31 00:00:00 │
│ 0 │       │ 1970-01-01 08:00:00 │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ  │                ᴺᵁᴸᴸ │
└───┴───────┴─────────────────────┴──────┴───────┴─────────────────────┘
</code></pre>
<p>判断是否为null的格式如下，如果不是Nullable类型，则没有.null这个字段，会报错。</p>
<pre><code class="sql">select * from test1 where d.null = 1;
┌─a─┬─b─┬───────────────────c─┬────d─┬─e────┬────f─┐
│ 0 │   │ 1970-01-01 08:00:00 │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ │
└───┴───┴─────────────────────┴──────┴──────┴──────┘
</code></pre>
<h3 id="9、其他类型"><a href="#9、其他类型" class="headerlink" title="9、其他类型"></a>9、其他类型</h3><p>Array(T)，数组</p>
<p>AggregateFunction和SimpleAggregateFunction，比较重要，可以在表引擎那里再理解</p>
<p>Nested，类似于c++的struct</p>
<p>Tuple，即可以存不同数据类型的Array</p>
<p>Expression，存储了lamdba表达式</p>
<p>Set，集合，不可重复</p>
<p>Nothing，官方解释，此数据类型的唯一目的是表示不需要值的情况，好像没啥用</p>
<p>IPV4，ipv4专用类型，基于UInt32存储</p>
<p>IPV6，ipv6专用类型</p>
<p>GEO，坐标类型，包括Point、Ring、Polygon、MultiPolygon</p>
<p>Map(K, V)，映射表类型</p>
<h3 id="10、特殊值"><a href="#10、特殊值" class="headerlink" title="10、特殊值"></a>10、特殊值</h3><p>此外clickhouse还有一些特殊值，如<code>Inf</code>、<code>-Inf</code>和<code>NaN</code>，即<code>infinity</code>、<code>negative infinity</code>和非数字类型。</p>
<pre><code class="sql">select 1 / 0 as a, -1 / 0 as b, 0 / 0 as c;
┌───a─┬────b─┬───c─┐
│ inf │ -inf │ nan │
└─────┴──────┴─────┘
</code></pre>
<h3 id="11、相关函数"><a href="#11、相关函数" class="headerlink" title="11、相关函数"></a>11、相关函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>toTypeName(field)</td>
<td>获field字段的类型</td>
</tr>
<tr>
<td>cast(value, T) or cast(value as T)</td>
<td>将value强制转换为T类型</td>
</tr>
<tr>
<td>extract(part from date)</td>
<td>从日期中获取年、月、日</td>
</tr>
<tr>
<td>uniq(field)</td>
<td>取distinct</td>
</tr>
</tbody></table>
<pre><code class="sql">select cast(&#39;1&#39;, &#39;Int8&#39;) as x, toTypeName(x) as type;
┌─x─┬─type─┐
│ 1 │ Int8 │
└───┴──────┘

select extract(DAY from now());
┌─toDayOfMonth(now())─┐
│                  21 │
└─────────────────────┘
</code></pre>
<h2 id="四、表引擎"><a href="#四、表引擎" class="headerlink" title="四、表引擎"></a>四、表引擎</h2><p>文档：<a target="_blank" rel="noopener" href="https://clickhouse.com/docs/en/engines/table-engines/">Introduction | ClickHouse Documentation</a></p>
<p>表引擎决定了：</p>
<ul>
<li>数据存储的方式和位置，写到哪里以及从哪里读取数据</li>
<li>支持哪些查询，以及如何支持（有一些特殊的查询需要特殊的表引擎才能支持）</li>
<li>并发数据访问</li>
<li>索引的使用</li>
<li>是否可以使用多线程执行（有些引擎，在查询一条sql时会多线程执行）</li>
<li>数据复制参数</li>
</ul>
<p>表引擎有<strong>集成引擎、日志系列引擎、MergeTree系列引擎和一些特殊引擎</strong>。</p>
<h3 id="1、集成引擎"><a href="#1、集成引擎" class="headerlink" title="1、集成引擎"></a>1、集成引擎</h3><p>集成引擎主要是为了继承其他组件而使用的，比如集成MySQL、jdbc、kafka等。集成的本质就是，将MySQL等源数据和clickhouse表做<strong>一层映射</strong>，然后就可以直接用clickhouse查询源数据。</p>
<h3 id="2、日志系列引擎"><a href="#2、日志系列引擎" class="headerlink" title="2、日志系列引擎"></a>2、日志系列引擎</h3><p>日志引擎是为了需要快速写一些小表（小于100万）而使用的引擎，就像名字一样，多用于日志存储。</p>
<p>如TinyLog，以列文件的形式保存在磁盘上，<strong>不支持索引，没有并发控制</strong>。一般保存少量数据，生产环境很少使用。</p>
<h3 id="3、特殊引擎"><a href="#3、特殊引擎" class="headerlink" title="3、特殊引擎"></a>3、特殊引擎</h3><p>很多，具体见官方文档。</p>
<p>如Memory，内存引擎，将数据以未经压缩的形式直接存储在内存中，<strong>不支持索引，读写操作不会阻塞，简单查询性能非常高</strong>！</p>
<h3 id="4、MergeTree系列（重要！！）"><a href="#4、MergeTree系列（重要！！）" class="headerlink" title="4、MergeTree系列（重要！！）"></a>4、MergeTree系列（重要！！）</h3><p>文档：<a target="_blank" rel="noopener" href="https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/">Introduction | ClickHouse Documentation</a></p>
<h4 id="（1）MergeTree合并树"><a href="#（1）MergeTree合并树" class="headerlink" title="（1）MergeTree合并树"></a>（1）MergeTree合并树</h4><p>这种表引擎在建表时，必须要加order by。</p>
<pre><code class="sql">CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]
(
    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1],
    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2],
    ...
    INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,
    INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2,
    ...
    PROJECTION projection_name_1 (SELECT &lt;COLUMN LIST EXPR&gt; [GROUP BY] [ORDER BY]),
    PROJECTION projection_name_2 (SELECT &lt;COLUMN LIST EXPR&gt; [GROUP BY] [ORDER BY])
) ENGINE = MergeTree()
ORDER BY expr
[PARTITION BY expr]
[PRIMARY KEY expr]
[SAMPLE BY expr]
[TTL expr
    [DELETE|TO DISK &#39;xxx&#39;|TO VOLUME &#39;xxx&#39; [, ...] ]
    [WHERE conditions]
    [GROUP BY key_expr [SET v1 = aggr_func(v1) [, v2 = aggr_func(v2) ...]] ] ]
[SETTINGS name=value, ...]
</code></pre>
<p><strong>表底层存储文件夹和文件介绍：</strong></p>
<p>分区是按文件夹存储的，一个分区一个文件夹，文件夹的名称为<code>分区id_最小分区块编号_最大分区块编号_合并层级</code></p>
<p>分区id生成规则：</p>
<ul>
<li>没有设置分区，则默认生成一个all目录作为数据分区</li>
<li>整形分区，以该整形值的字符串形式作为分区id</li>
<li>日期分区，分区id为日期的yyyymmdd形式</li>
<li>其他分区，如String、Float等，以其128位hash值为分区id</li>
</ul>
<p>最小分区块编号：分区的最小分区编号，适用于分区合并</p>
<p>最大分区块编号：分区的最大分区编号，适用于分区合并</p>
<p>合并层级：被合并的次数。<font color="Red">插入数据时，并不会直接将数据插入到对应分区中，而是会生成一个临时分区，等服务器空闲或者一段时间后，再将临时分区合并到原有的分区文件中。和hbase的regionserver类似</font></p>
<p><strong>通过手动执行<code>optimize table xxx final</code>可以手动进行数据合并。</strong></p>
<p><strong>目录文件内各文件介绍：</strong></p>
<ul>
<li>bin文件：数据文件</li>
<li>mrk文件：标记文件，标记文件在idx索引文件和bin文件之间起到了桥梁作用，一般记录列的offset，用于加速查询。以mrk2结尾的文件，表示该表启动了自适应索引间隔。</li>
<li>primary.idx文件：主键索引文件，用于加快查询效率</li>
<li>minmax_create_time.idx：分区键的最大值最小值</li>
<li>checksum.txt：校验文件，用于校验各个文件的正确性。存放各个文件的size和hash值。</li>
<li>count.txt：记录了该表的总数据量</li>
<li>columns.txt：记录了该表的列信息</li>
<li>default_compression_codec.txt：记录了数据文件中使用的压缩编码器</li>
<li>partition.dat：记录了分区信息</li>
</ul>
<p><strong>主键索引</strong></p>
<p>clickhouse的主键索引<strong>并不是唯一索引。主键索引是稀疏索引</strong>，即并不是将这一列的所有值建索引，而是一部分值，查找时通过类似于二分查找的方式确定数据所在区间，再扫描这个区间找到对应的值。</p>
<p>索引有一个index granularity，即索引稀疏粒度，即稀疏索引记录值时每次跳过的行数，默认值为8192。粒度越细，索引数据量存储的越大，查询效率越高；粒度越粗，索引数据量越小，查询效率越低。当很多重复值时，需要适当提高粒度。</p>
<p><strong>order by（MergeTree系列引擎最重要的字段）</strong></p>
<p>主键索引是稀疏索引，这种索引的查找方式需要排序，因此表必须有一个字段进行了排序，这就是为什么order by是MergeTree引擎的必选信息。<font color="Red">主键字段必须是order by的前缀字段</font>，原因和MySQL可以使用最左前缀字段作为索引原因一样。</p>
<p><strong>二级索引（数据跳跃索引）</strong></p>
<p>老版本需要设置<code>set allow_experimental_data_skipping_indices = 1</code>开启。</p>
<p>v20.1.2.4及以后，这个参数已经被删除了</p>
<p>二级索引的原理：以索引粒度为单位，记录每个区间的最大值和最小值，当以这个字段为条件查询时，只需要比较值是否落在这个区间就行（比较两次），若落在这个区间内，再做区间扫描，否则直接跳过。</p>
<p><strong>TTL</strong></p>
<p>数据过期时间，用于管理该数据的生命周期，到期删除。</p>
<p>有字段级别的TTL和表级别的TTL。字段级别只是删除这一个字段，表级别是删除整行数据。</p>
<h4 id="（2）ReplacingMergeTree"><a href="#（2）ReplacingMergeTree" class="headerlink" title="（2）ReplacingMergeTree"></a>（2）ReplacingMergeTree</h4><pre><code class="sql">CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]
(
    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],
    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],
    ...
) ENGINE = ReplacingMergeTree([ver])
[PARTITION BY expr]
[ORDER BY expr]
[PRIMARY KEY expr]
[SAMPLE BY expr]
[SETTINGS name=value, ...]
</code></pre>
<p>完全继承了MergeTree，只是多了一个<strong>去重功能</strong>，且<strong>根据order by字段进行去重</strong>。</p>
<p>去重要删除哪些数据：建表语句中ReplacingMergeTree([ver])的ver字段值最大的那一条数据被保留，其他数据被删除。没指定这个字段，则按插入顺序来，保留最后的一条数据，类似于<code>upsert</code>。</p>
<p>去重时机：并不是实时去重，而是在合并分区时进行去重，即保证<strong>最终一致性</strong>。</p>
<p>去重范围：在同一分区内去重，并不是全表内去重。</p>
<p>这个引擎还是比较常用的，通常ver字段都是业务中的插入时间字段，或者其他数据版本控制字段。</p>
<h4 id="（3）SummingMergeTree"><a href="#（3）SummingMergeTree" class="headerlink" title="（3）SummingMergeTree"></a>（3）SummingMergeTree</h4><pre><code class="sql">CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]
(
    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],
    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],
    ...
) ENGINE = SummingMergeTree([columns])
[PARTITION BY expr]
[ORDER BY expr]
[SAMPLE BY expr]
[SETTINGS name=value, ...]
</code></pre>
<p>在MergeTree的基础上，提供了“<strong>预聚合</strong>”的功能，且<strong>根据order by字段进行sum聚合</strong>。</p>
<p>聚合后其他字段怎么办：对columns字段进行sum，其他字段保留最早的那一条，即最早插入的那一条。</p>
<p>聚合范围：在同一分区内进行聚合。</p>
<p>聚合时机：并不是实时聚合，而是在合并分区时进行聚合。</p>
<h2 id="N、一些不同寻常的点（坑）"><a href="#N、一些不同寻常的点（坑）" class="headerlink" title="N、一些不同寻常的点（坑）"></a>N、一些不同寻常的点（坑）</h2><p>（1）普通类型的默认值不为null，都有各自的默认值，具体见Nullable类型说明。</p>
<p>（2）clickhouse的primary key是可以重复的，有需要的话得手动将其设置为unique</p>

</div>


    <div class="post-guide">
        <div class="item left">
            
        </div>
        <div class="item right">
            
              <a href="/bigdata/kafka/kafka">
                kafka
                <i class="fa fa-angle-right" aria-hidden="true"></i>
              </a>
            
        </div>
    </div>




<script>
	
	
</script>
	</div>
	<div id="footer">
	<p>
	©2019-<span id="footerYear"></span> 
	
	<br>
	Theme <a href="//github.com/wujun234/hexo-theme-tree" target="_blank">Tree</a>
	Powered by <a href="//hexo.io" target="_blank">Hexo</a>
	</p>
</div>
<script type="text/javascript"> 
	document.getElementById('footerYear').innerHTML = new Date().getFullYear() + '';
</script>
	<button id="totop-toggle" class="toggle"><i class="fa fa-angle-double-up" aria-hidden="true"></i></button>
</body>
</html>